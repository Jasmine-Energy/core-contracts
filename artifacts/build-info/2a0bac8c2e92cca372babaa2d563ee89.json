{"id":"2a0bac8c2e92cca372babaa2d563ee89","_format":"hh-sol-build-info-1","solcVersion":"0.8.17","solcLongVersion":"0.8.17+commit.8df45f5f","input":{"language":"Solidity","sources":{"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./OwnableUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership} and {acceptOwnership}.\n *\n * This module is used through inheritance. It will make available all functions\n * from parent (Ownable).\n */\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\n    function __Ownable2Step_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\n    }\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() external {\n        address sender = _msgSender();\n        require(pendingOwner() == sender, \"Ownable2Step: caller is not the new owner\");\n        _transferOwnership(sender);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155Upgradeable.sol\";\nimport \"./IERC1155ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC1155MetadataURIUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\n    using AddressUpgradeable for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\n        __ERC1155_init_unchained(uri_);\n    }\n\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[47] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/extensions/ERC1155Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1155Upgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\n * own tokens and those that they have been approved to use.\n *\n * _Available since v3.1._\n */\nabstract contract ERC1155BurnableUpgradeable is Initializable, ERC1155Upgradeable {\n    function __ERC1155Burnable_init() internal onlyInitializing {\n    }\n\n    function __ERC1155Burnable_init_unchained() internal onlyInitializing {\n    }\n    function burn(\n        address account,\n        uint256 id,\n        uint256 value\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n\n        _burn(account, id, value);\n    }\n\n    function burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1155Upgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\n *\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\n * clearly identified. Note: While a totalSupply of 1 might mean the\n * corresponding is an NFT, there is no guarantees that no other token with the\n * same id are not going to be minted.\n */\nabstract contract ERC1155SupplyUpgradeable is Initializable, ERC1155Upgradeable {\n    function __ERC1155Supply_init() internal onlyInitializing {\n    }\n\n    function __ERC1155Supply_init_unchained() internal onlyInitializing {\n    }\n    mapping(uint256 => uint256) private _totalSupply;\n\n    /**\n     * @dev Total amount of tokens in with a given id.\n     */\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\n        return _totalSupply[id];\n    }\n\n    /**\n     * @dev Indicates whether any token exist with a given id, or not.\n     */\n    function exists(uint256 id) public view virtual returns (bool) {\n        return ERC1155SupplyUpgradeable.totalSupply(id) > 0;\n    }\n\n    /**\n     * @dev See {ERC1155-_beforeTokenTransfer}.\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override {\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        if (from == address(0)) {\n            for (uint256 i = 0; i < ids.length; ++i) {\n                _totalSupply[ids[i]] += amounts[i];\n            }\n        }\n\n        if (to == address(0)) {\n            for (uint256 i = 0; i < ids.length; ++i) {\n                uint256 id = ids[i];\n                uint256 amount = amounts[i];\n                uint256 supply = _totalSupply[id];\n                require(supply >= amount, \"ERC1155: burn amount exceeds totalSupply\");\n                unchecked {\n                    _totalSupply[id] = supply - amount;\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Upgradeable.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../StringsUpgradeable.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", StringsUpgradeable.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSAUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n *\n * @custom:storage-size 52\n */\nabstract contract EIP712Upgradeable is Initializable {\n    /* solhint-disable var-name-mixedcase */\n    bytes32 private _HASHED_NAME;\n    bytes32 private _HASHED_VERSION;\n    bytes32 private constant _TYPE_HASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\n        __EIP712_init_unchained(name, version);\n    }\n\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev The hash of the name parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\n        return _HASHED_NAME;\n    }\n\n    /**\n     * @dev The hash of the version parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\n        return _HASHED_VERSION;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"},"src/ERC1967UUPSProxy.sol":{"content":"// SPDX-License-Identifier: CC0-1.0\npragma solidity ^0.8.17;\n\n/*\n\n      /// from https://eips.ethereum.org/EIPS/eip-1967\n      /// bytes32 implSlot = bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1);\n      /// implSlot == 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n      /// from runtime code below\n      /// bytes11 runtime0 = 0x3d3d3d3d363d3d37363d7f;\n      /// bytes14 runtime1 = 0x545af43d3d93803e603757fd5bf3;\n\n      PC | OP | Arg | Mnemonic      | [Stack]                                                                     | {Memory}\n      ----------------------------------------------------------------------------------------------------------------------\n      // prepare some of the arguments for runtime RETURN\n      00 | 60 | 39 | PUSH1          | [runtimeSize]                                                               | {}\n      02 | 60 | 15 | PUSH1          | [15 runtimeSize]                                                            | {}\n      04 | 6a | runtime0 | PUSH11   | [runtime0 15 runtimeSize]                                                   | {}\n      10 | 3d |    | RETURNDATASIZE | [0 runtime0 15 runtimeSize]                                                 | {}\n      11 | 7f | implSlot | PUSH32   | [implSlot 0 runtime0 15 runtimeSize]                                        | {}\n\n      // get the implementation address from code; store it in the ERC1967 slot\n      32 | 60 | 14 | PUSH1          | [14 implSlot 0 runtime0 15 runtimeSize]                                     | {}\n      34 | 60 | 79 | PUSH1          | [initCodeEnd 14 implSlot 0 runtime0 15 runtimeSize]                         | {}\n      36 | 60 | 0c | PUSH1          | [0c initCodeEnd 14 implSlot 0 runtime0 15 runtimeSize]                      | {}\n      38 | 39 |    | CODECOPY       | [implSlot 0 runtime0 15 runtimeSize]                                        | {impl}\n      39 | 3d |    | RETURNDATASIZE | [0 implSlot 0 runtime0 15 runtimeSize]                                      | {impl}\n      3a | 51 |    | MLOAD          | [impl implSlot 0 runtime0 15 runtimeSize]                                   | {impl}\n      3b | 80 |    | DUP1           | [impl impl implSlot 0 runtime0 15 runtimeSize]                              | {impl}\n      3c | 82 |    | DUP3           | [implSlot impl impl implSlot 0 runtime0 15 runtimeSize]                     | {impl}\n      3d | 55 |    | SSTORE         | [impl implSlot 0 runtime0 15 runtimeSize]                                   | {impl}\n\n      // prepare the empty returndata space for initializer DELEGATECALL\n      3e | 3d |    | RETURNDATASIZE | [0 impl implSlot 0 runtime0 15 runtimeSize]                                 | {impl}\n      3f | 3d |    | RETURNDATASIZE | [0 0 impl implSlot 0 runtime0 15 runtimeSize]                               | {impl}\n\n      // copy initializer into memory and prepare calldata space for DELEGATECALL\n      40 | 60 | 8d | PUSH1          | [initStart 0 0 impl implSlot 0 runtime0 15 runtimeSize]                     | {impl}\n      42 | 80 |    | DUP1           | [initStart initStart 0 0 impl implSlot 0 runtime0 15 runtimeSize]           | {impl}\n      43 | 38 |    | CODESIZE       | [codesize initStart initStart 0 0 impl implSlot 0 runtime0 15 runtimeSize]  | {impl}\n      44 | 03 |    | SUB            | [initSize initStart 0 0 impl implSlot 0 runtime0 15 runtimeSize]            | {impl}\n      45 | 80 |    | DUP1           | [initSize initSize initStart 0 0 impl implSlot 0 runtime0 15 runtimeSize]   | {impl}\n      46 | 91 |    | SWAP2          | [initStart initSize initSize 0 0 impl implSlot 0 runtime0 15 runtimeSize]   | {impl}\n      47 | 3d |    | RETURNDATASIZE | [0 initStart initSize initSize 0 0 impl implSlot 0 runtime0 15 runtimeSize] | {impl}\n      48 | 39 |    | CODECOPY       | [initSize 0 0 impl implSlot 0 runtime0 15 runtimeSize]                      | {init}\n      49 | 3d |    | RETURNDATASIZE | [0 initSize 0 0 impl implSlot 0 runtime0 15 runtimeSize]                    | {init}\n\n      // do the initializer DELEGATECALL\n      4a | 84 |    | DUP5           | [impl 0 initSize 0 0 impl implSlot 0 runtime0 15 runtimeSize]               | {init}\n      4b | 5a |    | GAS            | [gas impl 0 initSize 0 0 impl implSlot 0 runtime0 15 runtimeSize]           | {init}\n      4c | f4 |    | DELEGATECALL   | [success impl implSlot 0 runtime0 15 runtimeSize]                           | {init}\n\n      // check for revert\n  /-< 4d | 60 | 53 | PUSH1          | [target success impl implSlot 0 runtime0 15 runtimeSize]                    | {init}\n  |   4f | 57 |    | JUMPI          | [impl implSlot 0 runtime0 15 runtimeSize]                                   | {init}\n  |   50 | 82 |    | DUP3           | [0 impl implSlot 0 runtime0 15 runtimeSize]                                 | {init}\n  |   51 | 80 |    | DUP1           | [0 0 impl implSlot 0 runtime0 15 runtimeSize]                               | {init}\n  |   52 | fd |    | REVERT         | X                                                                           | X\n  |\n  |   // check that the implementation exists\n  \\-> 53 | 5b |    | JUMPDEST       | [impl implSlot 0 runtime0 15 runtimeSize]                                   | {init}\n      54 | 3d |    | RETURNDATASIZE | [rds impl implSlot 0 runtime0 15 runtimeSize]                               | {init}\n  /-< 55 | 60 | 5f | PUSH1          | [target rds impl implSlot 0 runtime0 15 runtimeSize]                        | {init}\n  |   57 | 57 |    | JUMPI          | [impl implSLot 0 runtime0 15 runtimeSize]                                   | {init}\n  |   58 | 3b |    | EXTCODESIZE    | [implSize implSlot 0 runtime0 15 runtimeSize]                               | {init}\n/-+-< 59 | 60 | 61 | PUSH1          | [target implSize implSlot 0 runtime0 15 runtimeSize]                        | {init}\n| |   5b | 57 |    | JUMPI          | [implSlot 0 runtime0 15 runtimeSize]                                        | {init}\n| |\n| |   // revert if the implementation doesn't exist\n| |   5c | 50 |    | POP            | [0 runtime0 15 runtimeSize]                                                 | {init}\n| |   5d | 80 |    | DUP1           | [0 0 runtime0 15 runtimeSize]                                               | {init}\n| |   5e | fd |    | REVERT         | X\n| |\n| |   // return the runtime\n| \\-> 5f | 5b |    | JUMPDEST       | [impl implSlot 0 runtime0 15 runtimeSize]                                   | {init}\n|     60 | 50 |    | POP            | [implSlot 0 runtime0 15 runtimeSize]                                        | {init}\n\\---> 61 | 5b |    | JUMPDEST       | [implSlot 0 runtime0 15 runtimeSize]                                        | {init}\n      62 | 6d | runtime1 | PUSH14   | [runtime1 implSlot 0 runtime0 15 runtimeSize]                               | {init}\n      71 | 60 | 2e | PUSH1          | [2e runtime1 implSlot 0 runtime0 15 runtimeSize]                            | {init}\n      73 | 52 |    | MSTORE         | [implSlot 0 runtime0 15 runtimeSize]                                        | {.. runtime1}\n      74 | 60 | 20 | PUSH1          | [20 implSlot 0 runtime0 15 runtimeSize]                                     | {.. runtime1}\n      76 | 52 |    | MSTORE         | [0 runtime0 15 runtimeSize]                                                 | {.. implSlot runtime1}\n      77 | 52 |    | MSTORE         | [15 runtimeSize]                                                            | {.. runtime0 implSlot runtime1}\n      78 | f3 |    | RETURN         | X                                                                           | X\n      79 | <implementation address>\n      8d | <initializer ...>\n\n===\n\n      /// Runtime code adapted from the \"The More-Minimal Proxy\" (ERC-1167) by 0age\n      /// https://web.archive.org/web/20200502182542/https://medium.com/coinmonks/the-more-minimal-proxy-5756ae08ee48\n\n      PC | OP | Arg | Mnemonic      | [Stack]                      | {Memory}\n      ---------------------------------------------------------------------------------------------------\n      // push a bunch of zeroes, ultimately needed for DELEGATECALL, RETURNDATACOPY, and RETURN/REVERT\n      00 | 3d |    | RETURNDATASIZE | [0]                          | {}\n      01 | 3d |    | RETURNDATASIZE | [0 0]                        | {}\n      02 | 3d |    | RETURNDATASIZE | [0 0 0]                      | {}\n      03 | 3d |    | RETURNDATASIZE | [0 0 0 0]                    | {}\n\n      // copy calldata into memory\n      04 | 36 |    | CALLDATASIZE   | [cds 0 0 0 0]                | {}\n      05 | 3d |    | RETURNDATASIZE | [0 cds 0 0 0 0]              | {}\n      06 | 3d |    | RETURNDATASIZE | [0 0 cds 0 0 0 0]            | {}\n      07 | 37 |    | CALLDATACOPY   | [0 0 0 0]                    | {calldata}\n      08 | 36 |    | CALLDATASIZE   | [cds 0 0 0 0]                | {calldata}\n      09 | 3d |    | RETURNDATASIZE | [0 cds 0 0 0 0]              | {calldata}\n\n      // load the implementation from the ERC1967 slot\n      0a | 7f | implSlot | PUSH32   | [implSlot 0 cds 0 0 0 0]     | {calldata}\n      2b | 54 |    | SLOAD          | [impl 0 cds 0 0 0 0]         | {calldata}\n\n      // DELEGATECALL to the implementation\n      2c | 5a |    | GAS            | [gas impl 0 cds 0 0 0 0]     | {calldata}\n      2d | f4 |    | DELEGATECALL   | [success 0 0]                | {calldata}\n\n      // copy returndata into memory\n      2e | 3d |    | RETURNDATASIZE | [rds success 0 0]            | {calldata}\n      2f | 3d |    | RETURNDATASIZE | [rds rds success 0 0]        | {calldata}\n      30 | 93 |    | SWAP4          | [0 rds success 0 rds]        | {calldata}\n      31 | 80 |    | DUP1           | [0 0 rds success 0 rds]      | {calldata}\n      32 | 3e |    | RETURNDATACOPY | [success 0 rds]              | {returnData}\n\n      // check if the call reverted, bubble up\n  /-< 33 | 60 | 37 | PUSH1          | [returnTarget success 0 rds] | {returnData}\n  |   35 | 57 |    | JUMPI          | [0 rds]                      | {returnData}\n  |   36 | fd |    | REVERT         | X                            | X\n  \\-> 37 | 5b |    | JUMPDEST       | [0 rds]                      | {returnData}\n      38 | f3 |    | RETURN         | X                            | X\n      39\n\n*/\n\nlibrary ERC1967UUPSProxy {\n  bytes private constant _INITCODE =\n    hex\"6039_6015_6a3d3d3d3d363d3d37363d7f_3d_7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc_6014_6079_600c_39_3d_51_80_82_55_3d_3d_608d_80_38_03_80_91_3d_39_3d_84_5a_f4_6053_57_82_80_fd_5b_3d_605f_57_3b_6061_57_50_80_fd_5b_50_5b_6d545af43d3d93803e603757fd5bf3_602e_52_6020_52_52_f3\";\n\n  function _packArgs(address payable implementation, bytes memory initializer)\n    private\n    pure\n    returns (bytes memory)\n  {\n    return abi.encodePacked(_INITCODE, implementation, initializer);\n  }\n\n  function create(address implementation, bytes memory initializer)\n    internal\n    returns (address)\n  {\n    return create(payable(implementation), initializer, 0);\n  }\n\n  function create(\n    address payable implementation,\n    bytes memory initializer,\n    uint256 value\n  ) internal returns (address result) {\n    require(address(this).balance >= value, \"ERC1967UUPSProxy: insufficient balance\");\n    bytes memory initcode = _packArgs(implementation, initializer);\n    assembly (\"memory-safe\") {\n      result := create(value, add(0x20, initcode), mload(initcode))\n    }\n    require(result != address(0), \"ERC1967UUPSProxy: create failed\");\n  }\n\n  function createDeterministic(\n    address implementation,\n    bytes memory initializer,\n    bytes32 salt\n  ) internal returns (address) {\n    return createDeterministic(payable(implementation), initializer, salt, 0);\n  }\n\n  function createDeterministic(\n    address payable implementation,\n    bytes memory initializer,\n    bytes32 salt,\n    uint256 value\n  ) internal returns (address result) {\n    require(address(this).balance >= value, \"ERC1967UUPSProxy: insufficient balance\");\n    bytes memory initcode = _packArgs(implementation, initializer);\n    assembly (\"memory-safe\") {\n      result := create2(value, add(0x20, initcode), mload(initcode), salt)\n    }\n    require(result != address(0), \"ERC1967UUPSProxy: create2 failed\");\n  }\n\n  function predictDeterministic(\n    address implementation,\n    bytes memory initializer,\n    bytes32 salt,\n    address deployer\n  ) internal pure returns (address result) {\n    return\n      address(\n        uint160(\n          uint256(\n            keccak256(\n              abi.encodePacked(\n                bytes1(0xff),\n                deployer,\n                salt,\n                keccak256(_packArgs(payable(implementation), initializer))\n              )\n            )\n          )\n        )\n      );\n  }\n\n  function predictDeterministic(\n    address implementation,\n    bytes memory initializer,\n    bytes32 salt\n  ) internal view returns (address result) {\n    return predictDeterministic(implementation, initializer, salt, address(this));\n  }\n}\n"},"src/interfaces/IERC1155Burnable.sol":{"content":"// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.17;\n\ninterface IERC1155Burnable {\n  function burn(\n    address account,\n    uint256 id,\n    uint256 value\n  ) external;\n\n  function burnBatch(\n    address account,\n    uint256[] memory ids,\n    uint256[] memory values\n  ) external;\n}\n"},"src/interfaces/IERC1155Mintable.sol":{"content":"// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.17;\n\ninterface IERC1155Mintable {\n  function mint(\n    address to,\n    uint256 id,\n    uint256 amount,\n    bytes memory data\n  ) external;\n\n  function mintBatch(\n    address to,\n    uint256[] memory ids,\n    uint256[] memory amounts,\n    bytes memory data\n  ) external;\n}\n"},"src/interfaces/IJasmineEATExtensions.sol":{"content":"// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.17;\n\ninterface IJasmineEATExtensions {\n  function frozen(uint256) external view returns (bool);\n}\n"},"src/interfaces/IJasmineOracle.sol":{"content":"// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.17;\n\ninterface IJasmineOracle {\n  // This function takes a `bytes` instead of something more structure to allow\n  // the minter and the oracle to be upgraded separately. If desire, future\n  // upgrades can apply more structure here.\n  function updateSeries(uint256 id, bytes memory encodedMetadata) external;\n}\n"},"src/JasmineEAT.sol":{"content":"// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.17;\n\nimport {\n  Ownable2StepUpgradeable\n} from \"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\";\nimport {\n  UUPSUpgradeable\n} from \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport {\n  ERC1155BurnableUpgradeable\n} from \"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol\";\nimport {\n  ERC1155SupplyUpgradeable\n} from \"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\";\nimport {IERC1155Burnable} from \"./interfaces/IERC1155Burnable.sol\";\nimport {IERC1155Mintable} from \"./interfaces/IERC1155Mintable.sol\";\nimport {IJasmineEATExtensions} from \"./interfaces/IJasmineEATExtensions.sol\";\n\n// We only import this so that we can mention it in our overrides to appease the\n// compiler.\nimport {\n  ERC1155Upgradeable\n} from \"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\";\n\n/// @dev This contract is upgradeable. You can only append new contracts to the list of bases. You cannot delete bases or reorder them.\n/// @notice The tokens produced by this contract represent EACs held by the Jasmine bridge.\ncontract JasmineEAT is\n  Ownable2StepUpgradeable,\n  UUPSUpgradeable,\n  ERC1155BurnableUpgradeable,\n  ERC1155SupplyUpgradeable,\n  IERC1155Burnable,\n  IERC1155Mintable,\n  IJasmineEATExtensions\n{\n  /// @dev We use the Ownable owner for upgrades, not the ERC1967 admin. The ERC1967 admin is not used by this contract.\n  function _authorizeUpgrade(address) internal override onlyOwner {}\n\n  /// @notice This address is the mint authorization checker. The minter is controlled by the bridge.\n  address public minter;\n\n  function _checkMinter() internal view {\n    require(minter == _msgSender(), \"JasmineEAT: caller is not the minter\");\n  }\n\n  modifier onlyMinter() {\n    _checkMinter();\n    _;\n  }\n\n  event MinterChanged(address indexed newMinter);\n\n  /// @notice In the event of a minter migration (not just an upgrade), the owner has the ability to set the minter address.\n  function setMinter(address newMinter) external onlyOwner {\n    minter = newMinter;\n    emit MinterChanged(newMinter);\n  }\n\n  mapping(uint256 => bool) public override frozen;\n\n  /// @dev EAT series that are frozen cannot be transferred. They can be burned, however.\n  function _beforeTokenTransfer(\n    address operator,\n    address from,\n    address to,\n    uint256[] memory ids,\n    uint256[] memory amounts,\n    bytes memory data\n  ) internal override(ERC1155Upgradeable, ERC1155SupplyUpgradeable) {\n    if (to != address(0)) {\n      for (uint256 i; i < ids.length; i++) {\n        require(!frozen[ids[i]], \"JasmineEAT: frozen series\");\n      }\n    }\n    super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n  }\n\n  function initialize(string memory initialURI, address initialMinter, address initialOwner)\n    external\n    initializer\n    onlyProxy\n  {\n    _transferOwnership(initialOwner); // __Ownable2Step_init();\n    __UUPSUpgradeable_init();\n    __ERC1155_init(initialURI);\n    minter = initialMinter;\n    emit MinterChanged(initialMinter);\n  }\n\n  /// @notice Create new EATs when EACs are received by the bridge. Only callable by `minter`.\n  function mint(\n    address to,\n    uint256 id,\n    uint256 amount,\n    bytes memory data\n  ) external override onlyMinter {\n    _mint(to, id, amount, data);\n  }\n\n  /// @notice Create new EATs when EACs are received by the bridge. Only callable by `minter`.\n  function mintBatch(\n    address to,\n    uint256[] memory ids,\n    uint256[] memory amounts,\n    bytes memory data\n  ) external override onlyMinter {\n    _mintBatch(to, ids, amounts, data);\n  }\n\n  event Frozen(uint256 indexed id);\n\n  /// @notice If there is an error in an EAC or in the issuance of the EAT, the EAT series may be frozen by the owner.\n  function freeze(uint256 id) external onlyOwner {\n    frozen[id] = true;\n    emit Frozen(id);\n  }\n\n  event Thawed(uint256 indexed id);\n\n  /// @notice This un-does the effects of freeze.\n  function thaw(uint256 id) external onlyOwner {\n    frozen[id] = false;\n    emit Thawed(id);\n  }\n\n  /// @notice If the owner determines that there is no resolution to an erroneous EAT series, the EATs may be destroyed.\n  function slash(\n    address from,\n    uint256 id,\n    uint256 amount\n  ) external onlyOwner {\n    require(frozen[id], \"JasmineEAT: series not frozen\");\n    uint256 balance = balanceOf(from, id);\n    if (balance < amount) {\n      amount = balance;\n    }\n    _burn(from, id, amount);\n  }\n\n  /// @notice If the owner determines that there is no resolution to an erroneous EAT series, the EATs may be destroyed.\n  function slashBatch(\n    address from,\n    uint256[] memory ids,\n    uint256[] memory amounts\n  ) external onlyOwner {\n    for (uint256 i; i < ids.length; i++) {\n      uint256 id = ids[i];\n      require(frozen[id], \"JasmineEAT: series not frozen\");\n      uint256 balance = balanceOf(from, id);\n      if (balance < amounts[i]) {\n        amounts[i] = balance;\n      }\n    }\n    _burnBatch(from, ids, amounts);\n  }\n\n  // These are only here to appease Solidity's horrible inheritance logic.\n  function burn(\n    address from,\n    uint256 id,\n    uint256 value\n  ) public override(ERC1155BurnableUpgradeable, IERC1155Burnable) {\n    super.burn(from, id, value);\n  }\n\n  function burnBatch(\n    address from,\n    uint256[] memory ids,\n    uint256[] memory values\n  ) public override(ERC1155BurnableUpgradeable, IERC1155Burnable) {\n    super.burnBatch(from, ids, values);\n  }\n\n  /// @dev Update the base URI of the contract.\n  function updateTokenURI(string memory _newURI) external onlyOwner {\n    require(bytes(_newURI).length != 0, \"JasmineEAT: new URI cannot be empty.\");\n    _setURI(_newURI);\n  }\n\n  /// @dev Reserved storage gap. LINK: https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n  uint256[50] private __gap;\n}\n"},"src/JasmineMinter.sol":{"content":"// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.17;\n\nimport {\n  Ownable2StepUpgradeable\n} from \"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\";\nimport {\n  UUPSUpgradeable\n} from \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport {\n  EIP712Upgradeable\n} from \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\";\nimport {\n  ECDSAUpgradeable\n} from \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\";\nimport {IJasmineOracle} from \"./interfaces/IJasmineOracle.sol\";\nimport {IERC1155Burnable} from \"./interfaces/IERC1155Burnable.sol\";\nimport {IERC1155Mintable} from \"./interfaces/IERC1155Mintable.sol\";\nimport {IJasmineEATExtensions} from \"./interfaces/IJasmineEATExtensions.sol\";\n\n/// @dev This contract is upgradeable. You can only append new contracts to the list of bases. You cannot delete bases or reorder them.\n/// @notice This contract is responsible for validating that the bridge has authorized an EAT mint.\n/// @notice This contract also updates the oracle with EAT metadata during each mint.\ncontract JasmineMinter is Ownable2StepUpgradeable, UUPSUpgradeable, EIP712Upgradeable {\n  /// @dev We use the `Ownable` owner for upgrades, not the ERC1967 admin. The ERC1967 admin is not used by this contract.\n  function _authorizeUpgrade(address) internal override onlyOwner {}\n\n  address public immutable token;\n  address public immutable oracle;\n\n  constructor(address _token, address _oracle) {\n    token = _token;\n    oracle = _oracle;\n  }\n\n  /// @dev This is the wallet/EOA address that authorizes minting new EATs. This is a separate authority from the right to upgrade protocol contracts.\n  address public bridge;\n\n  event BridgeChanged(address indexed newBridge);\n\n  /// @notice When the bridge wallet/EOA is migrated, the owner updates the bridge address.\n  function setBridge(address newBridge) external onlyOwner {\n    bridge = newBridge;\n    emit BridgeChanged(newBridge);\n  }\n\n  /// @dev This is the EIP712 domain name. It is exposed here for ease of introspection.\n  string public name;\n  /// @dev This is the EIP712 domain version. It is exposed here for ease of introspection.\n  string public version;\n\n  /// @notice Whether a particular nonce has been used to prevent replay.\n  /// @dev This contract uses non-sequential nonces so that multiple mint authorizations can be issued concurrently. The downside to this approach is that it is slightly more involved to invalidate a nonce that has not yet been consumed.\n  mapping(bytes32 => bool) public consumedNonces;\n\n  /// @notice This is the EIP712 domain separator. It is exposed here for ease of introspection.\n  function DOMAIN_SEPARATOR() external view returns (bytes32) {\n    return _domainSeparatorV4();\n  }\n\n  // These are the EIP712 struct type hashes.\n  bytes32 public constant MINT_TYPEHASH =\n    keccak256(\n      \"MintAuthorization(address minter,uint256 id,uint256 amount,bytes oracleData,uint256 deadline,bytes32 nonce)\"\n    );\n  bytes32 public constant MINTBATCH_TYPEHASH =\n    keccak256(\n      \"MintBatchAuthorization(address minter,uint256[] ids,uint256[] amounts,bytes[] oracleDatas,uint256 deadline,bytes32 nonce)\"\n    );\n  bytes32 public constant CONSUMENONCE_TYPEHASH =\n    keccak256(\"ConsumeNonce(bytes32 nonce)\");\n\n  function initialize(\n    string memory initialName,\n    string memory initialVersion,\n    address initialBridge,\n    address initialOwner\n  ) external initializer onlyProxy {\n    _transferOwnership(initialOwner); // __Ownable2Step_init();\n    __UUPSUpgradeable_init();\n    __EIP712_init(initialName, initialVersion);\n    name = initialName;\n    version = initialVersion;\n    bridge = initialBridge;\n    emit BridgeChanged(initialBridge);\n  }\n\n  event NonceConsumed(bytes32 indexed nonce);\n\n  /// @notice Mint a new EAT.\n  /// @notice Only callable by the address specified in the EIP712 mint authoriztaion.\n  /// @param receiver The initial owner of the newly-minted EATs. If this is a contract, it must support IERC1155Receiver.onERC1155Received. Failure of the receiver callback does not invalidate the nonce. The receiver is NOT part of the EIP712 minting authorization.\n  /// @param id The identifier of the EAT series to mint. See JasmineOracle for the constraints on this value. The id is part of the EIP712 minting authorization.\n  /// @param amount The quantity of EATs to mint. The amount is part of the EIP712 minting authorization.\n  /// @param transferData Additional argument to be passed to `receiver`'s callback. Ignored if `receiver` is not a contract. The transferData is NOT part of the EIP712 minting authorization.\n  /// @param oracleData Authenticated EAT metadata passed to the oracle. Oracle updates are idempotent. The oracleData is part of the EIP712 minting authorization.\n  /// @param deadline The latest timestamp at which the mint authorization remains valid. After this time, attempts to mint will revert. The deadline is part of the EIP712 minting authorization.\n  /// @param nonce Used to prevent signature replay. The nonce is part of the EIP712 minting authorization. If consumedNonces(nonce), the minting authorization is invalid.\n  /// @param sig Encoded ECDSA signature by `bridge` over the EIP712 minting authorization. Formed as the 65-byte concatenation of r, s, and v in that order. s must be in the lower half of the curve. v must be 27 or 28.\n  function mint(\n    address receiver,\n    uint256 id,\n    uint256 amount,\n    bytes memory transferData,\n    bytes memory oracleData,\n    uint256 deadline,\n    bytes32 nonce,\n    bytes memory sig\n  ) external {\n    // Check for expiration\n    require(block.timestamp <= deadline, \"JasmineMinter: expired\");\n    // Check the EIP712 signature\n    bytes32 structHash = keccak256(\n      abi.encode(MINT_TYPEHASH, _msgSender(), id, amount, keccak256(oracleData), deadline, nonce)\n    );\n    require(\n      ECDSAUpgradeable.recover(_hashTypedDataV4(structHash), sig) == bridge,\n      \"JasmineMinter: bad signature/wrong signer\"\n    );\n    // Check the nonce\n    require(!consumedNonces[nonce], \"JasmineMinter: nonce replay\");\n    consumedNonces[nonce] = true;\n    emit NonceConsumed(nonce);\n    // `oracle` is a trusted contract, so we don't need to follow checks-effects-interactions\n    if (oracleData.length != 0) {\n      IJasmineOracle(oracle).updateSeries(id, oracleData);\n    }\n    IERC1155Mintable(token).mint(receiver, id, amount, transferData);\n  }\n\n  function _hashArray(uint256[] memory a) internal pure returns (bytes32 result) {\n    assembly (\"memory-safe\") {\n      result := keccak256(add(0x20, a), shl(5, mload(a)))\n    }\n  }\n\n  /// @notice Mint a new EAT.\n  /// @notice Only callable by the address specified in the EIP712 mint authoriztaion.\n  /// @param receiver The initial owner of the newly-minted EATs. If this is a contract, it must support IERC1155Receiver.onERC1155Received. Failure of the receiver callback does not invalidate the nonce. The receiver is NOT part of the EIP712 minting authorization.\n  /// @param ids The identifiers of the EAT series to mint. See JasmineOracle for the constraints on this value. The ids are part of the EIP712 minting authorization.\n  /// @param amounts The quantities of EATs to mint. The amounts are part of the EIP712 minting authorization.\n  /// @param transferData Additional argument to be passed to `receiver`'s callback. Ignored if `receiver` is not a contract. The transferData is NOT part of the EIP712 minting authorization.\n  /// @param oracleDatas Authenticated EAT metadatas passed to the oracle. Oracle updates are idempotent. The oracleData is part of the EIP712 minting authorization.\n  /// @param deadline The latest timestamp at which the mint authorization remains valid. After this time, attempts to mint will revert. The deadline is part of the EIP712 minting authorization.\n  /// @param nonce Used to prevent signature replay. The nonce is part of the EIP712 minting authorization. If consumedNonces(nonce), the minting authorization is invalid.\n  /// @param sig Encoded ECDSA signature by `bridge` over the EIP712 minting authorization. Formed as the 65-byte concatenation of r, s, and v in that order. s must be in the lower half of the curve. v must be 27 or 28.\n  function mintBatch(\n    address receiver,\n    uint256[] memory ids,\n    uint256[] memory amounts,\n    bytes memory transferData,\n    bytes[] memory oracleDatas,\n    uint256 deadline,\n    bytes32 nonce,\n    bytes memory sig\n  ) external {\n    // We don't check `ids.length == amounts.length` because `token` will do\n    // that for us.\n    require(\n      ids.length == oracleDatas.length,\n      \"JasmineMinter: ids and oracleDatas length mismatch\"\n    );\n    // Check for expiration\n    require(block.timestamp <= deadline, \"JasmineMinter: expired\");\n\n    // Hashing an array of bytes for EIP712 is obnoxious. We have to store the\n    // array of hashes of bytes and then hash *that* to get the appropriate\n    // value to feed into the struct hash.\n    uint256[] memory oracleDataHashes = new uint256[](oracleDatas.length);\n    for (uint256 i; i < oracleDatas.length; i++) {\n      oracleDataHashes[i] = uint256(keccak256(oracleDatas[i]));\n    }\n    bytes32 structHash = keccak256(\n      abi.encode(\n        MINTBATCH_TYPEHASH,\n        _msgSender(),\n        _hashArray(ids),\n        _hashArray(amounts),\n        _hashArray(oracleDataHashes),\n        deadline,\n        nonce\n      )\n    );\n    require(\n      ECDSAUpgradeable.recover(_hashTypedDataV4(structHash), sig) == bridge,\n      \"JasmineMinter: bad signature/wrong signer\"\n    );\n\n    require(!consumedNonces[nonce], \"JasmineMinter: nonce replay\");\n    consumedNonces[nonce] = true;\n    emit NonceConsumed(nonce);\n\n    // oracle is a trusted contract, so we don't need to follow checks-effects-interactions\n    for (uint256 i; i < oracleDatas.length; i++) {\n      bytes memory oracleData = oracleDatas[i];\n      if (oracleData.length != 0) {\n        IJasmineOracle(oracle).updateSeries(ids[i], oracleData);\n      }\n    }\n    IERC1155Mintable(token).mintBatch(receiver, ids, amounts, transferData);\n  }\n\n  /// @notice Used to invalidate a nonce embedded in another EIP712 minting authorization.\n  function consumeNonce(bytes32 nonce, bytes memory sig) external {\n    bytes32 structHash = keccak256(abi.encode(CONSUMENONCE_TYPEHASH, nonce));\n    require(\n      ECDSAUpgradeable.recover(_hashTypedDataV4(structHash), sig) == bridge,\n      \"JasmineMinter: bad signature/wrong signer\"\n    );\n    require(!consumedNonces[nonce], \"JasmineMinter: nonce replay\");\n    consumedNonces[nonce] = true;\n    emit NonceConsumed(nonce);\n  }\n\n  event BurnedSingle(address indexed owner, uint256 id, uint256 amount, bytes metadata);\n\n  /// @notice Used in both redemption and bridge-off flows.\n  /// @dev JasmineMinter must be approved to spend the caller's EATs for the operation to succeed. JasmineMinter indirectly authenticates that the caller owns the specified amount of the specified EATs.\n  /// @param id The series of EAT to be redeemed/bridged-off.\n  /// @param amount The amount of EAT of the specified series to be redeemed/bridged-off.\n  /// @param metadata Message to the bridge specifying whether to redeem or bridge-off. If the operation is a bridge-off, also specifies the destination of the EAC. JasmineMinter imposes no authentication or structure on the metadata. Malformed or otherwise invalid metadata is an unrecoverable error.\n  function burn(\n    uint256 id,\n    uint256 amount,\n    bytes memory metadata\n  ) external onlyProxy {\n    require(!IJasmineEATExtensions(token).frozen(id), \"JasmineMinter: frozen series\");\n    emit BurnedSingle(_msgSender(), id, amount, metadata);\n    IERC1155Burnable(token).burn(_msgSender(), id, amount);\n  }\n\n  event BurnedBatch(\n    address indexed owner,\n    uint256[] ids,\n    uint256[] amounts,\n    bytes metadata\n  );\n\n  /// @notice Used in both redemption and bridge-off flows.\n  /// @dev JasmineMinter must be approved to spend the caller's EATs for the operation to succeed. JasmineMinter indirectly authenticates that the caller owns the specified amount of the specified EATs.\n  /// @param ids The series of EATs to be redeemed/bridged-off.\n  /// @param amounts The amounts of EATs of the specified series to be redeemed/bridged-off.\n  /// @param metadata Message to the bridge specifying whether to redeem or bridge-off. If the operation is a bridge-off, also specifies the destination of the EAC. JasmineMinter imposes no authentication or structure on the metadata. Malformed or otherwise invalid metadata is an unrecoverable error.\n  function burnBatch(\n    uint256[] memory ids,\n    uint256[] memory amounts,\n    bytes memory metadata\n  ) external onlyProxy {\n    for (uint256 i; i < ids.length; i++) {\n      require(\n        !IJasmineEATExtensions(token).frozen(ids[i]),\n        \"JasmineMinter: frozen series\"\n      );\n    }\n    emit BurnedBatch(_msgSender(), ids, amounts, metadata);\n    IERC1155Burnable(token).burnBatch(_msgSender(), ids, amounts);\n  }\n\n  /// @dev Reserved storage gap. LINK: https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n  uint256[50] private __gap;\n}\n"},"src/JasmineOracle.sol":{"content":"// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.17;\n\nimport {\n  Ownable2StepUpgradeable\n} from \"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\";\nimport {\n  UUPSUpgradeable\n} from \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport {IJasmineOracle} from \"./interfaces/IJasmineOracle.sol\";\n\n/// @dev This contract is upgradeable. You can only append new contracts to the list of bases. You cannot delete bases or reorder them.\n/// @notice This contract stores the machine-readable metadata about each EAT series. This is used to determine whether a particular EAT is eligible for certain on-chain uses (e.g. membership in a solar-only EAT pool).\ncontract JasmineOracle is Ownable2StepUpgradeable, UUPSUpgradeable, IJasmineOracle {\n  /// @dev We use the `Ownable` owner for upgrades, not the ERC1967 admin. The ERC1967 admin is not used by this contract.\n  function _authorizeUpgrade(address) internal override onlyOwner {}\n\n  /// @notice This address is the mint authorization checker. The minter is controlled by the bridge.\n  address public minter;\n\n  function _checkMinter() internal view {\n    require(minter == _msgSender(), \"JasmineOracle: caller is not the minter\");\n  }\n\n  modifier onlyMinter() {\n    _checkMinter();\n    _;\n  }\n\n  event MinterChanged(address indexed newMinter);\n\n  /// @notice In the event of a minter migration (not just an upgrade), the owner has the ability to set the minter address.\n  function setMinter(address newMinter) external onlyOwner {\n    minter = newMinter;\n    emit MinterChanged(newMinter);\n  }\n\n  function initialize(address initialMinter, address initialOwner) external initializer onlyProxy {\n    _transferOwnership(initialOwner); // __Ownable2Step_init();\n    __UUPSUpgradeable_init();\n    minter = initialMinter;\n    emit MinterChanged(initialMinter);\n  }\n\n  struct EATMetadata {\n    uint8 _version;\n    uint32 fuel;\n    uint32 certificateType;\n    uint32 endorsement;\n  }\n\n  mapping(uint256 => EATMetadata) internal _metadata;\n\n  function _destructureId(uint256 id)\n    internal\n    pure\n    returns (\n      uint256 uuid,\n      uint256 registry,\n      uint256 vintage\n    )\n  {\n    uint256 pad;\n    (uuid, registry, vintage, pad) = (\n      id >> 128,\n      (id >> 96) & type(uint32).max,\n      (id >> 56) & type(uint40).max,\n      id & type(uint56).max\n    );\n    require(pad == 0, \"JasmineOracle: invalid ID\");\n  }\n\n  /// @notice Each EAT series has a UUID associated with it. This has no structure, but serves to identify the series to an off-chain database.\n  function getUUID(uint256 id) external pure returns (uint128) {\n    (uint256 uuid, , ) = _destructureId(id);\n    return uint128(uuid);\n  }\n\n  /// @notice Each EAT is traded on an EAT registry. EATs cannot generally be moved between registries. The registry id is opaque, but can be checked for an exact match.\n  function hasRegistry(uint256 id, uint256 query) external pure returns (bool) {\n    (, uint256 registry, ) = _destructureId(id);\n    return registry == query;\n  }\n\n  /// @notice The vintage of an EAT identifies the time at which it was generated. The vintage is represented as a UNIX timestamp. The granularity of an EAT's vintage depends on the conventions of its registry and generator.\n  function hasVintage(\n    uint256 id,\n    uint256 min,\n    uint256 max\n  ) external pure returns (bool) {\n    (, , uint256 vintage) = _destructureId(id);\n    return vintage >= min && vintage <= max;\n  }\n\n  /// @notice The fuel type of an EAT identifies the source of the energy used to generate the corresponding electrical power. This is an opaque value that can only be checked for an exact match. Future EATs may have more than 1 fuel type.\n  function hasFuel(uint256 id, uint256 query) external view returns (bool) {\n    return _metadata[id].fuel == query;\n  }\n\n  function hasCertificateType(uint256 id, uint256 query) external view returns (bool) {\n    return _metadata[id].certificateType == query;\n  }\n\n  function hasEndorsement(uint256 id, uint256 query) external view returns (bool) {\n    return _metadata[id].endorsement == query;\n  }\n\n  /// @notice The encodedMetadata is structured as the ABI encoding the metadata fields\n  // | position | name             | bit length |\n  // | :------- | :--------------- | :--------- |\n  // | 0        | version          | 8          |\n  // | 1        | uuid             | 128        |\n  // | 2        | registry         | 32         |\n  // | 3        | vintage          | 40         |\n  // | 4        | fuel             | 32         |\n  // | 5        | certificate type | 32         |\n  // | 6        | endorsement      | 32         |\n  // The version is currently always 1. A change to the version version corresponds to an update to the metadata format.\n  function updateSeries(uint256 id, bytes memory encodedMetadata)\n    external\n    override\n    onlyMinter\n  {\n    (uint256 uuid, uint256 registry, uint256 vintage) = _destructureId(id);\n    (\n      uint8 version,\n      uint128 metaUuid,\n      uint32 metaRegistry,\n      uint40 metaVintage,\n      uint32 fuel,\n      uint32 certificateType,\n      uint32 endorsement\n    ) = abi.decode(\n        encodedMetadata,\n        (uint8, uint128, uint32, uint40, uint32, uint32, uint32)\n      );\n    require(version == 1, \"JasmineOracle: invalid metadata version\");\n    require(uuid == metaUuid, \"JasmineOracle: UUID mismatch\");\n    require(registry == metaRegistry, \"JasmineOracle: registry mismatch\");\n    require(vintage == metaVintage, \"JasmineOracle: vintage mismatch\");\n    _metadata[id] = EATMetadata(version, fuel, certificateType, endorsement);\n  }\n\n  /// @dev Reserved storage gap. LINK: https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n  uint256[50] private __gap;\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":250},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","storageLayout","devdoc","userdoc","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2904],"ContextUpgradeable":[2946],"Initializable":[795],"Ownable2StepUpgradeable":[105],"OwnableUpgradeable":[237]},"id":106,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:0"},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","file":"./OwnableUpgradeable.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":106,"sourceUnit":238,"src":"132:34:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":106,"sourceUnit":796,"src":"167:42:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":5,"name":"Initializable","nameLocations":["698:13:0"],"nodeType":"IdentifierPath","referencedDeclaration":795,"src":"698:13:0"},"id":6,"nodeType":"InheritanceSpecifier","src":"698:13:0"},{"baseName":{"id":7,"name":"OwnableUpgradeable","nameLocations":["713:18:0"],"nodeType":"IdentifierPath","referencedDeclaration":237,"src":"713:18:0"},"id":8,"nodeType":"InheritanceSpecifier","src":"713:18:0"}],"canonicalName":"Ownable2StepUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":4,"nodeType":"StructuredDocumentation","src":"211:441:0","text":" @dev Contract module which provides access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership} and {acceptOwnership}.\n This module is used through inheritance. It will make available all functions\n from parent (Ownable)."},"fullyImplemented":true,"id":105,"linearizedBaseContracts":[105,237,2946,795],"name":"Ownable2StepUpgradeable","nameLocation":"671:23:0","nodeType":"ContractDefinition","nodes":[{"body":{"id":16,"nodeType":"Block","src":"795:43:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":13,"name":"__Ownable_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":143,"src":"805:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":14,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"805:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":15,"nodeType":"ExpressionStatement","src":"805:26:0"}]},"id":17,"implemented":true,"kind":"function","modifiers":[{"id":11,"kind":"modifierInvocation","modifierName":{"id":10,"name":"onlyInitializing","nameLocations":["778:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":740,"src":"778:16:0"},"nodeType":"ModifierInvocation","src":"778:16:0"}],"name":"__Ownable2Step_init","nameLocation":"747:19:0","nodeType":"FunctionDefinition","parameters":{"id":9,"nodeType":"ParameterList","parameters":[],"src":"766:2:0"},"returnParameters":{"id":12,"nodeType":"ParameterList","parameters":[],"src":"795:0:0"},"scope":105,"src":"738:100:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":22,"nodeType":"Block","src":"911:7:0","statements":[]},"id":23,"implemented":true,"kind":"function","modifiers":[{"id":20,"kind":"modifierInvocation","modifierName":{"id":19,"name":"onlyInitializing","nameLocations":["894:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":740,"src":"894:16:0"},"nodeType":"ModifierInvocation","src":"894:16:0"}],"name":"__Ownable2Step_init_unchained","nameLocation":"853:29:0","nodeType":"FunctionDefinition","parameters":{"id":18,"nodeType":"ParameterList","parameters":[],"src":"882:2:0"},"returnParameters":{"id":21,"nodeType":"ParameterList","parameters":[],"src":"911:0:0"},"scope":105,"src":"844:74:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":false,"id":25,"mutability":"mutable","name":"_pendingOwner","nameLocation":"939:13:0","nodeType":"VariableDeclaration","scope":105,"src":"923:29:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":24,"name":"address","nodeType":"ElementaryTypeName","src":"923:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700","id":31,"name":"OwnershipTransferStarted","nameLocation":"965:24:0","nodeType":"EventDefinition","parameters":{"id":30,"nodeType":"ParameterList","parameters":[{"constant":false,"id":27,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"1006:13:0","nodeType":"VariableDeclaration","scope":31,"src":"990:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":26,"name":"address","nodeType":"ElementaryTypeName","src":"990:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":29,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"1037:8:0","nodeType":"VariableDeclaration","scope":31,"src":"1021:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":28,"name":"address","nodeType":"ElementaryTypeName","src":"1021:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"989:57:0"},"src":"959:88:0"},{"body":{"id":39,"nodeType":"Block","src":"1185:37:0","statements":[{"expression":{"id":37,"name":"_pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":25,"src":"1202:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":36,"id":38,"nodeType":"Return","src":"1195:20:0"}]},"documentation":{"id":32,"nodeType":"StructuredDocumentation","src":"1053:65:0","text":" @dev Returns the address of the pending owner."},"functionSelector":"e30c3978","id":40,"implemented":true,"kind":"function","modifiers":[],"name":"pendingOwner","nameLocation":"1132:12:0","nodeType":"FunctionDefinition","parameters":{"id":33,"nodeType":"ParameterList","parameters":[],"src":"1144:2:0"},"returnParameters":{"id":36,"nodeType":"ParameterList","parameters":[{"constant":false,"id":35,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":40,"src":"1176:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":34,"name":"address","nodeType":"ElementaryTypeName","src":"1176:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1175:9:0"},"scope":105,"src":"1123:99:0","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[211],"body":{"id":59,"nodeType":"Block","src":"1494:99:0","statements":[{"expression":{"id":51,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":49,"name":"_pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":25,"src":"1504:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":50,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43,"src":"1520:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1504:24:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":52,"nodeType":"ExpressionStatement","src":"1504:24:0"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":54,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":160,"src":"1568:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":55,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1568:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":56,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43,"src":"1577:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":53,"name":"OwnershipTransferStarted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31,"src":"1543:24:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":57,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1543:43:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":58,"nodeType":"EmitStatement","src":"1538:48:0"}]},"documentation":{"id":41,"nodeType":"StructuredDocumentation","src":"1228:182:0","text":" @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":60,"implemented":true,"kind":"function","modifiers":[{"id":47,"kind":"modifierInvocation","modifierName":{"id":46,"name":"onlyOwner","nameLocations":["1484:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":151,"src":"1484:9:0"},"nodeType":"ModifierInvocation","src":"1484:9:0"}],"name":"transferOwnership","nameLocation":"1424:17:0","nodeType":"FunctionDefinition","overrides":{"id":45,"nodeType":"OverrideSpecifier","overrides":[],"src":"1475:8:0"},"parameters":{"id":44,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43,"mutability":"mutable","name":"newOwner","nameLocation":"1450:8:0","nodeType":"VariableDeclaration","scope":60,"src":"1442:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":42,"name":"address","nodeType":"ElementaryTypeName","src":"1442:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1441:18:0"},"returnParameters":{"id":48,"nodeType":"ParameterList","parameters":[],"src":"1494:0:0"},"scope":105,"src":"1415:178:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[231],"body":{"id":76,"nodeType":"Block","src":"1849:81:0","statements":[{"expression":{"id":68,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"1859:20:0","subExpression":{"id":67,"name":"_pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":25,"src":"1866:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":69,"nodeType":"ExpressionStatement","src":"1859:20:0"},{"expression":{"arguments":[{"id":73,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":63,"src":"1914:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":70,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1889:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_Ownable2StepUpgradeable_$105_$","typeString":"type(contract super Ownable2StepUpgradeable)"}},"id":72,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1895:18:0","memberName":"_transferOwnership","nodeType":"MemberAccess","referencedDeclaration":231,"src":"1889:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":74,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1889:34:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":75,"nodeType":"ExpressionStatement","src":"1889:34:0"}]},"documentation":{"id":61,"nodeType":"StructuredDocumentation","src":"1599:173:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n Internal function without access restriction."},"id":77,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"1786:18:0","nodeType":"FunctionDefinition","overrides":{"id":65,"nodeType":"OverrideSpecifier","overrides":[],"src":"1840:8:0"},"parameters":{"id":64,"nodeType":"ParameterList","parameters":[{"constant":false,"id":63,"mutability":"mutable","name":"newOwner","nameLocation":"1813:8:0","nodeType":"VariableDeclaration","scope":77,"src":"1805:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":62,"name":"address","nodeType":"ElementaryTypeName","src":"1805:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1804:18:0"},"returnParameters":{"id":66,"nodeType":"ParameterList","parameters":[],"src":"1849:0:0"},"scope":105,"src":"1777:153:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":98,"nodeType":"Block","src":"2046:170:0","statements":[{"assignments":[82],"declarations":[{"constant":false,"id":82,"mutability":"mutable","name":"sender","nameLocation":"2064:6:0","nodeType":"VariableDeclaration","scope":98,"src":"2056:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":81,"name":"address","nodeType":"ElementaryTypeName","src":"2056:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":85,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":83,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2931,"src":"2073:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":84,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2073:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2056:29:0"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":90,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":87,"name":"pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":40,"src":"2103:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":88,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2103:14:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":89,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":82,"src":"2121:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2103:24:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206e6577206f776e6572","id":91,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2129:43:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_225559eb8402045bea7ff07c35d0ad8c0547830223ac1c21d44fb948d6896ebc","typeString":"literal_string \"Ownable2Step: caller is not the new owner\""},"value":"Ownable2Step: caller is not the new owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_225559eb8402045bea7ff07c35d0ad8c0547830223ac1c21d44fb948d6896ebc","typeString":"literal_string \"Ownable2Step: caller is not the new owner\""}],"id":86,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2095:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":92,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2095:78:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":93,"nodeType":"ExpressionStatement","src":"2095:78:0"},{"expression":{"arguments":[{"id":95,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":82,"src":"2202:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":94,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[77],"referencedDeclaration":77,"src":"2183:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":96,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2183:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":97,"nodeType":"ExpressionStatement","src":"2183:26:0"}]},"documentation":{"id":78,"nodeType":"StructuredDocumentation","src":"1936:69:0","text":" @dev The new owner accepts the ownership transfer."},"functionSelector":"79ba5097","id":99,"implemented":true,"kind":"function","modifiers":[],"name":"acceptOwnership","nameLocation":"2019:15:0","nodeType":"FunctionDefinition","parameters":{"id":79,"nodeType":"ParameterList","parameters":[],"src":"2034:2:0"},"returnParameters":{"id":80,"nodeType":"ParameterList","parameters":[],"src":"2046:0:0"},"scope":105,"src":"2010:206:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"constant":false,"documentation":{"id":100,"nodeType":"StructuredDocumentation","src":"2222:254:0","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":104,"mutability":"mutable","name":"__gap","nameLocation":"2501:5:0","nodeType":"VariableDeclaration","scope":105,"src":"2481:25:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":101,"name":"uint256","nodeType":"ElementaryTypeName","src":"2481:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":103,"length":{"hexValue":"3439","id":102,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2489:2:0","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"2481:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":106,"src":"653:1856:0","usedErrors":[]}],"src":"107:2403:0"},"id":0},"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2904],"ContextUpgradeable":[2946],"Initializable":[795],"OwnableUpgradeable":[237]},"id":238,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":107,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:1"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":108,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":238,"sourceUnit":2947,"src":"127:41:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":109,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":238,"sourceUnit":796,"src":"169:42:1","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":111,"name":"Initializable","nameLocations":["748:13:1"],"nodeType":"IdentifierPath","referencedDeclaration":795,"src":"748:13:1"},"id":112,"nodeType":"InheritanceSpecifier","src":"748:13:1"},{"baseName":{"id":113,"name":"ContextUpgradeable","nameLocations":["763:18:1"],"nodeType":"IdentifierPath","referencedDeclaration":2946,"src":"763:18:1"},"id":114,"nodeType":"InheritanceSpecifier","src":"763:18:1"}],"canonicalName":"OwnableUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":110,"nodeType":"StructuredDocumentation","src":"213:494:1","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":237,"linearizedBaseContracts":[237,2946,795],"name":"OwnableUpgradeable","nameLocation":"726:18:1","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":116,"mutability":"mutable","name":"_owner","nameLocation":"804:6:1","nodeType":"VariableDeclaration","scope":237,"src":"788:22:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":115,"name":"address","nodeType":"ElementaryTypeName","src":"788:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":122,"name":"OwnershipTransferred","nameLocation":"823:20:1","nodeType":"EventDefinition","parameters":{"id":121,"nodeType":"ParameterList","parameters":[{"constant":false,"id":118,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"860:13:1","nodeType":"VariableDeclaration","scope":122,"src":"844:29:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":117,"name":"address","nodeType":"ElementaryTypeName","src":"844:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":120,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"891:8:1","nodeType":"VariableDeclaration","scope":122,"src":"875:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":119,"name":"address","nodeType":"ElementaryTypeName","src":"875:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"843:57:1"},"src":"817:84:1"},{"body":{"id":131,"nodeType":"Block","src":"1055:43:1","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":128,"name":"__Ownable_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":143,"src":"1065:24:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":129,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1065:26:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":130,"nodeType":"ExpressionStatement","src":"1065:26:1"}]},"documentation":{"id":123,"nodeType":"StructuredDocumentation","src":"907:91:1","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":132,"implemented":true,"kind":"function","modifiers":[{"id":126,"kind":"modifierInvocation","modifierName":{"id":125,"name":"onlyInitializing","nameLocations":["1038:16:1"],"nodeType":"IdentifierPath","referencedDeclaration":740,"src":"1038:16:1"},"nodeType":"ModifierInvocation","src":"1038:16:1"}],"name":"__Ownable_init","nameLocation":"1012:14:1","nodeType":"FunctionDefinition","parameters":{"id":124,"nodeType":"ParameterList","parameters":[],"src":"1026:2:1"},"returnParameters":{"id":127,"nodeType":"ParameterList","parameters":[],"src":"1055:0:1"},"scope":237,"src":"1003:95:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":142,"nodeType":"Block","src":"1166:49:1","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":138,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2931,"src":"1195:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1195:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":137,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"1176:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":140,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1176:32:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":141,"nodeType":"ExpressionStatement","src":"1176:32:1"}]},"id":143,"implemented":true,"kind":"function","modifiers":[{"id":135,"kind":"modifierInvocation","modifierName":{"id":134,"name":"onlyInitializing","nameLocations":["1149:16:1"],"nodeType":"IdentifierPath","referencedDeclaration":740,"src":"1149:16:1"},"nodeType":"ModifierInvocation","src":"1149:16:1"}],"name":"__Ownable_init_unchained","nameLocation":"1113:24:1","nodeType":"FunctionDefinition","parameters":{"id":133,"nodeType":"ParameterList","parameters":[],"src":"1137:2:1"},"returnParameters":{"id":136,"nodeType":"ParameterList","parameters":[],"src":"1166:0:1"},"scope":237,"src":"1104:111:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":150,"nodeType":"Block","src":"1324:41:1","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":146,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":174,"src":"1334:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":147,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1334:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":148,"nodeType":"ExpressionStatement","src":"1334:13:1"},{"id":149,"nodeType":"PlaceholderStatement","src":"1357:1:1"}]},"documentation":{"id":144,"nodeType":"StructuredDocumentation","src":"1221:77:1","text":" @dev Throws if called by any account other than the owner."},"id":151,"name":"onlyOwner","nameLocation":"1312:9:1","nodeType":"ModifierDefinition","parameters":{"id":145,"nodeType":"ParameterList","parameters":[],"src":"1321:2:1"},"src":"1303:62:1","virtual":false,"visibility":"internal"},{"body":{"id":159,"nodeType":"Block","src":"1496:30:1","statements":[{"expression":{"id":157,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":116,"src":"1513:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":156,"id":158,"nodeType":"Return","src":"1506:13:1"}]},"documentation":{"id":152,"nodeType":"StructuredDocumentation","src":"1371:65:1","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":160,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1450:5:1","nodeType":"FunctionDefinition","parameters":{"id":153,"nodeType":"ParameterList","parameters":[],"src":"1455:2:1"},"returnParameters":{"id":156,"nodeType":"ParameterList","parameters":[{"constant":false,"id":155,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":160,"src":"1487:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":154,"name":"address","nodeType":"ElementaryTypeName","src":"1487:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1486:9:1"},"scope":237,"src":"1441:85:1","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":173,"nodeType":"Block","src":"1644:85:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":165,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":160,"src":"1662:5:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":166,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1662:7:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":167,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2931,"src":"1673:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":168,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1673:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1662:23:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1687:34:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":164,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1654:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":171,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1654:68:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":172,"nodeType":"ExpressionStatement","src":"1654:68:1"}]},"documentation":{"id":161,"nodeType":"StructuredDocumentation","src":"1532:62:1","text":" @dev Throws if the sender is not the owner."},"id":174,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1608:11:1","nodeType":"FunctionDefinition","parameters":{"id":162,"nodeType":"ParameterList","parameters":[],"src":"1619:2:1"},"returnParameters":{"id":163,"nodeType":"ParameterList","parameters":[],"src":"1644:0:1"},"scope":237,"src":"1599:130:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":187,"nodeType":"Block","src":"2125:47:1","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":183,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2162:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":182,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2154:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":181,"name":"address","nodeType":"ElementaryTypeName","src":"2154:7:1","typeDescriptions":{}}},"id":184,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2154:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":180,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"2135:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":185,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2135:30:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":186,"nodeType":"ExpressionStatement","src":"2135:30:1"}]},"documentation":{"id":175,"nodeType":"StructuredDocumentation","src":"1735:331:1","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."},"functionSelector":"715018a6","id":188,"implemented":true,"kind":"function","modifiers":[{"id":178,"kind":"modifierInvocation","modifierName":{"id":177,"name":"onlyOwner","nameLocations":["2115:9:1"],"nodeType":"IdentifierPath","referencedDeclaration":151,"src":"2115:9:1"},"nodeType":"ModifierInvocation","src":"2115:9:1"}],"name":"renounceOwnership","nameLocation":"2080:17:1","nodeType":"FunctionDefinition","parameters":{"id":176,"nodeType":"ParameterList","parameters":[],"src":"2097:2:1"},"returnParameters":{"id":179,"nodeType":"ParameterList","parameters":[],"src":"2125:0:1"},"scope":237,"src":"2071:101:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":210,"nodeType":"Block","src":"2391:128:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":197,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":191,"src":"2409:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2429:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":199,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2421:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":198,"name":"address","nodeType":"ElementaryTypeName","src":"2421:7:1","typeDescriptions":{}}},"id":201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2421:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2409:22:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":203,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2433:40:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":196,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2401:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":204,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2401:73:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":205,"nodeType":"ExpressionStatement","src":"2401:73:1"},{"expression":{"arguments":[{"id":207,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":191,"src":"2503:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":206,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"2484:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":208,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2484:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":209,"nodeType":"ExpressionStatement","src":"2484:28:1"}]},"documentation":{"id":189,"nodeType":"StructuredDocumentation","src":"2178:138:1","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":211,"implemented":true,"kind":"function","modifiers":[{"id":194,"kind":"modifierInvocation","modifierName":{"id":193,"name":"onlyOwner","nameLocations":["2381:9:1"],"nodeType":"IdentifierPath","referencedDeclaration":151,"src":"2381:9:1"},"nodeType":"ModifierInvocation","src":"2381:9:1"}],"name":"transferOwnership","nameLocation":"2330:17:1","nodeType":"FunctionDefinition","parameters":{"id":192,"nodeType":"ParameterList","parameters":[{"constant":false,"id":191,"mutability":"mutable","name":"newOwner","nameLocation":"2356:8:1","nodeType":"VariableDeclaration","scope":211,"src":"2348:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":190,"name":"address","nodeType":"ElementaryTypeName","src":"2348:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2347:18:1"},"returnParameters":{"id":195,"nodeType":"ParameterList","parameters":[],"src":"2391:0:1"},"scope":237,"src":"2321:198:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":230,"nodeType":"Block","src":"2736:124:1","statements":[{"assignments":[218],"declarations":[{"constant":false,"id":218,"mutability":"mutable","name":"oldOwner","nameLocation":"2754:8:1","nodeType":"VariableDeclaration","scope":230,"src":"2746:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":217,"name":"address","nodeType":"ElementaryTypeName","src":"2746:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":220,"initialValue":{"id":219,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":116,"src":"2765:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2746:25:1"},{"expression":{"id":223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":221,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":116,"src":"2781:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":222,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":214,"src":"2790:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2781:17:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":224,"nodeType":"ExpressionStatement","src":"2781:17:1"},{"eventCall":{"arguments":[{"id":226,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":218,"src":"2834:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":227,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":214,"src":"2844:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":225,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":122,"src":"2813:20:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":228,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2813:40:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":229,"nodeType":"EmitStatement","src":"2808:45:1"}]},"documentation":{"id":212,"nodeType":"StructuredDocumentation","src":"2525:143:1","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":231,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2682:18:1","nodeType":"FunctionDefinition","parameters":{"id":215,"nodeType":"ParameterList","parameters":[{"constant":false,"id":214,"mutability":"mutable","name":"newOwner","nameLocation":"2709:8:1","nodeType":"VariableDeclaration","scope":231,"src":"2701:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":213,"name":"address","nodeType":"ElementaryTypeName","src":"2701:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2700:18:1"},"returnParameters":{"id":216,"nodeType":"ParameterList","parameters":[],"src":"2736:0:1"},"scope":237,"src":"2673:187:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":232,"nodeType":"StructuredDocumentation","src":"2866:254:1","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":236,"mutability":"mutable","name":"__gap","nameLocation":"3145:5:1","nodeType":"VariableDeclaration","scope":237,"src":"3125:25:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":233,"name":"uint256","nodeType":"ElementaryTypeName","src":"3125:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":235,"length":{"hexValue":"3439","id":234,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3133:2:1","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3125:11:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":238,"src":"708:2445:1","usedErrors":[]}],"src":"102:3052:1"},"id":1},"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol","exportedSymbols":{"IERC1822ProxiableUpgradeable":[247]},"id":248,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":239,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"113:23:2"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1822ProxiableUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":240,"nodeType":"StructuredDocumentation","src":"138:203:2","text":" @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n proxy whose upgrades are fully controlled by the current implementation."},"fullyImplemented":false,"id":247,"linearizedBaseContracts":[247],"name":"IERC1822ProxiableUpgradeable","nameLocation":"352:28:2","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":241,"nodeType":"StructuredDocumentation","src":"387:438:2","text":" @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n address.\n IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n function revert if invoked through a proxy."},"functionSelector":"52d1902d","id":246,"implemented":false,"kind":"function","modifiers":[],"name":"proxiableUUID","nameLocation":"839:13:2","nodeType":"FunctionDefinition","parameters":{"id":242,"nodeType":"ParameterList","parameters":[],"src":"852:2:2"},"returnParameters":{"id":245,"nodeType":"ParameterList","parameters":[{"constant":false,"id":244,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":246,"src":"878:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":243,"name":"bytes32","nodeType":"ElementaryTypeName","src":"878:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"877:9:2"},"scope":247,"src":"830:57:2","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":248,"src":"342:547:2","usedErrors":[]}],"src":"113:777:2"},"id":2},"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2904],"ERC1967UpgradeUpgradeable":[616],"IBeaconUpgradeable":[626],"IERC1822ProxiableUpgradeable":[247],"Initializable":[795],"StorageSlotUpgradeable":[3006]},"id":617,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":249,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"116:23:3"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol","file":"../beacon/IBeaconUpgradeable.sol","id":250,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":617,"sourceUnit":627,"src":"141:42:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol","file":"../../interfaces/draft-IERC1822Upgradeable.sol","id":251,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":617,"sourceUnit":248,"src":"184:56:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":252,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":617,"sourceUnit":2905,"src":"241:44:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol","file":"../../utils/StorageSlotUpgradeable.sol","id":253,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":617,"sourceUnit":3007,"src":"286:48:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../utils/Initializable.sol","id":254,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":617,"sourceUnit":796,"src":"335:36:3","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":256,"name":"Initializable","nameLocations":["657:13:3"],"nodeType":"IdentifierPath","referencedDeclaration":795,"src":"657:13:3"},"id":257,"nodeType":"InheritanceSpecifier","src":"657:13:3"}],"canonicalName":"ERC1967UpgradeUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":255,"nodeType":"StructuredDocumentation","src":"373:236:3","text":" @dev This abstract contract provides getters and event emitting update functions for\n https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n _Available since v4.1._\n @custom:oz-upgrades-unsafe-allow delegatecall"},"fullyImplemented":true,"id":616,"linearizedBaseContracts":[616,795],"name":"ERC1967UpgradeUpgradeable","nameLocation":"628:25:3","nodeType":"ContractDefinition","nodes":[{"body":{"id":262,"nodeType":"Block","src":"736:7:3","statements":[]},"id":263,"implemented":true,"kind":"function","modifiers":[{"id":260,"kind":"modifierInvocation","modifierName":{"id":259,"name":"onlyInitializing","nameLocations":["719:16:3"],"nodeType":"IdentifierPath","referencedDeclaration":740,"src":"719:16:3"},"nodeType":"ModifierInvocation","src":"719:16:3"}],"name":"__ERC1967Upgrade_init","nameLocation":"686:21:3","nodeType":"FunctionDefinition","parameters":{"id":258,"nodeType":"ParameterList","parameters":[],"src":"707:2:3"},"returnParameters":{"id":261,"nodeType":"ParameterList","parameters":[],"src":"736:0:3"},"scope":616,"src":"677:66:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":268,"nodeType":"Block","src":"818:7:3","statements":[]},"id":269,"implemented":true,"kind":"function","modifiers":[{"id":266,"kind":"modifierInvocation","modifierName":{"id":265,"name":"onlyInitializing","nameLocations":["801:16:3"],"nodeType":"IdentifierPath","referencedDeclaration":740,"src":"801:16:3"},"nodeType":"ModifierInvocation","src":"801:16:3"}],"name":"__ERC1967Upgrade_init_unchained","nameLocation":"758:31:3","nodeType":"FunctionDefinition","parameters":{"id":264,"nodeType":"ParameterList","parameters":[],"src":"789:2:3"},"returnParameters":{"id":267,"nodeType":"ParameterList","parameters":[],"src":"818:0:3"},"scope":616,"src":"749:76:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"id":272,"mutability":"constant","name":"_ROLLBACK_SLOT","nameLocation":"934:14:3","nodeType":"VariableDeclaration","scope":616,"src":"909:108:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":270,"name":"bytes32","nodeType":"ElementaryTypeName","src":"909:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307834393130666466613136666564333236306564306537313437663763633664613131613630323038623562393430366431326136333536313466666439313433","id":271,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"951:66:3","typeDescriptions":{"typeIdentifier":"t_rational_33048860383849004559742813297059419343339852917517107368639918720169455489347_by_1","typeString":"int_const 3304...(69 digits omitted)...9347"},"value":"0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143"},"visibility":"private"},{"constant":true,"documentation":{"id":273,"nodeType":"StructuredDocumentation","src":"1024:214:3","text":" @dev Storage slot with the address of the current implementation.\n This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n validated in the constructor."},"id":276,"mutability":"constant","name":"_IMPLEMENTATION_SLOT","nameLocation":"1269:20:3","nodeType":"VariableDeclaration","scope":616,"src":"1243:115:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":274,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1243:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307833363038393461313362613161333231303636376338323834393264623938646361336532303736636333373335613932306133636135303564333832626263","id":275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1292:66:3","typeDescriptions":{"typeIdentifier":"t_rational_24440054405305269366569402256811496959409073762505157381672968839269610695612_by_1","typeString":"int_const 2444...(69 digits omitted)...5612"},"value":"0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc"},"visibility":"internal"},{"anonymous":false,"documentation":{"id":277,"nodeType":"StructuredDocumentation","src":"1365:68:3","text":" @dev Emitted when the implementation is upgraded."},"eventSelector":"bc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b","id":281,"name":"Upgraded","nameLocation":"1444:8:3","nodeType":"EventDefinition","parameters":{"id":280,"nodeType":"ParameterList","parameters":[{"constant":false,"id":279,"indexed":true,"mutability":"mutable","name":"implementation","nameLocation":"1469:14:3","nodeType":"VariableDeclaration","scope":281,"src":"1453:30:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":278,"name":"address","nodeType":"ElementaryTypeName","src":"1453:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1452:32:3"},"src":"1438:47:3"},{"body":{"id":293,"nodeType":"Block","src":"1625:89:3","statements":[{"expression":{"expression":{"arguments":[{"id":289,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":276,"src":"1680:20:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":287,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3006,"src":"1642:22:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$3006_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1665:14:3","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2972,"src":"1642:37:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2952_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":290,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1642:59:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2952_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":291,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1702:5:3","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2951,"src":"1642:65:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":286,"id":292,"nodeType":"Return","src":"1635:72:3"}]},"documentation":{"id":282,"nodeType":"StructuredDocumentation","src":"1491:67:3","text":" @dev Returns the current implementation address."},"id":294,"implemented":true,"kind":"function","modifiers":[],"name":"_getImplementation","nameLocation":"1572:18:3","nodeType":"FunctionDefinition","parameters":{"id":283,"nodeType":"ParameterList","parameters":[],"src":"1590:2:3"},"returnParameters":{"id":286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":285,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":294,"src":"1616:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":284,"name":"address","nodeType":"ElementaryTypeName","src":"1616:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1615:9:3"},"scope":616,"src":"1563:151:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":317,"nodeType":"Block","src":"1868:218:3","statements":[{"expression":{"arguments":[{"arguments":[{"id":303,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":297,"src":"1916:17:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":301,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2904,"src":"1886:18:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$2904_$","typeString":"type(library AddressUpgradeable)"}},"id":302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1905:10:3","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2638,"src":"1886:29:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":304,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1886:48:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e657720696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374","id":305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1936:47:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65","typeString":"literal_string \"ERC1967: new implementation is not a contract\""},"value":"ERC1967: new implementation is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65","typeString":"literal_string \"ERC1967: new implementation is not a contract\""}],"id":300,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1878:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":306,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1878:106:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":307,"nodeType":"ExpressionStatement","src":"1878:106:3"},{"expression":{"id":315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":311,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":276,"src":"2032:20:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":308,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3006,"src":"1994:22:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$3006_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2017:14:3","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2972,"src":"1994:37:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2952_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":312,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1994:59:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2952_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":313,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2054:5:3","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2951,"src":"1994:65:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":314,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":297,"src":"2062:17:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1994:85:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":316,"nodeType":"ExpressionStatement","src":"1994:85:3"}]},"documentation":{"id":295,"nodeType":"StructuredDocumentation","src":"1720:80:3","text":" @dev Stores a new address in the EIP1967 implementation slot."},"id":318,"implemented":true,"kind":"function","modifiers":[],"name":"_setImplementation","nameLocation":"1814:18:3","nodeType":"FunctionDefinition","parameters":{"id":298,"nodeType":"ParameterList","parameters":[{"constant":false,"id":297,"mutability":"mutable","name":"newImplementation","nameLocation":"1841:17:3","nodeType":"VariableDeclaration","scope":318,"src":"1833:25:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":296,"name":"address","nodeType":"ElementaryTypeName","src":"1833:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1832:27:3"},"returnParameters":{"id":299,"nodeType":"ParameterList","parameters":[],"src":"1868:0:3"},"scope":616,"src":"1805:281:3","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":332,"nodeType":"Block","src":"2248:96:3","statements":[{"expression":{"arguments":[{"id":325,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":321,"src":"2277:17:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":324,"name":"_setImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":318,"src":"2258:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":326,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2258:37:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":327,"nodeType":"ExpressionStatement","src":"2258:37:3"},{"eventCall":{"arguments":[{"id":329,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":321,"src":"2319:17:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":328,"name":"Upgraded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":281,"src":"2310:8:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":330,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2310:27:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":331,"nodeType":"EmitStatement","src":"2305:32:3"}]},"documentation":{"id":319,"nodeType":"StructuredDocumentation","src":"2092:95:3","text":" @dev Perform implementation upgrade\n Emits an {Upgraded} event."},"id":333,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeTo","nameLocation":"2201:10:3","nodeType":"FunctionDefinition","parameters":{"id":322,"nodeType":"ParameterList","parameters":[{"constant":false,"id":321,"mutability":"mutable","name":"newImplementation","nameLocation":"2220:17:3","nodeType":"VariableDeclaration","scope":333,"src":"2212:25:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":320,"name":"address","nodeType":"ElementaryTypeName","src":"2212:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2211:27:3"},"returnParameters":{"id":323,"nodeType":"ParameterList","parameters":[],"src":"2248:0:3"},"scope":616,"src":"2192:152:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":360,"nodeType":"Block","src":"2606:160:3","statements":[{"expression":{"arguments":[{"id":344,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":336,"src":"2627:17:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":343,"name":"_upgradeTo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":333,"src":"2616:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":345,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2616:29:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":346,"nodeType":"ExpressionStatement","src":"2616:29:3"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":347,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":338,"src":"2659:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2664:6:3","memberName":"length","nodeType":"MemberAccess","src":"2659:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2673:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2659:15:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":351,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":340,"src":"2678:9:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2659:28:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":359,"nodeType":"IfStatement","src":"2655:105:3","trueBody":{"id":358,"nodeType":"Block","src":"2689:71:3","statements":[{"expression":{"arguments":[{"id":354,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":336,"src":"2725:17:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":355,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":338,"src":"2744:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":353,"name":"_functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":610,"src":"2703:21:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":356,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2703:46:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":357,"nodeType":"ExpressionStatement","src":"2703:46:3"}]}}]},"documentation":{"id":334,"nodeType":"StructuredDocumentation","src":"2350:123:3","text":" @dev Perform implementation upgrade with additional setup call.\n Emits an {Upgraded} event."},"id":361,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeToAndCall","nameLocation":"2487:17:3","nodeType":"FunctionDefinition","parameters":{"id":341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":336,"mutability":"mutable","name":"newImplementation","nameLocation":"2522:17:3","nodeType":"VariableDeclaration","scope":361,"src":"2514:25:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":335,"name":"address","nodeType":"ElementaryTypeName","src":"2514:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":338,"mutability":"mutable","name":"data","nameLocation":"2562:4:3","nodeType":"VariableDeclaration","scope":361,"src":"2549:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":337,"name":"bytes","nodeType":"ElementaryTypeName","src":"2549:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":340,"mutability":"mutable","name":"forceCall","nameLocation":"2581:9:3","nodeType":"VariableDeclaration","scope":361,"src":"2576:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":339,"name":"bool","nodeType":"ElementaryTypeName","src":"2576:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2504:92:3"},"returnParameters":{"id":342,"nodeType":"ParameterList","parameters":[],"src":"2606:0:3"},"scope":616,"src":"2478:288:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":413,"nodeType":"Block","src":"3070:842:3","statements":[{"condition":{"expression":{"arguments":[{"id":373,"name":"_ROLLBACK_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":272,"src":"3422:14:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":371,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3006,"src":"3384:22:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$3006_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3407:14:3","memberName":"getBooleanSlot","nodeType":"MemberAccess","referencedDeclaration":2983,"src":"3384:37:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_BooleanSlot_$2955_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.BooleanSlot storage pointer)"}},"id":374,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3384:53:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$2955_storage_ptr","typeString":"struct StorageSlotUpgradeable.BooleanSlot storage pointer"}},"id":375,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3438:5:3","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2954,"src":"3384:59:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":411,"nodeType":"Block","src":"3513:393:3","statements":[{"clauses":[{"block":{"id":396,"nodeType":"Block","src":"3618:115:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":390,"name":"slot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":387,"src":"3644:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":391,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":276,"src":"3652:20:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3644:28:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524331393637557067726164653a20756e737570706f727465642070726f786961626c6555554944","id":393,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3674:43:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c","typeString":"literal_string \"ERC1967Upgrade: unsupported proxiableUUID\""},"value":"ERC1967Upgrade: unsupported proxiableUUID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c","typeString":"literal_string \"ERC1967Upgrade: unsupported proxiableUUID\""}],"id":389,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3636:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":394,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3636:82:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":395,"nodeType":"ExpressionStatement","src":"3636:82:3"}]},"errorName":"","id":397,"nodeType":"TryCatchClause","parameters":{"id":388,"nodeType":"ParameterList","parameters":[{"constant":false,"id":387,"mutability":"mutable","name":"slot","nameLocation":"3612:4:3","nodeType":"VariableDeclaration","scope":397,"src":"3604:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":386,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3604:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3603:14:3"},"src":"3595:138:3"},{"block":{"id":402,"nodeType":"Block","src":"3740:89:3","statements":[{"expression":{"arguments":[{"hexValue":"45524331393637557067726164653a206e657720696d706c656d656e746174696f6e206973206e6f742055555053","id":399,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3765:48:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24","typeString":"literal_string \"ERC1967Upgrade: new implementation is not UUPS\""},"value":"ERC1967Upgrade: new implementation is not UUPS"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24","typeString":"literal_string \"ERC1967Upgrade: new implementation is not UUPS\""}],"id":398,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"3758:6:3","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":400,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3758:56:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":401,"nodeType":"ExpressionStatement","src":"3758:56:3"}]},"errorName":"","id":403,"nodeType":"TryCatchClause","src":"3734:95:3"}],"externalCall":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":382,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":364,"src":"3560:17:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":381,"name":"IERC1822ProxiableUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":247,"src":"3531:28:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1822ProxiableUpgradeable_$247_$","typeString":"type(contract IERC1822ProxiableUpgradeable)"}},"id":383,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3531:47:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1822ProxiableUpgradeable_$247","typeString":"contract IERC1822ProxiableUpgradeable"}},"id":384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3579:13:3","memberName":"proxiableUUID","nodeType":"MemberAccess","referencedDeclaration":246,"src":"3531:61:3","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_bytes32_$","typeString":"function () view external returns (bytes32)"}},"id":385,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3531:63:3","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":404,"nodeType":"TryStatement","src":"3527:302:3"},{"expression":{"arguments":[{"id":406,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":364,"src":"3860:17:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":407,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":366,"src":"3879:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":408,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":368,"src":"3885:9:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":405,"name":"_upgradeToAndCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":361,"src":"3842:17:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":409,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3842:53:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":410,"nodeType":"ExpressionStatement","src":"3842:53:3"}]},"id":412,"nodeType":"IfStatement","src":"3380:526:3","trueBody":{"id":380,"nodeType":"Block","src":"3445:62:3","statements":[{"expression":{"arguments":[{"id":377,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":364,"src":"3478:17:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":376,"name":"_setImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":318,"src":"3459:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":378,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3459:37:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":379,"nodeType":"ExpressionStatement","src":"3459:37:3"}]}}]},"documentation":{"id":362,"nodeType":"StructuredDocumentation","src":"2772:161:3","text":" @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n Emits an {Upgraded} event."},"id":414,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeToAndCallUUPS","nameLocation":"2947:21:3","nodeType":"FunctionDefinition","parameters":{"id":369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":364,"mutability":"mutable","name":"newImplementation","nameLocation":"2986:17:3","nodeType":"VariableDeclaration","scope":414,"src":"2978:25:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":363,"name":"address","nodeType":"ElementaryTypeName","src":"2978:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":366,"mutability":"mutable","name":"data","nameLocation":"3026:4:3","nodeType":"VariableDeclaration","scope":414,"src":"3013:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":365,"name":"bytes","nodeType":"ElementaryTypeName","src":"3013:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":368,"mutability":"mutable","name":"forceCall","nameLocation":"3045:9:3","nodeType":"VariableDeclaration","scope":414,"src":"3040:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":367,"name":"bool","nodeType":"ElementaryTypeName","src":"3040:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2968:92:3"},"returnParameters":{"id":370,"nodeType":"ParameterList","parameters":[],"src":"3070:0:3"},"scope":616,"src":"2938:974:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"documentation":{"id":415,"nodeType":"StructuredDocumentation","src":"3918:189:3","text":" @dev Storage slot with the admin of the contract.\n This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n validated in the constructor."},"id":418,"mutability":"constant","name":"_ADMIN_SLOT","nameLocation":"4138:11:3","nodeType":"VariableDeclaration","scope":616,"src":"4112:106:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":416,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4112:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307862353331323736383461353638623331373361653133623966386136303136653234336536336236653865653131373864366137313738353062356436313033","id":417,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4152:66:3","typeDescriptions":{"typeIdentifier":"t_rational_81955473079516046949633743016697847541294818689821282749996681496272635257091_by_1","typeString":"int_const 8195...(69 digits omitted)...7091"},"value":"0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103"},"visibility":"internal"},{"anonymous":false,"documentation":{"id":419,"nodeType":"StructuredDocumentation","src":"4225:67:3","text":" @dev Emitted when the admin account has changed."},"eventSelector":"7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f","id":425,"name":"AdminChanged","nameLocation":"4303:12:3","nodeType":"EventDefinition","parameters":{"id":424,"nodeType":"ParameterList","parameters":[{"constant":false,"id":421,"indexed":false,"mutability":"mutable","name":"previousAdmin","nameLocation":"4324:13:3","nodeType":"VariableDeclaration","scope":425,"src":"4316:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":420,"name":"address","nodeType":"ElementaryTypeName","src":"4316:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":423,"indexed":false,"mutability":"mutable","name":"newAdmin","nameLocation":"4347:8:3","nodeType":"VariableDeclaration","scope":425,"src":"4339:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":422,"name":"address","nodeType":"ElementaryTypeName","src":"4339:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4315:41:3"},"src":"4297:60:3"},{"body":{"id":437,"nodeType":"Block","src":"4471:80:3","statements":[{"expression":{"expression":{"arguments":[{"id":433,"name":"_ADMIN_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"4526:11:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":431,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3006,"src":"4488:22:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$3006_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4511:14:3","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2972,"src":"4488:37:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2952_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":434,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4488:50:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2952_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":435,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4539:5:3","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2951,"src":"4488:56:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":430,"id":436,"nodeType":"Return","src":"4481:63:3"}]},"documentation":{"id":426,"nodeType":"StructuredDocumentation","src":"4363:50:3","text":" @dev Returns the current admin."},"id":438,"implemented":true,"kind":"function","modifiers":[],"name":"_getAdmin","nameLocation":"4427:9:3","nodeType":"FunctionDefinition","parameters":{"id":427,"nodeType":"ParameterList","parameters":[],"src":"4436:2:3"},"returnParameters":{"id":430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":429,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":438,"src":"4462:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":428,"name":"address","nodeType":"ElementaryTypeName","src":"4462:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4461:9:3"},"scope":616,"src":"4418:133:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":463,"nodeType":"Block","src":"4678:167:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":445,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":441,"src":"4696:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":448,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4716:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":447,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4708:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":446,"name":"address","nodeType":"ElementaryTypeName","src":"4708:7:3","typeDescriptions":{}}},"id":449,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4708:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4696:22:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e65772061646d696e20697320746865207a65726f2061646472657373","id":451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4720:40:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5","typeString":"literal_string \"ERC1967: new admin is the zero address\""},"value":"ERC1967: new admin is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5","typeString":"literal_string \"ERC1967: new admin is the zero address\""}],"id":444,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4688:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":452,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4688:73:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":453,"nodeType":"ExpressionStatement","src":"4688:73:3"},{"expression":{"id":461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":457,"name":"_ADMIN_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"4809:11:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":454,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3006,"src":"4771:22:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$3006_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4794:14:3","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2972,"src":"4771:37:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2952_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":458,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4771:50:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2952_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":459,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4822:5:3","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2951,"src":"4771:56:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":460,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":441,"src":"4830:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4771:67:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":462,"nodeType":"ExpressionStatement","src":"4771:67:3"}]},"documentation":{"id":439,"nodeType":"StructuredDocumentation","src":"4557:71:3","text":" @dev Stores a new address in the EIP1967 admin slot."},"id":464,"implemented":true,"kind":"function","modifiers":[],"name":"_setAdmin","nameLocation":"4642:9:3","nodeType":"FunctionDefinition","parameters":{"id":442,"nodeType":"ParameterList","parameters":[{"constant":false,"id":441,"mutability":"mutable","name":"newAdmin","nameLocation":"4660:8:3","nodeType":"VariableDeclaration","scope":464,"src":"4652:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":440,"name":"address","nodeType":"ElementaryTypeName","src":"4652:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4651:18:3"},"returnParameters":{"id":443,"nodeType":"ParameterList","parameters":[],"src":"4678:0:3"},"scope":616,"src":"4633:212:3","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":480,"nodeType":"Block","src":"5005:86:3","statements":[{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":471,"name":"_getAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":438,"src":"5033:9:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":472,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5033:11:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":473,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":467,"src":"5046:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":470,"name":"AdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":425,"src":"5020:12:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":474,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5020:35:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":475,"nodeType":"EmitStatement","src":"5015:40:3"},{"expression":{"arguments":[{"id":477,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":467,"src":"5075:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":476,"name":"_setAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"5065:9:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":478,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5065:19:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":479,"nodeType":"ExpressionStatement","src":"5065:19:3"}]},"documentation":{"id":465,"nodeType":"StructuredDocumentation","src":"4851:100:3","text":" @dev Changes the admin of the proxy.\n Emits an {AdminChanged} event."},"id":481,"implemented":true,"kind":"function","modifiers":[],"name":"_changeAdmin","nameLocation":"4965:12:3","nodeType":"FunctionDefinition","parameters":{"id":468,"nodeType":"ParameterList","parameters":[{"constant":false,"id":467,"mutability":"mutable","name":"newAdmin","nameLocation":"4986:8:3","nodeType":"VariableDeclaration","scope":481,"src":"4978:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":466,"name":"address","nodeType":"ElementaryTypeName","src":"4978:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4977:18:3"},"returnParameters":{"id":469,"nodeType":"ParameterList","parameters":[],"src":"5005:0:3"},"scope":616,"src":"4956:135:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"documentation":{"id":482,"nodeType":"StructuredDocumentation","src":"5097:232:3","text":" @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."},"id":485,"mutability":"constant","name":"_BEACON_SLOT","nameLocation":"5360:12:3","nodeType":"VariableDeclaration","scope":616,"src":"5334:107:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":483,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5334:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307861336630616437346535343233616562666438306433656634333436353738333335613961373261656165653539666636636233353832623335313333643530","id":484,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5375:66:3","typeDescriptions":{"typeIdentifier":"t_rational_74152234768234802001998023604048924213078445070507226371336425913862612794704_by_1","typeString":"int_const 7415...(69 digits omitted)...4704"},"value":"0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50"},"visibility":"internal"},{"anonymous":false,"documentation":{"id":486,"nodeType":"StructuredDocumentation","src":"5448:60:3","text":" @dev Emitted when the beacon is upgraded."},"eventSelector":"1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e","id":490,"name":"BeaconUpgraded","nameLocation":"5519:14:3","nodeType":"EventDefinition","parameters":{"id":489,"nodeType":"ParameterList","parameters":[{"constant":false,"id":488,"indexed":true,"mutability":"mutable","name":"beacon","nameLocation":"5550:6:3","nodeType":"VariableDeclaration","scope":490,"src":"5534:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":487,"name":"address","nodeType":"ElementaryTypeName","src":"5534:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5533:24:3"},"src":"5513:45:3"},{"body":{"id":502,"nodeType":"Block","src":"5674:81:3","statements":[{"expression":{"expression":{"arguments":[{"id":498,"name":"_BEACON_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":485,"src":"5729:12:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":496,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3006,"src":"5691:22:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$3006_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5714:14:3","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2972,"src":"5691:37:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2952_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":499,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5691:51:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2952_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":500,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5743:5:3","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2951,"src":"5691:57:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":495,"id":501,"nodeType":"Return","src":"5684:64:3"}]},"documentation":{"id":491,"nodeType":"StructuredDocumentation","src":"5564:51:3","text":" @dev Returns the current beacon."},"id":503,"implemented":true,"kind":"function","modifiers":[],"name":"_getBeacon","nameLocation":"5629:10:3","nodeType":"FunctionDefinition","parameters":{"id":492,"nodeType":"ParameterList","parameters":[],"src":"5639:2:3"},"returnParameters":{"id":495,"nodeType":"ParameterList","parameters":[{"constant":false,"id":494,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":503,"src":"5665:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":493,"name":"address","nodeType":"ElementaryTypeName","src":"5665:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5664:9:3"},"scope":616,"src":"5620:135:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":538,"nodeType":"Block","src":"5884:368:3","statements":[{"expression":{"arguments":[{"arguments":[{"id":512,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":506,"src":"5932:9:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":510,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2904,"src":"5902:18:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$2904_$","typeString":"type(library AddressUpgradeable)"}},"id":511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5921:10:3","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2638,"src":"5902:29:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":513,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5902:40:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e657720626561636f6e206973206e6f74206120636f6e7472616374","id":514,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5944:39:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470","typeString":"literal_string \"ERC1967: new beacon is not a contract\""},"value":"ERC1967: new beacon is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470","typeString":"literal_string \"ERC1967: new beacon is not a contract\""}],"id":509,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5894:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":515,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5894:90:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":516,"nodeType":"ExpressionStatement","src":"5894:90:3"},{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":521,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":506,"src":"6064:9:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":520,"name":"IBeaconUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":626,"src":"6045:18:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBeaconUpgradeable_$626_$","typeString":"type(contract IBeaconUpgradeable)"}},"id":522,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6045:29:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBeaconUpgradeable_$626","typeString":"contract IBeaconUpgradeable"}},"id":523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6075:14:3","memberName":"implementation","nodeType":"MemberAccess","referencedDeclaration":625,"src":"6045:44:3","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":524,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6045:46:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":518,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2904,"src":"6015:18:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$2904_$","typeString":"type(library AddressUpgradeable)"}},"id":519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6034:10:3","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2638,"src":"6015:29:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":525,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6015:77:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a20626561636f6e20696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374","id":526,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6106:50:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8","typeString":"literal_string \"ERC1967: beacon implementation is not a contract\""},"value":"ERC1967: beacon implementation is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8","typeString":"literal_string \"ERC1967: beacon implementation is not a contract\""}],"id":517,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5994:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5994:172:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":528,"nodeType":"ExpressionStatement","src":"5994:172:3"},{"expression":{"id":536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":532,"name":"_BEACON_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":485,"src":"6214:12:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":529,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3006,"src":"6176:22:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$3006_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6199:14:3","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2972,"src":"6176:37:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2952_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":533,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6176:51:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2952_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":534,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6228:5:3","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2951,"src":"6176:57:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":535,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":506,"src":"6236:9:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6176:69:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":537,"nodeType":"ExpressionStatement","src":"6176:69:3"}]},"documentation":{"id":504,"nodeType":"StructuredDocumentation","src":"5761:71:3","text":" @dev Stores a new beacon in the EIP1967 beacon slot."},"id":539,"implemented":true,"kind":"function","modifiers":[],"name":"_setBeacon","nameLocation":"5846:10:3","nodeType":"FunctionDefinition","parameters":{"id":507,"nodeType":"ParameterList","parameters":[{"constant":false,"id":506,"mutability":"mutable","name":"newBeacon","nameLocation":"5865:9:3","nodeType":"VariableDeclaration","scope":539,"src":"5857:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":505,"name":"address","nodeType":"ElementaryTypeName","src":"5857:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5856:19:3"},"returnParameters":{"id":508,"nodeType":"ParameterList","parameters":[],"src":"5884:0:3"},"scope":616,"src":"5837:415:3","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":574,"nodeType":"Block","src":"6681:221:3","statements":[{"expression":{"arguments":[{"id":550,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":542,"src":"6702:9:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":549,"name":"_setBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":539,"src":"6691:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6691:21:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":552,"nodeType":"ExpressionStatement","src":"6691:21:3"},{"eventCall":{"arguments":[{"id":554,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":542,"src":"6742:9:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":553,"name":"BeaconUpgraded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"6727:14:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":555,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6727:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":556,"nodeType":"EmitStatement","src":"6722:30:3"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":560,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":557,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":544,"src":"6766:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6771:6:3","memberName":"length","nodeType":"MemberAccess","src":"6766:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":559,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6780:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6766:15:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":561,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":546,"src":"6785:9:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6766:28:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":573,"nodeType":"IfStatement","src":"6762:134:3","trueBody":{"id":572,"nodeType":"Block","src":"6796:100:3","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":565,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":542,"src":"6851:9:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":564,"name":"IBeaconUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":626,"src":"6832:18:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBeaconUpgradeable_$626_$","typeString":"type(contract IBeaconUpgradeable)"}},"id":566,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6832:29:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBeaconUpgradeable_$626","typeString":"contract IBeaconUpgradeable"}},"id":567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6862:14:3","memberName":"implementation","nodeType":"MemberAccess","referencedDeclaration":625,"src":"6832:44:3","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":568,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6832:46:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":569,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":544,"src":"6880:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":563,"name":"_functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":610,"src":"6810:21:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":570,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6810:75:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":571,"nodeType":"ExpressionStatement","src":"6810:75:3"}]}}]},"documentation":{"id":540,"nodeType":"StructuredDocumentation","src":"6258:292:3","text":" @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n Emits a {BeaconUpgraded} event."},"id":575,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeBeaconToAndCall","nameLocation":"6564:23:3","nodeType":"FunctionDefinition","parameters":{"id":547,"nodeType":"ParameterList","parameters":[{"constant":false,"id":542,"mutability":"mutable","name":"newBeacon","nameLocation":"6605:9:3","nodeType":"VariableDeclaration","scope":575,"src":"6597:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":541,"name":"address","nodeType":"ElementaryTypeName","src":"6597:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":544,"mutability":"mutable","name":"data","nameLocation":"6637:4:3","nodeType":"VariableDeclaration","scope":575,"src":"6624:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":543,"name":"bytes","nodeType":"ElementaryTypeName","src":"6624:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":546,"mutability":"mutable","name":"forceCall","nameLocation":"6656:9:3","nodeType":"VariableDeclaration","scope":575,"src":"6651:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":545,"name":"bool","nodeType":"ElementaryTypeName","src":"6651:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6587:84:3"},"returnParameters":{"id":548,"nodeType":"ParameterList","parameters":[],"src":"6681:0:3"},"scope":616,"src":"6555:347:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":609,"nodeType":"Block","src":"7185:358:3","statements":[{"expression":{"arguments":[{"arguments":[{"id":588,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":578,"src":"7233:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":586,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2904,"src":"7203:18:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$2904_$","typeString":"type(library AddressUpgradeable)"}},"id":587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7222:10:3","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2638,"src":"7203:29:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":589,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7203:37:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374","id":590,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7242:40:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520","typeString":"literal_string \"Address: delegate call to non-contract\""},"value":"Address: delegate call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520","typeString":"literal_string \"Address: delegate call to non-contract\""}],"id":585,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7195:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":591,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7195:88:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":592,"nodeType":"ExpressionStatement","src":"7195:88:3"},{"assignments":[594,596],"declarations":[{"constant":false,"id":594,"mutability":"mutable","name":"success","nameLocation":"7359:7:3","nodeType":"VariableDeclaration","scope":609,"src":"7354:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":593,"name":"bool","nodeType":"ElementaryTypeName","src":"7354:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":596,"mutability":"mutable","name":"returndata","nameLocation":"7381:10:3","nodeType":"VariableDeclaration","scope":609,"src":"7368:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":595,"name":"bytes","nodeType":"ElementaryTypeName","src":"7368:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":601,"initialValue":{"arguments":[{"id":599,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"7415:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":597,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":578,"src":"7395:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7402:12:3","memberName":"delegatecall","nodeType":"MemberAccess","src":"7395:19:3","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":600,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7395:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7353:67:3"},{"expression":{"arguments":[{"id":604,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"7473:7:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":605,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":596,"src":"7482:10:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":606,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7494:41:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"expression":{"id":602,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2904,"src":"7437:18:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$2904_$","typeString":"type(library AddressUpgradeable)"}},"id":603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7456:16:3","memberName":"verifyCallResult","nodeType":"MemberAccess","referencedDeclaration":2883,"src":"7437:35:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bool,bytes memory,string memory) pure returns (bytes memory)"}},"id":607,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7437:99:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":584,"id":608,"nodeType":"Return","src":"7430:106:3"}]},"documentation":{"id":576,"nodeType":"StructuredDocumentation","src":"6908:175:3","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":610,"implemented":true,"kind":"function","modifiers":[],"name":"_functionDelegateCall","nameLocation":"7097:21:3","nodeType":"FunctionDefinition","parameters":{"id":581,"nodeType":"ParameterList","parameters":[{"constant":false,"id":578,"mutability":"mutable","name":"target","nameLocation":"7127:6:3","nodeType":"VariableDeclaration","scope":610,"src":"7119:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":577,"name":"address","nodeType":"ElementaryTypeName","src":"7119:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":580,"mutability":"mutable","name":"data","nameLocation":"7148:4:3","nodeType":"VariableDeclaration","scope":610,"src":"7135:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":579,"name":"bytes","nodeType":"ElementaryTypeName","src":"7135:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7118:35:3"},"returnParameters":{"id":584,"nodeType":"ParameterList","parameters":[{"constant":false,"id":583,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":610,"src":"7171:12:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":582,"name":"bytes","nodeType":"ElementaryTypeName","src":"7171:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7170:14:3"},"scope":616,"src":"7088:455:3","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"constant":false,"documentation":{"id":611,"nodeType":"StructuredDocumentation","src":"7549:254:3","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":615,"mutability":"mutable","name":"__gap","nameLocation":"7828:5:3","nodeType":"VariableDeclaration","scope":616,"src":"7808:25:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":612,"name":"uint256","nodeType":"ElementaryTypeName","src":"7808:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":614,"length":{"hexValue":"3530","id":613,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7816:2:3","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"7808:11:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":617,"src":"610:7226:3","usedErrors":[]}],"src":"116:7721:3"},"id":3},"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol","exportedSymbols":{"IBeaconUpgradeable":[626]},"id":627,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":618,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"93:23:4"},{"abstract":false,"baseContracts":[],"canonicalName":"IBeaconUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":619,"nodeType":"StructuredDocumentation","src":"118:79:4","text":" @dev This is the interface that {BeaconProxy} expects of its beacon."},"fullyImplemented":false,"id":626,"linearizedBaseContracts":[626],"name":"IBeaconUpgradeable","nameLocation":"208:18:4","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":620,"nodeType":"StructuredDocumentation","src":"233:162:4","text":" @dev Must return an address that can be used as a delegate call target.\n {BeaconProxy} will check that this address is a contract."},"functionSelector":"5c60da1b","id":625,"implemented":false,"kind":"function","modifiers":[],"name":"implementation","nameLocation":"409:14:4","nodeType":"FunctionDefinition","parameters":{"id":621,"nodeType":"ParameterList","parameters":[],"src":"423:2:4"},"returnParameters":{"id":624,"nodeType":"ParameterList","parameters":[{"constant":false,"id":623,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":625,"src":"449:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":622,"name":"address","nodeType":"ElementaryTypeName","src":"449:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"448:9:4"},"scope":626,"src":"400:58:4","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":627,"src":"198:262:4","usedErrors":[]}],"src":"93:368:4"},"id":4},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","exportedSymbols":{"AddressUpgradeable":[2904],"Initializable":[795]},"id":796,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":628,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"113:23:5"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":629,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":796,"sourceUnit":2905,"src":"138:44:5","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"Initializable","contractDependencies":[],"contractKind":"contract","documentation":{"id":630,"nodeType":"StructuredDocumentation","src":"184:2198:5","text":" @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="},"fullyImplemented":true,"id":795,"linearizedBaseContracts":[795],"name":"Initializable","nameLocation":"2401:13:5","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":631,"nodeType":"StructuredDocumentation","src":"2421:109:5","text":" @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"},"id":633,"mutability":"mutable","name":"_initialized","nameLocation":"2549:12:5","nodeType":"VariableDeclaration","scope":795,"src":"2535:26:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":632,"name":"uint8","nodeType":"ElementaryTypeName","src":"2535:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"private"},{"constant":false,"documentation":{"id":634,"nodeType":"StructuredDocumentation","src":"2568:91:5","text":" @dev Indicates that the contract is in the process of being initialized."},"id":636,"mutability":"mutable","name":"_initializing","nameLocation":"2677:13:5","nodeType":"VariableDeclaration","scope":795,"src":"2664:26:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":635,"name":"bool","nodeType":"ElementaryTypeName","src":"2664:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"anonymous":false,"documentation":{"id":637,"nodeType":"StructuredDocumentation","src":"2697:90:5","text":" @dev Triggered when the contract has been initialized or reinitialized."},"eventSelector":"7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498","id":641,"name":"Initialized","nameLocation":"2798:11:5","nodeType":"EventDefinition","parameters":{"id":640,"nodeType":"ParameterList","parameters":[{"constant":false,"id":639,"indexed":false,"mutability":"mutable","name":"version","nameLocation":"2816:7:5","nodeType":"VariableDeclaration","scope":641,"src":"2810:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":638,"name":"uint8","nodeType":"ElementaryTypeName","src":"2810:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2809:15:5"},"src":"2792:33:5"},{"body":{"id":696,"nodeType":"Block","src":"3258:483:5","statements":[{"assignments":[645],"declarations":[{"constant":false,"id":645,"mutability":"mutable","name":"isTopLevelCall","nameLocation":"3273:14:5","nodeType":"VariableDeclaration","scope":696,"src":"3268:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":644,"name":"bool","nodeType":"ElementaryTypeName","src":"3268:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":648,"initialValue":{"id":647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3290:14:5","subExpression":{"id":646,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":636,"src":"3291:13:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3268:36:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":650,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":645,"src":"3336:14:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":651,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"3354:12:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"31","id":652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3369:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3354:16:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3336:34:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":655,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3335:36:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3376:45:5","subExpression":{"arguments":[{"arguments":[{"id":660,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3415:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_Initializable_$795","typeString":"contract Initializable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Initializable_$795","typeString":"contract Initializable"}],"id":659,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3407:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":658,"name":"address","nodeType":"ElementaryTypeName","src":"3407:7:5","typeDescriptions":{}}},"id":661,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3407:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":656,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2904,"src":"3377:18:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$2904_$","typeString":"type(library AddressUpgradeable)"}},"id":657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3396:10:5","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2638,"src":"3377:29:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":662,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3377:44:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":664,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"3425:12:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3441:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3425:17:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3376:66:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":668,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3375:68:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3335:108:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":670,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3457:48:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":649,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3314:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":671,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3314:201:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":672,"nodeType":"ExpressionStatement","src":"3314:201:5"},{"expression":{"id":675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":673,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"3525:12:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":674,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3540:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3525:16:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":676,"nodeType":"ExpressionStatement","src":"3525:16:5"},{"condition":{"id":677,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":645,"src":"3555:14:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":683,"nodeType":"IfStatement","src":"3551:65:5","trueBody":{"id":682,"nodeType":"Block","src":"3571:45:5","statements":[{"expression":{"id":680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":678,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":636,"src":"3585:13:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":679,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3601:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3585:20:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":681,"nodeType":"ExpressionStatement","src":"3585:20:5"}]}},{"id":684,"nodeType":"PlaceholderStatement","src":"3625:1:5"},{"condition":{"id":685,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":645,"src":"3640:14:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":695,"nodeType":"IfStatement","src":"3636:99:5","trueBody":{"id":694,"nodeType":"Block","src":"3656:79:5","statements":[{"expression":{"id":688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":686,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":636,"src":"3670:13:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":687,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3686:5:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3670:21:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":689,"nodeType":"ExpressionStatement","src":"3670:21:5"},{"eventCall":{"arguments":[{"hexValue":"31","id":691,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3722:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":690,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":641,"src":"3710:11:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3710:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":693,"nodeType":"EmitStatement","src":"3705:19:5"}]}}]},"documentation":{"id":642,"nodeType":"StructuredDocumentation","src":"2831:399:5","text":" @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n constructor.\n Emits an {Initialized} event."},"id":697,"name":"initializer","nameLocation":"3244:11:5","nodeType":"ModifierDefinition","parameters":{"id":643,"nodeType":"ParameterList","parameters":[],"src":"3255:2:5"},"src":"3235:506:5","virtual":false,"visibility":"internal"},{"body":{"id":729,"nodeType":"Block","src":"4852:255:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4870:14:5","subExpression":{"id":703,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":636,"src":"4871:13:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":707,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":705,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"4888:12:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":706,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":700,"src":"4903:7:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4888:22:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4870:40:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":709,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4912:48:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":702,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4862:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":710,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4862:99:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":711,"nodeType":"ExpressionStatement","src":"4862:99:5"},{"expression":{"id":714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":712,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"4971:12:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":713,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":700,"src":"4986:7:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4971:22:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":715,"nodeType":"ExpressionStatement","src":"4971:22:5"},{"expression":{"id":718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":716,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":636,"src":"5003:13:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":717,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5019:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5003:20:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":719,"nodeType":"ExpressionStatement","src":"5003:20:5"},{"id":720,"nodeType":"PlaceholderStatement","src":"5033:1:5"},{"expression":{"id":723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":721,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":636,"src":"5044:13:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":722,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5060:5:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"5044:21:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":724,"nodeType":"ExpressionStatement","src":"5044:21:5"},{"eventCall":{"arguments":[{"id":726,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":700,"src":"5092:7:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":725,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":641,"src":"5080:11:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":727,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5080:20:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":728,"nodeType":"EmitStatement","src":"5075:25:5"}]},"documentation":{"id":698,"nodeType":"StructuredDocumentation","src":"3747:1062:5","text":" @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: setting the version to 255 will prevent any future reinitialization.\n Emits an {Initialized} event."},"id":730,"name":"reinitializer","nameLocation":"4823:13:5","nodeType":"ModifierDefinition","parameters":{"id":701,"nodeType":"ParameterList","parameters":[{"constant":false,"id":700,"mutability":"mutable","name":"version","nameLocation":"4843:7:5","nodeType":"VariableDeclaration","scope":730,"src":"4837:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":699,"name":"uint8","nodeType":"ElementaryTypeName","src":"4837:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"4836:15:5"},"src":"4814:293:5","virtual":false,"visibility":"internal"},{"body":{"id":739,"nodeType":"Block","src":"5345:97:5","statements":[{"expression":{"arguments":[{"id":734,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":636,"src":"5363:13:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67","id":735,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5378:45:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""},"value":"Initializable: contract is not initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""}],"id":733,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5355:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":736,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5355:69:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":737,"nodeType":"ExpressionStatement","src":"5355:69:5"},{"id":738,"nodeType":"PlaceholderStatement","src":"5434:1:5"}]},"documentation":{"id":731,"nodeType":"StructuredDocumentation","src":"5113:199:5","text":" @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."},"id":740,"name":"onlyInitializing","nameLocation":"5326:16:5","nodeType":"ModifierDefinition","parameters":{"id":732,"nodeType":"ParameterList","parameters":[],"src":"5342:2:5"},"src":"5317:125:5","virtual":false,"visibility":"internal"},{"body":{"id":775,"nodeType":"Block","src":"5977:230:5","statements":[{"expression":{"arguments":[{"id":746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5995:14:5","subExpression":{"id":745,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":636,"src":"5996:13:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67","id":747,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6011:41:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""},"value":"Initializable: contract is initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""}],"id":744,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5987:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":748,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5987:66:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":749,"nodeType":"ExpressionStatement","src":"5987:66:5"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":750,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"6067:12:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"arguments":[{"id":753,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6087:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":752,"name":"uint8","nodeType":"ElementaryTypeName","src":"6087:5:5","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":751,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6082:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":754,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6082:11:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":755,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6094:3:5","memberName":"max","nodeType":"MemberAccess","src":"6082:15:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6067:30:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":774,"nodeType":"IfStatement","src":"6063:138:5","trueBody":{"id":773,"nodeType":"Block","src":"6099:102:5","statements":[{"expression":{"id":763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":757,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"6113:12:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":760,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6133:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":759,"name":"uint8","nodeType":"ElementaryTypeName","src":"6133:5:5","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":758,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6128:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":761,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6128:11:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":762,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6140:3:5","memberName":"max","nodeType":"MemberAccess","src":"6128:15:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6113:30:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":764,"nodeType":"ExpressionStatement","src":"6113:30:5"},{"eventCall":{"arguments":[{"expression":{"arguments":[{"id":768,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6179:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":767,"name":"uint8","nodeType":"ElementaryTypeName","src":"6179:5:5","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":766,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6174:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":769,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6174:11:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":770,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6186:3:5","memberName":"max","nodeType":"MemberAccess","src":"6174:15:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":765,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":641,"src":"6162:11:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":771,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6162:28:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":772,"nodeType":"EmitStatement","src":"6157:33:5"}]}}]},"documentation":{"id":741,"nodeType":"StructuredDocumentation","src":"5448:475:5","text":" @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."},"id":776,"implemented":true,"kind":"function","modifiers":[],"name":"_disableInitializers","nameLocation":"5937:20:5","nodeType":"FunctionDefinition","parameters":{"id":742,"nodeType":"ParameterList","parameters":[],"src":"5957:2:5"},"returnParameters":{"id":743,"nodeType":"ParameterList","parameters":[],"src":"5977:0:5"},"scope":795,"src":"5928:279:5","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":784,"nodeType":"Block","src":"6384:36:5","statements":[{"expression":{"id":782,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"6401:12:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":781,"id":783,"nodeType":"Return","src":"6394:19:5"}]},"documentation":{"id":777,"nodeType":"StructuredDocumentation","src":"6213:102:5","text":" @dev Internal function that returns the initialized version. Returns `_initialized`"},"id":785,"implemented":true,"kind":"function","modifiers":[],"name":"_getInitializedVersion","nameLocation":"6329:22:5","nodeType":"FunctionDefinition","parameters":{"id":778,"nodeType":"ParameterList","parameters":[],"src":"6351:2:5"},"returnParameters":{"id":781,"nodeType":"ParameterList","parameters":[{"constant":false,"id":780,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":785,"src":"6377:5:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":779,"name":"uint8","nodeType":"ElementaryTypeName","src":"6377:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"6376:7:5"},"scope":795,"src":"6320:100:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":793,"nodeType":"Block","src":"6590:37:5","statements":[{"expression":{"id":791,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":636,"src":"6607:13:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":790,"id":792,"nodeType":"Return","src":"6600:20:5"}]},"documentation":{"id":786,"nodeType":"StructuredDocumentation","src":"6426:103:5","text":" @dev Internal function that returns the initialized version. Returns `_initializing`"},"id":794,"implemented":true,"kind":"function","modifiers":[],"name":"_isInitializing","nameLocation":"6543:15:5","nodeType":"FunctionDefinition","parameters":{"id":787,"nodeType":"ParameterList","parameters":[],"src":"6558:2:5"},"returnParameters":{"id":790,"nodeType":"ParameterList","parameters":[{"constant":false,"id":789,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":794,"src":"6584:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":788,"name":"bool","nodeType":"ElementaryTypeName","src":"6584:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6583:6:5"},"scope":795,"src":"6534:93:5","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":796,"src":"2383:4246:5","usedErrors":[]}],"src":"113:6517:5"},"id":5},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2904],"ERC1967UpgradeUpgradeable":[616],"IBeaconUpgradeable":[626],"IERC1822ProxiableUpgradeable":[247],"Initializable":[795],"StorageSlotUpgradeable":[3006],"UUPSUpgradeable":[931]},"id":932,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":797,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"115:23:6"},{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol","file":"../../interfaces/draft-IERC1822Upgradeable.sol","id":798,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":932,"sourceUnit":248,"src":"140:56:6","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol","file":"../ERC1967/ERC1967UpgradeUpgradeable.sol","id":799,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":932,"sourceUnit":617,"src":"197:50:6","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"./Initializable.sol","id":800,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":932,"sourceUnit":796,"src":"248:29:6","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":802,"name":"Initializable","nameLocations":["965:13:6"],"nodeType":"IdentifierPath","referencedDeclaration":795,"src":"965:13:6"},"id":803,"nodeType":"InheritanceSpecifier","src":"965:13:6"},{"baseName":{"id":804,"name":"IERC1822ProxiableUpgradeable","nameLocations":["980:28:6"],"nodeType":"IdentifierPath","referencedDeclaration":247,"src":"980:28:6"},"id":805,"nodeType":"InheritanceSpecifier","src":"980:28:6"},{"baseName":{"id":806,"name":"ERC1967UpgradeUpgradeable","nameLocations":["1010:25:6"],"nodeType":"IdentifierPath","referencedDeclaration":616,"src":"1010:25:6"},"id":807,"nodeType":"InheritanceSpecifier","src":"1010:25:6"}],"canonicalName":"UUPSUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":801,"nodeType":"StructuredDocumentation","src":"279:648:6","text":" @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n `UUPSUpgradeable` with a custom implementation of upgrades.\n The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n _Available since v4.1._"},"fullyImplemented":false,"id":931,"linearizedBaseContracts":[931,616,247,795],"name":"UUPSUpgradeable","nameLocation":"946:15:6","nodeType":"ContractDefinition","nodes":[{"body":{"id":812,"nodeType":"Block","src":"1102:7:6","statements":[]},"id":813,"implemented":true,"kind":"function","modifiers":[{"id":810,"kind":"modifierInvocation","modifierName":{"id":809,"name":"onlyInitializing","nameLocations":["1085:16:6"],"nodeType":"IdentifierPath","referencedDeclaration":740,"src":"1085:16:6"},"nodeType":"ModifierInvocation","src":"1085:16:6"}],"name":"__UUPSUpgradeable_init","nameLocation":"1051:22:6","nodeType":"FunctionDefinition","parameters":{"id":808,"nodeType":"ParameterList","parameters":[],"src":"1073:2:6"},"returnParameters":{"id":811,"nodeType":"ParameterList","parameters":[],"src":"1102:0:6"},"scope":931,"src":"1042:67:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":818,"nodeType":"Block","src":"1185:7:6","statements":[]},"id":819,"implemented":true,"kind":"function","modifiers":[{"id":816,"kind":"modifierInvocation","modifierName":{"id":815,"name":"onlyInitializing","nameLocations":["1168:16:6"],"nodeType":"IdentifierPath","referencedDeclaration":740,"src":"1168:16:6"},"nodeType":"ModifierInvocation","src":"1168:16:6"}],"name":"__UUPSUpgradeable_init_unchained","nameLocation":"1124:32:6","nodeType":"FunctionDefinition","parameters":{"id":814,"nodeType":"ParameterList","parameters":[],"src":"1156:2:6"},"returnParameters":{"id":817,"nodeType":"ParameterList","parameters":[],"src":"1185:0:6"},"scope":931,"src":"1115:77:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":false,"documentation":{"id":820,"nodeType":"StructuredDocumentation","src":"1197:87:6","text":"@custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment"},"id":826,"mutability":"immutable","name":"__self","nameLocation":"1315:6:6","nodeType":"VariableDeclaration","scope":931,"src":"1289:48:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":821,"name":"address","nodeType":"ElementaryTypeName","src":"1289:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"arguments":[{"id":824,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1332:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_UUPSUpgradeable_$931","typeString":"contract UUPSUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UUPSUpgradeable_$931","typeString":"contract UUPSUpgradeable"}],"id":823,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1324:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":822,"name":"address","nodeType":"ElementaryTypeName","src":"1324:7:6","typeDescriptions":{}}},"id":825,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1324:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"body":{"id":848,"nodeType":"Block","src":"1863:205:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":832,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1889:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_UUPSUpgradeable_$931","typeString":"contract UUPSUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UUPSUpgradeable_$931","typeString":"contract UUPSUpgradeable"}],"id":831,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1881:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":830,"name":"address","nodeType":"ElementaryTypeName","src":"1881:7:6","typeDescriptions":{}}},"id":833,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1881:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":834,"name":"__self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":826,"src":"1898:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1881:23:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682064656c656761746563616c6c","id":836,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1906:46:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb","typeString":"literal_string \"Function must be called through delegatecall\""},"value":"Function must be called through delegatecall"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb","typeString":"literal_string \"Function must be called through delegatecall\""}],"id":829,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1873:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":837,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1873:80:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":838,"nodeType":"ExpressionStatement","src":"1873:80:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":840,"name":"_getImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":294,"src":"1971:18:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":841,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1971:20:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":842,"name":"__self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":826,"src":"1995:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1971:30:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f756768206163746976652070726f7879","id":844,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2003:46:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434","typeString":"literal_string \"Function must be called through active proxy\""},"value":"Function must be called through active proxy"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434","typeString":"literal_string \"Function must be called through active proxy\""}],"id":839,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1963:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":845,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1963:87:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":846,"nodeType":"ExpressionStatement","src":"1963:87:6"},{"id":847,"nodeType":"PlaceholderStatement","src":"2060:1:6"}]},"documentation":{"id":827,"nodeType":"StructuredDocumentation","src":"1344:493:6","text":" @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n fail."},"id":849,"name":"onlyProxy","nameLocation":"1851:9:6","nodeType":"ModifierDefinition","parameters":{"id":828,"nodeType":"ParameterList","parameters":[],"src":"1860:2:6"},"src":"1842:226:6","virtual":false,"visibility":"internal"},{"body":{"id":863,"nodeType":"Block","src":"2298:120:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":855,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2324:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_UUPSUpgradeable_$931","typeString":"contract UUPSUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UUPSUpgradeable_$931","typeString":"contract UUPSUpgradeable"}],"id":854,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2316:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":853,"name":"address","nodeType":"ElementaryTypeName","src":"2316:7:6","typeDescriptions":{}}},"id":856,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2316:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":857,"name":"__self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":826,"src":"2333:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2316:23:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"555550535570677261646561626c653a206d757374206e6f742062652063616c6c6564207468726f7567682064656c656761746563616c6c","id":859,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2341:58:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4","typeString":"literal_string \"UUPSUpgradeable: must not be called through delegatecall\""},"value":"UUPSUpgradeable: must not be called through delegatecall"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4","typeString":"literal_string \"UUPSUpgradeable: must not be called through delegatecall\""}],"id":852,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2308:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":860,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2308:92:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":861,"nodeType":"ExpressionStatement","src":"2308:92:6"},{"id":862,"nodeType":"PlaceholderStatement","src":"2410:1:6"}]},"documentation":{"id":850,"nodeType":"StructuredDocumentation","src":"2074:195:6","text":" @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n callable on the implementing contract but not through proxies."},"id":864,"name":"notDelegated","nameLocation":"2283:12:6","nodeType":"ModifierDefinition","parameters":{"id":851,"nodeType":"ParameterList","parameters":[],"src":"2295:2:6"},"src":"2274:144:6","virtual":false,"visibility":"internal"},{"baseFunctions":[246],"body":{"id":875,"nodeType":"Block","src":"3093:44:6","statements":[{"expression":{"id":873,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":276,"src":"3110:20:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":872,"id":874,"nodeType":"Return","src":"3103:27:6"}]},"documentation":{"id":865,"nodeType":"StructuredDocumentation","src":"2424:577:6","text":" @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"functionSelector":"52d1902d","id":876,"implemented":true,"kind":"function","modifiers":[{"id":869,"kind":"modifierInvocation","modifierName":{"id":868,"name":"notDelegated","nameLocations":["3062:12:6"],"nodeType":"IdentifierPath","referencedDeclaration":864,"src":"3062:12:6"},"nodeType":"ModifierInvocation","src":"3062:12:6"}],"name":"proxiableUUID","nameLocation":"3015:13:6","nodeType":"FunctionDefinition","overrides":{"id":867,"nodeType":"OverrideSpecifier","overrides":[],"src":"3053:8:6"},"parameters":{"id":866,"nodeType":"ParameterList","parameters":[],"src":"3028:2:6"},"returnParameters":{"id":872,"nodeType":"ParameterList","parameters":[{"constant":false,"id":871,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":876,"src":"3084:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":870,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3084:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3083:9:6"},"scope":931,"src":"3006:131:6","stateMutability":"view","virtual":true,"visibility":"external"},{"body":{"id":897,"nodeType":"Block","src":"3390:124:6","statements":[{"expression":{"arguments":[{"id":885,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":879,"src":"3418:17:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":884,"name":"_authorizeUpgrade","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":925,"src":"3400:17:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":886,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3400:36:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":887,"nodeType":"ExpressionStatement","src":"3400:36:6"},{"expression":{"arguments":[{"id":889,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":879,"src":"3468:17:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":892,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3497:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":891,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"3487:9:6","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":890,"name":"bytes","nodeType":"ElementaryTypeName","src":"3491:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":893,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3487:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"66616c7365","id":894,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3501:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":888,"name":"_upgradeToAndCallUUPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"3446:21:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":895,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3446:61:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":896,"nodeType":"ExpressionStatement","src":"3446:61:6"}]},"documentation":{"id":877,"nodeType":"StructuredDocumentation","src":"3143:169:6","text":" @dev Upgrade the implementation of the proxy to `newImplementation`.\n Calls {_authorizeUpgrade}.\n Emits an {Upgraded} event."},"functionSelector":"3659cfe6","id":898,"implemented":true,"kind":"function","modifiers":[{"id":882,"kind":"modifierInvocation","modifierName":{"id":881,"name":"onlyProxy","nameLocations":["3380:9:6"],"nodeType":"IdentifierPath","referencedDeclaration":849,"src":"3380:9:6"},"nodeType":"ModifierInvocation","src":"3380:9:6"}],"name":"upgradeTo","nameLocation":"3326:9:6","nodeType":"FunctionDefinition","parameters":{"id":880,"nodeType":"ParameterList","parameters":[{"constant":false,"id":879,"mutability":"mutable","name":"newImplementation","nameLocation":"3344:17:6","nodeType":"VariableDeclaration","scope":898,"src":"3336:25:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":878,"name":"address","nodeType":"ElementaryTypeName","src":"3336:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3335:27:6"},"returnParameters":{"id":883,"nodeType":"ParameterList","parameters":[],"src":"3390:0:6"},"scope":931,"src":"3317:197:6","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"body":{"id":918,"nodeType":"Block","src":"3870:115:6","statements":[{"expression":{"arguments":[{"id":909,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":901,"src":"3898:17:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":908,"name":"_authorizeUpgrade","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":925,"src":"3880:17:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":910,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3880:36:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":911,"nodeType":"ExpressionStatement","src":"3880:36:6"},{"expression":{"arguments":[{"id":913,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":901,"src":"3948:17:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":914,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":903,"src":"3967:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"74727565","id":915,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3973:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":912,"name":"_upgradeToAndCallUUPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"3926:21:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":916,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3926:52:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":917,"nodeType":"ExpressionStatement","src":"3926:52:6"}]},"documentation":{"id":899,"nodeType":"StructuredDocumentation","src":"3520:238:6","text":" @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n encoded in `data`.\n Calls {_authorizeUpgrade}.\n Emits an {Upgraded} event."},"functionSelector":"4f1ef286","id":919,"implemented":true,"kind":"function","modifiers":[{"id":906,"kind":"modifierInvocation","modifierName":{"id":905,"name":"onlyProxy","nameLocations":["3860:9:6"],"nodeType":"IdentifierPath","referencedDeclaration":849,"src":"3860:9:6"},"nodeType":"ModifierInvocation","src":"3860:9:6"}],"name":"upgradeToAndCall","nameLocation":"3772:16:6","nodeType":"FunctionDefinition","parameters":{"id":904,"nodeType":"ParameterList","parameters":[{"constant":false,"id":901,"mutability":"mutable","name":"newImplementation","nameLocation":"3797:17:6","nodeType":"VariableDeclaration","scope":919,"src":"3789:25:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":900,"name":"address","nodeType":"ElementaryTypeName","src":"3789:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":903,"mutability":"mutable","name":"data","nameLocation":"3829:4:6","nodeType":"VariableDeclaration","scope":919,"src":"3816:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":902,"name":"bytes","nodeType":"ElementaryTypeName","src":"3816:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3788:46:6"},"returnParameters":{"id":907,"nodeType":"ParameterList","parameters":[],"src":"3870:0:6"},"scope":931,"src":"3763:222:6","stateMutability":"payable","virtual":true,"visibility":"external"},{"documentation":{"id":920,"nodeType":"StructuredDocumentation","src":"3991:397:6","text":" @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n {upgradeTo} and {upgradeToAndCall}.\n Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n ```solidity\n function _authorizeUpgrade(address) internal override onlyOwner {}\n ```"},"id":925,"implemented":false,"kind":"function","modifiers":[],"name":"_authorizeUpgrade","nameLocation":"4402:17:6","nodeType":"FunctionDefinition","parameters":{"id":923,"nodeType":"ParameterList","parameters":[{"constant":false,"id":922,"mutability":"mutable","name":"newImplementation","nameLocation":"4428:17:6","nodeType":"VariableDeclaration","scope":925,"src":"4420:25:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":921,"name":"address","nodeType":"ElementaryTypeName","src":"4420:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4419:27:6"},"returnParameters":{"id":924,"nodeType":"ParameterList","parameters":[],"src":"4463:0:6"},"scope":931,"src":"4393:71:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":926,"nodeType":"StructuredDocumentation","src":"4470:254:6","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":930,"mutability":"mutable","name":"__gap","nameLocation":"4749:5:6","nodeType":"VariableDeclaration","scope":931,"src":"4729:25:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":927,"name":"uint256","nodeType":"ElementaryTypeName","src":"4729:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":929,"length":{"hexValue":"3530","id":928,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4737:2:6","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"4729:11:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":932,"src":"928:3829:6","usedErrors":[]}],"src":"115:4643:6"},"id":6},"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2904],"ContextUpgradeable":[2946],"ERC1155Upgradeable":[2176],"ERC165Upgradeable":[3736],"IERC1155MetadataURIUpgradeable":[2620],"IERC1155ReceiverUpgradeable":[2217],"IERC1155Upgradeable":[2339],"IERC165Upgradeable":[3748],"Initializable":[795]},"id":2177,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":933,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"109:23:7"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol","file":"./IERC1155Upgradeable.sol","id":934,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2177,"sourceUnit":2340,"src":"134:35:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol","file":"./IERC1155ReceiverUpgradeable.sol","id":935,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2177,"sourceUnit":2218,"src":"170:43:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol","file":"./extensions/IERC1155MetadataURIUpgradeable.sol","id":936,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2177,"sourceUnit":2621,"src":"214:57:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":937,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2177,"sourceUnit":2905,"src":"272:44:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../../utils/ContextUpgradeable.sol","id":938,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2177,"sourceUnit":2947,"src":"317:44:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol","file":"../../utils/introspection/ERC165Upgradeable.sol","id":939,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2177,"sourceUnit":3737,"src":"362:57:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../proxy/utils/Initializable.sol","id":940,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2177,"sourceUnit":796,"src":"420:45:7","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":942,"name":"Initializable","nameLocations":["713:13:7"],"nodeType":"IdentifierPath","referencedDeclaration":795,"src":"713:13:7"},"id":943,"nodeType":"InheritanceSpecifier","src":"713:13:7"},{"baseName":{"id":944,"name":"ContextUpgradeable","nameLocations":["728:18:7"],"nodeType":"IdentifierPath","referencedDeclaration":2946,"src":"728:18:7"},"id":945,"nodeType":"InheritanceSpecifier","src":"728:18:7"},{"baseName":{"id":946,"name":"ERC165Upgradeable","nameLocations":["748:17:7"],"nodeType":"IdentifierPath","referencedDeclaration":3736,"src":"748:17:7"},"id":947,"nodeType":"InheritanceSpecifier","src":"748:17:7"},{"baseName":{"id":948,"name":"IERC1155Upgradeable","nameLocations":["767:19:7"],"nodeType":"IdentifierPath","referencedDeclaration":2339,"src":"767:19:7"},"id":949,"nodeType":"InheritanceSpecifier","src":"767:19:7"},{"baseName":{"id":950,"name":"IERC1155MetadataURIUpgradeable","nameLocations":["788:30:7"],"nodeType":"IdentifierPath","referencedDeclaration":2620,"src":"788:30:7"},"id":951,"nodeType":"InheritanceSpecifier","src":"788:30:7"}],"canonicalName":"ERC1155Upgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":941,"nodeType":"StructuredDocumentation","src":"467:214:7","text":" @dev Implementation of the basic standard multi-token.\n See https://eips.ethereum.org/EIPS/eip-1155\n Originally based on code by Enjin: https://github.com/enjin/erc-1155\n _Available since v3.1._"},"fullyImplemented":true,"id":2176,"linearizedBaseContracts":[2176,2620,2339,3736,3748,2946,795],"name":"ERC1155Upgradeable","nameLocation":"691:18:7","nodeType":"ContractDefinition","nodes":[{"global":false,"id":954,"libraryName":{"id":952,"name":"AddressUpgradeable","nameLocations":["831:18:7"],"nodeType":"IdentifierPath","referencedDeclaration":2904,"src":"831:18:7"},"nodeType":"UsingForDirective","src":"825:37:7","typeName":{"id":953,"name":"address","nodeType":"ElementaryTypeName","src":"854:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"constant":false,"id":960,"mutability":"mutable","name":"_balances","nameLocation":"973:9:7","nodeType":"VariableDeclaration","scope":2176,"src":"917:65:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"},"typeName":{"id":959,"keyType":{"id":955,"name":"uint256","nodeType":"ElementaryTypeName","src":"925:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"917:47:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"},"valueType":{"id":958,"keyType":{"id":956,"name":"address","nodeType":"ElementaryTypeName","src":"944:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"936:27:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":957,"name":"uint256","nodeType":"ElementaryTypeName","src":"955:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"constant":false,"id":966,"mutability":"mutable","name":"_operatorApprovals","nameLocation":"1092:18:7","nodeType":"VariableDeclaration","scope":2176,"src":"1039:71:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":965,"keyType":{"id":961,"name":"address","nodeType":"ElementaryTypeName","src":"1047:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1039:44:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueType":{"id":964,"keyType":{"id":962,"name":"address","nodeType":"ElementaryTypeName","src":"1066:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1058:24:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":963,"name":"bool","nodeType":"ElementaryTypeName","src":"1077:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"constant":false,"id":968,"mutability":"mutable","name":"_uri","nameLocation":"1246:4:7","nodeType":"VariableDeclaration","scope":2176,"src":"1231:19:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":967,"name":"string","nodeType":"ElementaryTypeName","src":"1231:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"body":{"id":980,"nodeType":"Block","src":"1370:47:7","statements":[{"expression":{"arguments":[{"id":977,"name":"uri_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":971,"src":"1405:4:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":976,"name":"__ERC1155_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":993,"src":"1380:24:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory)"}},"id":978,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1380:30:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":979,"nodeType":"ExpressionStatement","src":"1380:30:7"}]},"documentation":{"id":969,"nodeType":"StructuredDocumentation","src":"1257:38:7","text":" @dev See {_setURI}."},"id":981,"implemented":true,"kind":"function","modifiers":[{"id":974,"kind":"modifierInvocation","modifierName":{"id":973,"name":"onlyInitializing","nameLocations":["1353:16:7"],"nodeType":"IdentifierPath","referencedDeclaration":740,"src":"1353:16:7"},"nodeType":"ModifierInvocation","src":"1353:16:7"}],"name":"__ERC1155_init","nameLocation":"1309:14:7","nodeType":"FunctionDefinition","parameters":{"id":972,"nodeType":"ParameterList","parameters":[{"constant":false,"id":971,"mutability":"mutable","name":"uri_","nameLocation":"1338:4:7","nodeType":"VariableDeclaration","scope":981,"src":"1324:18:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":970,"name":"string","nodeType":"ElementaryTypeName","src":"1324:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1323:20:7"},"returnParameters":{"id":975,"nodeType":"ParameterList","parameters":[],"src":"1370:0:7"},"scope":2176,"src":"1300:117:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":992,"nodeType":"Block","src":"1503:30:7","statements":[{"expression":{"arguments":[{"id":989,"name":"uri_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":983,"src":"1521:4:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":988,"name":"_setURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1504,"src":"1513:7:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory)"}},"id":990,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1513:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":991,"nodeType":"ExpressionStatement","src":"1513:13:7"}]},"id":993,"implemented":true,"kind":"function","modifiers":[{"id":986,"kind":"modifierInvocation","modifierName":{"id":985,"name":"onlyInitializing","nameLocations":["1486:16:7"],"nodeType":"IdentifierPath","referencedDeclaration":740,"src":"1486:16:7"},"nodeType":"ModifierInvocation","src":"1486:16:7"}],"name":"__ERC1155_init_unchained","nameLocation":"1432:24:7","nodeType":"FunctionDefinition","parameters":{"id":984,"nodeType":"ParameterList","parameters":[{"constant":false,"id":983,"mutability":"mutable","name":"uri_","nameLocation":"1471:4:7","nodeType":"VariableDeclaration","scope":993,"src":"1457:18:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":982,"name":"string","nodeType":"ElementaryTypeName","src":"1457:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1456:20:7"},"returnParameters":{"id":987,"nodeType":"ParameterList","parameters":[],"src":"1503:0:7"},"scope":2176,"src":"1423:110:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[3730,3747],"body":{"id":1023,"nodeType":"Block","src":"1730:219:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1004,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":996,"src":"1759:11:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1006,"name":"IERC1155Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2339,"src":"1779:19:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Upgradeable_$2339_$","typeString":"type(contract IERC1155Upgradeable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC1155Upgradeable_$2339_$","typeString":"type(contract IERC1155Upgradeable)"}],"id":1005,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1774:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1007,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1774:25:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC1155Upgradeable_$2339","typeString":"type(contract IERC1155Upgradeable)"}},"id":1008,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1800:11:7","memberName":"interfaceId","nodeType":"MemberAccess","src":"1774:37:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1759:52:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1010,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":996,"src":"1827:11:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1012,"name":"IERC1155MetadataURIUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2620,"src":"1847:30:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155MetadataURIUpgradeable_$2620_$","typeString":"type(contract IERC1155MetadataURIUpgradeable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC1155MetadataURIUpgradeable_$2620_$","typeString":"type(contract IERC1155MetadataURIUpgradeable)"}],"id":1011,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1842:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1013,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1842:36:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC1155MetadataURIUpgradeable_$2620","typeString":"type(contract IERC1155MetadataURIUpgradeable)"}},"id":1014,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1879:11:7","memberName":"interfaceId","nodeType":"MemberAccess","src":"1842:48:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1827:63:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1759:131:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1019,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":996,"src":"1930:11:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":1017,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1906:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC1155Upgradeable_$2176_$","typeString":"type(contract super ERC1155Upgradeable)"}},"id":1018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1912:17:7","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":3730,"src":"1906:23:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":1020,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1906:36:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1759:183:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1003,"id":1022,"nodeType":"Return","src":"1740:202:7"}]},"documentation":{"id":994,"nodeType":"StructuredDocumentation","src":"1539:56:7","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":1024,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1609:17:7","nodeType":"FunctionDefinition","overrides":{"id":1000,"nodeType":"OverrideSpecifier","overrides":[{"id":998,"name":"ERC165Upgradeable","nameLocations":["1676:17:7"],"nodeType":"IdentifierPath","referencedDeclaration":3736,"src":"1676:17:7"},{"id":999,"name":"IERC165Upgradeable","nameLocations":["1695:18:7"],"nodeType":"IdentifierPath","referencedDeclaration":3748,"src":"1695:18:7"}],"src":"1667:47:7"},"parameters":{"id":997,"nodeType":"ParameterList","parameters":[{"constant":false,"id":996,"mutability":"mutable","name":"interfaceId","nameLocation":"1634:11:7","nodeType":"VariableDeclaration","scope":1024,"src":"1627:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":995,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1627:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1626:20:7"},"returnParameters":{"id":1003,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1002,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1024,"src":"1724:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1001,"name":"bool","nodeType":"ElementaryTypeName","src":"1724:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1723:6:7"},"scope":2176,"src":"1600:349:7","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2619],"body":{"id":1035,"nodeType":"Block","src":"2423:28:7","statements":[{"expression":{"id":1033,"name":"_uri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":968,"src":"2440:4:7","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":1032,"id":1034,"nodeType":"Return","src":"2433:11:7"}]},"documentation":{"id":1025,"nodeType":"StructuredDocumentation","src":"1955:388:7","text":" @dev See {IERC1155MetadataURI-uri}.\n This implementation returns the same URI for *all* token types. It relies\n on the token type ID substitution mechanism\n https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n Clients calling this function must replace the `\\{id\\}` substring with the\n actual token type ID."},"functionSelector":"0e89341c","id":1036,"implemented":true,"kind":"function","modifiers":[],"name":"uri","nameLocation":"2357:3:7","nodeType":"FunctionDefinition","overrides":{"id":1029,"nodeType":"OverrideSpecifier","overrides":[],"src":"2390:8:7"},"parameters":{"id":1028,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1027,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1036,"src":"2361:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1026,"name":"uint256","nodeType":"ElementaryTypeName","src":"2361:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2360:9:7"},"returnParameters":{"id":1032,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1031,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1036,"src":"2408:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1030,"name":"string","nodeType":"ElementaryTypeName","src":"2408:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2407:15:7"},"scope":2176,"src":"2348:103:7","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2277],"body":{"id":1063,"nodeType":"Block","src":"2688:132:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1048,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1039,"src":"2706:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1051,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2725:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1050,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2717:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1049,"name":"address","nodeType":"ElementaryTypeName","src":"2717:7:7","typeDescriptions":{}}},"id":1052,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2717:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2706:21:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2061646472657373207a65726f206973206e6f7420612076616c6964206f776e6572","id":1054,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2729:44:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad","typeString":"literal_string \"ERC1155: address zero is not a valid owner\""},"value":"ERC1155: address zero is not a valid owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad","typeString":"literal_string \"ERC1155: address zero is not a valid owner\""}],"id":1047,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2698:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1055,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2698:76:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1056,"nodeType":"ExpressionStatement","src":"2698:76:7"},{"expression":{"baseExpression":{"baseExpression":{"id":1057,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":960,"src":"2791:9:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1059,"indexExpression":{"id":1058,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1041,"src":"2801:2:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2791:13:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1061,"indexExpression":{"id":1060,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1039,"src":"2805:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2791:22:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1046,"id":1062,"nodeType":"Return","src":"2784:29:7"}]},"documentation":{"id":1037,"nodeType":"StructuredDocumentation","src":"2457:131:7","text":" @dev See {IERC1155-balanceOf}.\n Requirements:\n - `account` cannot be the zero address."},"functionSelector":"00fdd58e","id":1064,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"2602:9:7","nodeType":"FunctionDefinition","overrides":{"id":1043,"nodeType":"OverrideSpecifier","overrides":[],"src":"2661:8:7"},"parameters":{"id":1042,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1039,"mutability":"mutable","name":"account","nameLocation":"2620:7:7","nodeType":"VariableDeclaration","scope":1064,"src":"2612:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1038,"name":"address","nodeType":"ElementaryTypeName","src":"2612:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1041,"mutability":"mutable","name":"id","nameLocation":"2637:2:7","nodeType":"VariableDeclaration","scope":1064,"src":"2629:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1040,"name":"uint256","nodeType":"ElementaryTypeName","src":"2629:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2611:29:7"},"returnParameters":{"id":1046,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1045,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1064,"src":"2679:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1044,"name":"uint256","nodeType":"ElementaryTypeName","src":"2679:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2678:9:7"},"scope":2176,"src":"2593:227:7","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2290],"body":{"id":1127,"nodeType":"Block","src":"3150:335:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1079,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1068,"src":"3168:8:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":1080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3177:6:7","memberName":"length","nodeType":"MemberAccess","src":"3168:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1081,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1071,"src":"3187:3:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1082,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3191:6:7","memberName":"length","nodeType":"MemberAccess","src":"3187:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3168:29:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206163636f756e747320616e6420696473206c656e677468206d69736d61746368","id":1084,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3199:43:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5","typeString":"literal_string \"ERC1155: accounts and ids length mismatch\""},"value":"ERC1155: accounts and ids length mismatch"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5","typeString":"literal_string \"ERC1155: accounts and ids length mismatch\""}],"id":1078,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3160:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1085,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3160:83:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1086,"nodeType":"ExpressionStatement","src":"3160:83:7"},{"assignments":[1091],"declarations":[{"constant":false,"id":1091,"mutability":"mutable","name":"batchBalances","nameLocation":"3271:13:7","nodeType":"VariableDeclaration","scope":1127,"src":"3254:30:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1089,"name":"uint256","nodeType":"ElementaryTypeName","src":"3254:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1090,"nodeType":"ArrayTypeName","src":"3254:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":1098,"initialValue":{"arguments":[{"expression":{"id":1095,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1068,"src":"3301:8:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":1096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3310:6:7","memberName":"length","nodeType":"MemberAccess","src":"3301:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1094,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"3287:13:7","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":1092,"name":"uint256","nodeType":"ElementaryTypeName","src":"3291:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1093,"nodeType":"ArrayTypeName","src":"3291:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":1097,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3287:30:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"3254:63:7"},{"body":{"id":1123,"nodeType":"Block","src":"3374:74:7","statements":[{"expression":{"id":1121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1110,"name":"batchBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1091,"src":"3388:13:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1112,"indexExpression":{"id":1111,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1100,"src":"3402:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3388:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":1114,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1068,"src":"3417:8:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":1116,"indexExpression":{"id":1115,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1100,"src":"3426:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3417:11:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":1117,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1071,"src":"3430:3:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1119,"indexExpression":{"id":1118,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1100,"src":"3434:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3430:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1113,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1064,"src":"3407:9:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256) view returns (uint256)"}},"id":1120,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3407:30:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3388:49:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1122,"nodeType":"ExpressionStatement","src":"3388:49:7"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1103,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1100,"src":"3348:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1104,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1068,"src":"3352:8:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":1105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3361:6:7","memberName":"length","nodeType":"MemberAccess","src":"3352:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3348:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1124,"initializationExpression":{"assignments":[1100],"declarations":[{"constant":false,"id":1100,"mutability":"mutable","name":"i","nameLocation":"3341:1:7","nodeType":"VariableDeclaration","scope":1124,"src":"3333:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1099,"name":"uint256","nodeType":"ElementaryTypeName","src":"3333:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1102,"initialValue":{"hexValue":"30","id":1101,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3345:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3333:13:7"},"loopExpression":{"expression":{"id":1108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"3369:3:7","subExpression":{"id":1107,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1100,"src":"3371:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1109,"nodeType":"ExpressionStatement","src":"3369:3:7"},"nodeType":"ForStatement","src":"3328:120:7"},{"expression":{"id":1125,"name":"batchBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1091,"src":"3465:13:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":1077,"id":1126,"nodeType":"Return","src":"3458:20:7"}]},"documentation":{"id":1065,"nodeType":"StructuredDocumentation","src":"2826:146:7","text":" @dev See {IERC1155-balanceOfBatch}.\n Requirements:\n - `accounts` and `ids` must have the same length."},"functionSelector":"4e1273f4","id":1128,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOfBatch","nameLocation":"2986:14:7","nodeType":"FunctionDefinition","overrides":{"id":1073,"nodeType":"OverrideSpecifier","overrides":[],"src":"3102:8:7"},"parameters":{"id":1072,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1068,"mutability":"mutable","name":"accounts","nameLocation":"3018:8:7","nodeType":"VariableDeclaration","scope":1128,"src":"3001:25:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1066,"name":"address","nodeType":"ElementaryTypeName","src":"3001:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1067,"nodeType":"ArrayTypeName","src":"3001:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":1071,"mutability":"mutable","name":"ids","nameLocation":"3045:3:7","nodeType":"VariableDeclaration","scope":1128,"src":"3028:20:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1069,"name":"uint256","nodeType":"ElementaryTypeName","src":"3028:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1070,"nodeType":"ArrayTypeName","src":"3028:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"3000:49:7"},"returnParameters":{"id":1077,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1076,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1128,"src":"3128:16:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1074,"name":"uint256","nodeType":"ElementaryTypeName","src":"3128:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1075,"nodeType":"ArrayTypeName","src":"3128:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"3127:18:7"},"scope":2176,"src":"2977:508:7","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2298],"body":{"id":1144,"nodeType":"Block","src":"3637:69:7","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1138,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2931,"src":"3666:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3666:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1140,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1131,"src":"3680:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1141,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1133,"src":"3690:8:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1137,"name":"_setApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1976,"src":"3647:18:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":1142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3647:52:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1143,"nodeType":"ExpressionStatement","src":"3647:52:7"}]},"documentation":{"id":1129,"nodeType":"StructuredDocumentation","src":"3491:57:7","text":" @dev See {IERC1155-setApprovalForAll}."},"functionSelector":"a22cb465","id":1145,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"3562:17:7","nodeType":"FunctionDefinition","overrides":{"id":1135,"nodeType":"OverrideSpecifier","overrides":[],"src":"3628:8:7"},"parameters":{"id":1134,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1131,"mutability":"mutable","name":"operator","nameLocation":"3588:8:7","nodeType":"VariableDeclaration","scope":1145,"src":"3580:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1130,"name":"address","nodeType":"ElementaryTypeName","src":"3580:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1133,"mutability":"mutable","name":"approved","nameLocation":"3603:8:7","nodeType":"VariableDeclaration","scope":1145,"src":"3598:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1132,"name":"bool","nodeType":"ElementaryTypeName","src":"3598:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3579:33:7"},"returnParameters":{"id":1136,"nodeType":"ParameterList","parameters":[],"src":"3637:0:7"},"scope":2176,"src":"3553:153:7","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2308],"body":{"id":1162,"nodeType":"Block","src":"3878:61:7","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":1156,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":966,"src":"3895:18:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":1158,"indexExpression":{"id":1157,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1148,"src":"3914:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3895:27:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1160,"indexExpression":{"id":1159,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1150,"src":"3923:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3895:37:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1155,"id":1161,"nodeType":"Return","src":"3888:44:7"}]},"documentation":{"id":1146,"nodeType":"StructuredDocumentation","src":"3712:56:7","text":" @dev See {IERC1155-isApprovedForAll}."},"functionSelector":"e985e9c5","id":1163,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"3782:16:7","nodeType":"FunctionDefinition","overrides":{"id":1152,"nodeType":"OverrideSpecifier","overrides":[],"src":"3854:8:7"},"parameters":{"id":1151,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1148,"mutability":"mutable","name":"account","nameLocation":"3807:7:7","nodeType":"VariableDeclaration","scope":1163,"src":"3799:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1147,"name":"address","nodeType":"ElementaryTypeName","src":"3799:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1150,"mutability":"mutable","name":"operator","nameLocation":"3824:8:7","nodeType":"VariableDeclaration","scope":1163,"src":"3816:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1149,"name":"address","nodeType":"ElementaryTypeName","src":"3816:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3798:35:7"},"returnParameters":{"id":1155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1154,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1163,"src":"3872:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1153,"name":"bool","nodeType":"ElementaryTypeName","src":"3872:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3871:6:7"},"scope":2176,"src":"3773:166:7","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2322],"body":{"id":1200,"nodeType":"Block","src":"4175:225:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1179,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1166,"src":"4206:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1180,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2931,"src":"4214:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1181,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4214:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4206:20:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1184,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1166,"src":"4247:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1185,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2931,"src":"4253:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1186,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4253:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1183,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1163,"src":"4230:16:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":1187,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4230:36:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4206:60:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":1189,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4280:48:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156","typeString":"literal_string \"ERC1155: caller is not token owner or approved\""},"value":"ERC1155: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156","typeString":"literal_string \"ERC1155: caller is not token owner or approved\""}],"id":1178,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4185:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1190,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4185:153:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1191,"nodeType":"ExpressionStatement","src":"4185:153:7"},{"expression":{"arguments":[{"id":1193,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1166,"src":"4366:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1194,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1168,"src":"4372:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1195,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1170,"src":"4376:2:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1196,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1172,"src":"4380:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1197,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"4388:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1192,"name":"_safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1358,"src":"4348:17:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,uint256,bytes memory)"}},"id":1198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4348:45:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1199,"nodeType":"ExpressionStatement","src":"4348:45:7"}]},"documentation":{"id":1164,"nodeType":"StructuredDocumentation","src":"3945:56:7","text":" @dev See {IERC1155-safeTransferFrom}."},"functionSelector":"f242432a","id":1201,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"4015:16:7","nodeType":"FunctionDefinition","overrides":{"id":1176,"nodeType":"OverrideSpecifier","overrides":[],"src":"4166:8:7"},"parameters":{"id":1175,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1166,"mutability":"mutable","name":"from","nameLocation":"4049:4:7","nodeType":"VariableDeclaration","scope":1201,"src":"4041:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1165,"name":"address","nodeType":"ElementaryTypeName","src":"4041:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1168,"mutability":"mutable","name":"to","nameLocation":"4071:2:7","nodeType":"VariableDeclaration","scope":1201,"src":"4063:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1167,"name":"address","nodeType":"ElementaryTypeName","src":"4063:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1170,"mutability":"mutable","name":"id","nameLocation":"4091:2:7","nodeType":"VariableDeclaration","scope":1201,"src":"4083:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1169,"name":"uint256","nodeType":"ElementaryTypeName","src":"4083:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1172,"mutability":"mutable","name":"amount","nameLocation":"4111:6:7","nodeType":"VariableDeclaration","scope":1201,"src":"4103:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1171,"name":"uint256","nodeType":"ElementaryTypeName","src":"4103:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1174,"mutability":"mutable","name":"data","nameLocation":"4140:4:7","nodeType":"VariableDeclaration","scope":1201,"src":"4127:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1173,"name":"bytes","nodeType":"ElementaryTypeName","src":"4127:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4031:119:7"},"returnParameters":{"id":1177,"nodeType":"ParameterList","parameters":[],"src":"4175:0:7"},"scope":2176,"src":"4006:394:7","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2338],"body":{"id":1240,"nodeType":"Block","src":"4666:232:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1219,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"4697:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1220,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2931,"src":"4705:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4705:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4697:20:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1224,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"4738:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1225,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2931,"src":"4744:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1226,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4744:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1223,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1163,"src":"4721:16:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":1227,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4721:36:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4697:60:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":1229,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4771:48:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156","typeString":"literal_string \"ERC1155: caller is not token owner or approved\""},"value":"ERC1155: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156","typeString":"literal_string \"ERC1155: caller is not token owner or approved\""}],"id":1218,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4676:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1230,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4676:153:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1231,"nodeType":"ExpressionStatement","src":"4676:153:7"},{"expression":{"arguments":[{"id":1233,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"4862:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1234,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1206,"src":"4868:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1235,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1209,"src":"4872:3:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1236,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1212,"src":"4877:7:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1237,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1214,"src":"4886:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1232,"name":"_safeBatchTransferFrom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1493,"src":"4839:22:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1238,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4839:52:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1239,"nodeType":"ExpressionStatement","src":"4839:52:7"}]},"documentation":{"id":1202,"nodeType":"StructuredDocumentation","src":"4406:61:7","text":" @dev See {IERC1155-safeBatchTransferFrom}."},"functionSelector":"2eb2c2d6","id":1241,"implemented":true,"kind":"function","modifiers":[],"name":"safeBatchTransferFrom","nameLocation":"4481:21:7","nodeType":"FunctionDefinition","overrides":{"id":1216,"nodeType":"OverrideSpecifier","overrides":[],"src":"4657:8:7"},"parameters":{"id":1215,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1204,"mutability":"mutable","name":"from","nameLocation":"4520:4:7","nodeType":"VariableDeclaration","scope":1241,"src":"4512:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1203,"name":"address","nodeType":"ElementaryTypeName","src":"4512:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1206,"mutability":"mutable","name":"to","nameLocation":"4542:2:7","nodeType":"VariableDeclaration","scope":1241,"src":"4534:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1205,"name":"address","nodeType":"ElementaryTypeName","src":"4534:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1209,"mutability":"mutable","name":"ids","nameLocation":"4571:3:7","nodeType":"VariableDeclaration","scope":1241,"src":"4554:20:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1207,"name":"uint256","nodeType":"ElementaryTypeName","src":"4554:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1208,"nodeType":"ArrayTypeName","src":"4554:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1212,"mutability":"mutable","name":"amounts","nameLocation":"4601:7:7","nodeType":"VariableDeclaration","scope":1241,"src":"4584:24:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1210,"name":"uint256","nodeType":"ElementaryTypeName","src":"4584:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1211,"nodeType":"ArrayTypeName","src":"4584:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1214,"mutability":"mutable","name":"data","nameLocation":"4631:4:7","nodeType":"VariableDeclaration","scope":1241,"src":"4618:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1213,"name":"bytes","nodeType":"ElementaryTypeName","src":"4618:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4502:139:7"},"returnParameters":{"id":1217,"nodeType":"ParameterList","parameters":[],"src":"4666:0:7"},"scope":2176,"src":"4472:426:7","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1357,"nodeType":"Block","src":"5511:784:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1256,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1246,"src":"5529:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1259,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5543:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1258,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5535:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1257,"name":"address","nodeType":"ElementaryTypeName","src":"5535:7:7","typeDescriptions":{}}},"id":1260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5535:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5529:16:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a207472616e7366657220746f20746865207a65726f2061646472657373","id":1262,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5547:39:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d","typeString":"literal_string \"ERC1155: transfer to the zero address\""},"value":"ERC1155: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d","typeString":"literal_string \"ERC1155: transfer to the zero address\""}],"id":1255,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5521:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1263,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5521:66:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1264,"nodeType":"ExpressionStatement","src":"5521:66:7"},{"assignments":[1266],"declarations":[{"constant":false,"id":1266,"mutability":"mutable","name":"operator","nameLocation":"5606:8:7","nodeType":"VariableDeclaration","scope":1357,"src":"5598:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1265,"name":"address","nodeType":"ElementaryTypeName","src":"5598:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1269,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1267,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2931,"src":"5617:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5617:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5598:31:7"},{"assignments":[1274],"declarations":[{"constant":false,"id":1274,"mutability":"mutable","name":"ids","nameLocation":"5656:3:7","nodeType":"VariableDeclaration","scope":1357,"src":"5639:20:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1272,"name":"uint256","nodeType":"ElementaryTypeName","src":"5639:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1273,"nodeType":"ArrayTypeName","src":"5639:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":1278,"initialValue":{"arguments":[{"id":1276,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1248,"src":"5680:2:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1275,"name":"_asSingletonArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2170,"src":"5662:17:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"}},"id":1277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5662:21:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5639:44:7"},{"assignments":[1283],"declarations":[{"constant":false,"id":1283,"mutability":"mutable","name":"amounts","nameLocation":"5710:7:7","nodeType":"VariableDeclaration","scope":1357,"src":"5693:24:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1281,"name":"uint256","nodeType":"ElementaryTypeName","src":"5693:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1282,"nodeType":"ArrayTypeName","src":"5693:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":1287,"initialValue":{"arguments":[{"id":1285,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1250,"src":"5738:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1284,"name":"_asSingletonArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2170,"src":"5720:17:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"}},"id":1286,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5720:25:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5693:52:7"},{"expression":{"arguments":[{"id":1289,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1266,"src":"5777:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1290,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1244,"src":"5787:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1291,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1246,"src":"5793:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1292,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1274,"src":"5797:3:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1293,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1283,"src":"5802:7:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1294,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1252,"src":"5811:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1288,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1995,"src":"5756:20:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1295,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5756:60:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1296,"nodeType":"ExpressionStatement","src":"5756:60:7"},{"assignments":[1298],"declarations":[{"constant":false,"id":1298,"mutability":"mutable","name":"fromBalance","nameLocation":"5835:11:7","nodeType":"VariableDeclaration","scope":1357,"src":"5827:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1297,"name":"uint256","nodeType":"ElementaryTypeName","src":"5827:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1304,"initialValue":{"baseExpression":{"baseExpression":{"id":1299,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":960,"src":"5849:9:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1301,"indexExpression":{"id":1300,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1248,"src":"5859:2:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5849:13:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1303,"indexExpression":{"id":1302,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1244,"src":"5863:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5849:19:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5827:41:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1306,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1298,"src":"5886:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1307,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1250,"src":"5901:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5886:21:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a20696e73756666696369656e742062616c616e636520666f72207472616e73666572","id":1309,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5909:44:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf","typeString":"literal_string \"ERC1155: insufficient balance for transfer\""},"value":"ERC1155: insufficient balance for transfer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf","typeString":"literal_string \"ERC1155: insufficient balance for transfer\""}],"id":1305,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5878:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1310,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5878:76:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1311,"nodeType":"ExpressionStatement","src":"5878:76:7"},{"id":1322,"nodeType":"UncheckedBlock","src":"5964:77:7","statements":[{"expression":{"id":1320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1312,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":960,"src":"5988:9:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1315,"indexExpression":{"id":1313,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1248,"src":"5998:2:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5988:13:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1316,"indexExpression":{"id":1314,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1244,"src":"6002:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5988:19:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1317,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1298,"src":"6010:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1318,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1250,"src":"6024:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6010:20:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5988:42:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1321,"nodeType":"ExpressionStatement","src":"5988:42:7"}]},{"expression":{"id":1329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1323,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":960,"src":"6050:9:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1326,"indexExpression":{"id":1324,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1248,"src":"6060:2:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6050:13:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1327,"indexExpression":{"id":1325,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1246,"src":"6064:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6050:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1328,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1250,"src":"6071:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6050:27:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1330,"nodeType":"ExpressionStatement","src":"6050:27:7"},{"eventCall":{"arguments":[{"id":1332,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1266,"src":"6108:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1333,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1244,"src":"6118:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1334,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1246,"src":"6124:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1335,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1248,"src":"6128:2:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1336,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1250,"src":"6132:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1331,"name":"TransferSingle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2236,"src":"6093:14:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256,uint256)"}},"id":1337,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6093:46:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1338,"nodeType":"EmitStatement","src":"6088:51:7"},{"expression":{"arguments":[{"id":1340,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1266,"src":"6170:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1341,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1244,"src":"6180:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1342,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1246,"src":"6186:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1343,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1274,"src":"6190:3:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1344,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1283,"src":"6195:7:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1345,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1252,"src":"6204:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1339,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2014,"src":"6150:19:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1346,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6150:59:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1347,"nodeType":"ExpressionStatement","src":"6150:59:7"},{"expression":{"arguments":[{"id":1349,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1266,"src":"6251:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1350,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1244,"src":"6261:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1351,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1246,"src":"6267:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1352,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1248,"src":"6271:2:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1353,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1250,"src":"6275:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1354,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1252,"src":"6283:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1348,"name":"_doSafeTransferAcceptanceCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2077,"src":"6220:30:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256,uint256,bytes memory)"}},"id":1355,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6220:68:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1356,"nodeType":"ExpressionStatement","src":"6220:68:7"}]},"documentation":{"id":1242,"nodeType":"StructuredDocumentation","src":"4904:439:7","text":" @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n Emits a {TransferSingle} event.\n Requirements:\n - `to` cannot be the zero address.\n - `from` must have a balance of tokens of type `id` of at least `amount`.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n acceptance magic value."},"id":1358,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransferFrom","nameLocation":"5357:17:7","nodeType":"FunctionDefinition","parameters":{"id":1253,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1244,"mutability":"mutable","name":"from","nameLocation":"5392:4:7","nodeType":"VariableDeclaration","scope":1358,"src":"5384:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1243,"name":"address","nodeType":"ElementaryTypeName","src":"5384:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1246,"mutability":"mutable","name":"to","nameLocation":"5414:2:7","nodeType":"VariableDeclaration","scope":1358,"src":"5406:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1245,"name":"address","nodeType":"ElementaryTypeName","src":"5406:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1248,"mutability":"mutable","name":"id","nameLocation":"5434:2:7","nodeType":"VariableDeclaration","scope":1358,"src":"5426:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1247,"name":"uint256","nodeType":"ElementaryTypeName","src":"5426:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1250,"mutability":"mutable","name":"amount","nameLocation":"5454:6:7","nodeType":"VariableDeclaration","scope":1358,"src":"5446:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1249,"name":"uint256","nodeType":"ElementaryTypeName","src":"5446:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1252,"mutability":"mutable","name":"data","nameLocation":"5483:4:7","nodeType":"VariableDeclaration","scope":1358,"src":"5470:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1251,"name":"bytes","nodeType":"ElementaryTypeName","src":"5470:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5374:119:7"},"returnParameters":{"id":1254,"nodeType":"ParameterList","parameters":[],"src":"5511:0:7"},"scope":2176,"src":"5348:947:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1492,"nodeType":"Block","src":"6829:927:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1375,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"6847:3:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6851:6:7","memberName":"length","nodeType":"MemberAccess","src":"6847:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1377,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1369,"src":"6861:7:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6869:6:7","memberName":"length","nodeType":"MemberAccess","src":"6861:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6847:28:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2069647320616e6420616d6f756e7473206c656e677468206d69736d61746368","id":1380,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6877:42:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807","typeString":"literal_string \"ERC1155: ids and amounts length mismatch\""},"value":"ERC1155: ids and amounts length mismatch"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807","typeString":"literal_string \"ERC1155: ids and amounts length mismatch\""}],"id":1374,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6839:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1381,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6839:81:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1382,"nodeType":"ExpressionStatement","src":"6839:81:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1384,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"6938:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1387,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6952:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1386,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6944:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1385,"name":"address","nodeType":"ElementaryTypeName","src":"6944:7:7","typeDescriptions":{}}},"id":1388,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6944:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6938:16:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a207472616e7366657220746f20746865207a65726f2061646472657373","id":1390,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6956:39:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d","typeString":"literal_string \"ERC1155: transfer to the zero address\""},"value":"ERC1155: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d","typeString":"literal_string \"ERC1155: transfer to the zero address\""}],"id":1383,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6930:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1391,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6930:66:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1392,"nodeType":"ExpressionStatement","src":"6930:66:7"},{"assignments":[1394],"declarations":[{"constant":false,"id":1394,"mutability":"mutable","name":"operator","nameLocation":"7015:8:7","nodeType":"VariableDeclaration","scope":1492,"src":"7007:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1393,"name":"address","nodeType":"ElementaryTypeName","src":"7007:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1397,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1395,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2931,"src":"7026:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1396,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7026:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"7007:31:7"},{"expression":{"arguments":[{"id":1399,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1394,"src":"7070:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1400,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1361,"src":"7080:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1401,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"7086:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1402,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"7090:3:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1403,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1369,"src":"7095:7:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1404,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1371,"src":"7104:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1398,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1995,"src":"7049:20:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1405,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7049:60:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1406,"nodeType":"ExpressionStatement","src":"7049:60:7"},{"body":{"id":1464,"nodeType":"Block","src":"7161:370:7","statements":[{"assignments":[1419],"declarations":[{"constant":false,"id":1419,"mutability":"mutable","name":"id","nameLocation":"7183:2:7","nodeType":"VariableDeclaration","scope":1464,"src":"7175:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1418,"name":"uint256","nodeType":"ElementaryTypeName","src":"7175:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1423,"initialValue":{"baseExpression":{"id":1420,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"7188:3:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1422,"indexExpression":{"id":1421,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1408,"src":"7192:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7188:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7175:19:7"},{"assignments":[1425],"declarations":[{"constant":false,"id":1425,"mutability":"mutable","name":"amount","nameLocation":"7216:6:7","nodeType":"VariableDeclaration","scope":1464,"src":"7208:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1424,"name":"uint256","nodeType":"ElementaryTypeName","src":"7208:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1429,"initialValue":{"baseExpression":{"id":1426,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1369,"src":"7225:7:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1428,"indexExpression":{"id":1427,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1408,"src":"7233:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7225:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7208:27:7"},{"assignments":[1431],"declarations":[{"constant":false,"id":1431,"mutability":"mutable","name":"fromBalance","nameLocation":"7258:11:7","nodeType":"VariableDeclaration","scope":1464,"src":"7250:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1430,"name":"uint256","nodeType":"ElementaryTypeName","src":"7250:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1437,"initialValue":{"baseExpression":{"baseExpression":{"id":1432,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":960,"src":"7272:9:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1434,"indexExpression":{"id":1433,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1419,"src":"7282:2:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7272:13:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1436,"indexExpression":{"id":1435,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1361,"src":"7286:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7272:19:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7250:41:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1439,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1431,"src":"7313:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1440,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1425,"src":"7328:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7313:21:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a20696e73756666696369656e742062616c616e636520666f72207472616e73666572","id":1442,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7336:44:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf","typeString":"literal_string \"ERC1155: insufficient balance for transfer\""},"value":"ERC1155: insufficient balance for transfer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf","typeString":"literal_string \"ERC1155: insufficient balance for transfer\""}],"id":1438,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7305:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1443,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7305:76:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1444,"nodeType":"ExpressionStatement","src":"7305:76:7"},{"id":1455,"nodeType":"UncheckedBlock","src":"7395:85:7","statements":[{"expression":{"id":1453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1445,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":960,"src":"7423:9:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1448,"indexExpression":{"id":1446,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1419,"src":"7433:2:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7423:13:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1449,"indexExpression":{"id":1447,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1361,"src":"7437:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7423:19:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1450,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1431,"src":"7445:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1451,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1425,"src":"7459:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7445:20:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7423:42:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1454,"nodeType":"ExpressionStatement","src":"7423:42:7"}]},{"expression":{"id":1462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1456,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":960,"src":"7493:9:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1459,"indexExpression":{"id":1457,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1419,"src":"7503:2:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7493:13:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1460,"indexExpression":{"id":1458,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"7507:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7493:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1461,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1425,"src":"7514:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7493:27:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1463,"nodeType":"ExpressionStatement","src":"7493:27:7"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1411,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1408,"src":"7140:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1412,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"7144:3:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7148:6:7","memberName":"length","nodeType":"MemberAccess","src":"7144:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7140:14:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1465,"initializationExpression":{"assignments":[1408],"declarations":[{"constant":false,"id":1408,"mutability":"mutable","name":"i","nameLocation":"7133:1:7","nodeType":"VariableDeclaration","scope":1465,"src":"7125:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1407,"name":"uint256","nodeType":"ElementaryTypeName","src":"7125:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1410,"initialValue":{"hexValue":"30","id":1409,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7137:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7125:13:7"},"loopExpression":{"expression":{"id":1416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"7156:3:7","subExpression":{"id":1415,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1408,"src":"7158:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1417,"nodeType":"ExpressionStatement","src":"7156:3:7"},"nodeType":"ForStatement","src":"7120:411:7"},{"eventCall":{"arguments":[{"id":1467,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1394,"src":"7560:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1468,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1361,"src":"7570:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1469,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"7576:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1470,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"7580:3:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1471,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1369,"src":"7585:7:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":1466,"name":"TransferBatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2251,"src":"7546:13:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory)"}},"id":1472,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7546:47:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1473,"nodeType":"EmitStatement","src":"7541:52:7"},{"expression":{"arguments":[{"id":1475,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1394,"src":"7624:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1476,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1361,"src":"7634:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1477,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"7640:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1478,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"7644:3:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1479,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1369,"src":"7649:7:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1480,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1371,"src":"7658:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1474,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2014,"src":"7604:19:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1481,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7604:59:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1482,"nodeType":"ExpressionStatement","src":"7604:59:7"},{"expression":{"arguments":[{"id":1484,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1394,"src":"7710:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1485,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1361,"src":"7720:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1486,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"7726:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1487,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"7730:3:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1488,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1369,"src":"7735:7:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1489,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1371,"src":"7744:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1483,"name":"_doSafeBatchTransferAcceptanceCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2142,"src":"7674:35:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1490,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7674:75:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1491,"nodeType":"ExpressionStatement","src":"7674:75:7"}]},"documentation":{"id":1359,"nodeType":"StructuredDocumentation","src":"6301:335:7","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n Emits a {TransferBatch} event.\n Requirements:\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n acceptance magic value."},"id":1493,"implemented":true,"kind":"function","modifiers":[],"name":"_safeBatchTransferFrom","nameLocation":"6650:22:7","nodeType":"FunctionDefinition","parameters":{"id":1372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1361,"mutability":"mutable","name":"from","nameLocation":"6690:4:7","nodeType":"VariableDeclaration","scope":1493,"src":"6682:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1360,"name":"address","nodeType":"ElementaryTypeName","src":"6682:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1363,"mutability":"mutable","name":"to","nameLocation":"6712:2:7","nodeType":"VariableDeclaration","scope":1493,"src":"6704:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1362,"name":"address","nodeType":"ElementaryTypeName","src":"6704:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1366,"mutability":"mutable","name":"ids","nameLocation":"6741:3:7","nodeType":"VariableDeclaration","scope":1493,"src":"6724:20:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1364,"name":"uint256","nodeType":"ElementaryTypeName","src":"6724:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1365,"nodeType":"ArrayTypeName","src":"6724:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1369,"mutability":"mutable","name":"amounts","nameLocation":"6771:7:7","nodeType":"VariableDeclaration","scope":1493,"src":"6754:24:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1367,"name":"uint256","nodeType":"ElementaryTypeName","src":"6754:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1368,"nodeType":"ArrayTypeName","src":"6754:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1371,"mutability":"mutable","name":"data","nameLocation":"6801:4:7","nodeType":"VariableDeclaration","scope":1493,"src":"6788:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1370,"name":"bytes","nodeType":"ElementaryTypeName","src":"6788:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6672:139:7"},"returnParameters":{"id":1373,"nodeType":"ParameterList","parameters":[],"src":"6829:0:7"},"scope":2176,"src":"6641:1115:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1503,"nodeType":"Block","src":"8635:30:7","statements":[{"expression":{"id":1501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1499,"name":"_uri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":968,"src":"8645:4:7","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1500,"name":"newuri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1496,"src":"8652:6:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"8645:13:7","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1502,"nodeType":"ExpressionStatement","src":"8645:13:7"}]},"documentation":{"id":1494,"nodeType":"StructuredDocumentation","src":"7762:812:7","text":" @dev Sets a new URI for all token types, by relying on the token type ID\n substitution mechanism\n https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n URI or any of the amounts in the JSON file at said URI will be replaced by\n clients with the token type ID.\n For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n interpreted by clients as\n `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n for token type ID 0x4cce0.\n See {uri}.\n Because these URIs cannot be meaningfully represented by the {URI} event,\n this function emits no events."},"id":1504,"implemented":true,"kind":"function","modifiers":[],"name":"_setURI","nameLocation":"8588:7:7","nodeType":"FunctionDefinition","parameters":{"id":1497,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1496,"mutability":"mutable","name":"newuri","nameLocation":"8610:6:7","nodeType":"VariableDeclaration","scope":1504,"src":"8596:20:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1495,"name":"string","nodeType":"ElementaryTypeName","src":"8596:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8595:22:7"},"returnParameters":{"id":1498,"nodeType":"ParameterList","parameters":[],"src":"8635:0:7"},"scope":2176,"src":"8579:86:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1604,"nodeType":"Block","src":"9167:580:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1517,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1507,"src":"9185:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1520,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9199:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1519,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9191:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1518,"name":"address","nodeType":"ElementaryTypeName","src":"9191:7:7","typeDescriptions":{}}},"id":1521,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9191:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9185:16:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206d696e7420746f20746865207a65726f2061646472657373","id":1523,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9203:35:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2","typeString":"literal_string \"ERC1155: mint to the zero address\""},"value":"ERC1155: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2","typeString":"literal_string \"ERC1155: mint to the zero address\""}],"id":1516,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9177:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1524,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9177:62:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1525,"nodeType":"ExpressionStatement","src":"9177:62:7"},{"assignments":[1527],"declarations":[{"constant":false,"id":1527,"mutability":"mutable","name":"operator","nameLocation":"9258:8:7","nodeType":"VariableDeclaration","scope":1604,"src":"9250:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1526,"name":"address","nodeType":"ElementaryTypeName","src":"9250:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1530,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1528,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2931,"src":"9269:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1529,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9269:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"9250:31:7"},{"assignments":[1535],"declarations":[{"constant":false,"id":1535,"mutability":"mutable","name":"ids","nameLocation":"9308:3:7","nodeType":"VariableDeclaration","scope":1604,"src":"9291:20:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1533,"name":"uint256","nodeType":"ElementaryTypeName","src":"9291:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1534,"nodeType":"ArrayTypeName","src":"9291:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":1539,"initialValue":{"arguments":[{"id":1537,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1509,"src":"9332:2:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1536,"name":"_asSingletonArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2170,"src":"9314:17:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"}},"id":1538,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9314:21:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"9291:44:7"},{"assignments":[1544],"declarations":[{"constant":false,"id":1544,"mutability":"mutable","name":"amounts","nameLocation":"9362:7:7","nodeType":"VariableDeclaration","scope":1604,"src":"9345:24:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1542,"name":"uint256","nodeType":"ElementaryTypeName","src":"9345:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1543,"nodeType":"ArrayTypeName","src":"9345:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":1548,"initialValue":{"arguments":[{"id":1546,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1511,"src":"9390:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1545,"name":"_asSingletonArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2170,"src":"9372:17:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"}},"id":1547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9372:25:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"9345:52:7"},{"expression":{"arguments":[{"id":1550,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1527,"src":"9429:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1553,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9447:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1552,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9439:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1551,"name":"address","nodeType":"ElementaryTypeName","src":"9439:7:7","typeDescriptions":{}}},"id":1554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9439:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1555,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1507,"src":"9451:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1556,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1535,"src":"9455:3:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1557,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1544,"src":"9460:7:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1558,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1513,"src":"9469:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1549,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1995,"src":"9408:20:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1559,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9408:66:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1560,"nodeType":"ExpressionStatement","src":"9408:66:7"},{"expression":{"id":1567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1561,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":960,"src":"9485:9:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1564,"indexExpression":{"id":1562,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1509,"src":"9495:2:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9485:13:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1565,"indexExpression":{"id":1563,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1507,"src":"9499:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9485:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1566,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1511,"src":"9506:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9485:27:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1568,"nodeType":"ExpressionStatement","src":"9485:27:7"},{"eventCall":{"arguments":[{"id":1570,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1527,"src":"9542:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9560:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1572,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9552:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1571,"name":"address","nodeType":"ElementaryTypeName","src":"9552:7:7","typeDescriptions":{}}},"id":1574,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9552:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1575,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1507,"src":"9564:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1576,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1509,"src":"9568:2:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1577,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1511,"src":"9572:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1569,"name":"TransferSingle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2236,"src":"9527:14:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256,uint256)"}},"id":1578,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9527:52:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1579,"nodeType":"EmitStatement","src":"9522:57:7"},{"expression":{"arguments":[{"id":1581,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1527,"src":"9610:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9628:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1583,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9620:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1582,"name":"address","nodeType":"ElementaryTypeName","src":"9620:7:7","typeDescriptions":{}}},"id":1585,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9620:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1586,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1507,"src":"9632:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1587,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1535,"src":"9636:3:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1588,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1544,"src":"9641:7:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1589,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1513,"src":"9650:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1580,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2014,"src":"9590:19:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1590,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9590:65:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1591,"nodeType":"ExpressionStatement","src":"9590:65:7"},{"expression":{"arguments":[{"id":1593,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1527,"src":"9697:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1596,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9715:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1595,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9707:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1594,"name":"address","nodeType":"ElementaryTypeName","src":"9707:7:7","typeDescriptions":{}}},"id":1597,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9707:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1598,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1507,"src":"9719:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1599,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1509,"src":"9723:2:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1600,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1511,"src":"9727:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1601,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1513,"src":"9735:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1592,"name":"_doSafeTransferAcceptanceCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2077,"src":"9666:30:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256,uint256,bytes memory)"}},"id":1602,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9666:74:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1603,"nodeType":"ExpressionStatement","src":"9666:74:7"}]},"documentation":{"id":1505,"nodeType":"StructuredDocumentation","src":"8671:362:7","text":" @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n Emits a {TransferSingle} event.\n Requirements:\n - `to` cannot be the zero address.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n acceptance magic value."},"id":1605,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"9047:5:7","nodeType":"FunctionDefinition","parameters":{"id":1514,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1507,"mutability":"mutable","name":"to","nameLocation":"9070:2:7","nodeType":"VariableDeclaration","scope":1605,"src":"9062:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1506,"name":"address","nodeType":"ElementaryTypeName","src":"9062:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1509,"mutability":"mutable","name":"id","nameLocation":"9090:2:7","nodeType":"VariableDeclaration","scope":1605,"src":"9082:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1508,"name":"uint256","nodeType":"ElementaryTypeName","src":"9082:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1511,"mutability":"mutable","name":"amount","nameLocation":"9110:6:7","nodeType":"VariableDeclaration","scope":1605,"src":"9102:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1510,"name":"uint256","nodeType":"ElementaryTypeName","src":"9102:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1513,"mutability":"mutable","name":"data","nameLocation":"9139:4:7","nodeType":"VariableDeclaration","scope":1605,"src":"9126:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1512,"name":"bytes","nodeType":"ElementaryTypeName","src":"9126:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9052:97:7"},"returnParameters":{"id":1515,"nodeType":"ParameterList","parameters":[],"src":"9167:0:7"},"scope":2176,"src":"9038:709:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1715,"nodeType":"Block","src":"10291:637:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1620,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1608,"src":"10309:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1623,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10323:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1622,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10315:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1621,"name":"address","nodeType":"ElementaryTypeName","src":"10315:7:7","typeDescriptions":{}}},"id":1624,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10315:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10309:16:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206d696e7420746f20746865207a65726f2061646472657373","id":1626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10327:35:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2","typeString":"literal_string \"ERC1155: mint to the zero address\""},"value":"ERC1155: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2","typeString":"literal_string \"ERC1155: mint to the zero address\""}],"id":1619,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10301:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1627,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10301:62:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1628,"nodeType":"ExpressionStatement","src":"10301:62:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1630,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1611,"src":"10381:3:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10385:6:7","memberName":"length","nodeType":"MemberAccess","src":"10381:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1632,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1614,"src":"10395:7:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10403:6:7","memberName":"length","nodeType":"MemberAccess","src":"10395:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10381:28:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2069647320616e6420616d6f756e7473206c656e677468206d69736d61746368","id":1635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10411:42:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807","typeString":"literal_string \"ERC1155: ids and amounts length mismatch\""},"value":"ERC1155: ids and amounts length mismatch"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807","typeString":"literal_string \"ERC1155: ids and amounts length mismatch\""}],"id":1629,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10373:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1636,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10373:81:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1637,"nodeType":"ExpressionStatement","src":"10373:81:7"},{"assignments":[1639],"declarations":[{"constant":false,"id":1639,"mutability":"mutable","name":"operator","nameLocation":"10473:8:7","nodeType":"VariableDeclaration","scope":1715,"src":"10465:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1638,"name":"address","nodeType":"ElementaryTypeName","src":"10465:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1642,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1640,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2931,"src":"10484:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1641,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10484:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10465:31:7"},{"expression":{"arguments":[{"id":1644,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1639,"src":"10528:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10546:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1646,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10538:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1645,"name":"address","nodeType":"ElementaryTypeName","src":"10538:7:7","typeDescriptions":{}}},"id":1648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10538:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1649,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1608,"src":"10550:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1650,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1611,"src":"10554:3:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1651,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1614,"src":"10559:7:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1652,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1616,"src":"10568:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1643,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1995,"src":"10507:20:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1653,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10507:66:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1654,"nodeType":"ExpressionStatement","src":"10507:66:7"},{"body":{"id":1678,"nodeType":"Block","src":"10625:60:7","statements":[{"expression":{"id":1676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1666,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":960,"src":"10639:9:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1671,"indexExpression":{"baseExpression":{"id":1667,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1611,"src":"10649:3:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1669,"indexExpression":{"id":1668,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1656,"src":"10653:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10649:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10639:17:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1672,"indexExpression":{"id":1670,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1608,"src":"10657:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10639:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"baseExpression":{"id":1673,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1614,"src":"10664:7:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1675,"indexExpression":{"id":1674,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1656,"src":"10672:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10664:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10639:35:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1677,"nodeType":"ExpressionStatement","src":"10639:35:7"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1659,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1656,"src":"10604:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1660,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1611,"src":"10608:3:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10612:6:7","memberName":"length","nodeType":"MemberAccess","src":"10608:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10604:14:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1679,"initializationExpression":{"assignments":[1656],"declarations":[{"constant":false,"id":1656,"mutability":"mutable","name":"i","nameLocation":"10597:1:7","nodeType":"VariableDeclaration","scope":1679,"src":"10589:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1655,"name":"uint256","nodeType":"ElementaryTypeName","src":"10589:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1658,"initialValue":{"hexValue":"30","id":1657,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10601:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10589:13:7"},"loopExpression":{"expression":{"id":1664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10620:3:7","subExpression":{"id":1663,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1656,"src":"10620:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1665,"nodeType":"ExpressionStatement","src":"10620:3:7"},"nodeType":"ForStatement","src":"10584:101:7"},{"eventCall":{"arguments":[{"id":1681,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1639,"src":"10714:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1684,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10732:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1683,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10724:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1682,"name":"address","nodeType":"ElementaryTypeName","src":"10724:7:7","typeDescriptions":{}}},"id":1685,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10724:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1686,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1608,"src":"10736:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1687,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1611,"src":"10740:3:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1688,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1614,"src":"10745:7:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":1680,"name":"TransferBatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2251,"src":"10700:13:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory)"}},"id":1689,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10700:53:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1690,"nodeType":"EmitStatement","src":"10695:58:7"},{"expression":{"arguments":[{"id":1692,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1639,"src":"10784:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1695,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10802:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1694,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10794:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1693,"name":"address","nodeType":"ElementaryTypeName","src":"10794:7:7","typeDescriptions":{}}},"id":1696,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10794:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1697,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1608,"src":"10806:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1698,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1611,"src":"10810:3:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1699,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1614,"src":"10815:7:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1700,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1616,"src":"10824:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1691,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2014,"src":"10764:19:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1701,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10764:65:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1702,"nodeType":"ExpressionStatement","src":"10764:65:7"},{"expression":{"arguments":[{"id":1704,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1639,"src":"10876:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1707,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10894:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1706,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10886:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1705,"name":"address","nodeType":"ElementaryTypeName","src":"10886:7:7","typeDescriptions":{}}},"id":1708,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10886:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1709,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1608,"src":"10898:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1710,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1611,"src":"10902:3:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1711,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1614,"src":"10907:7:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1712,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1616,"src":"10916:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1703,"name":"_doSafeBatchTransferAcceptanceCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2142,"src":"10840:35:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1713,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10840:81:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1714,"nodeType":"ExpressionStatement","src":"10840:81:7"}]},"documentation":{"id":1606,"nodeType":"StructuredDocumentation","src":"9753:379:7","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n Emits a {TransferBatch} event.\n Requirements:\n - `ids` and `amounts` must have the same length.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n acceptance magic value."},"id":1716,"implemented":true,"kind":"function","modifiers":[],"name":"_mintBatch","nameLocation":"10146:10:7","nodeType":"FunctionDefinition","parameters":{"id":1617,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1608,"mutability":"mutable","name":"to","nameLocation":"10174:2:7","nodeType":"VariableDeclaration","scope":1716,"src":"10166:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1607,"name":"address","nodeType":"ElementaryTypeName","src":"10166:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1611,"mutability":"mutable","name":"ids","nameLocation":"10203:3:7","nodeType":"VariableDeclaration","scope":1716,"src":"10186:20:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1609,"name":"uint256","nodeType":"ElementaryTypeName","src":"10186:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1610,"nodeType":"ArrayTypeName","src":"10186:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1614,"mutability":"mutable","name":"amounts","nameLocation":"10233:7:7","nodeType":"VariableDeclaration","scope":1716,"src":"10216:24:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1612,"name":"uint256","nodeType":"ElementaryTypeName","src":"10216:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1613,"nodeType":"ArrayTypeName","src":"10216:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1616,"mutability":"mutable","name":"data","nameLocation":"10263:4:7","nodeType":"VariableDeclaration","scope":1716,"src":"10250:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1615,"name":"bytes","nodeType":"ElementaryTypeName","src":"10250:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"10156:117:7"},"returnParameters":{"id":1618,"nodeType":"ParameterList","parameters":[],"src":"10291:0:7"},"scope":2176,"src":"10137:791:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1820,"nodeType":"Block","src":"11318:682:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1727,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1719,"src":"11336:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1730,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11352:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1729,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11344:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1728,"name":"address","nodeType":"ElementaryTypeName","src":"11344:7:7","typeDescriptions":{}}},"id":1731,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11344:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11336:18:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206275726e2066726f6d20746865207a65726f2061646472657373","id":1733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11356:37:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_87fd4aee52f5758d127cd9704d5ffef70f36ed1e87eb99b6f40e37a25c79a76a","typeString":"literal_string \"ERC1155: burn from the zero address\""},"value":"ERC1155: burn from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_87fd4aee52f5758d127cd9704d5ffef70f36ed1e87eb99b6f40e37a25c79a76a","typeString":"literal_string \"ERC1155: burn from the zero address\""}],"id":1726,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11328:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1734,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11328:66:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1735,"nodeType":"ExpressionStatement","src":"11328:66:7"},{"assignments":[1737],"declarations":[{"constant":false,"id":1737,"mutability":"mutable","name":"operator","nameLocation":"11413:8:7","nodeType":"VariableDeclaration","scope":1820,"src":"11405:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1736,"name":"address","nodeType":"ElementaryTypeName","src":"11405:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1740,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1738,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2931,"src":"11424:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1739,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11424:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"11405:31:7"},{"assignments":[1745],"declarations":[{"constant":false,"id":1745,"mutability":"mutable","name":"ids","nameLocation":"11463:3:7","nodeType":"VariableDeclaration","scope":1820,"src":"11446:20:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1743,"name":"uint256","nodeType":"ElementaryTypeName","src":"11446:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1744,"nodeType":"ArrayTypeName","src":"11446:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":1749,"initialValue":{"arguments":[{"id":1747,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1721,"src":"11487:2:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1746,"name":"_asSingletonArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2170,"src":"11469:17:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"}},"id":1748,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11469:21:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"11446:44:7"},{"assignments":[1754],"declarations":[{"constant":false,"id":1754,"mutability":"mutable","name":"amounts","nameLocation":"11517:7:7","nodeType":"VariableDeclaration","scope":1820,"src":"11500:24:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1752,"name":"uint256","nodeType":"ElementaryTypeName","src":"11500:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1753,"nodeType":"ArrayTypeName","src":"11500:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":1758,"initialValue":{"arguments":[{"id":1756,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1723,"src":"11545:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1755,"name":"_asSingletonArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2170,"src":"11527:17:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"}},"id":1757,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11527:25:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"11500:52:7"},{"expression":{"arguments":[{"id":1760,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1737,"src":"11584:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1761,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1719,"src":"11594:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11608:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1763,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11600:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1762,"name":"address","nodeType":"ElementaryTypeName","src":"11600:7:7","typeDescriptions":{}}},"id":1765,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11600:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1766,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1745,"src":"11612:3:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1767,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1754,"src":"11617:7:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"hexValue":"","id":1768,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11626:2:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1759,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1995,"src":"11563:20:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1769,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11563:66:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1770,"nodeType":"ExpressionStatement","src":"11563:66:7"},{"assignments":[1772],"declarations":[{"constant":false,"id":1772,"mutability":"mutable","name":"fromBalance","nameLocation":"11648:11:7","nodeType":"VariableDeclaration","scope":1820,"src":"11640:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1771,"name":"uint256","nodeType":"ElementaryTypeName","src":"11640:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1778,"initialValue":{"baseExpression":{"baseExpression":{"id":1773,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":960,"src":"11662:9:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1775,"indexExpression":{"id":1774,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1721,"src":"11672:2:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11662:13:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1777,"indexExpression":{"id":1776,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1719,"src":"11676:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11662:19:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11640:41:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1780,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1772,"src":"11699:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1781,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1723,"src":"11714:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11699:21:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206275726e20616d6f756e7420657863656564732062616c616e6365","id":1783,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11722:38:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_294a5de01910e2350ff231c633ae2d453ed6b1b72c75506234b7aace63eae685","typeString":"literal_string \"ERC1155: burn amount exceeds balance\""},"value":"ERC1155: burn amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_294a5de01910e2350ff231c633ae2d453ed6b1b72c75506234b7aace63eae685","typeString":"literal_string \"ERC1155: burn amount exceeds balance\""}],"id":1779,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11691:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1784,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11691:70:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1785,"nodeType":"ExpressionStatement","src":"11691:70:7"},{"id":1796,"nodeType":"UncheckedBlock","src":"11771:77:7","statements":[{"expression":{"id":1794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1786,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":960,"src":"11795:9:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1789,"indexExpression":{"id":1787,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1721,"src":"11805:2:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11795:13:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1790,"indexExpression":{"id":1788,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1719,"src":"11809:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11795:19:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1791,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1772,"src":"11817:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1792,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1723,"src":"11831:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11817:20:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11795:42:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1795,"nodeType":"ExpressionStatement","src":"11795:42:7"}]},{"eventCall":{"arguments":[{"id":1798,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1737,"src":"11878:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1799,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1719,"src":"11888:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1802,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11902:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1801,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11894:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1800,"name":"address","nodeType":"ElementaryTypeName","src":"11894:7:7","typeDescriptions":{}}},"id":1803,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11894:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1804,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1721,"src":"11906:2:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1805,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1723,"src":"11910:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1797,"name":"TransferSingle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2236,"src":"11863:14:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256,uint256)"}},"id":1806,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11863:54:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1807,"nodeType":"EmitStatement","src":"11858:59:7"},{"expression":{"arguments":[{"id":1809,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1737,"src":"11948:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1810,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1719,"src":"11958:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1813,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11972:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1812,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11964:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1811,"name":"address","nodeType":"ElementaryTypeName","src":"11964:7:7","typeDescriptions":{}}},"id":1814,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11964:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1815,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1745,"src":"11976:3:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1816,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1754,"src":"11981:7:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"hexValue":"","id":1817,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11990:2:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1808,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2014,"src":"11928:19:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1818,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11928:65:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1819,"nodeType":"ExpressionStatement","src":"11928:65:7"}]},"documentation":{"id":1717,"nodeType":"StructuredDocumentation","src":"10934:275:7","text":" @dev Destroys `amount` tokens of token type `id` from `from`\n Emits a {TransferSingle} event.\n Requirements:\n - `from` cannot be the zero address.\n - `from` must have at least `amount` tokens of token type `id`."},"id":1821,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"11223:5:7","nodeType":"FunctionDefinition","parameters":{"id":1724,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1719,"mutability":"mutable","name":"from","nameLocation":"11246:4:7","nodeType":"VariableDeclaration","scope":1821,"src":"11238:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1718,"name":"address","nodeType":"ElementaryTypeName","src":"11238:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1721,"mutability":"mutable","name":"id","nameLocation":"11268:2:7","nodeType":"VariableDeclaration","scope":1821,"src":"11260:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1720,"name":"uint256","nodeType":"ElementaryTypeName","src":"11260:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1723,"mutability":"mutable","name":"amount","nameLocation":"11288:6:7","nodeType":"VariableDeclaration","scope":1821,"src":"11280:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1722,"name":"uint256","nodeType":"ElementaryTypeName","src":"11280:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11228:72:7"},"returnParameters":{"id":1725,"nodeType":"ParameterList","parameters":[],"src":"11318:0:7"},"scope":2176,"src":"11214:786:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1943,"nodeType":"Block","src":"12368:814:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1834,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1824,"src":"12386:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1837,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12402:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1836,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12394:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1835,"name":"address","nodeType":"ElementaryTypeName","src":"12394:7:7","typeDescriptions":{}}},"id":1838,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12394:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12386:18:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206275726e2066726f6d20746865207a65726f2061646472657373","id":1840,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12406:37:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_87fd4aee52f5758d127cd9704d5ffef70f36ed1e87eb99b6f40e37a25c79a76a","typeString":"literal_string \"ERC1155: burn from the zero address\""},"value":"ERC1155: burn from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_87fd4aee52f5758d127cd9704d5ffef70f36ed1e87eb99b6f40e37a25c79a76a","typeString":"literal_string \"ERC1155: burn from the zero address\""}],"id":1833,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12378:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1841,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12378:66:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1842,"nodeType":"ExpressionStatement","src":"12378:66:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1844,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1827,"src":"12462:3:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12466:6:7","memberName":"length","nodeType":"MemberAccess","src":"12462:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1846,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1830,"src":"12476:7:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12484:6:7","memberName":"length","nodeType":"MemberAccess","src":"12476:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12462:28:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2069647320616e6420616d6f756e7473206c656e677468206d69736d61746368","id":1849,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12492:42:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807","typeString":"literal_string \"ERC1155: ids and amounts length mismatch\""},"value":"ERC1155: ids and amounts length mismatch"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807","typeString":"literal_string \"ERC1155: ids and amounts length mismatch\""}],"id":1843,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12454:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1850,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12454:81:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1851,"nodeType":"ExpressionStatement","src":"12454:81:7"},{"assignments":[1853],"declarations":[{"constant":false,"id":1853,"mutability":"mutable","name":"operator","nameLocation":"12554:8:7","nodeType":"VariableDeclaration","scope":1943,"src":"12546:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1852,"name":"address","nodeType":"ElementaryTypeName","src":"12546:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1856,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1854,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2931,"src":"12565:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1855,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12565:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"12546:31:7"},{"expression":{"arguments":[{"id":1858,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1853,"src":"12609:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1859,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1824,"src":"12619:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1862,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12633:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1861,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12625:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1860,"name":"address","nodeType":"ElementaryTypeName","src":"12625:7:7","typeDescriptions":{}}},"id":1863,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12625:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1864,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1827,"src":"12637:3:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1865,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1830,"src":"12642:7:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"hexValue":"","id":1866,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12651:2:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1857,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1995,"src":"12588:20:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1867,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12588:66:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1868,"nodeType":"ExpressionStatement","src":"12588:66:7"},{"body":{"id":1918,"nodeType":"Block","src":"12706:323:7","statements":[{"assignments":[1881],"declarations":[{"constant":false,"id":1881,"mutability":"mutable","name":"id","nameLocation":"12728:2:7","nodeType":"VariableDeclaration","scope":1918,"src":"12720:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1880,"name":"uint256","nodeType":"ElementaryTypeName","src":"12720:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1885,"initialValue":{"baseExpression":{"id":1882,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1827,"src":"12733:3:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1884,"indexExpression":{"id":1883,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1870,"src":"12737:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12733:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12720:19:7"},{"assignments":[1887],"declarations":[{"constant":false,"id":1887,"mutability":"mutable","name":"amount","nameLocation":"12761:6:7","nodeType":"VariableDeclaration","scope":1918,"src":"12753:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1886,"name":"uint256","nodeType":"ElementaryTypeName","src":"12753:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1891,"initialValue":{"baseExpression":{"id":1888,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1830,"src":"12770:7:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1890,"indexExpression":{"id":1889,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1870,"src":"12778:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12770:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12753:27:7"},{"assignments":[1893],"declarations":[{"constant":false,"id":1893,"mutability":"mutable","name":"fromBalance","nameLocation":"12803:11:7","nodeType":"VariableDeclaration","scope":1918,"src":"12795:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1892,"name":"uint256","nodeType":"ElementaryTypeName","src":"12795:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1899,"initialValue":{"baseExpression":{"baseExpression":{"id":1894,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":960,"src":"12817:9:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1896,"indexExpression":{"id":1895,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1881,"src":"12827:2:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12817:13:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1898,"indexExpression":{"id":1897,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1824,"src":"12831:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12817:19:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12795:41:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1901,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1893,"src":"12858:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1902,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1887,"src":"12873:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12858:21:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206275726e20616d6f756e7420657863656564732062616c616e6365","id":1904,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12881:38:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_294a5de01910e2350ff231c633ae2d453ed6b1b72c75506234b7aace63eae685","typeString":"literal_string \"ERC1155: burn amount exceeds balance\""},"value":"ERC1155: burn amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_294a5de01910e2350ff231c633ae2d453ed6b1b72c75506234b7aace63eae685","typeString":"literal_string \"ERC1155: burn amount exceeds balance\""}],"id":1900,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12850:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1905,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12850:70:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1906,"nodeType":"ExpressionStatement","src":"12850:70:7"},{"id":1917,"nodeType":"UncheckedBlock","src":"12934:85:7","statements":[{"expression":{"id":1915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1907,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":960,"src":"12962:9:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1910,"indexExpression":{"id":1908,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1881,"src":"12972:2:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12962:13:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1911,"indexExpression":{"id":1909,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1824,"src":"12976:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12962:19:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1912,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1893,"src":"12984:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1913,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1887,"src":"12998:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12984:20:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12962:42:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1916,"nodeType":"ExpressionStatement","src":"12962:42:7"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1873,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1870,"src":"12685:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1874,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1827,"src":"12689:3:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1875,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12693:6:7","memberName":"length","nodeType":"MemberAccess","src":"12689:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12685:14:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1919,"initializationExpression":{"assignments":[1870],"declarations":[{"constant":false,"id":1870,"mutability":"mutable","name":"i","nameLocation":"12678:1:7","nodeType":"VariableDeclaration","scope":1919,"src":"12670:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1869,"name":"uint256","nodeType":"ElementaryTypeName","src":"12670:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1872,"initialValue":{"hexValue":"30","id":1871,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12682:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"12670:13:7"},"loopExpression":{"expression":{"id":1878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"12701:3:7","subExpression":{"id":1877,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1870,"src":"12701:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1879,"nodeType":"ExpressionStatement","src":"12701:3:7"},"nodeType":"ForStatement","src":"12665:364:7"},{"eventCall":{"arguments":[{"id":1921,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1853,"src":"13058:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1922,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1824,"src":"13068:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1925,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13082:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1924,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13074:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1923,"name":"address","nodeType":"ElementaryTypeName","src":"13074:7:7","typeDescriptions":{}}},"id":1926,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13074:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1927,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1827,"src":"13086:3:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1928,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1830,"src":"13091:7:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":1920,"name":"TransferBatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2251,"src":"13044:13:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory)"}},"id":1929,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13044:55:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1930,"nodeType":"EmitStatement","src":"13039:60:7"},{"expression":{"arguments":[{"id":1932,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1853,"src":"13130:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1933,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1824,"src":"13140:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1936,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13154:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1935,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13146:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1934,"name":"address","nodeType":"ElementaryTypeName","src":"13146:7:7","typeDescriptions":{}}},"id":1937,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13146:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1938,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1827,"src":"13158:3:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1939,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1830,"src":"13163:7:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"hexValue":"","id":1940,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13172:2:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1931,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2014,"src":"13110:19:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1941,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13110:65:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1942,"nodeType":"ExpressionStatement","src":"13110:65:7"}]},"documentation":{"id":1822,"nodeType":"StructuredDocumentation","src":"12006:228:7","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n Emits a {TransferBatch} event.\n Requirements:\n - `ids` and `amounts` must have the same length."},"id":1944,"implemented":true,"kind":"function","modifiers":[],"name":"_burnBatch","nameLocation":"12248:10:7","nodeType":"FunctionDefinition","parameters":{"id":1831,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1824,"mutability":"mutable","name":"from","nameLocation":"12276:4:7","nodeType":"VariableDeclaration","scope":1944,"src":"12268:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1823,"name":"address","nodeType":"ElementaryTypeName","src":"12268:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1827,"mutability":"mutable","name":"ids","nameLocation":"12307:3:7","nodeType":"VariableDeclaration","scope":1944,"src":"12290:20:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1825,"name":"uint256","nodeType":"ElementaryTypeName","src":"12290:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1826,"nodeType":"ArrayTypeName","src":"12290:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1830,"mutability":"mutable","name":"amounts","nameLocation":"12337:7:7","nodeType":"VariableDeclaration","scope":1944,"src":"12320:24:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1828,"name":"uint256","nodeType":"ElementaryTypeName","src":"12320:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1829,"nodeType":"ArrayTypeName","src":"12320:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"12258:92:7"},"returnParameters":{"id":1832,"nodeType":"ParameterList","parameters":[],"src":"12368:0:7"},"scope":2176,"src":"12239:943:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1975,"nodeType":"Block","src":"13441:200:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1955,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1947,"src":"13459:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1956,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1949,"src":"13468:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13459:17:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2073657474696e6720617070726f76616c2073746174757320666f722073656c66","id":1958,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13478:43:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2","typeString":"literal_string \"ERC1155: setting approval status for self\""},"value":"ERC1155: setting approval status for self"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2","typeString":"literal_string \"ERC1155: setting approval status for self\""}],"id":1954,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13451:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1959,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13451:71:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1960,"nodeType":"ExpressionStatement","src":"13451:71:7"},{"expression":{"id":1967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1961,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":966,"src":"13532:18:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":1964,"indexExpression":{"id":1962,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1947,"src":"13551:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13532:25:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1965,"indexExpression":{"id":1963,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1949,"src":"13558:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13532:35:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1966,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1951,"src":"13570:8:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13532:46:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1968,"nodeType":"ExpressionStatement","src":"13532:46:7"},{"eventCall":{"arguments":[{"id":1970,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1947,"src":"13608:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1971,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1949,"src":"13615:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1972,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1951,"src":"13625:8:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1969,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2260,"src":"13593:14:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":1973,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13593:41:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1974,"nodeType":"EmitStatement","src":"13588:46:7"}]},"documentation":{"id":1945,"nodeType":"StructuredDocumentation","src":"13188:125:7","text":" @dev Approve `operator` to operate on all of `owner` tokens\n Emits an {ApprovalForAll} event."},"id":1976,"implemented":true,"kind":"function","modifiers":[],"name":"_setApprovalForAll","nameLocation":"13327:18:7","nodeType":"FunctionDefinition","parameters":{"id":1952,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1947,"mutability":"mutable","name":"owner","nameLocation":"13363:5:7","nodeType":"VariableDeclaration","scope":1976,"src":"13355:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1946,"name":"address","nodeType":"ElementaryTypeName","src":"13355:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1949,"mutability":"mutable","name":"operator","nameLocation":"13386:8:7","nodeType":"VariableDeclaration","scope":1976,"src":"13378:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1948,"name":"address","nodeType":"ElementaryTypeName","src":"13378:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1951,"mutability":"mutable","name":"approved","nameLocation":"13409:8:7","nodeType":"VariableDeclaration","scope":1976,"src":"13404:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1950,"name":"bool","nodeType":"ElementaryTypeName","src":"13404:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"13345:78:7"},"returnParameters":{"id":1953,"nodeType":"ParameterList","parameters":[],"src":"13441:0:7"},"scope":2176,"src":"13318:323:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1994,"nodeType":"Block","src":"14789:2:7","statements":[]},"documentation":{"id":1977,"nodeType":"StructuredDocumentation","src":"13647:925:7","text":" @dev Hook that is called before any token transfer. This includes minting\n and burning, as well as batched variants.\n The same hook is called on both single and batched variants. For single\n transfers, the length of the `ids` and `amounts` arrays will be 1.\n Calling conditions (for each `id` and `amount` pair):\n - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n of token type `id` will be  transferred to `to`.\n - When `from` is zero, `amount` tokens of token type `id` will be minted\n for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n will be burned.\n - `from` and `to` are never both zero.\n - `ids` and `amounts` have the same, non-zero length.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1995,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"14586:20:7","nodeType":"FunctionDefinition","parameters":{"id":1992,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1979,"mutability":"mutable","name":"operator","nameLocation":"14624:8:7","nodeType":"VariableDeclaration","scope":1995,"src":"14616:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1978,"name":"address","nodeType":"ElementaryTypeName","src":"14616:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1981,"mutability":"mutable","name":"from","nameLocation":"14650:4:7","nodeType":"VariableDeclaration","scope":1995,"src":"14642:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1980,"name":"address","nodeType":"ElementaryTypeName","src":"14642:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1983,"mutability":"mutable","name":"to","nameLocation":"14672:2:7","nodeType":"VariableDeclaration","scope":1995,"src":"14664:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1982,"name":"address","nodeType":"ElementaryTypeName","src":"14664:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1986,"mutability":"mutable","name":"ids","nameLocation":"14701:3:7","nodeType":"VariableDeclaration","scope":1995,"src":"14684:20:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1984,"name":"uint256","nodeType":"ElementaryTypeName","src":"14684:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1985,"nodeType":"ArrayTypeName","src":"14684:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1989,"mutability":"mutable","name":"amounts","nameLocation":"14731:7:7","nodeType":"VariableDeclaration","scope":1995,"src":"14714:24:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1987,"name":"uint256","nodeType":"ElementaryTypeName","src":"14714:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1988,"nodeType":"ArrayTypeName","src":"14714:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1991,"mutability":"mutable","name":"data","nameLocation":"14761:4:7","nodeType":"VariableDeclaration","scope":1995,"src":"14748:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1990,"name":"bytes","nodeType":"ElementaryTypeName","src":"14748:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14606:165:7"},"returnParameters":{"id":1993,"nodeType":"ParameterList","parameters":[],"src":"14789:0:7"},"scope":2176,"src":"14577:214:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2013,"nodeType":"Block","src":"15935:2:7","statements":[]},"documentation":{"id":1996,"nodeType":"StructuredDocumentation","src":"14797:922:7","text":" @dev Hook that is called after any token transfer. This includes minting\n and burning, as well as batched variants.\n The same hook is called on both single and batched variants. For single\n transfers, the length of the `id` and `amount` arrays will be 1.\n Calling conditions (for each `id` and `amount` pair):\n - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n of token type `id` will be  transferred to `to`.\n - When `from` is zero, `amount` tokens of token type `id` will be minted\n for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n will be burned.\n - `from` and `to` are never both zero.\n - `ids` and `amounts` have the same, non-zero length.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":2014,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"15733:19:7","nodeType":"FunctionDefinition","parameters":{"id":2011,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1998,"mutability":"mutable","name":"operator","nameLocation":"15770:8:7","nodeType":"VariableDeclaration","scope":2014,"src":"15762:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1997,"name":"address","nodeType":"ElementaryTypeName","src":"15762:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2000,"mutability":"mutable","name":"from","nameLocation":"15796:4:7","nodeType":"VariableDeclaration","scope":2014,"src":"15788:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1999,"name":"address","nodeType":"ElementaryTypeName","src":"15788:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2002,"mutability":"mutable","name":"to","nameLocation":"15818:2:7","nodeType":"VariableDeclaration","scope":2014,"src":"15810:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2001,"name":"address","nodeType":"ElementaryTypeName","src":"15810:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2005,"mutability":"mutable","name":"ids","nameLocation":"15847:3:7","nodeType":"VariableDeclaration","scope":2014,"src":"15830:20:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2003,"name":"uint256","nodeType":"ElementaryTypeName","src":"15830:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2004,"nodeType":"ArrayTypeName","src":"15830:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2008,"mutability":"mutable","name":"amounts","nameLocation":"15877:7:7","nodeType":"VariableDeclaration","scope":2014,"src":"15860:24:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2006,"name":"uint256","nodeType":"ElementaryTypeName","src":"15860:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2007,"nodeType":"ArrayTypeName","src":"15860:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2010,"mutability":"mutable","name":"data","nameLocation":"15907:4:7","nodeType":"VariableDeclaration","scope":2014,"src":"15894:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2009,"name":"bytes","nodeType":"ElementaryTypeName","src":"15894:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"15752:165:7"},"returnParameters":{"id":2012,"nodeType":"ParameterList","parameters":[],"src":"15935:0:7"},"scope":2176,"src":"15724:213:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2076,"nodeType":"Block","src":"16136:554:7","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2029,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2020,"src":"16150:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16153:10:7","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2638,"src":"16150:13:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":2031,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16150:15:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2075,"nodeType":"IfStatement","src":"16146:538:7","trueBody":{"id":2074,"nodeType":"Block","src":"16167:517:7","statements":[{"clauses":[{"block":{"id":2056,"nodeType":"Block","src":"16295:195:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2045,"name":"response","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2043,"src":"16317:8:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"id":2046,"name":"IERC1155ReceiverUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2217,"src":"16329:27:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155ReceiverUpgradeable_$2217_$","typeString":"type(contract IERC1155ReceiverUpgradeable)"}},"id":2047,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16357:17:7","memberName":"onERC1155Received","nodeType":"MemberAccess","referencedDeclaration":2198,"src":"16329:45:7","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC1155ReceiverUpgradeable.onERC1155Received(address,address,uint256,uint256,bytes calldata) returns (bytes4)"}},"id":2048,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16375:8:7","memberName":"selector","nodeType":"MemberAccess","src":"16329:54:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"16317:66:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2055,"nodeType":"IfStatement","src":"16313:163:7","trueBody":{"id":2054,"nodeType":"Block","src":"16385:91:7","statements":[{"expression":{"arguments":[{"hexValue":"455243313135353a204552433131353552656365697665722072656a656374656420746f6b656e73","id":2051,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16414:42:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503","typeString":"literal_string \"ERC1155: ERC1155Receiver rejected tokens\""},"value":"ERC1155: ERC1155Receiver rejected tokens"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503","typeString":"literal_string \"ERC1155: ERC1155Receiver rejected tokens\""}],"id":2050,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"16407:6:7","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2052,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16407:50:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2053,"nodeType":"ExpressionStatement","src":"16407:50:7"}]}}]},"errorName":"","id":2057,"nodeType":"TryCatchClause","parameters":{"id":2044,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2043,"mutability":"mutable","name":"response","nameLocation":"16285:8:7","nodeType":"VariableDeclaration","scope":2057,"src":"16278:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2042,"name":"bytes4","nodeType":"ElementaryTypeName","src":"16278:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"16277:17:7"},"src":"16269:221:7"},{"block":{"id":2065,"nodeType":"Block","src":"16525:47:7","statements":[{"expression":{"arguments":[{"id":2062,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2059,"src":"16550:6:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2061,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"16543:6:7","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2063,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16543:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2064,"nodeType":"ExpressionStatement","src":"16543:14:7"}]},"errorName":"Error","id":2066,"nodeType":"TryCatchClause","parameters":{"id":2060,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2059,"mutability":"mutable","name":"reason","nameLocation":"16517:6:7","nodeType":"VariableDeclaration","scope":2066,"src":"16503:20:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2058,"name":"string","nodeType":"ElementaryTypeName","src":"16503:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"16502:22:7"},"src":"16491:81:7"},{"block":{"id":2071,"nodeType":"Block","src":"16579:95:7","statements":[{"expression":{"arguments":[{"hexValue":"455243313135353a207472616e7366657220746f206e6f6e2d45524331313535526563656976657220696d706c656d656e746572","id":2068,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16604:54:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d","typeString":"literal_string \"ERC1155: transfer to non-ERC1155Receiver implementer\""},"value":"ERC1155: transfer to non-ERC1155Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d","typeString":"literal_string \"ERC1155: transfer to non-ERC1155Receiver implementer\""}],"id":2067,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"16597:6:7","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2069,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16597:62:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2070,"nodeType":"ExpressionStatement","src":"16597:62:7"}]},"errorName":"","id":2072,"nodeType":"TryCatchClause","src":"16573:101:7"}],"externalCall":{"arguments":[{"id":2036,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2016,"src":"16235:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2037,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"16245:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2038,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2022,"src":"16251:2:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2039,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2024,"src":"16255:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2040,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2026,"src":"16263:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":2033,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2020,"src":"16213:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2032,"name":"IERC1155ReceiverUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2217,"src":"16185:27:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155ReceiverUpgradeable_$2217_$","typeString":"type(contract IERC1155ReceiverUpgradeable)"}},"id":2034,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16185:31:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155ReceiverUpgradeable_$2217","typeString":"contract IERC1155ReceiverUpgradeable"}},"id":2035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16217:17:7","memberName":"onERC1155Received","nodeType":"MemberAccess","referencedDeclaration":2198,"src":"16185:49:7","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,uint256,bytes memory) external returns (bytes4)"}},"id":2041,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16185:83:7","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":2073,"nodeType":"TryStatement","src":"16181:493:7"}]}}]},"id":2077,"implemented":true,"kind":"function","modifiers":[],"name":"_doSafeTransferAcceptanceCheck","nameLocation":"15952:30:7","nodeType":"FunctionDefinition","parameters":{"id":2027,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2016,"mutability":"mutable","name":"operator","nameLocation":"16000:8:7","nodeType":"VariableDeclaration","scope":2077,"src":"15992:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2015,"name":"address","nodeType":"ElementaryTypeName","src":"15992:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2018,"mutability":"mutable","name":"from","nameLocation":"16026:4:7","nodeType":"VariableDeclaration","scope":2077,"src":"16018:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2017,"name":"address","nodeType":"ElementaryTypeName","src":"16018:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2020,"mutability":"mutable","name":"to","nameLocation":"16048:2:7","nodeType":"VariableDeclaration","scope":2077,"src":"16040:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2019,"name":"address","nodeType":"ElementaryTypeName","src":"16040:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2022,"mutability":"mutable","name":"id","nameLocation":"16068:2:7","nodeType":"VariableDeclaration","scope":2077,"src":"16060:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2021,"name":"uint256","nodeType":"ElementaryTypeName","src":"16060:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2024,"mutability":"mutable","name":"amount","nameLocation":"16088:6:7","nodeType":"VariableDeclaration","scope":2077,"src":"16080:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2023,"name":"uint256","nodeType":"ElementaryTypeName","src":"16080:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2026,"mutability":"mutable","name":"data","nameLocation":"16117:4:7","nodeType":"VariableDeclaration","scope":2077,"src":"16104:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2025,"name":"bytes","nodeType":"ElementaryTypeName","src":"16104:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"15982:145:7"},"returnParameters":{"id":2028,"nodeType":"ParameterList","parameters":[],"src":"16136:0:7"},"scope":2176,"src":"15943:747:7","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":2141,"nodeType":"Block","src":"16914:596:7","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2094,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2083,"src":"16928:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16931:10:7","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2638,"src":"16928:13:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":2096,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16928:15:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2140,"nodeType":"IfStatement","src":"16924:580:7","trueBody":{"id":2139,"nodeType":"Block","src":"16945:559:7","statements":[{"clauses":[{"block":{"id":2121,"nodeType":"Block","src":"17110:200:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2110,"name":"response","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2108,"src":"17132:8:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"id":2111,"name":"IERC1155ReceiverUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2217,"src":"17144:27:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155ReceiverUpgradeable_$2217_$","typeString":"type(contract IERC1155ReceiverUpgradeable)"}},"id":2112,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"17172:22:7","memberName":"onERC1155BatchReceived","nodeType":"MemberAccess","referencedDeclaration":2216,"src":"17144:50:7","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_calldata_ptr_$_t_array$_t_uint256_$dyn_calldata_ptr_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC1155ReceiverUpgradeable.onERC1155BatchReceived(address,address,uint256[] calldata,uint256[] calldata,bytes calldata) returns (bytes4)"}},"id":2113,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"17195:8:7","memberName":"selector","nodeType":"MemberAccess","src":"17144:59:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"17132:71:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2120,"nodeType":"IfStatement","src":"17128:168:7","trueBody":{"id":2119,"nodeType":"Block","src":"17205:91:7","statements":[{"expression":{"arguments":[{"hexValue":"455243313135353a204552433131353552656365697665722072656a656374656420746f6b656e73","id":2116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"17234:42:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503","typeString":"literal_string \"ERC1155: ERC1155Receiver rejected tokens\""},"value":"ERC1155: ERC1155Receiver rejected tokens"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503","typeString":"literal_string \"ERC1155: ERC1155Receiver rejected tokens\""}],"id":2115,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"17227:6:7","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17227:50:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2118,"nodeType":"ExpressionStatement","src":"17227:50:7"}]}}]},"errorName":"","id":2122,"nodeType":"TryCatchClause","parameters":{"id":2109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2108,"mutability":"mutable","name":"response","nameLocation":"17087:8:7","nodeType":"VariableDeclaration","scope":2122,"src":"17080:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2107,"name":"bytes4","nodeType":"ElementaryTypeName","src":"17080:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"17062:47:7"},"src":"17054:256:7"},{"block":{"id":2130,"nodeType":"Block","src":"17345:47:7","statements":[{"expression":{"arguments":[{"id":2127,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2124,"src":"17370:6:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2126,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"17363:6:7","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2128,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17363:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2129,"nodeType":"ExpressionStatement","src":"17363:14:7"}]},"errorName":"Error","id":2131,"nodeType":"TryCatchClause","parameters":{"id":2125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2124,"mutability":"mutable","name":"reason","nameLocation":"17337:6:7","nodeType":"VariableDeclaration","scope":2131,"src":"17323:20:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2123,"name":"string","nodeType":"ElementaryTypeName","src":"17323:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"17322:22:7"},"src":"17311:81:7"},{"block":{"id":2136,"nodeType":"Block","src":"17399:95:7","statements":[{"expression":{"arguments":[{"hexValue":"455243313135353a207472616e7366657220746f206e6f6e2d45524331313535526563656976657220696d706c656d656e746572","id":2133,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"17424:54:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d","typeString":"literal_string \"ERC1155: transfer to non-ERC1155Receiver implementer\""},"value":"ERC1155: transfer to non-ERC1155Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d","typeString":"literal_string \"ERC1155: transfer to non-ERC1155Receiver implementer\""}],"id":2132,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"17417:6:7","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2134,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17417:62:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2135,"nodeType":"ExpressionStatement","src":"17417:62:7"}]},"errorName":"","id":2137,"nodeType":"TryCatchClause","src":"17393:101:7"}],"externalCall":{"arguments":[{"id":2101,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2079,"src":"17018:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2102,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2081,"src":"17028:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2103,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2086,"src":"17034:3:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":2104,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2089,"src":"17039:7:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":2105,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2091,"src":"17048:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":2098,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2083,"src":"16991:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2097,"name":"IERC1155ReceiverUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2217,"src":"16963:27:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155ReceiverUpgradeable_$2217_$","typeString":"type(contract IERC1155ReceiverUpgradeable)"}},"id":2099,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16963:31:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155ReceiverUpgradeable_$2217","typeString":"contract IERC1155ReceiverUpgradeable"}},"id":2100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16995:22:7","memberName":"onERC1155BatchReceived","nodeType":"MemberAccess","referencedDeclaration":2216,"src":"16963:54:7","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256[] memory,uint256[] memory,bytes memory) external returns (bytes4)"}},"id":2106,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16963:90:7","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":2138,"nodeType":"TryStatement","src":"16959:535:7"}]}}]},"id":2142,"implemented":true,"kind":"function","modifiers":[],"name":"_doSafeBatchTransferAcceptanceCheck","nameLocation":"16705:35:7","nodeType":"FunctionDefinition","parameters":{"id":2092,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2079,"mutability":"mutable","name":"operator","nameLocation":"16758:8:7","nodeType":"VariableDeclaration","scope":2142,"src":"16750:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2078,"name":"address","nodeType":"ElementaryTypeName","src":"16750:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2081,"mutability":"mutable","name":"from","nameLocation":"16784:4:7","nodeType":"VariableDeclaration","scope":2142,"src":"16776:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2080,"name":"address","nodeType":"ElementaryTypeName","src":"16776:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2083,"mutability":"mutable","name":"to","nameLocation":"16806:2:7","nodeType":"VariableDeclaration","scope":2142,"src":"16798:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2082,"name":"address","nodeType":"ElementaryTypeName","src":"16798:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2086,"mutability":"mutable","name":"ids","nameLocation":"16835:3:7","nodeType":"VariableDeclaration","scope":2142,"src":"16818:20:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2084,"name":"uint256","nodeType":"ElementaryTypeName","src":"16818:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2085,"nodeType":"ArrayTypeName","src":"16818:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2089,"mutability":"mutable","name":"amounts","nameLocation":"16865:7:7","nodeType":"VariableDeclaration","scope":2142,"src":"16848:24:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2087,"name":"uint256","nodeType":"ElementaryTypeName","src":"16848:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2088,"nodeType":"ArrayTypeName","src":"16848:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2091,"mutability":"mutable","name":"data","nameLocation":"16895:4:7","nodeType":"VariableDeclaration","scope":2142,"src":"16882:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2090,"name":"bytes","nodeType":"ElementaryTypeName","src":"16882:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"16740:165:7"},"returnParameters":{"id":2093,"nodeType":"ParameterList","parameters":[],"src":"16914:0:7"},"scope":2176,"src":"16696:814:7","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":2169,"nodeType":"Block","src":"17600:109:7","statements":[{"assignments":[2154],"declarations":[{"constant":false,"id":2154,"mutability":"mutable","name":"array","nameLocation":"17627:5:7","nodeType":"VariableDeclaration","scope":2169,"src":"17610:22:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2152,"name":"uint256","nodeType":"ElementaryTypeName","src":"17610:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2153,"nodeType":"ArrayTypeName","src":"17610:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":2160,"initialValue":{"arguments":[{"hexValue":"31","id":2158,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17649:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":2157,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"17635:13:7","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":2155,"name":"uint256","nodeType":"ElementaryTypeName","src":"17639:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2156,"nodeType":"ArrayTypeName","src":"17639:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":2159,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17635:16:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"17610:41:7"},{"expression":{"id":2165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2161,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2154,"src":"17661:5:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2163,"indexExpression":{"hexValue":"30","id":2162,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17667:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"17661:8:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2164,"name":"element","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2144,"src":"17672:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17661:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2166,"nodeType":"ExpressionStatement","src":"17661:18:7"},{"expression":{"id":2167,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2154,"src":"17697:5:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":2149,"id":2168,"nodeType":"Return","src":"17690:12:7"}]},"id":2170,"implemented":true,"kind":"function","modifiers":[],"name":"_asSingletonArray","nameLocation":"17525:17:7","nodeType":"FunctionDefinition","parameters":{"id":2145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2144,"mutability":"mutable","name":"element","nameLocation":"17551:7:7","nodeType":"VariableDeclaration","scope":2170,"src":"17543:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2143,"name":"uint256","nodeType":"ElementaryTypeName","src":"17543:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17542:17:7"},"returnParameters":{"id":2149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2148,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2170,"src":"17582:16:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2146,"name":"uint256","nodeType":"ElementaryTypeName","src":"17582:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2147,"nodeType":"ArrayTypeName","src":"17582:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"17581:18:7"},"scope":2176,"src":"17516:193:7","stateMutability":"pure","virtual":false,"visibility":"private"},{"constant":false,"documentation":{"id":2171,"nodeType":"StructuredDocumentation","src":"17715:254:7","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":2175,"mutability":"mutable","name":"__gap","nameLocation":"17994:5:7","nodeType":"VariableDeclaration","scope":2176,"src":"17974:25:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$47_storage","typeString":"uint256[47]"},"typeName":{"baseType":{"id":2172,"name":"uint256","nodeType":"ElementaryTypeName","src":"17974:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2174,"length":{"hexValue":"3437","id":2173,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17982:2:7","typeDescriptions":{"typeIdentifier":"t_rational_47_by_1","typeString":"int_const 47"},"value":"47"},"nodeType":"ArrayTypeName","src":"17974:11:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$47_storage_ptr","typeString":"uint256[47]"}},"visibility":"private"}],"scope":2177,"src":"682:17320:7","usedErrors":[]}],"src":"109:17894:7"},"id":7},"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol","exportedSymbols":{"IERC1155ReceiverUpgradeable":[2217],"IERC165Upgradeable":[3748]},"id":2218,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2178,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"118:23:8"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol","file":"../../utils/introspection/IERC165Upgradeable.sol","id":2179,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2218,"sourceUnit":3749,"src":"143:58:8","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2181,"name":"IERC165Upgradeable","nameLocations":["284:18:8"],"nodeType":"IdentifierPath","referencedDeclaration":3748,"src":"284:18:8"},"id":2182,"nodeType":"InheritanceSpecifier","src":"284:18:8"}],"canonicalName":"IERC1155ReceiverUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":2180,"nodeType":"StructuredDocumentation","src":"203:39:8","text":" @dev _Available since v3.1._"},"fullyImplemented":false,"id":2217,"linearizedBaseContracts":[2217,3748],"name":"IERC1155ReceiverUpgradeable","nameLocation":"253:27:8","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2183,"nodeType":"StructuredDocumentation","src":"309:826:8","text":" @dev Handles the receipt of a single ERC1155 token type. This function is\n called at the end of a `safeTransferFrom` after the balance has been updated.\n NOTE: To accept the transfer, this must return\n `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n (i.e. 0xf23a6e61, or its own function selector).\n @param operator The address which initiated the transfer (i.e. msg.sender)\n @param from The address which previously owned the token\n @param id The ID of the token being transferred\n @param value The amount of tokens being transferred\n @param data Additional data with no specified format\n @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed"},"functionSelector":"f23a6e61","id":2198,"implemented":false,"kind":"function","modifiers":[],"name":"onERC1155Received","nameLocation":"1149:17:8","nodeType":"FunctionDefinition","parameters":{"id":2194,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2185,"mutability":"mutable","name":"operator","nameLocation":"1184:8:8","nodeType":"VariableDeclaration","scope":2198,"src":"1176:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2184,"name":"address","nodeType":"ElementaryTypeName","src":"1176:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2187,"mutability":"mutable","name":"from","nameLocation":"1210:4:8","nodeType":"VariableDeclaration","scope":2198,"src":"1202:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2186,"name":"address","nodeType":"ElementaryTypeName","src":"1202:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2189,"mutability":"mutable","name":"id","nameLocation":"1232:2:8","nodeType":"VariableDeclaration","scope":2198,"src":"1224:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2188,"name":"uint256","nodeType":"ElementaryTypeName","src":"1224:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2191,"mutability":"mutable","name":"value","nameLocation":"1252:5:8","nodeType":"VariableDeclaration","scope":2198,"src":"1244:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2190,"name":"uint256","nodeType":"ElementaryTypeName","src":"1244:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2193,"mutability":"mutable","name":"data","nameLocation":"1282:4:8","nodeType":"VariableDeclaration","scope":2198,"src":"1267:19:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2192,"name":"bytes","nodeType":"ElementaryTypeName","src":"1267:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1166:126:8"},"returnParameters":{"id":2197,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2196,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2198,"src":"1311:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2195,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1311:6:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1310:8:8"},"scope":2217,"src":"1140:179:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2199,"nodeType":"StructuredDocumentation","src":"1325:994:8","text":" @dev Handles the receipt of a multiple ERC1155 token types. This function\n is called at the end of a `safeBatchTransferFrom` after the balances have\n been updated.\n NOTE: To accept the transfer(s), this must return\n `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n (i.e. 0xbc197c81, or its own function selector).\n @param operator The address which initiated the batch transfer (i.e. msg.sender)\n @param from The address which previously owned the token\n @param ids An array containing ids of each token being transferred (order and length must match values array)\n @param values An array containing amounts of each token being transferred (order and length must match ids array)\n @param data Additional data with no specified format\n @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed"},"functionSelector":"bc197c81","id":2216,"implemented":false,"kind":"function","modifiers":[],"name":"onERC1155BatchReceived","nameLocation":"2333:22:8","nodeType":"FunctionDefinition","parameters":{"id":2212,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2201,"mutability":"mutable","name":"operator","nameLocation":"2373:8:8","nodeType":"VariableDeclaration","scope":2216,"src":"2365:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2200,"name":"address","nodeType":"ElementaryTypeName","src":"2365:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2203,"mutability":"mutable","name":"from","nameLocation":"2399:4:8","nodeType":"VariableDeclaration","scope":2216,"src":"2391:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2202,"name":"address","nodeType":"ElementaryTypeName","src":"2391:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2206,"mutability":"mutable","name":"ids","nameLocation":"2432:3:8","nodeType":"VariableDeclaration","scope":2216,"src":"2413:22:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2204,"name":"uint256","nodeType":"ElementaryTypeName","src":"2413:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2205,"nodeType":"ArrayTypeName","src":"2413:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2209,"mutability":"mutable","name":"values","nameLocation":"2464:6:8","nodeType":"VariableDeclaration","scope":2216,"src":"2445:25:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2207,"name":"uint256","nodeType":"ElementaryTypeName","src":"2445:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2208,"nodeType":"ArrayTypeName","src":"2445:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2211,"mutability":"mutable","name":"data","nameLocation":"2495:4:8","nodeType":"VariableDeclaration","scope":2216,"src":"2480:19:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2210,"name":"bytes","nodeType":"ElementaryTypeName","src":"2480:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2355:150:8"},"returnParameters":{"id":2215,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2214,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2216,"src":"2524:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2213,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2524:6:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2523:8:8"},"scope":2217,"src":"2324:208:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2218,"src":"243:2291:8","usedErrors":[]}],"src":"118:2417:8"},"id":8},"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol","exportedSymbols":{"IERC1155Upgradeable":[2339],"IERC165Upgradeable":[3748]},"id":2340,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2219,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"110:23:9"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol","file":"../../utils/introspection/IERC165Upgradeable.sol","id":2220,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2340,"sourceUnit":3749,"src":"135:58:9","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2222,"name":"IERC165Upgradeable","nameLocations":["394:18:9"],"nodeType":"IdentifierPath","referencedDeclaration":3748,"src":"394:18:9"},"id":2223,"nodeType":"InheritanceSpecifier","src":"394:18:9"}],"canonicalName":"IERC1155Upgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":2221,"nodeType":"StructuredDocumentation","src":"195:165:9","text":" @dev Required interface of an ERC1155 compliant contract, as defined in the\n https://eips.ethereum.org/EIPS/eip-1155[EIP].\n _Available since v3.1._"},"fullyImplemented":false,"id":2339,"linearizedBaseContracts":[2339,3748],"name":"IERC1155Upgradeable","nameLocation":"371:19:9","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":2224,"nodeType":"StructuredDocumentation","src":"419:121:9","text":" @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."},"eventSelector":"c3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62","id":2236,"name":"TransferSingle","nameLocation":"551:14:9","nodeType":"EventDefinition","parameters":{"id":2235,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2226,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"582:8:9","nodeType":"VariableDeclaration","scope":2236,"src":"566:24:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2225,"name":"address","nodeType":"ElementaryTypeName","src":"566:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2228,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"608:4:9","nodeType":"VariableDeclaration","scope":2236,"src":"592:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2227,"name":"address","nodeType":"ElementaryTypeName","src":"592:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2230,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"630:2:9","nodeType":"VariableDeclaration","scope":2236,"src":"614:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2229,"name":"address","nodeType":"ElementaryTypeName","src":"614:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2232,"indexed":false,"mutability":"mutable","name":"id","nameLocation":"642:2:9","nodeType":"VariableDeclaration","scope":2236,"src":"634:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2231,"name":"uint256","nodeType":"ElementaryTypeName","src":"634:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2234,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"654:5:9","nodeType":"VariableDeclaration","scope":2236,"src":"646:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2233,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"565:95:9"},"src":"545:116:9"},{"anonymous":false,"documentation":{"id":2237,"nodeType":"StructuredDocumentation","src":"667:144:9","text":" @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n transfers."},"eventSelector":"4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb","id":2251,"name":"TransferBatch","nameLocation":"822:13:9","nodeType":"EventDefinition","parameters":{"id":2250,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2239,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"861:8:9","nodeType":"VariableDeclaration","scope":2251,"src":"845:24:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2238,"name":"address","nodeType":"ElementaryTypeName","src":"845:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2241,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"895:4:9","nodeType":"VariableDeclaration","scope":2251,"src":"879:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2240,"name":"address","nodeType":"ElementaryTypeName","src":"879:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2243,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"925:2:9","nodeType":"VariableDeclaration","scope":2251,"src":"909:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2242,"name":"address","nodeType":"ElementaryTypeName","src":"909:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2246,"indexed":false,"mutability":"mutable","name":"ids","nameLocation":"947:3:9","nodeType":"VariableDeclaration","scope":2251,"src":"937:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2244,"name":"uint256","nodeType":"ElementaryTypeName","src":"937:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2245,"nodeType":"ArrayTypeName","src":"937:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2249,"indexed":false,"mutability":"mutable","name":"values","nameLocation":"970:6:9","nodeType":"VariableDeclaration","scope":2251,"src":"960:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2247,"name":"uint256","nodeType":"ElementaryTypeName","src":"960:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2248,"nodeType":"ArrayTypeName","src":"960:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"835:147:9"},"src":"816:167:9"},{"anonymous":false,"documentation":{"id":2252,"nodeType":"StructuredDocumentation","src":"989:147:9","text":" @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n `approved`."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":2260,"name":"ApprovalForAll","nameLocation":"1147:14:9","nodeType":"EventDefinition","parameters":{"id":2259,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2254,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1178:7:9","nodeType":"VariableDeclaration","scope":2260,"src":"1162:23:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2253,"name":"address","nodeType":"ElementaryTypeName","src":"1162:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2256,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"1203:8:9","nodeType":"VariableDeclaration","scope":2260,"src":"1187:24:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2255,"name":"address","nodeType":"ElementaryTypeName","src":"1187:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2258,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"1218:8:9","nodeType":"VariableDeclaration","scope":2260,"src":"1213:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2257,"name":"bool","nodeType":"ElementaryTypeName","src":"1213:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1161:66:9"},"src":"1141:87:9"},{"anonymous":false,"documentation":{"id":2261,"nodeType":"StructuredDocumentation","src":"1234:343:9","text":" @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n If an {URI} event was emitted for `id`, the standard\n https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n returned by {IERC1155MetadataURI-uri}."},"eventSelector":"6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b","id":2267,"name":"URI","nameLocation":"1588:3:9","nodeType":"EventDefinition","parameters":{"id":2266,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2263,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"1599:5:9","nodeType":"VariableDeclaration","scope":2267,"src":"1592:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2262,"name":"string","nodeType":"ElementaryTypeName","src":"1592:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2265,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"1622:2:9","nodeType":"VariableDeclaration","scope":2267,"src":"1606:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2264,"name":"uint256","nodeType":"ElementaryTypeName","src":"1606:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1591:34:9"},"src":"1582:44:9"},{"documentation":{"id":2268,"nodeType":"StructuredDocumentation","src":"1632:173:9","text":" @dev Returns the amount of tokens of token type `id` owned by `account`.\n Requirements:\n - `account` cannot be the zero address."},"functionSelector":"00fdd58e","id":2277,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"1819:9:9","nodeType":"FunctionDefinition","parameters":{"id":2273,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2270,"mutability":"mutable","name":"account","nameLocation":"1837:7:9","nodeType":"VariableDeclaration","scope":2277,"src":"1829:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2269,"name":"address","nodeType":"ElementaryTypeName","src":"1829:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2272,"mutability":"mutable","name":"id","nameLocation":"1854:2:9","nodeType":"VariableDeclaration","scope":2277,"src":"1846:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2271,"name":"uint256","nodeType":"ElementaryTypeName","src":"1846:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1828:29:9"},"returnParameters":{"id":2276,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2275,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2277,"src":"1881:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2274,"name":"uint256","nodeType":"ElementaryTypeName","src":"1881:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1880:9:9"},"scope":2339,"src":"1810:80:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2278,"nodeType":"StructuredDocumentation","src":"1896:188:9","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n Requirements:\n - `accounts` and `ids` must have the same length."},"functionSelector":"4e1273f4","id":2290,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOfBatch","nameLocation":"2098:14:9","nodeType":"FunctionDefinition","parameters":{"id":2285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2281,"mutability":"mutable","name":"accounts","nameLocation":"2132:8:9","nodeType":"VariableDeclaration","scope":2290,"src":"2113:27:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2279,"name":"address","nodeType":"ElementaryTypeName","src":"2113:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2280,"nodeType":"ArrayTypeName","src":"2113:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2284,"mutability":"mutable","name":"ids","nameLocation":"2161:3:9","nodeType":"VariableDeclaration","scope":2290,"src":"2142:22:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2282,"name":"uint256","nodeType":"ElementaryTypeName","src":"2142:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2283,"nodeType":"ArrayTypeName","src":"2142:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2112:53:9"},"returnParameters":{"id":2289,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2288,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2290,"src":"2213:16:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2286,"name":"uint256","nodeType":"ElementaryTypeName","src":"2213:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2287,"nodeType":"ArrayTypeName","src":"2213:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2212:18:9"},"scope":2339,"src":"2089:142:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2291,"nodeType":"StructuredDocumentation","src":"2237:248:9","text":" @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n Emits an {ApprovalForAll} event.\n Requirements:\n - `operator` cannot be the caller."},"functionSelector":"a22cb465","id":2298,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"2499:17:9","nodeType":"FunctionDefinition","parameters":{"id":2296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2293,"mutability":"mutable","name":"operator","nameLocation":"2525:8:9","nodeType":"VariableDeclaration","scope":2298,"src":"2517:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2292,"name":"address","nodeType":"ElementaryTypeName","src":"2517:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2295,"mutability":"mutable","name":"approved","nameLocation":"2540:8:9","nodeType":"VariableDeclaration","scope":2298,"src":"2535:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2294,"name":"bool","nodeType":"ElementaryTypeName","src":"2535:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2516:33:9"},"returnParameters":{"id":2297,"nodeType":"ParameterList","parameters":[],"src":"2558:0:9"},"scope":2339,"src":"2490:69:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2299,"nodeType":"StructuredDocumentation","src":"2565:135:9","text":" @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n See {setApprovalForAll}."},"functionSelector":"e985e9c5","id":2308,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"2714:16:9","nodeType":"FunctionDefinition","parameters":{"id":2304,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2301,"mutability":"mutable","name":"account","nameLocation":"2739:7:9","nodeType":"VariableDeclaration","scope":2308,"src":"2731:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2300,"name":"address","nodeType":"ElementaryTypeName","src":"2731:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2303,"mutability":"mutable","name":"operator","nameLocation":"2756:8:9","nodeType":"VariableDeclaration","scope":2308,"src":"2748:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2302,"name":"address","nodeType":"ElementaryTypeName","src":"2748:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2730:35:9"},"returnParameters":{"id":2307,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2306,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2308,"src":"2789:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2305,"name":"bool","nodeType":"ElementaryTypeName","src":"2789:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2788:6:9"},"scope":2339,"src":"2705:90:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2309,"nodeType":"StructuredDocumentation","src":"2801:556:9","text":" @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n Emits a {TransferSingle} event.\n Requirements:\n - `to` cannot be the zero address.\n - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n - `from` must have a balance of tokens of type `id` of at least `amount`.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n acceptance magic value."},"functionSelector":"f242432a","id":2322,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"3371:16:9","nodeType":"FunctionDefinition","parameters":{"id":2320,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2311,"mutability":"mutable","name":"from","nameLocation":"3405:4:9","nodeType":"VariableDeclaration","scope":2322,"src":"3397:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2310,"name":"address","nodeType":"ElementaryTypeName","src":"3397:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2313,"mutability":"mutable","name":"to","nameLocation":"3427:2:9","nodeType":"VariableDeclaration","scope":2322,"src":"3419:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2312,"name":"address","nodeType":"ElementaryTypeName","src":"3419:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2315,"mutability":"mutable","name":"id","nameLocation":"3447:2:9","nodeType":"VariableDeclaration","scope":2322,"src":"3439:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2314,"name":"uint256","nodeType":"ElementaryTypeName","src":"3439:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2317,"mutability":"mutable","name":"amount","nameLocation":"3467:6:9","nodeType":"VariableDeclaration","scope":2322,"src":"3459:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2316,"name":"uint256","nodeType":"ElementaryTypeName","src":"3459:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2319,"mutability":"mutable","name":"data","nameLocation":"3498:4:9","nodeType":"VariableDeclaration","scope":2322,"src":"3483:19:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2318,"name":"bytes","nodeType":"ElementaryTypeName","src":"3483:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3387:121:9"},"returnParameters":{"id":2321,"nodeType":"ParameterList","parameters":[],"src":"3517:0:9"},"scope":2339,"src":"3362:156:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2323,"nodeType":"StructuredDocumentation","src":"3524:390:9","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n Emits a {TransferBatch} event.\n Requirements:\n - `ids` and `amounts` must have the same length.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n acceptance magic value."},"functionSelector":"2eb2c2d6","id":2338,"implemented":false,"kind":"function","modifiers":[],"name":"safeBatchTransferFrom","nameLocation":"3928:21:9","nodeType":"FunctionDefinition","parameters":{"id":2336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2325,"mutability":"mutable","name":"from","nameLocation":"3967:4:9","nodeType":"VariableDeclaration","scope":2338,"src":"3959:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2324,"name":"address","nodeType":"ElementaryTypeName","src":"3959:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2327,"mutability":"mutable","name":"to","nameLocation":"3989:2:9","nodeType":"VariableDeclaration","scope":2338,"src":"3981:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2326,"name":"address","nodeType":"ElementaryTypeName","src":"3981:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2330,"mutability":"mutable","name":"ids","nameLocation":"4020:3:9","nodeType":"VariableDeclaration","scope":2338,"src":"4001:22:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2328,"name":"uint256","nodeType":"ElementaryTypeName","src":"4001:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2329,"nodeType":"ArrayTypeName","src":"4001:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2333,"mutability":"mutable","name":"amounts","nameLocation":"4052:7:9","nodeType":"VariableDeclaration","scope":2338,"src":"4033:26:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2331,"name":"uint256","nodeType":"ElementaryTypeName","src":"4033:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2332,"nodeType":"ArrayTypeName","src":"4033:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2335,"mutability":"mutable","name":"data","nameLocation":"4084:4:9","nodeType":"VariableDeclaration","scope":2338,"src":"4069:19:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2334,"name":"bytes","nodeType":"ElementaryTypeName","src":"4069:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3949:145:9"},"returnParameters":{"id":2337,"nodeType":"ParameterList","parameters":[],"src":"4103:0:9"},"scope":2339,"src":"3919:185:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2340,"src":"361:3745:9","usedErrors":[]}],"src":"110:3997:9"},"id":9},"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2904],"ContextUpgradeable":[2946],"ERC1155BurnableUpgradeable":[2428],"ERC1155Upgradeable":[2176],"ERC165Upgradeable":[3736],"IERC1155MetadataURIUpgradeable":[2620],"IERC1155ReceiverUpgradeable":[2217],"IERC1155Upgradeable":[2339],"IERC165Upgradeable":[3748],"Initializable":[795]},"id":2429,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2341,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"128:23:10"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol","file":"../ERC1155Upgradeable.sol","id":2342,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2429,"sourceUnit":2177,"src":"153:35:10","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../../proxy/utils/Initializable.sol","id":2343,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2429,"sourceUnit":796,"src":"189:48:10","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2345,"name":"Initializable","nameLocations":["465:13:10"],"nodeType":"IdentifierPath","referencedDeclaration":795,"src":"465:13:10"},"id":2346,"nodeType":"InheritanceSpecifier","src":"465:13:10"},{"baseName":{"id":2347,"name":"ERC1155Upgradeable","nameLocations":["480:18:10"],"nodeType":"IdentifierPath","referencedDeclaration":2176,"src":"480:18:10"},"id":2348,"nodeType":"InheritanceSpecifier","src":"480:18:10"}],"canonicalName":"ERC1155BurnableUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":2344,"nodeType":"StructuredDocumentation","src":"239:177:10","text":" @dev Extension of {ERC1155} that allows token holders to destroy both their\n own tokens and those that they have been approved to use.\n _Available since v3.1._"},"fullyImplemented":true,"id":2428,"linearizedBaseContracts":[2428,2176,2620,2339,3736,3748,2946,795],"name":"ERC1155BurnableUpgradeable","nameLocation":"435:26:10","nodeType":"ContractDefinition","nodes":[{"body":{"id":2353,"nodeType":"Block","src":"565:7:10","statements":[]},"id":2354,"implemented":true,"kind":"function","modifiers":[{"id":2351,"kind":"modifierInvocation","modifierName":{"id":2350,"name":"onlyInitializing","nameLocations":["548:16:10"],"nodeType":"IdentifierPath","referencedDeclaration":740,"src":"548:16:10"},"nodeType":"ModifierInvocation","src":"548:16:10"}],"name":"__ERC1155Burnable_init","nameLocation":"514:22:10","nodeType":"FunctionDefinition","parameters":{"id":2349,"nodeType":"ParameterList","parameters":[],"src":"536:2:10"},"returnParameters":{"id":2352,"nodeType":"ParameterList","parameters":[],"src":"565:0:10"},"scope":2428,"src":"505:67:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2359,"nodeType":"Block","src":"648:7:10","statements":[]},"id":2360,"implemented":true,"kind":"function","modifiers":[{"id":2357,"kind":"modifierInvocation","modifierName":{"id":2356,"name":"onlyInitializing","nameLocations":["631:16:10"],"nodeType":"IdentifierPath","referencedDeclaration":740,"src":"631:16:10"},"nodeType":"ModifierInvocation","src":"631:16:10"}],"name":"__ERC1155Burnable_init_unchained","nameLocation":"587:32:10","nodeType":"FunctionDefinition","parameters":{"id":2355,"nodeType":"ParameterList","parameters":[],"src":"619:2:10"},"returnParameters":{"id":2358,"nodeType":"ParameterList","parameters":[],"src":"648:0:10"},"scope":2428,"src":"578:77:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2389,"nodeType":"Block","src":"763:212:10","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2370,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2362,"src":"794:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2371,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2931,"src":"805:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"805:12:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"794:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":2375,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2362,"src":"838:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":2376,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2931,"src":"847:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2377,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"847:12:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2374,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1163,"src":"821:16:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":2378,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"821:39:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"794:66:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":2380,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"874:48:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156","typeString":"literal_string \"ERC1155: caller is not token owner or approved\""},"value":"ERC1155: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156","typeString":"literal_string \"ERC1155: caller is not token owner or approved\""}],"id":2369,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"773:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2381,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"773:159:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2382,"nodeType":"ExpressionStatement","src":"773:159:10"},{"expression":{"arguments":[{"id":2384,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2362,"src":"949:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2385,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2364,"src":"958:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2386,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2366,"src":"962:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2383,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1821,"src":"943:5:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":2387,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"943:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2388,"nodeType":"ExpressionStatement","src":"943:25:10"}]},"functionSelector":"f5298aca","id":2390,"implemented":true,"kind":"function","modifiers":[],"name":"burn","nameLocation":"669:4:10","nodeType":"FunctionDefinition","parameters":{"id":2367,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2362,"mutability":"mutable","name":"account","nameLocation":"691:7:10","nodeType":"VariableDeclaration","scope":2390,"src":"683:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2361,"name":"address","nodeType":"ElementaryTypeName","src":"683:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2364,"mutability":"mutable","name":"id","nameLocation":"716:2:10","nodeType":"VariableDeclaration","scope":2390,"src":"708:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2363,"name":"uint256","nodeType":"ElementaryTypeName","src":"708:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2366,"mutability":"mutable","name":"value","nameLocation":"736:5:10","nodeType":"VariableDeclaration","scope":2390,"src":"728:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2365,"name":"uint256","nodeType":"ElementaryTypeName","src":"728:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"673:74:10"},"returnParameters":{"id":2368,"nodeType":"ParameterList","parameters":[],"src":"763:0:10"},"scope":2428,"src":"660:315:10","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":2421,"nodeType":"Block","src":"1109:219:10","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2402,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2392,"src":"1140:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2403,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2931,"src":"1151:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2404,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1151:12:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1140:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":2407,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2392,"src":"1184:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":2408,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2931,"src":"1193:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2409,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1193:12:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2406,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1163,"src":"1167:16:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":2410,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1167:39:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1140:66:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":2412,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1220:48:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156","typeString":"literal_string \"ERC1155: caller is not token owner or approved\""},"value":"ERC1155: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156","typeString":"literal_string \"ERC1155: caller is not token owner or approved\""}],"id":2401,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1119:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2413,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1119:159:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2414,"nodeType":"ExpressionStatement","src":"1119:159:10"},{"expression":{"arguments":[{"id":2416,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2392,"src":"1300:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2417,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2395,"src":"1309:3:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":2418,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2398,"src":"1314:6:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":2415,"name":"_burnBatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1944,"src":"1289:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,uint256[] memory,uint256[] memory)"}},"id":2419,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1289:32:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2420,"nodeType":"ExpressionStatement","src":"1289:32:10"}]},"functionSelector":"6b20c454","id":2422,"implemented":true,"kind":"function","modifiers":[],"name":"burnBatch","nameLocation":"990:9:10","nodeType":"FunctionDefinition","parameters":{"id":2399,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2392,"mutability":"mutable","name":"account","nameLocation":"1017:7:10","nodeType":"VariableDeclaration","scope":2422,"src":"1009:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2391,"name":"address","nodeType":"ElementaryTypeName","src":"1009:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2395,"mutability":"mutable","name":"ids","nameLocation":"1051:3:10","nodeType":"VariableDeclaration","scope":2422,"src":"1034:20:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2393,"name":"uint256","nodeType":"ElementaryTypeName","src":"1034:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2394,"nodeType":"ArrayTypeName","src":"1034:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2398,"mutability":"mutable","name":"values","nameLocation":"1081:6:10","nodeType":"VariableDeclaration","scope":2422,"src":"1064:23:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2396,"name":"uint256","nodeType":"ElementaryTypeName","src":"1064:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2397,"nodeType":"ArrayTypeName","src":"1064:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"999:94:10"},"returnParameters":{"id":2400,"nodeType":"ParameterList","parameters":[],"src":"1109:0:10"},"scope":2428,"src":"981:347:10","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"constant":false,"documentation":{"id":2423,"nodeType":"StructuredDocumentation","src":"1334:254:10","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":2427,"mutability":"mutable","name":"__gap","nameLocation":"1613:5:10","nodeType":"VariableDeclaration","scope":2428,"src":"1593:25:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":2424,"name":"uint256","nodeType":"ElementaryTypeName","src":"1593:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2426,"length":{"hexValue":"3530","id":2425,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1601:2:10","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1593:11:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":2429,"src":"417:1204:10","usedErrors":[]}],"src":"128:1494:10"},"id":10},"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2904],"ContextUpgradeable":[2946],"ERC1155SupplyUpgradeable":[2605],"ERC1155Upgradeable":[2176],"ERC165Upgradeable":[3736],"IERC1155MetadataURIUpgradeable":[2620],"IERC1155ReceiverUpgradeable":[2217],"IERC1155Upgradeable":[2339],"IERC165Upgradeable":[3748],"Initializable":[795]},"id":2606,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2430,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"126:23:11"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol","file":"../ERC1155Upgradeable.sol","id":2431,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2606,"sourceUnit":2177,"src":"151:35:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../../proxy/utils/Initializable.sol","id":2432,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2606,"sourceUnit":796,"src":"187:48:11","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2434,"name":"Initializable","nameLocations":["628:13:11"],"nodeType":"IdentifierPath","referencedDeclaration":795,"src":"628:13:11"},"id":2435,"nodeType":"InheritanceSpecifier","src":"628:13:11"},{"baseName":{"id":2436,"name":"ERC1155Upgradeable","nameLocations":["643:18:11"],"nodeType":"IdentifierPath","referencedDeclaration":2176,"src":"643:18:11"},"id":2437,"nodeType":"InheritanceSpecifier","src":"643:18:11"}],"canonicalName":"ERC1155SupplyUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":2433,"nodeType":"StructuredDocumentation","src":"237:344:11","text":" @dev Extension of ERC1155 that adds tracking of total supply per id.\n Useful for scenarios where Fungible and Non-fungible tokens have to be\n clearly identified. Note: While a totalSupply of 1 might mean the\n corresponding is an NFT, there is no guarantees that no other token with the\n same id are not going to be minted."},"fullyImplemented":true,"id":2605,"linearizedBaseContracts":[2605,2176,2620,2339,3736,3748,2946,795],"name":"ERC1155SupplyUpgradeable","nameLocation":"600:24:11","nodeType":"ContractDefinition","nodes":[{"body":{"id":2442,"nodeType":"Block","src":"726:7:11","statements":[]},"id":2443,"implemented":true,"kind":"function","modifiers":[{"id":2440,"kind":"modifierInvocation","modifierName":{"id":2439,"name":"onlyInitializing","nameLocations":["709:16:11"],"nodeType":"IdentifierPath","referencedDeclaration":740,"src":"709:16:11"},"nodeType":"ModifierInvocation","src":"709:16:11"}],"name":"__ERC1155Supply_init","nameLocation":"677:20:11","nodeType":"FunctionDefinition","parameters":{"id":2438,"nodeType":"ParameterList","parameters":[],"src":"697:2:11"},"returnParameters":{"id":2441,"nodeType":"ParameterList","parameters":[],"src":"726:0:11"},"scope":2605,"src":"668:65:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2448,"nodeType":"Block","src":"807:7:11","statements":[]},"id":2449,"implemented":true,"kind":"function","modifiers":[{"id":2446,"kind":"modifierInvocation","modifierName":{"id":2445,"name":"onlyInitializing","nameLocations":["790:16:11"],"nodeType":"IdentifierPath","referencedDeclaration":740,"src":"790:16:11"},"nodeType":"ModifierInvocation","src":"790:16:11"}],"name":"__ERC1155Supply_init_unchained","nameLocation":"748:30:11","nodeType":"FunctionDefinition","parameters":{"id":2444,"nodeType":"ParameterList","parameters":[],"src":"778:2:11"},"returnParameters":{"id":2447,"nodeType":"ParameterList","parameters":[],"src":"807:0:11"},"scope":2605,"src":"739:75:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":false,"id":2453,"mutability":"mutable","name":"_totalSupply","nameLocation":"855:12:11","nodeType":"VariableDeclaration","scope":2605,"src":"819:48:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":2452,"keyType":{"id":2450,"name":"uint256","nodeType":"ElementaryTypeName","src":"827:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"819:27:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueType":{"id":2451,"name":"uint256","nodeType":"ElementaryTypeName","src":"838:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"body":{"id":2465,"nodeType":"Block","src":"1016:40:11","statements":[{"expression":{"baseExpression":{"id":2461,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2453,"src":"1033:12:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2463,"indexExpression":{"id":2462,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2456,"src":"1046:2:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1033:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2460,"id":2464,"nodeType":"Return","src":"1026:23:11"}]},"documentation":{"id":2454,"nodeType":"StructuredDocumentation","src":"874:66:11","text":" @dev Total amount of tokens in with a given id."},"functionSelector":"bd85b039","id":2466,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"954:11:11","nodeType":"FunctionDefinition","parameters":{"id":2457,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2456,"mutability":"mutable","name":"id","nameLocation":"974:2:11","nodeType":"VariableDeclaration","scope":2466,"src":"966:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2455,"name":"uint256","nodeType":"ElementaryTypeName","src":"966:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"965:12:11"},"returnParameters":{"id":2460,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2459,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2466,"src":"1007:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2458,"name":"uint256","nodeType":"ElementaryTypeName","src":"1007:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1006:9:11"},"scope":2605,"src":"945:111:11","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":2481,"nodeType":"Block","src":"1212:68:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2476,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2469,"src":"1266:2:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2474,"name":"ERC1155SupplyUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2605,"src":"1229:24:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC1155SupplyUpgradeable_$2605_$","typeString":"type(contract ERC1155SupplyUpgradeable)"}},"id":2475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1254:11:11","memberName":"totalSupply","nodeType":"MemberAccess","referencedDeclaration":2466,"src":"1229:36:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":2477,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1229:40:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1272:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1229:44:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2473,"id":2480,"nodeType":"Return","src":"1222:51:11"}]},"documentation":{"id":2467,"nodeType":"StructuredDocumentation","src":"1062:82:11","text":" @dev Indicates whether any token exist with a given id, or not."},"functionSelector":"4f558e79","id":2482,"implemented":true,"kind":"function","modifiers":[],"name":"exists","nameLocation":"1158:6:11","nodeType":"FunctionDefinition","parameters":{"id":2470,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2469,"mutability":"mutable","name":"id","nameLocation":"1173:2:11","nodeType":"VariableDeclaration","scope":2482,"src":"1165:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2468,"name":"uint256","nodeType":"ElementaryTypeName","src":"1165:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1164:12:11"},"returnParameters":{"id":2473,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2472,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2482,"src":"1206:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2471,"name":"bool","nodeType":"ElementaryTypeName","src":"1206:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1205:6:11"},"scope":2605,"src":"1149:131:11","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1995],"body":{"id":2598,"nodeType":"Block","src":"1571:683:11","statements":[{"expression":{"arguments":[{"id":2504,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2485,"src":"1608:8:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2505,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2487,"src":"1618:4:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2506,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2489,"src":"1624:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2507,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2492,"src":"1628:3:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":2508,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2495,"src":"1633:7:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":2509,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2497,"src":"1642:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2501,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1581:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC1155SupplyUpgradeable_$2605_$","typeString":"type(contract super ERC1155SupplyUpgradeable)"}},"id":2503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1587:20:11","memberName":"_beforeTokenTransfer","nodeType":"MemberAccess","referencedDeclaration":1995,"src":"1581:26:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":2510,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1581:66:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2511,"nodeType":"ExpressionStatement","src":"1581:66:11"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2512,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2487,"src":"1662:4:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2515,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1678:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2514,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1670:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2513,"name":"address","nodeType":"ElementaryTypeName","src":"1670:7:11","typeDescriptions":{}}},"id":2516,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1670:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1662:18:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2542,"nodeType":"IfStatement","src":"1658:156:11","trueBody":{"id":2541,"nodeType":"Block","src":"1682:132:11","statements":[{"body":{"id":2539,"nodeType":"Block","src":"1737:67:11","statements":[{"expression":{"id":2537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2529,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2453,"src":"1755:12:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2533,"indexExpression":{"baseExpression":{"id":2530,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2492,"src":"1768:3:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2532,"indexExpression":{"id":2531,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2519,"src":"1772:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1768:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1755:20:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"baseExpression":{"id":2534,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2495,"src":"1779:7:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2536,"indexExpression":{"id":2535,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2519,"src":"1787:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1779:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1755:34:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2538,"nodeType":"ExpressionStatement","src":"1755:34:11"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2522,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2519,"src":"1716:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2523,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2492,"src":"1720:3:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1724:6:11","memberName":"length","nodeType":"MemberAccess","src":"1720:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1716:14:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2540,"initializationExpression":{"assignments":[2519],"declarations":[{"constant":false,"id":2519,"mutability":"mutable","name":"i","nameLocation":"1709:1:11","nodeType":"VariableDeclaration","scope":2540,"src":"1701:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2518,"name":"uint256","nodeType":"ElementaryTypeName","src":"1701:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2521,"initialValue":{"hexValue":"30","id":2520,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1713:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1701:13:11"},"loopExpression":{"expression":{"id":2527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"1732:3:11","subExpression":{"id":2526,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2519,"src":"1734:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2528,"nodeType":"ExpressionStatement","src":"1732:3:11"},"nodeType":"ForStatement","src":"1696:108:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2543,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2489,"src":"1828:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1842:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2545,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1834:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2544,"name":"address","nodeType":"ElementaryTypeName","src":"1834:7:11","typeDescriptions":{}}},"id":2547,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1834:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1828:16:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2597,"nodeType":"IfStatement","src":"1824:424:11","trueBody":{"id":2596,"nodeType":"Block","src":"1846:402:11","statements":[{"body":{"id":2594,"nodeType":"Block","src":"1901:337:11","statements":[{"assignments":[2561],"declarations":[{"constant":false,"id":2561,"mutability":"mutable","name":"id","nameLocation":"1927:2:11","nodeType":"VariableDeclaration","scope":2594,"src":"1919:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2560,"name":"uint256","nodeType":"ElementaryTypeName","src":"1919:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2565,"initialValue":{"baseExpression":{"id":2562,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2492,"src":"1932:3:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2564,"indexExpression":{"id":2563,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2550,"src":"1936:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1932:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1919:19:11"},{"assignments":[2567],"declarations":[{"constant":false,"id":2567,"mutability":"mutable","name":"amount","nameLocation":"1964:6:11","nodeType":"VariableDeclaration","scope":2594,"src":"1956:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2566,"name":"uint256","nodeType":"ElementaryTypeName","src":"1956:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2571,"initialValue":{"baseExpression":{"id":2568,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2495,"src":"1973:7:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2570,"indexExpression":{"id":2569,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2550,"src":"1981:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1973:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1956:27:11"},{"assignments":[2573],"declarations":[{"constant":false,"id":2573,"mutability":"mutable","name":"supply","nameLocation":"2009:6:11","nodeType":"VariableDeclaration","scope":2594,"src":"2001:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2572,"name":"uint256","nodeType":"ElementaryTypeName","src":"2001:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2577,"initialValue":{"baseExpression":{"id":2574,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2453,"src":"2018:12:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2576,"indexExpression":{"id":2575,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2561,"src":"2031:2:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2018:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2001:33:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2579,"name":"supply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2573,"src":"2060:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2580,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2567,"src":"2070:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2060:16:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206275726e20616d6f756e74206578636565647320746f74616c537570706c79","id":2582,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2078:42:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_9eb0869d69143813ac9f244871191d8f2e530e71a4599ba9db4501f0f6110ee4","typeString":"literal_string \"ERC1155: burn amount exceeds totalSupply\""},"value":"ERC1155: burn amount exceeds totalSupply"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9eb0869d69143813ac9f244871191d8f2e530e71a4599ba9db4501f0f6110ee4","typeString":"literal_string \"ERC1155: burn amount exceeds totalSupply\""}],"id":2578,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2052:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2583,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2052:69:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2584,"nodeType":"ExpressionStatement","src":"2052:69:11"},{"id":2593,"nodeType":"UncheckedBlock","src":"2139:85:11","statements":[{"expression":{"id":2591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2585,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2453,"src":"2171:12:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2587,"indexExpression":{"id":2586,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2561,"src":"2184:2:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2171:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2588,"name":"supply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2573,"src":"2190:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2589,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2567,"src":"2199:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2190:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2171:34:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2592,"nodeType":"ExpressionStatement","src":"2171:34:11"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2553,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2550,"src":"1880:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2554,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2492,"src":"1884:3:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1888:6:11","memberName":"length","nodeType":"MemberAccess","src":"1884:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1880:14:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2595,"initializationExpression":{"assignments":[2550],"declarations":[{"constant":false,"id":2550,"mutability":"mutable","name":"i","nameLocation":"1873:1:11","nodeType":"VariableDeclaration","scope":2595,"src":"1865:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2549,"name":"uint256","nodeType":"ElementaryTypeName","src":"1865:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2552,"initialValue":{"hexValue":"30","id":2551,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1877:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1865:13:11"},"loopExpression":{"expression":{"id":2558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"1896:3:11","subExpression":{"id":2557,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2550,"src":"1898:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2559,"nodeType":"ExpressionStatement","src":"1896:3:11"},"nodeType":"ForStatement","src":"1860:378:11"}]}}]},"documentation":{"id":2483,"nodeType":"StructuredDocumentation","src":"1286:59:11","text":" @dev See {ERC1155-_beforeTokenTransfer}."},"id":2599,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"1359:20:11","nodeType":"FunctionDefinition","overrides":{"id":2499,"nodeType":"OverrideSpecifier","overrides":[],"src":"1562:8:11"},"parameters":{"id":2498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2485,"mutability":"mutable","name":"operator","nameLocation":"1397:8:11","nodeType":"VariableDeclaration","scope":2599,"src":"1389:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2484,"name":"address","nodeType":"ElementaryTypeName","src":"1389:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2487,"mutability":"mutable","name":"from","nameLocation":"1423:4:11","nodeType":"VariableDeclaration","scope":2599,"src":"1415:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2486,"name":"address","nodeType":"ElementaryTypeName","src":"1415:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2489,"mutability":"mutable","name":"to","nameLocation":"1445:2:11","nodeType":"VariableDeclaration","scope":2599,"src":"1437:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2488,"name":"address","nodeType":"ElementaryTypeName","src":"1437:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2492,"mutability":"mutable","name":"ids","nameLocation":"1474:3:11","nodeType":"VariableDeclaration","scope":2599,"src":"1457:20:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2490,"name":"uint256","nodeType":"ElementaryTypeName","src":"1457:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2491,"nodeType":"ArrayTypeName","src":"1457:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2495,"mutability":"mutable","name":"amounts","nameLocation":"1504:7:11","nodeType":"VariableDeclaration","scope":2599,"src":"1487:24:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2493,"name":"uint256","nodeType":"ElementaryTypeName","src":"1487:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2494,"nodeType":"ArrayTypeName","src":"1487:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2497,"mutability":"mutable","name":"data","nameLocation":"1534:4:11","nodeType":"VariableDeclaration","scope":2599,"src":"1521:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2496,"name":"bytes","nodeType":"ElementaryTypeName","src":"1521:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1379:165:11"},"returnParameters":{"id":2500,"nodeType":"ParameterList","parameters":[],"src":"1571:0:11"},"scope":2605,"src":"1350:904:11","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":2600,"nodeType":"StructuredDocumentation","src":"2260:254:11","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":2604,"mutability":"mutable","name":"__gap","nameLocation":"2539:5:11","nodeType":"VariableDeclaration","scope":2605,"src":"2519:25:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":2601,"name":"uint256","nodeType":"ElementaryTypeName","src":"2519:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2603,"length":{"hexValue":"3439","id":2602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2527:2:11","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"2519:11:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":2606,"src":"582:1965:11","usedErrors":[]}],"src":"126:2422:11"},"id":11},"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol","exportedSymbols":{"IERC1155MetadataURIUpgradeable":[2620],"IERC1155Upgradeable":[2339],"IERC165Upgradeable":[3748]},"id":2621,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2607,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"117:23:12"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol","file":"../IERC1155Upgradeable.sol","id":2608,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2621,"sourceUnit":2340,"src":"142:36:12","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2610,"name":"IERC1155Upgradeable","nameLocations":["419:19:12"],"nodeType":"IdentifierPath","referencedDeclaration":2339,"src":"419:19:12"},"id":2611,"nodeType":"InheritanceSpecifier","src":"419:19:12"}],"canonicalName":"IERC1155MetadataURIUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":2609,"nodeType":"StructuredDocumentation","src":"180:194:12","text":" @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n _Available since v3.1._"},"fullyImplemented":false,"id":2620,"linearizedBaseContracts":[2620,2339,3748],"name":"IERC1155MetadataURIUpgradeable","nameLocation":"385:30:12","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2612,"nodeType":"StructuredDocumentation","src":"445:192:12","text":" @dev Returns the URI for token type `id`.\n If the `\\{id\\}` substring is present in the URI, it must be replaced by\n clients with the actual token type ID."},"functionSelector":"0e89341c","id":2619,"implemented":false,"kind":"function","modifiers":[],"name":"uri","nameLocation":"651:3:12","nodeType":"FunctionDefinition","parameters":{"id":2615,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2614,"mutability":"mutable","name":"id","nameLocation":"663:2:12","nodeType":"VariableDeclaration","scope":2619,"src":"655:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2613,"name":"uint256","nodeType":"ElementaryTypeName","src":"655:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"654:12:12"},"returnParameters":{"id":2618,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2617,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2619,"src":"690:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2616,"name":"string","nodeType":"ElementaryTypeName","src":"690:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"689:15:12"},"scope":2620,"src":"642:63:12","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2621,"src":"375:332:12","usedErrors":[]}],"src":"117:591:12"},"id":12},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2904]},"id":2905,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2622,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:13"},{"abstract":false,"baseContracts":[],"canonicalName":"AddressUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":2623,"nodeType":"StructuredDocumentation","src":"126:67:13","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":2904,"linearizedBaseContracts":[2904],"name":"AddressUpgradeable","nameLocation":"202:18:13","nodeType":"ContractDefinition","nodes":[{"body":{"id":2637,"nodeType":"Block","src":"1252:254:13","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2631,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2626,"src":"1476:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1484:4:13","memberName":"code","nodeType":"MemberAccess","src":"1476:12:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1489:6:13","memberName":"length","nodeType":"MemberAccess","src":"1476:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2634,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1498:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1476:23:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2630,"id":2636,"nodeType":"Return","src":"1469:30:13"}]},"documentation":{"id":2624,"nodeType":"StructuredDocumentation","src":"227:954:13","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":2638,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1195:10:13","nodeType":"FunctionDefinition","parameters":{"id":2627,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2626,"mutability":"mutable","name":"account","nameLocation":"1214:7:13","nodeType":"VariableDeclaration","scope":2638,"src":"1206:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2625,"name":"address","nodeType":"ElementaryTypeName","src":"1206:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1205:17:13"},"returnParameters":{"id":2630,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2629,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2638,"src":"1246:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2628,"name":"bool","nodeType":"ElementaryTypeName","src":"1246:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1245:6:13"},"scope":2904,"src":"1186:320:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2671,"nodeType":"Block","src":"2494:241:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2649,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2520:4:13","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$2904","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$2904","typeString":"library AddressUpgradeable"}],"id":2648,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2512:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2647,"name":"address","nodeType":"ElementaryTypeName","src":"2512:7:13","typeDescriptions":{}}},"id":2650,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2512:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2526:7:13","memberName":"balance","nodeType":"MemberAccess","src":"2512:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2652,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2643,"src":"2537:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2512:31:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":2654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2545:31:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":2646,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2504:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2655,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2504:73:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2656,"nodeType":"ExpressionStatement","src":"2504:73:13"},{"assignments":[2658,null],"declarations":[{"constant":false,"id":2658,"mutability":"mutable","name":"success","nameLocation":"2594:7:13","nodeType":"VariableDeclaration","scope":2671,"src":"2589:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2657,"name":"bool","nodeType":"ElementaryTypeName","src":"2589:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":2665,"initialValue":{"arguments":[{"hexValue":"","id":2663,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2637:2:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":2659,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2641,"src":"2607:9:13","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":2660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2617:4:13","memberName":"call","nodeType":"MemberAccess","src":"2607:14:13","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2661,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2643,"src":"2629:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2607:29:13","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2664,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2607:33:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2588:52:13"},{"expression":{"arguments":[{"id":2667,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2658,"src":"2658:7:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":2668,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2667:60:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":2666,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2650:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2669,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2650:78:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2670,"nodeType":"ExpressionStatement","src":"2650:78:13"}]},"documentation":{"id":2639,"nodeType":"StructuredDocumentation","src":"1512:906:13","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":2672,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2432:9:13","nodeType":"FunctionDefinition","parameters":{"id":2644,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2641,"mutability":"mutable","name":"recipient","nameLocation":"2458:9:13","nodeType":"VariableDeclaration","scope":2672,"src":"2442:25:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":2640,"name":"address","nodeType":"ElementaryTypeName","src":"2442:15:13","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":2643,"mutability":"mutable","name":"amount","nameLocation":"2477:6:13","nodeType":"VariableDeclaration","scope":2672,"src":"2469:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2642,"name":"uint256","nodeType":"ElementaryTypeName","src":"2469:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2441:43:13"},"returnParameters":{"id":2645,"nodeType":"ParameterList","parameters":[],"src":"2494:0:13"},"scope":2904,"src":"2423:312:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2689,"nodeType":"Block","src":"3566:96:13","statements":[{"expression":{"arguments":[{"id":2683,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2675,"src":"3605:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2684,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2677,"src":"3613:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":2685,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3619:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":2686,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3622:32:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":2682,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2730,2774],"referencedDeclaration":2774,"src":"3583:21:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2687,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3583:72:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2681,"id":2688,"nodeType":"Return","src":"3576:79:13"}]},"documentation":{"id":2673,"nodeType":"StructuredDocumentation","src":"2741:731:13","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":2690,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3486:12:13","nodeType":"FunctionDefinition","parameters":{"id":2678,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2675,"mutability":"mutable","name":"target","nameLocation":"3507:6:13","nodeType":"VariableDeclaration","scope":2690,"src":"3499:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2674,"name":"address","nodeType":"ElementaryTypeName","src":"3499:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2677,"mutability":"mutable","name":"data","nameLocation":"3528:4:13","nodeType":"VariableDeclaration","scope":2690,"src":"3515:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2676,"name":"bytes","nodeType":"ElementaryTypeName","src":"3515:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3498:35:13"},"returnParameters":{"id":2681,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2680,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2690,"src":"3552:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2679,"name":"bytes","nodeType":"ElementaryTypeName","src":"3552:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3551:14:13"},"scope":2904,"src":"3477:185:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2709,"nodeType":"Block","src":"4031:76:13","statements":[{"expression":{"arguments":[{"id":2703,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2693,"src":"4070:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2704,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2695,"src":"4078:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":2705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4084:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":2706,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2697,"src":"4087:12:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2702,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2730,2774],"referencedDeclaration":2774,"src":"4048:21:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2707,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4048:52:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2701,"id":2708,"nodeType":"Return","src":"4041:59:13"}]},"documentation":{"id":2691,"nodeType":"StructuredDocumentation","src":"3668:211:13","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":2710,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3893:12:13","nodeType":"FunctionDefinition","parameters":{"id":2698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2693,"mutability":"mutable","name":"target","nameLocation":"3923:6:13","nodeType":"VariableDeclaration","scope":2710,"src":"3915:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2692,"name":"address","nodeType":"ElementaryTypeName","src":"3915:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2695,"mutability":"mutable","name":"data","nameLocation":"3952:4:13","nodeType":"VariableDeclaration","scope":2710,"src":"3939:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2694,"name":"bytes","nodeType":"ElementaryTypeName","src":"3939:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2697,"mutability":"mutable","name":"errorMessage","nameLocation":"3980:12:13","nodeType":"VariableDeclaration","scope":2710,"src":"3966:26:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2696,"name":"string","nodeType":"ElementaryTypeName","src":"3966:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3905:93:13"},"returnParameters":{"id":2701,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2700,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2710,"src":"4017:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2699,"name":"bytes","nodeType":"ElementaryTypeName","src":"4017:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4016:14:13"},"scope":2904,"src":"3884:223:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2729,"nodeType":"Block","src":"4612:111:13","statements":[{"expression":{"arguments":[{"id":2723,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2713,"src":"4651:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2724,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2715,"src":"4659:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2725,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2717,"src":"4665:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":2726,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4672:43:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":2722,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2730,2774],"referencedDeclaration":2774,"src":"4629:21:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2727,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4629:87:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2721,"id":2728,"nodeType":"Return","src":"4622:94:13"}]},"documentation":{"id":2711,"nodeType":"StructuredDocumentation","src":"4113:351:13","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":2730,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4478:21:13","nodeType":"FunctionDefinition","parameters":{"id":2718,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2713,"mutability":"mutable","name":"target","nameLocation":"4517:6:13","nodeType":"VariableDeclaration","scope":2730,"src":"4509:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2712,"name":"address","nodeType":"ElementaryTypeName","src":"4509:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2715,"mutability":"mutable","name":"data","nameLocation":"4546:4:13","nodeType":"VariableDeclaration","scope":2730,"src":"4533:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2714,"name":"bytes","nodeType":"ElementaryTypeName","src":"4533:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2717,"mutability":"mutable","name":"value","nameLocation":"4568:5:13","nodeType":"VariableDeclaration","scope":2730,"src":"4560:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2716,"name":"uint256","nodeType":"ElementaryTypeName","src":"4560:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4499:80:13"},"returnParameters":{"id":2721,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2720,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2730,"src":"4598:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2719,"name":"bytes","nodeType":"ElementaryTypeName","src":"4598:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4597:14:13"},"scope":2904,"src":"4469:254:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2773,"nodeType":"Block","src":"5150:267:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2747,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5176:4:13","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$2904","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$2904","typeString":"library AddressUpgradeable"}],"id":2746,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5168:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2745,"name":"address","nodeType":"ElementaryTypeName","src":"5168:7:13","typeDescriptions":{}}},"id":2748,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5168:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5182:7:13","memberName":"balance","nodeType":"MemberAccess","src":"5168:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2750,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2737,"src":"5193:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5168:30:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":2752,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5200:40:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":2744,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5160:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2753,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5160:81:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2754,"nodeType":"ExpressionStatement","src":"5160:81:13"},{"assignments":[2756,2758],"declarations":[{"constant":false,"id":2756,"mutability":"mutable","name":"success","nameLocation":"5257:7:13","nodeType":"VariableDeclaration","scope":2773,"src":"5252:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2755,"name":"bool","nodeType":"ElementaryTypeName","src":"5252:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2758,"mutability":"mutable","name":"returndata","nameLocation":"5279:10:13","nodeType":"VariableDeclaration","scope":2773,"src":"5266:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2757,"name":"bytes","nodeType":"ElementaryTypeName","src":"5266:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2765,"initialValue":{"arguments":[{"id":2763,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2735,"src":"5319:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2759,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2733,"src":"5293:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5300:4:13","memberName":"call","nodeType":"MemberAccess","src":"5293:11:13","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2761,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2737,"src":"5312:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5293:25:13","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2764,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5293:31:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5251:73:13"},{"expression":{"arguments":[{"id":2767,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2733,"src":"5368:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2768,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2756,"src":"5376:7:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2769,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2758,"src":"5385:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2770,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2739,"src":"5397:12:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2766,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2859,"src":"5341:26:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":2771,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5341:69:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2743,"id":2772,"nodeType":"Return","src":"5334:76:13"}]},"documentation":{"id":2731,"nodeType":"StructuredDocumentation","src":"4729:237:13","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":2774,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4980:21:13","nodeType":"FunctionDefinition","parameters":{"id":2740,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2733,"mutability":"mutable","name":"target","nameLocation":"5019:6:13","nodeType":"VariableDeclaration","scope":2774,"src":"5011:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2732,"name":"address","nodeType":"ElementaryTypeName","src":"5011:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2735,"mutability":"mutable","name":"data","nameLocation":"5048:4:13","nodeType":"VariableDeclaration","scope":2774,"src":"5035:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2734,"name":"bytes","nodeType":"ElementaryTypeName","src":"5035:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2737,"mutability":"mutable","name":"value","nameLocation":"5070:5:13","nodeType":"VariableDeclaration","scope":2774,"src":"5062:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2736,"name":"uint256","nodeType":"ElementaryTypeName","src":"5062:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2739,"mutability":"mutable","name":"errorMessage","nameLocation":"5099:12:13","nodeType":"VariableDeclaration","scope":2774,"src":"5085:26:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2738,"name":"string","nodeType":"ElementaryTypeName","src":"5085:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5001:116:13"},"returnParameters":{"id":2743,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2742,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2774,"src":"5136:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2741,"name":"bytes","nodeType":"ElementaryTypeName","src":"5136:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5135:14:13"},"scope":2904,"src":"4971:446:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2790,"nodeType":"Block","src":"5694:97:13","statements":[{"expression":{"arguments":[{"id":2785,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2777,"src":"5730:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2786,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2779,"src":"5738:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":2787,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5744:39:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":2784,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[2791,2820],"referencedDeclaration":2820,"src":"5711:18:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":2788,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5711:73:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2783,"id":2789,"nodeType":"Return","src":"5704:80:13"}]},"documentation":{"id":2775,"nodeType":"StructuredDocumentation","src":"5423:166:13","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":2791,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5603:18:13","nodeType":"FunctionDefinition","parameters":{"id":2780,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2777,"mutability":"mutable","name":"target","nameLocation":"5630:6:13","nodeType":"VariableDeclaration","scope":2791,"src":"5622:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2776,"name":"address","nodeType":"ElementaryTypeName","src":"5622:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2779,"mutability":"mutable","name":"data","nameLocation":"5651:4:13","nodeType":"VariableDeclaration","scope":2791,"src":"5638:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2778,"name":"bytes","nodeType":"ElementaryTypeName","src":"5638:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5621:35:13"},"returnParameters":{"id":2783,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2782,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2791,"src":"5680:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2781,"name":"bytes","nodeType":"ElementaryTypeName","src":"5680:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5679:14:13"},"scope":2904,"src":"5594:197:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2819,"nodeType":"Block","src":"6133:168:13","statements":[{"assignments":[2804,2806],"declarations":[{"constant":false,"id":2804,"mutability":"mutable","name":"success","nameLocation":"6149:7:13","nodeType":"VariableDeclaration","scope":2819,"src":"6144:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2803,"name":"bool","nodeType":"ElementaryTypeName","src":"6144:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2806,"mutability":"mutable","name":"returndata","nameLocation":"6171:10:13","nodeType":"VariableDeclaration","scope":2819,"src":"6158:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2805,"name":"bytes","nodeType":"ElementaryTypeName","src":"6158:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2811,"initialValue":{"arguments":[{"id":2809,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2796,"src":"6203:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2807,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2794,"src":"6185:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6192:10:13","memberName":"staticcall","nodeType":"MemberAccess","src":"6185:17:13","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":2810,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6185:23:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6143:65:13"},{"expression":{"arguments":[{"id":2813,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2794,"src":"6252:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2814,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2804,"src":"6260:7:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2815,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2806,"src":"6269:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2816,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2798,"src":"6281:12:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2812,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2859,"src":"6225:26:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":2817,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6225:69:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2802,"id":2818,"nodeType":"Return","src":"6218:76:13"}]},"documentation":{"id":2792,"nodeType":"StructuredDocumentation","src":"5797:173:13","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":2820,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5984:18:13","nodeType":"FunctionDefinition","parameters":{"id":2799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2794,"mutability":"mutable","name":"target","nameLocation":"6020:6:13","nodeType":"VariableDeclaration","scope":2820,"src":"6012:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2793,"name":"address","nodeType":"ElementaryTypeName","src":"6012:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2796,"mutability":"mutable","name":"data","nameLocation":"6049:4:13","nodeType":"VariableDeclaration","scope":2820,"src":"6036:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2795,"name":"bytes","nodeType":"ElementaryTypeName","src":"6036:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2798,"mutability":"mutable","name":"errorMessage","nameLocation":"6077:12:13","nodeType":"VariableDeclaration","scope":2820,"src":"6063:26:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2797,"name":"string","nodeType":"ElementaryTypeName","src":"6063:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6002:93:13"},"returnParameters":{"id":2802,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2801,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2820,"src":"6119:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2800,"name":"bytes","nodeType":"ElementaryTypeName","src":"6119:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6118:14:13"},"scope":2904,"src":"5975:326:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2858,"nodeType":"Block","src":"6783:434:13","statements":[{"condition":{"id":2834,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2825,"src":"6797:7:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2856,"nodeType":"Block","src":"7153:58:13","statements":[{"expression":{"arguments":[{"id":2852,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2827,"src":"7175:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2853,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2829,"src":"7187:12:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2851,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2903,"src":"7167:7:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":2854,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7167:33:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2855,"nodeType":"ExpressionStatement","src":"7167:33:13"}]},"id":2857,"nodeType":"IfStatement","src":"6793:418:13","trueBody":{"id":2850,"nodeType":"Block","src":"6806:341:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2835,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2827,"src":"6824:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6835:6:13","memberName":"length","nodeType":"MemberAccess","src":"6824:17:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2837,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6845:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6824:22:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2847,"nodeType":"IfStatement","src":"6820:286:13","trueBody":{"id":2846,"nodeType":"Block","src":"6848:258:13","statements":[{"expression":{"arguments":[{"arguments":[{"id":2841,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2823,"src":"7050:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2840,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2638,"src":"7039:10:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":2842,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7039:18:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":2843,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7059:31:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":2839,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7031:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2844,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7031:60:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2845,"nodeType":"ExpressionStatement","src":"7031:60:13"}]}},{"expression":{"id":2848,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2827,"src":"7126:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2833,"id":2849,"nodeType":"Return","src":"7119:17:13"}]}}]},"documentation":{"id":2821,"nodeType":"StructuredDocumentation","src":"6307:277:13","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":2859,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"6598:26:13","nodeType":"FunctionDefinition","parameters":{"id":2830,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2823,"mutability":"mutable","name":"target","nameLocation":"6642:6:13","nodeType":"VariableDeclaration","scope":2859,"src":"6634:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2822,"name":"address","nodeType":"ElementaryTypeName","src":"6634:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2825,"mutability":"mutable","name":"success","nameLocation":"6663:7:13","nodeType":"VariableDeclaration","scope":2859,"src":"6658:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2824,"name":"bool","nodeType":"ElementaryTypeName","src":"6658:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2827,"mutability":"mutable","name":"returndata","nameLocation":"6693:10:13","nodeType":"VariableDeclaration","scope":2859,"src":"6680:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2826,"name":"bytes","nodeType":"ElementaryTypeName","src":"6680:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2829,"mutability":"mutable","name":"errorMessage","nameLocation":"6727:12:13","nodeType":"VariableDeclaration","scope":2859,"src":"6713:26:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2828,"name":"string","nodeType":"ElementaryTypeName","src":"6713:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6624:121:13"},"returnParameters":{"id":2833,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2832,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2859,"src":"6769:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2831,"name":"bytes","nodeType":"ElementaryTypeName","src":"6769:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6768:14:13"},"scope":2904,"src":"6589:628:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2882,"nodeType":"Block","src":"7598:135:13","statements":[{"condition":{"id":2871,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2862,"src":"7612:7:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2880,"nodeType":"Block","src":"7669:58:13","statements":[{"expression":{"arguments":[{"id":2876,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2864,"src":"7691:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2877,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2866,"src":"7703:12:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2875,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2903,"src":"7683:7:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":2878,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7683:33:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2879,"nodeType":"ExpressionStatement","src":"7683:33:13"}]},"id":2881,"nodeType":"IfStatement","src":"7608:119:13","trueBody":{"id":2874,"nodeType":"Block","src":"7621:42:13","statements":[{"expression":{"id":2872,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2864,"src":"7642:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2870,"id":2873,"nodeType":"Return","src":"7635:17:13"}]}}]},"documentation":{"id":2860,"nodeType":"StructuredDocumentation","src":"7223:210:13","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":2883,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"7447:16:13","nodeType":"FunctionDefinition","parameters":{"id":2867,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2862,"mutability":"mutable","name":"success","nameLocation":"7478:7:13","nodeType":"VariableDeclaration","scope":2883,"src":"7473:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2861,"name":"bool","nodeType":"ElementaryTypeName","src":"7473:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2864,"mutability":"mutable","name":"returndata","nameLocation":"7508:10:13","nodeType":"VariableDeclaration","scope":2883,"src":"7495:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2863,"name":"bytes","nodeType":"ElementaryTypeName","src":"7495:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2866,"mutability":"mutable","name":"errorMessage","nameLocation":"7542:12:13","nodeType":"VariableDeclaration","scope":2883,"src":"7528:26:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2865,"name":"string","nodeType":"ElementaryTypeName","src":"7528:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7463:97:13"},"returnParameters":{"id":2870,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2869,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2883,"src":"7584:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2868,"name":"bytes","nodeType":"ElementaryTypeName","src":"7584:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7583:14:13"},"scope":2904,"src":"7438:295:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2902,"nodeType":"Block","src":"7822:457:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2890,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2885,"src":"7898:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7909:6:13","memberName":"length","nodeType":"MemberAccess","src":"7898:17:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2892,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7918:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7898:21:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2900,"nodeType":"Block","src":"8228:45:13","statements":[{"expression":{"arguments":[{"id":2897,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2887,"src":"8249:12:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2896,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"8242:6:13","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2898,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8242:20:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2899,"nodeType":"ExpressionStatement","src":"8242:20:13"}]},"id":2901,"nodeType":"IfStatement","src":"7894:379:13","trueBody":{"id":2895,"nodeType":"Block","src":"7921:301:13","statements":[{"AST":{"nodeType":"YulBlock","src":"8079:133:13","statements":[{"nodeType":"YulVariableDeclaration","src":"8097:40:13","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"8126:10:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8120:5:13"},"nodeType":"YulFunctionCall","src":"8120:17:13"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"8101:15:13","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8165:2:13","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"8169:10:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8161:3:13"},"nodeType":"YulFunctionCall","src":"8161:19:13"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"8182:15:13"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8154:6:13"},"nodeType":"YulFunctionCall","src":"8154:44:13"},"nodeType":"YulExpressionStatement","src":"8154:44:13"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2885,"isOffset":false,"isSlot":false,"src":"8126:10:13","valueSize":1},{"declaration":2885,"isOffset":false,"isSlot":false,"src":"8169:10:13","valueSize":1}],"id":2894,"nodeType":"InlineAssembly","src":"8070:142:13"}]}}]},"id":2903,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"7748:7:13","nodeType":"FunctionDefinition","parameters":{"id":2888,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2885,"mutability":"mutable","name":"returndata","nameLocation":"7769:10:13","nodeType":"VariableDeclaration","scope":2903,"src":"7756:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2884,"name":"bytes","nodeType":"ElementaryTypeName","src":"7756:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2887,"mutability":"mutable","name":"errorMessage","nameLocation":"7795:12:13","nodeType":"VariableDeclaration","scope":2903,"src":"7781:26:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2886,"name":"string","nodeType":"ElementaryTypeName","src":"7781:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7755:53:13"},"returnParameters":{"id":2889,"nodeType":"ParameterList","parameters":[],"src":"7822:0:13"},"scope":2904,"src":"7739:540:13","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":2905,"src":"194:8087:13","usedErrors":[]}],"src":"101:8181:13"},"id":13},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2904],"ContextUpgradeable":[2946],"Initializable":[795]},"id":2947,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2906,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:14"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":2907,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2947,"sourceUnit":796,"src":"110:42:14","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2909,"name":"Initializable","nameLocations":["691:13:14"],"nodeType":"IdentifierPath","referencedDeclaration":795,"src":"691:13:14"},"id":2910,"nodeType":"InheritanceSpecifier","src":"691:13:14"}],"canonicalName":"ContextUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":2908,"nodeType":"StructuredDocumentation","src":"154:496:14","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":2946,"linearizedBaseContracts":[2946,795],"name":"ContextUpgradeable","nameLocation":"669:18:14","nodeType":"ContractDefinition","nodes":[{"body":{"id":2915,"nodeType":"Block","src":"763:7:14","statements":[]},"id":2916,"implemented":true,"kind":"function","modifiers":[{"id":2913,"kind":"modifierInvocation","modifierName":{"id":2912,"name":"onlyInitializing","nameLocations":["746:16:14"],"nodeType":"IdentifierPath","referencedDeclaration":740,"src":"746:16:14"},"nodeType":"ModifierInvocation","src":"746:16:14"}],"name":"__Context_init","nameLocation":"720:14:14","nodeType":"FunctionDefinition","parameters":{"id":2911,"nodeType":"ParameterList","parameters":[],"src":"734:2:14"},"returnParameters":{"id":2914,"nodeType":"ParameterList","parameters":[],"src":"763:0:14"},"scope":2946,"src":"711:59:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2921,"nodeType":"Block","src":"838:7:14","statements":[]},"id":2922,"implemented":true,"kind":"function","modifiers":[{"id":2919,"kind":"modifierInvocation","modifierName":{"id":2918,"name":"onlyInitializing","nameLocations":["821:16:14"],"nodeType":"IdentifierPath","referencedDeclaration":740,"src":"821:16:14"},"nodeType":"ModifierInvocation","src":"821:16:14"}],"name":"__Context_init_unchained","nameLocation":"785:24:14","nodeType":"FunctionDefinition","parameters":{"id":2917,"nodeType":"ParameterList","parameters":[],"src":"809:2:14"},"returnParameters":{"id":2920,"nodeType":"ParameterList","parameters":[],"src":"838:0:14"},"scope":2946,"src":"776:69:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2930,"nodeType":"Block","src":"912:34:14","statements":[{"expression":{"expression":{"id":2927,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"929:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"933:6:14","memberName":"sender","nodeType":"MemberAccess","src":"929:10:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2926,"id":2929,"nodeType":"Return","src":"922:17:14"}]},"id":2931,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"859:10:14","nodeType":"FunctionDefinition","parameters":{"id":2923,"nodeType":"ParameterList","parameters":[],"src":"869:2:14"},"returnParameters":{"id":2926,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2925,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2931,"src":"903:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2924,"name":"address","nodeType":"ElementaryTypeName","src":"903:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"902:9:14"},"scope":2946,"src":"850:96:14","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2939,"nodeType":"Block","src":"1019:32:14","statements":[{"expression":{"expression":{"id":2936,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1036:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1040:4:14","memberName":"data","nodeType":"MemberAccess","src":"1036:8:14","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2935,"id":2938,"nodeType":"Return","src":"1029:15:14"}]},"id":2940,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"961:8:14","nodeType":"FunctionDefinition","parameters":{"id":2932,"nodeType":"ParameterList","parameters":[],"src":"969:2:14"},"returnParameters":{"id":2935,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2934,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2940,"src":"1003:14:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2933,"name":"bytes","nodeType":"ElementaryTypeName","src":"1003:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1002:16:14"},"scope":2946,"src":"952:99:14","stateMutability":"view","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":2941,"nodeType":"StructuredDocumentation","src":"1057:254:14","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":2945,"mutability":"mutable","name":"__gap","nameLocation":"1336:5:14","nodeType":"VariableDeclaration","scope":2946,"src":"1316:25:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":2942,"name":"uint256","nodeType":"ElementaryTypeName","src":"1316:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2944,"length":{"hexValue":"3530","id":2943,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1324:2:14","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1316:11:14","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":2947,"src":"651:693:14","usedErrors":[]}],"src":"86:1259:14"},"id":14},"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol","exportedSymbols":{"StorageSlotUpgradeable":[3006]},"id":3007,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2948,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:15"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlotUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":2949,"nodeType":"StructuredDocumentation","src":"130:1148:15","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._"},"fullyImplemented":true,"id":3006,"linearizedBaseContracts":[3006],"name":"StorageSlotUpgradeable","nameLocation":"1287:22:15","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlotUpgradeable.AddressSlot","id":2952,"members":[{"constant":false,"id":2951,"mutability":"mutable","name":"value","nameLocation":"1353:5:15","nodeType":"VariableDeclaration","scope":2952,"src":"1345:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2950,"name":"address","nodeType":"ElementaryTypeName","src":"1345:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1323:11:15","nodeType":"StructDefinition","scope":3006,"src":"1316:49:15","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.BooleanSlot","id":2955,"members":[{"constant":false,"id":2954,"mutability":"mutable","name":"value","nameLocation":"1405:5:15","nodeType":"VariableDeclaration","scope":2955,"src":"1400:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2953,"name":"bool","nodeType":"ElementaryTypeName","src":"1400:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1378:11:15","nodeType":"StructDefinition","scope":3006,"src":"1371:46:15","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.Bytes32Slot","id":2958,"members":[{"constant":false,"id":2957,"mutability":"mutable","name":"value","nameLocation":"1460:5:15","nodeType":"VariableDeclaration","scope":2958,"src":"1452:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2956,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1452:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1430:11:15","nodeType":"StructDefinition","scope":3006,"src":"1423:49:15","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.Uint256Slot","id":2961,"members":[{"constant":false,"id":2960,"mutability":"mutable","name":"value","nameLocation":"1515:5:15","nodeType":"VariableDeclaration","scope":2961,"src":"1507:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2959,"name":"uint256","nodeType":"ElementaryTypeName","src":"1507:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1485:11:15","nodeType":"StructDefinition","scope":3006,"src":"1478:49:15","visibility":"public"},{"body":{"id":2971,"nodeType":"Block","src":"1709:106:15","statements":[{"AST":{"nodeType":"YulBlock","src":"1771:38:15","statements":[{"nodeType":"YulAssignment","src":"1785:14:15","value":{"name":"slot","nodeType":"YulIdentifier","src":"1795:4:15"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"1785:6:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2968,"isOffset":false,"isSlot":true,"src":"1785:6:15","suffix":"slot","valueSize":1},{"declaration":2964,"isOffset":false,"isSlot":false,"src":"1795:4:15","valueSize":1}],"id":2970,"nodeType":"InlineAssembly","src":"1762:47:15"}]},"documentation":{"id":2962,"nodeType":"StructuredDocumentation","src":"1533:87:15","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":2972,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1634:14:15","nodeType":"FunctionDefinition","parameters":{"id":2965,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2964,"mutability":"mutable","name":"slot","nameLocation":"1657:4:15","nodeType":"VariableDeclaration","scope":2972,"src":"1649:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2963,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1649:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1648:14:15"},"returnParameters":{"id":2969,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2968,"mutability":"mutable","name":"r","nameLocation":"1706:1:15","nodeType":"VariableDeclaration","scope":2972,"src":"1686:21:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2952_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot"},"typeName":{"id":2967,"nodeType":"UserDefinedTypeName","pathNode":{"id":2966,"name":"AddressSlot","nameLocations":["1686:11:15"],"nodeType":"IdentifierPath","referencedDeclaration":2952,"src":"1686:11:15"},"referencedDeclaration":2952,"src":"1686:11:15","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2952_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot"}},"visibility":"internal"}],"src":"1685:23:15"},"scope":3006,"src":"1625:190:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2982,"nodeType":"Block","src":"1997:106:15","statements":[{"AST":{"nodeType":"YulBlock","src":"2059:38:15","statements":[{"nodeType":"YulAssignment","src":"2073:14:15","value":{"name":"slot","nodeType":"YulIdentifier","src":"2083:4:15"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2073:6:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2979,"isOffset":false,"isSlot":true,"src":"2073:6:15","suffix":"slot","valueSize":1},{"declaration":2975,"isOffset":false,"isSlot":false,"src":"2083:4:15","valueSize":1}],"id":2981,"nodeType":"InlineAssembly","src":"2050:47:15"}]},"documentation":{"id":2973,"nodeType":"StructuredDocumentation","src":"1821:87:15","text":" @dev Returns an `BooleanSlot` with member `value` located at `slot`."},"id":2983,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"1922:14:15","nodeType":"FunctionDefinition","parameters":{"id":2976,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2975,"mutability":"mutable","name":"slot","nameLocation":"1945:4:15","nodeType":"VariableDeclaration","scope":2983,"src":"1937:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2974,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1937:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1936:14:15"},"returnParameters":{"id":2980,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2979,"mutability":"mutable","name":"r","nameLocation":"1994:1:15","nodeType":"VariableDeclaration","scope":2983,"src":"1974:21:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$2955_storage_ptr","typeString":"struct StorageSlotUpgradeable.BooleanSlot"},"typeName":{"id":2978,"nodeType":"UserDefinedTypeName","pathNode":{"id":2977,"name":"BooleanSlot","nameLocations":["1974:11:15"],"nodeType":"IdentifierPath","referencedDeclaration":2955,"src":"1974:11:15"},"referencedDeclaration":2955,"src":"1974:11:15","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$2955_storage_ptr","typeString":"struct StorageSlotUpgradeable.BooleanSlot"}},"visibility":"internal"}],"src":"1973:23:15"},"scope":3006,"src":"1913:190:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2993,"nodeType":"Block","src":"2285:106:15","statements":[{"AST":{"nodeType":"YulBlock","src":"2347:38:15","statements":[{"nodeType":"YulAssignment","src":"2361:14:15","value":{"name":"slot","nodeType":"YulIdentifier","src":"2371:4:15"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2361:6:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2990,"isOffset":false,"isSlot":true,"src":"2361:6:15","suffix":"slot","valueSize":1},{"declaration":2986,"isOffset":false,"isSlot":false,"src":"2371:4:15","valueSize":1}],"id":2992,"nodeType":"InlineAssembly","src":"2338:47:15"}]},"documentation":{"id":2984,"nodeType":"StructuredDocumentation","src":"2109:87:15","text":" @dev Returns an `Bytes32Slot` with member `value` located at `slot`."},"id":2994,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2210:14:15","nodeType":"FunctionDefinition","parameters":{"id":2987,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2986,"mutability":"mutable","name":"slot","nameLocation":"2233:4:15","nodeType":"VariableDeclaration","scope":2994,"src":"2225:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2985,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2225:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2224:14:15"},"returnParameters":{"id":2991,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2990,"mutability":"mutable","name":"r","nameLocation":"2282:1:15","nodeType":"VariableDeclaration","scope":2994,"src":"2262:21:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$2958_storage_ptr","typeString":"struct StorageSlotUpgradeable.Bytes32Slot"},"typeName":{"id":2989,"nodeType":"UserDefinedTypeName","pathNode":{"id":2988,"name":"Bytes32Slot","nameLocations":["2262:11:15"],"nodeType":"IdentifierPath","referencedDeclaration":2958,"src":"2262:11:15"},"referencedDeclaration":2958,"src":"2262:11:15","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$2958_storage_ptr","typeString":"struct StorageSlotUpgradeable.Bytes32Slot"}},"visibility":"internal"}],"src":"2261:23:15"},"scope":3006,"src":"2201:190:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3004,"nodeType":"Block","src":"2573:106:15","statements":[{"AST":{"nodeType":"YulBlock","src":"2635:38:15","statements":[{"nodeType":"YulAssignment","src":"2649:14:15","value":{"name":"slot","nodeType":"YulIdentifier","src":"2659:4:15"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2649:6:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3001,"isOffset":false,"isSlot":true,"src":"2649:6:15","suffix":"slot","valueSize":1},{"declaration":2997,"isOffset":false,"isSlot":false,"src":"2659:4:15","valueSize":1}],"id":3003,"nodeType":"InlineAssembly","src":"2626:47:15"}]},"documentation":{"id":2995,"nodeType":"StructuredDocumentation","src":"2397:87:15","text":" @dev Returns an `Uint256Slot` with member `value` located at `slot`."},"id":3005,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2498:14:15","nodeType":"FunctionDefinition","parameters":{"id":2998,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2997,"mutability":"mutable","name":"slot","nameLocation":"2521:4:15","nodeType":"VariableDeclaration","scope":3005,"src":"2513:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2996,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2513:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2512:14:15"},"returnParameters":{"id":3002,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3001,"mutability":"mutable","name":"r","nameLocation":"2570:1:15","nodeType":"VariableDeclaration","scope":3005,"src":"2550:21:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2961_storage_ptr","typeString":"struct StorageSlotUpgradeable.Uint256Slot"},"typeName":{"id":3000,"nodeType":"UserDefinedTypeName","pathNode":{"id":2999,"name":"Uint256Slot","nameLocations":["2550:11:15"],"nodeType":"IdentifierPath","referencedDeclaration":2961,"src":"2550:11:15"},"referencedDeclaration":2961,"src":"2550:11:15","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2961_storage_ptr","typeString":"struct StorageSlotUpgradeable.Uint256Slot"}},"visibility":"internal"}],"src":"2549:23:15"},"scope":3006,"src":"2489:190:15","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3007,"src":"1279:1402:15","usedErrors":[]}],"src":"105:2577:15"},"id":15},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[4613],"StringsUpgradeable":[3181]},"id":3182,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3008,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:16"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol","file":"./math/MathUpgradeable.sol","id":3009,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3182,"sourceUnit":4614,"src":"126:36:16","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"StringsUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":3010,"nodeType":"StructuredDocumentation","src":"164:34:16","text":" @dev String operations."},"fullyImplemented":true,"id":3181,"linearizedBaseContracts":[3181],"name":"StringsUpgradeable","nameLocation":"207:18:16","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":3013,"mutability":"constant","name":"_SYMBOLS","nameLocation":"257:8:16","nodeType":"VariableDeclaration","scope":3181,"src":"232:54:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":3011,"name":"bytes16","nodeType":"ElementaryTypeName","src":"232:7:16","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":3012,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"268:18:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":3016,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"315:15:16","nodeType":"VariableDeclaration","scope":3181,"src":"292:43:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3014,"name":"uint8","nodeType":"ElementaryTypeName","src":"292:5:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":3015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"333:2:16","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":3063,"nodeType":"Block","src":"508:636:16","statements":[{"id":3062,"nodeType":"UncheckedBlock","src":"518:620:16","statements":[{"assignments":[3025],"declarations":[{"constant":false,"id":3025,"mutability":"mutable","name":"length","nameLocation":"550:6:16","nodeType":"VariableDeclaration","scope":3062,"src":"542:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3024,"name":"uint256","nodeType":"ElementaryTypeName","src":"542:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3032,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3028,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3019,"src":"581:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3026,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4613,"src":"559:15:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$4613_$","typeString":"type(library MathUpgradeable)"}},"id":3027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"575:5:16","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":4450,"src":"559:21:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3029,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"559:28:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"590:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"559:32:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"542:49:16"},{"assignments":[3034],"declarations":[{"constant":false,"id":3034,"mutability":"mutable","name":"buffer","nameLocation":"619:6:16","nodeType":"VariableDeclaration","scope":3062,"src":"605:20:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3033,"name":"string","nodeType":"ElementaryTypeName","src":"605:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":3039,"initialValue":{"arguments":[{"id":3037,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3025,"src":"639:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3036,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"628:10:16","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":3035,"name":"string","nodeType":"ElementaryTypeName","src":"632:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":3038,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"628:18:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"605:41:16"},{"assignments":[3041],"declarations":[{"constant":false,"id":3041,"mutability":"mutable","name":"ptr","nameLocation":"668:3:16","nodeType":"VariableDeclaration","scope":3062,"src":"660:11:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3040,"name":"uint256","nodeType":"ElementaryTypeName","src":"660:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3042,"nodeType":"VariableDeclarationStatement","src":"660:11:16"},{"AST":{"nodeType":"YulBlock","src":"741:67:16","statements":[{"nodeType":"YulAssignment","src":"759:35:16","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"770:6:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"782:2:16","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"786:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"778:3:16"},"nodeType":"YulFunctionCall","src":"778:15:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"766:3:16"},"nodeType":"YulFunctionCall","src":"766:28:16"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"759:3:16"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3034,"isOffset":false,"isSlot":false,"src":"770:6:16","valueSize":1},{"declaration":3025,"isOffset":false,"isSlot":false,"src":"786:6:16","valueSize":1},{"declaration":3041,"isOffset":false,"isSlot":false,"src":"759:3:16","valueSize":1}],"id":3043,"nodeType":"InlineAssembly","src":"732:76:16"},{"body":{"id":3058,"nodeType":"Block","src":"834:267:16","statements":[{"expression":{"id":3046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"852:5:16","subExpression":{"id":3045,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3041,"src":"852:3:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3047,"nodeType":"ExpressionStatement","src":"852:5:16"},{"AST":{"nodeType":"YulBlock","src":"935:84:16","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"965:3:16"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"979:5:16"},{"kind":"number","nodeType":"YulLiteral","src":"986:2:16","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"975:3:16"},"nodeType":"YulFunctionCall","src":"975:14:16"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"991:8:16"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"970:4:16"},"nodeType":"YulFunctionCall","src":"970:30:16"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"957:7:16"},"nodeType":"YulFunctionCall","src":"957:44:16"},"nodeType":"YulExpressionStatement","src":"957:44:16"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3013,"isOffset":false,"isSlot":false,"src":"991:8:16","valueSize":1},{"declaration":3041,"isOffset":false,"isSlot":false,"src":"965:3:16","valueSize":1},{"declaration":3019,"isOffset":false,"isSlot":false,"src":"979:5:16","valueSize":1}],"id":3048,"nodeType":"InlineAssembly","src":"926:93:16"},{"expression":{"id":3051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3049,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3019,"src":"1036:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":3050,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1045:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1036:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3052,"nodeType":"ExpressionStatement","src":"1036:11:16"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3053,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3019,"src":"1069:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3054,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1078:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1069:10:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3057,"nodeType":"IfStatement","src":"1065:21:16","trueBody":{"id":3056,"nodeType":"Break","src":"1081:5:16"}}]},"condition":{"hexValue":"74727565","id":3044,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"828:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":3059,"nodeType":"WhileStatement","src":"821:280:16"},{"expression":{"id":3060,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3034,"src":"1121:6:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3023,"id":3061,"nodeType":"Return","src":"1114:13:16"}]}]},"documentation":{"id":3017,"nodeType":"StructuredDocumentation","src":"342:90:16","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":3064,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"446:8:16","nodeType":"FunctionDefinition","parameters":{"id":3020,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3019,"mutability":"mutable","name":"value","nameLocation":"463:5:16","nodeType":"VariableDeclaration","scope":3064,"src":"455:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3018,"name":"uint256","nodeType":"ElementaryTypeName","src":"455:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"454:15:16"},"returnParameters":{"id":3023,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3022,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3064,"src":"493:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3021,"name":"string","nodeType":"ElementaryTypeName","src":"493:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"492:15:16"},"scope":3181,"src":"437:707:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3083,"nodeType":"Block","src":"1323:111:16","statements":[{"id":3082,"nodeType":"UncheckedBlock","src":"1333:95:16","statements":[{"expression":{"arguments":[{"id":3073,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3067,"src":"1376:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3076,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3067,"src":"1406:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3074,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4613,"src":"1383:15:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$4613_$","typeString":"type(library MathUpgradeable)"}},"id":3075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1399:6:16","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":4573,"src":"1383:22:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3077,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1383:29:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1415:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1383:33:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3072,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[3084,3160,3180],"referencedDeclaration":3160,"src":"1364:11:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":3080,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1364:53:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3071,"id":3081,"nodeType":"Return","src":"1357:60:16"}]}]},"documentation":{"id":3065,"nodeType":"StructuredDocumentation","src":"1150:94:16","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":3084,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1258:11:16","nodeType":"FunctionDefinition","parameters":{"id":3068,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3067,"mutability":"mutable","name":"value","nameLocation":"1278:5:16","nodeType":"VariableDeclaration","scope":3084,"src":"1270:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3066,"name":"uint256","nodeType":"ElementaryTypeName","src":"1270:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1269:15:16"},"returnParameters":{"id":3071,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3070,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3084,"src":"1308:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3069,"name":"string","nodeType":"ElementaryTypeName","src":"1308:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1307:15:16"},"scope":3181,"src":"1249:185:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3159,"nodeType":"Block","src":"1647:347:16","statements":[{"assignments":[3095],"declarations":[{"constant":false,"id":3095,"mutability":"mutable","name":"buffer","nameLocation":"1670:6:16","nodeType":"VariableDeclaration","scope":3159,"src":"1657:19:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3094,"name":"bytes","nodeType":"ElementaryTypeName","src":"1657:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3104,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3098,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1689:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3099,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"1693:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1689:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":3101,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1702:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1689:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3097,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1679:9:16","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":3096,"name":"bytes","nodeType":"ElementaryTypeName","src":"1683:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":3103,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1679:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1657:47:16"},{"expression":{"id":3109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3105,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3095,"src":"1714:6:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3107,"indexExpression":{"hexValue":"30","id":3106,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1721:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1714:9:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":3108,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1726:3:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1714:15:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3110,"nodeType":"ExpressionStatement","src":"1714:15:16"},{"expression":{"id":3115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3111,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3095,"src":"1739:6:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3113,"indexExpression":{"hexValue":"31","id":3112,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1746:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1739:9:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":3114,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1751:3:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"1739:15:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3116,"nodeType":"ExpressionStatement","src":"1739:15:16"},{"body":{"id":3145,"nodeType":"Block","src":"1809:83:16","statements":[{"expression":{"id":3139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3131,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3095,"src":"1823:6:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3133,"indexExpression":{"id":3132,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3118,"src":"1830:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1823:9:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":3134,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3013,"src":"1835:8:16","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":3138,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3135,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3087,"src":"1844:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":3136,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1852:3:16","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"1844:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1835:21:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"1823:33:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3140,"nodeType":"ExpressionStatement","src":"1823:33:16"},{"expression":{"id":3143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3141,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3087,"src":"1870:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":3142,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1880:1:16","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"1870:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3144,"nodeType":"ExpressionStatement","src":"1870:11:16"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3125,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3118,"src":"1797:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":3126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1801:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1797:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3146,"initializationExpression":{"assignments":[3118],"declarations":[{"constant":false,"id":3118,"mutability":"mutable","name":"i","nameLocation":"1777:1:16","nodeType":"VariableDeclaration","scope":3146,"src":"1769:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3117,"name":"uint256","nodeType":"ElementaryTypeName","src":"1769:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3124,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3119,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1781:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3120,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"1785:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1781:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3122,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1794:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1781:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1769:26:16"},"loopExpression":{"expression":{"id":3129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"1804:3:16","subExpression":{"id":3128,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3118,"src":"1806:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3130,"nodeType":"ExpressionStatement","src":"1804:3:16"},"nodeType":"ForStatement","src":"1764:128:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3148,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3087,"src":"1909:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3149,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1918:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1909:10:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":3151,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1921:34:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":3147,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1901:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3152,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1901:55:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3153,"nodeType":"ExpressionStatement","src":"1901:55:16"},{"expression":{"arguments":[{"id":3156,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3095,"src":"1980:6:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3155,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1973:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3154,"name":"string","nodeType":"ElementaryTypeName","src":"1973:6:16","typeDescriptions":{}}},"id":3157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1973:14:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3093,"id":3158,"nodeType":"Return","src":"1966:21:16"}]},"documentation":{"id":3085,"nodeType":"StructuredDocumentation","src":"1440:112:16","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":3160,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1566:11:16","nodeType":"FunctionDefinition","parameters":{"id":3090,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3087,"mutability":"mutable","name":"value","nameLocation":"1586:5:16","nodeType":"VariableDeclaration","scope":3160,"src":"1578:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3086,"name":"uint256","nodeType":"ElementaryTypeName","src":"1578:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3089,"mutability":"mutable","name":"length","nameLocation":"1601:6:16","nodeType":"VariableDeclaration","scope":3160,"src":"1593:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3088,"name":"uint256","nodeType":"ElementaryTypeName","src":"1593:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1577:31:16"},"returnParameters":{"id":3093,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3092,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3160,"src":"1632:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3091,"name":"string","nodeType":"ElementaryTypeName","src":"1632:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1631:15:16"},"scope":3181,"src":"1557:437:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3179,"nodeType":"Block","src":"2219:76:16","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":3173,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3163,"src":"2264:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3172,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2256:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3171,"name":"uint160","nodeType":"ElementaryTypeName","src":"2256:7:16","typeDescriptions":{}}},"id":3174,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2256:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3170,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2248:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3169,"name":"uint256","nodeType":"ElementaryTypeName","src":"2248:7:16","typeDescriptions":{}}},"id":3175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2248:22:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3176,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3016,"src":"2272:15:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":3168,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[3084,3160,3180],"referencedDeclaration":3160,"src":"2236:11:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":3177,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2236:52:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3167,"id":3178,"nodeType":"Return","src":"2229:59:16"}]},"documentation":{"id":3161,"nodeType":"StructuredDocumentation","src":"2000:141:16","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":3180,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2155:11:16","nodeType":"FunctionDefinition","parameters":{"id":3164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3163,"mutability":"mutable","name":"addr","nameLocation":"2175:4:16","nodeType":"VariableDeclaration","scope":3180,"src":"2167:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3162,"name":"address","nodeType":"ElementaryTypeName","src":"2167:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2166:14:16"},"returnParameters":{"id":3167,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3166,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3180,"src":"2204:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3165,"name":"string","nodeType":"ElementaryTypeName","src":"2204:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2203:15:16"},"scope":3181,"src":"2146:149:16","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3182,"src":"199:2098:16","usedErrors":[]}],"src":"101:2197:16"},"id":16},"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol","exportedSymbols":{"ECDSAUpgradeable":[3542],"MathUpgradeable":[4613],"StringsUpgradeable":[3181]},"id":3543,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3183,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:17"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","file":"../StringsUpgradeable.sol","id":3184,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3543,"sourceUnit":3182,"src":"137:35:17","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ECDSAUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":3185,"nodeType":"StructuredDocumentation","src":"174:205:17","text":" @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."},"fullyImplemented":true,"id":3542,"linearizedBaseContracts":[3542],"name":"ECDSAUpgradeable","nameLocation":"388:16:17","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ECDSAUpgradeable.RecoverError","id":3191,"members":[{"id":3186,"name":"NoError","nameLocation":"439:7:17","nodeType":"EnumValue","src":"439:7:17"},{"id":3187,"name":"InvalidSignature","nameLocation":"456:16:17","nodeType":"EnumValue","src":"456:16:17"},{"id":3188,"name":"InvalidSignatureLength","nameLocation":"482:22:17","nodeType":"EnumValue","src":"482:22:17"},{"id":3189,"name":"InvalidSignatureS","nameLocation":"514:17:17","nodeType":"EnumValue","src":"514:17:17"},{"id":3190,"name":"InvalidSignatureV","nameLocation":"541:17:17","nodeType":"EnumValue","src":"541:17:17"}],"name":"RecoverError","nameLocation":"416:12:17","nodeType":"EnumDefinition","src":"411:175:17"},{"body":{"id":3234,"nodeType":"Block","src":"646:457:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$3191","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":3200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3197,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3194,"src":"660:5:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3191","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3198,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3191,"src":"669:12:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3191_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":3199,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"682:7:17","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":3186,"src":"669:20:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3191","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"660:29:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$3191","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":3206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3203,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3194,"src":"756:5:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3191","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3204,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3191,"src":"765:12:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3191_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":3205,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"778:16:17","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":3187,"src":"765:29:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3191","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"756:38:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$3191","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":3215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3212,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3194,"src":"865:5:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3191","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3213,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3191,"src":"874:12:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3191_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":3214,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"887:22:17","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":3188,"src":"874:35:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3191","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"865:44:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$3191","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":3224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3221,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3194,"src":"987:5:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3191","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3222,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3191,"src":"996:12:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3191_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":3223,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1009:17:17","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":3189,"src":"996:30:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3191","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"987:39:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3230,"nodeType":"IfStatement","src":"983:114:17","trueBody":{"id":3229,"nodeType":"Block","src":"1028:69:17","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c7565","id":3226,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1049:36:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""},"value":"ECDSA: invalid signature 's' value"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""}],"id":3225,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"1042:6:17","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3227,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1042:44:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3228,"nodeType":"ExpressionStatement","src":"1042:44:17"}]}},"id":3231,"nodeType":"IfStatement","src":"861:236:17","trueBody":{"id":3220,"nodeType":"Block","src":"911:66:17","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","id":3217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"932:33:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""},"value":"ECDSA: invalid signature length"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""}],"id":3216,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"925:6:17","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3218,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"925:41:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3219,"nodeType":"ExpressionStatement","src":"925:41:17"}]}},"id":3232,"nodeType":"IfStatement","src":"752:345:17","trueBody":{"id":3211,"nodeType":"Block","src":"796:59:17","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","id":3208,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"817:26:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""},"value":"ECDSA: invalid signature"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""}],"id":3207,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"810:6:17","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3209,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"810:34:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3210,"nodeType":"ExpressionStatement","src":"810:34:17"}]}},"id":3233,"nodeType":"IfStatement","src":"656:441:17","trueBody":{"id":3202,"nodeType":"Block","src":"691:55:17","statements":[{"functionReturnParameters":3196,"id":3201,"nodeType":"Return","src":"705:7:17"}]}}]},"id":3235,"implemented":true,"kind":"function","modifiers":[],"name":"_throwError","nameLocation":"601:11:17","nodeType":"FunctionDefinition","parameters":{"id":3195,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3194,"mutability":"mutable","name":"error","nameLocation":"626:5:17","nodeType":"VariableDeclaration","scope":3235,"src":"613:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3191","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":3193,"nodeType":"UserDefinedTypeName","pathNode":{"id":3192,"name":"RecoverError","nameLocations":["613:12:17"],"nodeType":"IdentifierPath","referencedDeclaration":3191,"src":"613:12:17"},"referencedDeclaration":3191,"src":"613:12:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3191","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"612:20:17"},"returnParameters":{"id":3196,"nodeType":"ParameterList","parameters":[],"src":"646:0:17"},"scope":3542,"src":"592:511:17","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":3280,"nodeType":"Block","src":"2271:626:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3248,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3240,"src":"2285:9:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2295:6:17","memberName":"length","nodeType":"MemberAccess","src":"2285:16:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3635","id":3250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2305:2:17","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"2285:22:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3278,"nodeType":"Block","src":"2810:81:17","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":3272,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2840:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3271,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2832:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3270,"name":"address","nodeType":"ElementaryTypeName","src":"2832:7:17","typeDescriptions":{}}},"id":3273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2832:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3274,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3191,"src":"2844:12:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3191_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":3275,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2857:22:17","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":3188,"src":"2844:35:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3191","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":3276,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2831:49:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3191_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":3247,"id":3277,"nodeType":"Return","src":"2824:56:17"}]},"id":3279,"nodeType":"IfStatement","src":"2281:610:17","trueBody":{"id":3269,"nodeType":"Block","src":"2309:495:17","statements":[{"assignments":[3253],"declarations":[{"constant":false,"id":3253,"mutability":"mutable","name":"r","nameLocation":"2331:1:17","nodeType":"VariableDeclaration","scope":3269,"src":"2323:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3252,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2323:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3254,"nodeType":"VariableDeclarationStatement","src":"2323:9:17"},{"assignments":[3256],"declarations":[{"constant":false,"id":3256,"mutability":"mutable","name":"s","nameLocation":"2354:1:17","nodeType":"VariableDeclaration","scope":3269,"src":"2346:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3255,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2346:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3257,"nodeType":"VariableDeclarationStatement","src":"2346:9:17"},{"assignments":[3259],"declarations":[{"constant":false,"id":3259,"mutability":"mutable","name":"v","nameLocation":"2375:1:17","nodeType":"VariableDeclaration","scope":3269,"src":"2369:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3258,"name":"uint8","nodeType":"ElementaryTypeName","src":"2369:5:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":3260,"nodeType":"VariableDeclarationStatement","src":"2369:7:17"},{"AST":{"nodeType":"YulBlock","src":"2577:171:17","statements":[{"nodeType":"YulAssignment","src":"2595:32:17","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2610:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"2621:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2606:3:17"},"nodeType":"YulFunctionCall","src":"2606:20:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2600:5:17"},"nodeType":"YulFunctionCall","src":"2600:27:17"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"2595:1:17"}]},{"nodeType":"YulAssignment","src":"2644:32:17","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2659:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"2670:4:17","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2655:3:17"},"nodeType":"YulFunctionCall","src":"2655:20:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2649:5:17"},"nodeType":"YulFunctionCall","src":"2649:27:17"},"variableNames":[{"name":"s","nodeType":"YulIdentifier","src":"2644:1:17"}]},{"nodeType":"YulAssignment","src":"2693:41:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2703:1:17","type":"","value":"0"},{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2716:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"2727:4:17","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2712:3:17"},"nodeType":"YulFunctionCall","src":"2712:20:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2706:5:17"},"nodeType":"YulFunctionCall","src":"2706:27:17"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"2698:4:17"},"nodeType":"YulFunctionCall","src":"2698:36:17"},"variableNames":[{"name":"v","nodeType":"YulIdentifier","src":"2693:1:17"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3253,"isOffset":false,"isSlot":false,"src":"2595:1:17","valueSize":1},{"declaration":3256,"isOffset":false,"isSlot":false,"src":"2644:1:17","valueSize":1},{"declaration":3240,"isOffset":false,"isSlot":false,"src":"2610:9:17","valueSize":1},{"declaration":3240,"isOffset":false,"isSlot":false,"src":"2659:9:17","valueSize":1},{"declaration":3240,"isOffset":false,"isSlot":false,"src":"2716:9:17","valueSize":1},{"declaration":3259,"isOffset":false,"isSlot":false,"src":"2693:1:17","valueSize":1}],"id":3261,"nodeType":"InlineAssembly","src":"2568:180:17"},{"expression":{"arguments":[{"id":3263,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3238,"src":"2779:4:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3264,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3259,"src":"2785:1:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3265,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3253,"src":"2788:1:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3266,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3256,"src":"2791:1:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3262,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3281,3355,3449],"referencedDeclaration":3449,"src":"2768:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$3191_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":3267,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2768:25:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3191_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":3247,"id":3268,"nodeType":"Return","src":"2761:32:17"}]}}]},"documentation":{"id":3236,"nodeType":"StructuredDocumentation","src":"1109:1053:17","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature` or error string. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n _Available since v4.3._"},"id":3281,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"2176:10:17","nodeType":"FunctionDefinition","parameters":{"id":3241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3238,"mutability":"mutable","name":"hash","nameLocation":"2195:4:17","nodeType":"VariableDeclaration","scope":3281,"src":"2187:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3237,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2187:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3240,"mutability":"mutable","name":"signature","nameLocation":"2214:9:17","nodeType":"VariableDeclaration","scope":3281,"src":"2201:22:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3239,"name":"bytes","nodeType":"ElementaryTypeName","src":"2201:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2186:38:17"},"returnParameters":{"id":3247,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3243,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3281,"src":"2248:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3242,"name":"address","nodeType":"ElementaryTypeName","src":"2248:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3246,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3281,"src":"2257:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3191","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":3245,"nodeType":"UserDefinedTypeName","pathNode":{"id":3244,"name":"RecoverError","nameLocations":["2257:12:17"],"nodeType":"IdentifierPath","referencedDeclaration":3191,"src":"2257:12:17"},"referencedDeclaration":3191,"src":"2257:12:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3191","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"2247:23:17"},"scope":3542,"src":"2167:730:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3307,"nodeType":"Block","src":"3770:140:17","statements":[{"assignments":[3292,3295],"declarations":[{"constant":false,"id":3292,"mutability":"mutable","name":"recovered","nameLocation":"3789:9:17","nodeType":"VariableDeclaration","scope":3307,"src":"3781:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3291,"name":"address","nodeType":"ElementaryTypeName","src":"3781:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3295,"mutability":"mutable","name":"error","nameLocation":"3813:5:17","nodeType":"VariableDeclaration","scope":3307,"src":"3800:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3191","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":3294,"nodeType":"UserDefinedTypeName","pathNode":{"id":3293,"name":"RecoverError","nameLocations":["3800:12:17"],"nodeType":"IdentifierPath","referencedDeclaration":3191,"src":"3800:12:17"},"referencedDeclaration":3191,"src":"3800:12:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3191","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"id":3300,"initialValue":{"arguments":[{"id":3297,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3284,"src":"3833:4:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3298,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3286,"src":"3839:9:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3296,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3281,3355,3449],"referencedDeclaration":3281,"src":"3822:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$3191_$","typeString":"function (bytes32,bytes memory) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":3299,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3822:27:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3191_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"3780:69:17"},{"expression":{"arguments":[{"id":3302,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3295,"src":"3871:5:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3191","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$3191","typeString":"enum ECDSAUpgradeable.RecoverError"}],"id":3301,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3235,"src":"3859:11:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$3191_$returns$__$","typeString":"function (enum ECDSAUpgradeable.RecoverError) pure"}},"id":3303,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3859:18:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3304,"nodeType":"ExpressionStatement","src":"3859:18:17"},{"expression":{"id":3305,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3292,"src":"3894:9:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3290,"id":3306,"nodeType":"Return","src":"3887:16:17"}]},"documentation":{"id":3282,"nodeType":"StructuredDocumentation","src":"2903:775:17","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it."},"id":3308,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"3692:7:17","nodeType":"FunctionDefinition","parameters":{"id":3287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3284,"mutability":"mutable","name":"hash","nameLocation":"3708:4:17","nodeType":"VariableDeclaration","scope":3308,"src":"3700:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3283,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3700:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3286,"mutability":"mutable","name":"signature","nameLocation":"3727:9:17","nodeType":"VariableDeclaration","scope":3308,"src":"3714:22:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3285,"name":"bytes","nodeType":"ElementaryTypeName","src":"3714:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3699:38:17"},"returnParameters":{"id":3290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3289,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3308,"src":"3761:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3288,"name":"address","nodeType":"ElementaryTypeName","src":"3761:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3760:9:17"},"scope":3542,"src":"3683:227:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3354,"nodeType":"Block","src":"4297:203:17","statements":[{"assignments":[3324],"declarations":[{"constant":false,"id":3324,"mutability":"mutable","name":"s","nameLocation":"4315:1:17","nodeType":"VariableDeclaration","scope":3354,"src":"4307:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3323,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4307:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3331,"initialValue":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3325,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3315,"src":"4319:2:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"arguments":[{"hexValue":"307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666","id":3328,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4332:66:17","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"},"value":"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"}],"id":3327,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4324:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3326,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4324:7:17","typeDescriptions":{}}},"id":3329,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4324:75:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4319:80:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4307:92:17"},{"assignments":[3333],"declarations":[{"constant":false,"id":3333,"mutability":"mutable","name":"v","nameLocation":"4415:1:17","nodeType":"VariableDeclaration","scope":3354,"src":"4409:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3332,"name":"uint8","nodeType":"ElementaryTypeName","src":"4409:5:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":3346,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3338,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3315,"src":"4434:2:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3337,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4426:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3336,"name":"uint256","nodeType":"ElementaryTypeName","src":"4426:7:17","typeDescriptions":{}}},"id":3339,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4426:11:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":3340,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4441:3:17","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"4426:18:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3342,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4425:20:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3237","id":3343,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4448:2:17","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"4425:25:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3335,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4419:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3334,"name":"uint8","nodeType":"ElementaryTypeName","src":"4419:5:17","typeDescriptions":{}}},"id":3345,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4419:32:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"4409:42:17"},{"expression":{"arguments":[{"id":3348,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3311,"src":"4479:4:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3349,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3333,"src":"4485:1:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3350,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3313,"src":"4488:1:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3351,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3324,"src":"4491:1:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3347,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3281,3355,3449],"referencedDeclaration":3449,"src":"4468:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$3191_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":3352,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4468:25:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3191_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":3322,"id":3353,"nodeType":"Return","src":"4461:32:17"}]},"documentation":{"id":3309,"nodeType":"StructuredDocumentation","src":"3916:243:17","text":" @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n _Available since v4.3._"},"id":3355,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"4173:10:17","nodeType":"FunctionDefinition","parameters":{"id":3316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3311,"mutability":"mutable","name":"hash","nameLocation":"4201:4:17","nodeType":"VariableDeclaration","scope":3355,"src":"4193:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3310,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4193:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3313,"mutability":"mutable","name":"r","nameLocation":"4223:1:17","nodeType":"VariableDeclaration","scope":3355,"src":"4215:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3312,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4215:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3315,"mutability":"mutable","name":"vs","nameLocation":"4242:2:17","nodeType":"VariableDeclaration","scope":3355,"src":"4234:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3314,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4234:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4183:67:17"},"returnParameters":{"id":3322,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3318,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3355,"src":"4274:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3317,"name":"address","nodeType":"ElementaryTypeName","src":"4274:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3321,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3355,"src":"4283:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3191","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":3320,"nodeType":"UserDefinedTypeName","pathNode":{"id":3319,"name":"RecoverError","nameLocations":["4283:12:17"],"nodeType":"IdentifierPath","referencedDeclaration":3191,"src":"4283:12:17"},"referencedDeclaration":3191,"src":"4283:12:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3191","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"4273:23:17"},"scope":3542,"src":"4164:336:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3384,"nodeType":"Block","src":"4781:136:17","statements":[{"assignments":[3368,3371],"declarations":[{"constant":false,"id":3368,"mutability":"mutable","name":"recovered","nameLocation":"4800:9:17","nodeType":"VariableDeclaration","scope":3384,"src":"4792:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3367,"name":"address","nodeType":"ElementaryTypeName","src":"4792:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3371,"mutability":"mutable","name":"error","nameLocation":"4824:5:17","nodeType":"VariableDeclaration","scope":3384,"src":"4811:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3191","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":3370,"nodeType":"UserDefinedTypeName","pathNode":{"id":3369,"name":"RecoverError","nameLocations":["4811:12:17"],"nodeType":"IdentifierPath","referencedDeclaration":3191,"src":"4811:12:17"},"referencedDeclaration":3191,"src":"4811:12:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3191","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"id":3377,"initialValue":{"arguments":[{"id":3373,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3358,"src":"4844:4:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3374,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3360,"src":"4850:1:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3375,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3362,"src":"4853:2:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3372,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3281,3355,3449],"referencedDeclaration":3355,"src":"4833:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$3191_$","typeString":"function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":3376,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4833:23:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3191_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"4791:65:17"},{"expression":{"arguments":[{"id":3379,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3371,"src":"4878:5:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3191","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$3191","typeString":"enum ECDSAUpgradeable.RecoverError"}],"id":3378,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3235,"src":"4866:11:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$3191_$returns$__$","typeString":"function (enum ECDSAUpgradeable.RecoverError) pure"}},"id":3380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4866:18:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3381,"nodeType":"ExpressionStatement","src":"4866:18:17"},{"expression":{"id":3382,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3368,"src":"4901:9:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3366,"id":3383,"nodeType":"Return","src":"4894:16:17"}]},"documentation":{"id":3356,"nodeType":"StructuredDocumentation","src":"4506:154:17","text":" @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n _Available since v4.2._"},"id":3385,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"4674:7:17","nodeType":"FunctionDefinition","parameters":{"id":3363,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3358,"mutability":"mutable","name":"hash","nameLocation":"4699:4:17","nodeType":"VariableDeclaration","scope":3385,"src":"4691:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3357,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4691:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3360,"mutability":"mutable","name":"r","nameLocation":"4721:1:17","nodeType":"VariableDeclaration","scope":3385,"src":"4713:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3359,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4713:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3362,"mutability":"mutable","name":"vs","nameLocation":"4740:2:17","nodeType":"VariableDeclaration","scope":3385,"src":"4732:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3361,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4732:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4681:67:17"},"returnParameters":{"id":3366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3365,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3385,"src":"4772:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3364,"name":"address","nodeType":"ElementaryTypeName","src":"4772:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4771:9:17"},"scope":3542,"src":"4665:252:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3448,"nodeType":"Block","src":"5240:1345:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3404,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"6136:1:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3403,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6128:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3402,"name":"uint256","nodeType":"ElementaryTypeName","src":"6128:7:17","typeDescriptions":{}}},"id":3405,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6128:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130","id":3406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6141:66:17","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1","typeString":"int_const 5789...(69 digits omitted)...7168"},"value":"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"},"src":"6128:79:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3417,"nodeType":"IfStatement","src":"6124:161:17","trueBody":{"id":3416,"nodeType":"Block","src":"6209:76:17","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":3410,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6239:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3409,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6231:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3408,"name":"address","nodeType":"ElementaryTypeName","src":"6231:7:17","typeDescriptions":{}}},"id":3411,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6231:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3412,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3191,"src":"6243:12:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3191_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":3413,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6256:17:17","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":3189,"src":"6243:30:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3191","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":3414,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6230:44:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3191_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":3401,"id":3415,"nodeType":"Return","src":"6223:51:17"}]}},{"assignments":[3419],"declarations":[{"constant":false,"id":3419,"mutability":"mutable","name":"signer","nameLocation":"6387:6:17","nodeType":"VariableDeclaration","scope":3448,"src":"6379:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3418,"name":"address","nodeType":"ElementaryTypeName","src":"6379:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3426,"initialValue":{"arguments":[{"id":3421,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3388,"src":"6406:4:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3422,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3390,"src":"6412:1:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3423,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3392,"src":"6415:1:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3424,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"6418:1:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3420,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"6396:9:17","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":3425,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6396:24:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6379:41:17"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3427,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"6434:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6452:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3429,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6444:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3428,"name":"address","nodeType":"ElementaryTypeName","src":"6444:7:17","typeDescriptions":{}}},"id":3431,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6444:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6434:20:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3442,"nodeType":"IfStatement","src":"6430:101:17","trueBody":{"id":3441,"nodeType":"Block","src":"6456:75:17","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":3435,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6486:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3434,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6478:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3433,"name":"address","nodeType":"ElementaryTypeName","src":"6478:7:17","typeDescriptions":{}}},"id":3436,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6478:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3437,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3191,"src":"6490:12:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3191_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":3438,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6503:16:17","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":3187,"src":"6490:29:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3191","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":3439,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6477:43:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3191_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":3401,"id":3440,"nodeType":"Return","src":"6470:50:17"}]}},{"expression":{"components":[{"id":3443,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"6549:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3444,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3191,"src":"6557:12:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3191_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":3445,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6570:7:17","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":3186,"src":"6557:20:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3191","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":3446,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6548:30:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3191_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":3401,"id":3447,"nodeType":"Return","src":"6541:37:17"}]},"documentation":{"id":3386,"nodeType":"StructuredDocumentation","src":"4923:163:17","text":" @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately.\n _Available since v4.3._"},"id":3449,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"5100:10:17","nodeType":"FunctionDefinition","parameters":{"id":3395,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3388,"mutability":"mutable","name":"hash","nameLocation":"5128:4:17","nodeType":"VariableDeclaration","scope":3449,"src":"5120:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3387,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5120:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3390,"mutability":"mutable","name":"v","nameLocation":"5148:1:17","nodeType":"VariableDeclaration","scope":3449,"src":"5142:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3389,"name":"uint8","nodeType":"ElementaryTypeName","src":"5142:5:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3392,"mutability":"mutable","name":"r","nameLocation":"5167:1:17","nodeType":"VariableDeclaration","scope":3449,"src":"5159:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3391,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5159:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3394,"mutability":"mutable","name":"s","nameLocation":"5186:1:17","nodeType":"VariableDeclaration","scope":3449,"src":"5178:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3393,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5178:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5110:83:17"},"returnParameters":{"id":3401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3397,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3449,"src":"5217:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3396,"name":"address","nodeType":"ElementaryTypeName","src":"5217:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3400,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3449,"src":"5226:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3191","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":3399,"nodeType":"UserDefinedTypeName","pathNode":{"id":3398,"name":"RecoverError","nameLocations":["5226:12:17"],"nodeType":"IdentifierPath","referencedDeclaration":3191,"src":"5226:12:17"},"referencedDeclaration":3191,"src":"5226:12:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3191","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"5216:23:17"},"scope":3542,"src":"5091:1494:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3481,"nodeType":"Block","src":"6850:138:17","statements":[{"assignments":[3464,3467],"declarations":[{"constant":false,"id":3464,"mutability":"mutable","name":"recovered","nameLocation":"6869:9:17","nodeType":"VariableDeclaration","scope":3481,"src":"6861:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3463,"name":"address","nodeType":"ElementaryTypeName","src":"6861:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3467,"mutability":"mutable","name":"error","nameLocation":"6893:5:17","nodeType":"VariableDeclaration","scope":3481,"src":"6880:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3191","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":3466,"nodeType":"UserDefinedTypeName","pathNode":{"id":3465,"name":"RecoverError","nameLocations":["6880:12:17"],"nodeType":"IdentifierPath","referencedDeclaration":3191,"src":"6880:12:17"},"referencedDeclaration":3191,"src":"6880:12:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3191","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"id":3474,"initialValue":{"arguments":[{"id":3469,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3452,"src":"6913:4:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3470,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3454,"src":"6919:1:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3471,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3456,"src":"6922:1:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3472,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3458,"src":"6925:1:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3468,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3281,3355,3449],"referencedDeclaration":3449,"src":"6902:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$3191_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":3473,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6902:25:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3191_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"6860:67:17"},{"expression":{"arguments":[{"id":3476,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3467,"src":"6949:5:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3191","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$3191","typeString":"enum ECDSAUpgradeable.RecoverError"}],"id":3475,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3235,"src":"6937:11:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$3191_$returns$__$","typeString":"function (enum ECDSAUpgradeable.RecoverError) pure"}},"id":3477,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6937:18:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3478,"nodeType":"ExpressionStatement","src":"6937:18:17"},{"expression":{"id":3479,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3464,"src":"6972:9:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3462,"id":3480,"nodeType":"Return","src":"6965:16:17"}]},"documentation":{"id":3450,"nodeType":"StructuredDocumentation","src":"6591:122:17","text":" @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."},"id":3482,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"6727:7:17","nodeType":"FunctionDefinition","parameters":{"id":3459,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3452,"mutability":"mutable","name":"hash","nameLocation":"6752:4:17","nodeType":"VariableDeclaration","scope":3482,"src":"6744:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3451,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6744:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3454,"mutability":"mutable","name":"v","nameLocation":"6772:1:17","nodeType":"VariableDeclaration","scope":3482,"src":"6766:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3453,"name":"uint8","nodeType":"ElementaryTypeName","src":"6766:5:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3456,"mutability":"mutable","name":"r","nameLocation":"6791:1:17","nodeType":"VariableDeclaration","scope":3482,"src":"6783:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3455,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6783:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3458,"mutability":"mutable","name":"s","nameLocation":"6810:1:17","nodeType":"VariableDeclaration","scope":3482,"src":"6802:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3457,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6802:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6734:83:17"},"returnParameters":{"id":3462,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3461,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3482,"src":"6841:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3460,"name":"address","nodeType":"ElementaryTypeName","src":"6841:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6840:9:17"},"scope":3542,"src":"6718:270:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3498,"nodeType":"Block","src":"7356:187:17","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","id":3493,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7494:34:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""},"value":"\u0019Ethereum Signed Message:\n32"},{"id":3494,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3485,"src":"7530:4:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3491,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7477:3:17","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3492,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7481:12:17","memberName":"encodePacked","nodeType":"MemberAccess","src":"7477:16:17","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7477:58:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3490,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7467:9:17","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3496,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7467:69:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3489,"id":3497,"nodeType":"Return","src":"7460:76:17"}]},"documentation":{"id":3483,"nodeType":"StructuredDocumentation","src":"6994:279:17","text":" @dev Returns an Ethereum Signed Message, created from a `hash`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":3499,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7287:22:17","nodeType":"FunctionDefinition","parameters":{"id":3486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3485,"mutability":"mutable","name":"hash","nameLocation":"7318:4:17","nodeType":"VariableDeclaration","scope":3499,"src":"7310:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3484,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7310:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7309:14:17"},"returnParameters":{"id":3489,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3488,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3499,"src":"7347:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3487,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7347:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7346:9:17"},"scope":3542,"src":"7278:265:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3520,"nodeType":"Block","src":"7908:127:17","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a","id":3510,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7952:32:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},"value":"\u0019Ethereum Signed Message:\n"},{"arguments":[{"expression":{"id":3513,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3502,"src":"8014:1:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8016:6:17","memberName":"length","nodeType":"MemberAccess","src":"8014:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3511,"name":"StringsUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3181,"src":"7986:18:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StringsUpgradeable_$3181_$","typeString":"type(library StringsUpgradeable)"}},"id":3512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8005:8:17","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":3064,"src":"7986:27:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":3515,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7986:37:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3516,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3502,"src":"8025:1:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3508,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7935:3:17","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3509,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7939:12:17","memberName":"encodePacked","nodeType":"MemberAccess","src":"7935:16:17","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3517,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7935:92:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3507,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7925:9:17","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3518,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7925:103:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3506,"id":3519,"nodeType":"Return","src":"7918:110:17"}]},"documentation":{"id":3500,"nodeType":"StructuredDocumentation","src":"7549:274:17","text":" @dev Returns an Ethereum Signed Message, created from `s`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":3521,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7837:22:17","nodeType":"FunctionDefinition","parameters":{"id":3503,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3502,"mutability":"mutable","name":"s","nameLocation":"7873:1:17","nodeType":"VariableDeclaration","scope":3521,"src":"7860:14:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3501,"name":"bytes","nodeType":"ElementaryTypeName","src":"7860:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7859:16:17"},"returnParameters":{"id":3506,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3505,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3521,"src":"7899:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3504,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7899:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7898:9:17"},"scope":3542,"src":"7828:207:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3540,"nodeType":"Block","src":"8476:92:17","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"1901","id":3534,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8520:10:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","typeString":"literal_string hex\"1901\""},"value":"\u0019\u0001"},{"id":3535,"name":"domainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3524,"src":"8532:15:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3536,"name":"structHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"8549:10:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","typeString":"literal_string hex\"1901\""},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3532,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"8503:3:17","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3533,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8507:12:17","memberName":"encodePacked","nodeType":"MemberAccess","src":"8503:16:17","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3537,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8503:57:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3531,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"8493:9:17","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3538,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8493:68:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3530,"id":3539,"nodeType":"Return","src":"8486:75:17"}]},"documentation":{"id":3522,"nodeType":"StructuredDocumentation","src":"8041:328:17","text":" @dev Returns an Ethereum Signed Typed Data, created from a\n `domainSeparator` and a `structHash`. This produces hash corresponding\n to the one signed with the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n JSON-RPC method as part of EIP-712.\n See {recover}."},"id":3541,"implemented":true,"kind":"function","modifiers":[],"name":"toTypedDataHash","nameLocation":"8383:15:17","nodeType":"FunctionDefinition","parameters":{"id":3527,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3524,"mutability":"mutable","name":"domainSeparator","nameLocation":"8407:15:17","nodeType":"VariableDeclaration","scope":3541,"src":"8399:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3523,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8399:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3526,"mutability":"mutable","name":"structHash","nameLocation":"8432:10:17","nodeType":"VariableDeclaration","scope":3541,"src":"8424:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3525,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8424:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8398:45:17"},"returnParameters":{"id":3530,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3529,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3541,"src":"8467:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3528,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8467:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8466:9:17"},"scope":3542,"src":"8374:194:17","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3543,"src":"380:8190:17","usedErrors":[]}],"src":"112:8459:17"},"id":17},"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2904],"ECDSAUpgradeable":[3542],"EIP712Upgradeable":[3692],"Initializable":[795],"MathUpgradeable":[4613],"StringsUpgradeable":[3181]},"id":3693,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3544,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"113:23:18"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol","file":"./ECDSAUpgradeable.sol","id":3545,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3693,"sourceUnit":3543,"src":"138:32:18","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../proxy/utils/Initializable.sol","id":3546,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3693,"sourceUnit":796,"src":"171:45:18","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":3548,"name":"Initializable","nameLocations":["1430:13:18"],"nodeType":"IdentifierPath","referencedDeclaration":795,"src":"1430:13:18"},"id":3549,"nodeType":"InheritanceSpecifier","src":"1430:13:18"}],"canonicalName":"EIP712Upgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":3547,"nodeType":"StructuredDocumentation","src":"218:1172:18","text":" @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n they need in their contracts using a combination of `abi.encode` and `keccak256`.\n This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n ({_hashTypedDataV4}).\n The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n the chain id to protect against replay attacks on an eventual fork of the chain.\n NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n _Available since v3.4._\n @custom:storage-size 52"},"fullyImplemented":true,"id":3692,"linearizedBaseContracts":[3692,795],"name":"EIP712Upgradeable","nameLocation":"1409:17:18","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":3551,"mutability":"mutable","name":"_HASHED_NAME","nameLocation":"1511:12:18","nodeType":"VariableDeclaration","scope":3692,"src":"1495:28:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3550,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1495:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":3553,"mutability":"mutable","name":"_HASHED_VERSION","nameLocation":"1545:15:18","nodeType":"VariableDeclaration","scope":3692,"src":"1529:31:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3552,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1529:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":true,"id":3558,"mutability":"constant","name":"_TYPE_HASH","nameLocation":"1591:10:18","nodeType":"VariableDeclaration","scope":3692,"src":"1566:133:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3554,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1566:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429","id":3556,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1614:84:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f","typeString":"literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""},"value":"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f","typeString":"literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""}],"id":3555,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1604:9:18","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3557,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1604:95:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"body":{"id":3573,"nodeType":"Block","src":"2407:55:18","statements":[{"expression":{"arguments":[{"id":3569,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3561,"src":"2441:4:18","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3570,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3563,"src":"2447:7:18","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3568,"name":"__EIP712_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3610,"src":"2417:23:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory,string memory)"}},"id":3571,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2417:38:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3572,"nodeType":"ExpressionStatement","src":"2417:38:18"}]},"documentation":{"id":3559,"nodeType":"StructuredDocumentation","src":"1751:559:18","text":" @dev Initializes the domain separator and parameter caches.\n The meaning of `name` and `version` is specified in\n https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n - `version`: the current major version of the signing domain.\n NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n contract upgrade]."},"id":3574,"implemented":true,"kind":"function","modifiers":[{"id":3566,"kind":"modifierInvocation","modifierName":{"id":3565,"name":"onlyInitializing","nameLocations":["2390:16:18"],"nodeType":"IdentifierPath","referencedDeclaration":740,"src":"2390:16:18"},"nodeType":"ModifierInvocation","src":"2390:16:18"}],"name":"__EIP712_init","nameLocation":"2324:13:18","nodeType":"FunctionDefinition","parameters":{"id":3564,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3561,"mutability":"mutable","name":"name","nameLocation":"2352:4:18","nodeType":"VariableDeclaration","scope":3574,"src":"2338:18:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3560,"name":"string","nodeType":"ElementaryTypeName","src":"2338:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3563,"mutability":"mutable","name":"version","nameLocation":"2372:7:18","nodeType":"VariableDeclaration","scope":3574,"src":"2358:21:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3562,"name":"string","nodeType":"ElementaryTypeName","src":"2358:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2337:43:18"},"returnParameters":{"id":3567,"nodeType":"ParameterList","parameters":[],"src":"2407:0:18"},"scope":3692,"src":"2315:147:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3609,"nodeType":"Block","src":"2570:195:18","statements":[{"assignments":[3584],"declarations":[{"constant":false,"id":3584,"mutability":"mutable","name":"hashedName","nameLocation":"2588:10:18","nodeType":"VariableDeclaration","scope":3609,"src":"2580:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3583,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2580:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3591,"initialValue":{"arguments":[{"arguments":[{"id":3588,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3576,"src":"2617:4:18","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3587,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2611:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3586,"name":"bytes","nodeType":"ElementaryTypeName","src":"2611:5:18","typeDescriptions":{}}},"id":3589,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2611:11:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3585,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2601:9:18","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3590,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2601:22:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2580:43:18"},{"assignments":[3593],"declarations":[{"constant":false,"id":3593,"mutability":"mutable","name":"hashedVersion","nameLocation":"2641:13:18","nodeType":"VariableDeclaration","scope":3609,"src":"2633:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3592,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2633:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3600,"initialValue":{"arguments":[{"arguments":[{"id":3597,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3578,"src":"2673:7:18","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3596,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2667:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3595,"name":"bytes","nodeType":"ElementaryTypeName","src":"2667:5:18","typeDescriptions":{}}},"id":3598,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2667:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3594,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2657:9:18","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3599,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2657:25:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2633:49:18"},{"expression":{"id":3603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3601,"name":"_HASHED_NAME","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3551,"src":"2692:12:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3602,"name":"hashedName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3584,"src":"2707:10:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2692:25:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3604,"nodeType":"ExpressionStatement","src":"2692:25:18"},{"expression":{"id":3607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3605,"name":"_HASHED_VERSION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3553,"src":"2727:15:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3606,"name":"hashedVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3593,"src":"2745:13:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2727:31:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3608,"nodeType":"ExpressionStatement","src":"2727:31:18"}]},"id":3610,"implemented":true,"kind":"function","modifiers":[{"id":3581,"kind":"modifierInvocation","modifierName":{"id":3580,"name":"onlyInitializing","nameLocations":["2553:16:18"],"nodeType":"IdentifierPath","referencedDeclaration":740,"src":"2553:16:18"},"nodeType":"ModifierInvocation","src":"2553:16:18"}],"name":"__EIP712_init_unchained","nameLocation":"2477:23:18","nodeType":"FunctionDefinition","parameters":{"id":3579,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3576,"mutability":"mutable","name":"name","nameLocation":"2515:4:18","nodeType":"VariableDeclaration","scope":3610,"src":"2501:18:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3575,"name":"string","nodeType":"ElementaryTypeName","src":"2501:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3578,"mutability":"mutable","name":"version","nameLocation":"2535:7:18","nodeType":"VariableDeclaration","scope":3610,"src":"2521:21:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3577,"name":"string","nodeType":"ElementaryTypeName","src":"2521:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2500:43:18"},"returnParameters":{"id":3582,"nodeType":"ParameterList","parameters":[],"src":"2570:0:18"},"scope":3692,"src":"2468:297:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3624,"nodeType":"Block","src":"2913:98:18","statements":[{"expression":{"arguments":[{"id":3617,"name":"_TYPE_HASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3558,"src":"2952:10:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":3618,"name":"_EIP712NameHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3677,"src":"2964:15:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":3619,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2964:17:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":3620,"name":"_EIP712VersionHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3686,"src":"2983:18:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":3621,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2983:20:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3616,"name":"_buildDomainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3652,"src":"2930:21:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32,bytes32) view returns (bytes32)"}},"id":3622,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2930:74:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3615,"id":3623,"nodeType":"Return","src":"2923:81:18"}]},"documentation":{"id":3611,"nodeType":"StructuredDocumentation","src":"2771:75:18","text":" @dev Returns the domain separator for the current chain."},"id":3625,"implemented":true,"kind":"function","modifiers":[],"name":"_domainSeparatorV4","nameLocation":"2860:18:18","nodeType":"FunctionDefinition","parameters":{"id":3612,"nodeType":"ParameterList","parameters":[],"src":"2878:2:18"},"returnParameters":{"id":3615,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3614,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3625,"src":"2904:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3613,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2904:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2903:9:18"},"scope":3692,"src":"2851:160:18","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3651,"nodeType":"Block","src":"3166:108:18","statements":[{"expression":{"arguments":[{"arguments":[{"id":3639,"name":"typeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3627,"src":"3204:8:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3640,"name":"nameHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3629,"src":"3214:8:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3641,"name":"versionHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3631,"src":"3224:11:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":3642,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3237:5:18","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3243:7:18","memberName":"chainid","nodeType":"MemberAccess","src":"3237:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":3646,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3260:4:18","typeDescriptions":{"typeIdentifier":"t_contract$_EIP712Upgradeable_$3692","typeString":"contract EIP712Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EIP712Upgradeable_$3692","typeString":"contract EIP712Upgradeable"}],"id":3645,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3252:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3644,"name":"address","nodeType":"ElementaryTypeName","src":"3252:7:18","typeDescriptions":{}}},"id":3647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3252:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3637,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3193:3:18","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3638,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3197:6:18","memberName":"encode","nodeType":"MemberAccess","src":"3193:10:18","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3648,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3193:73:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3636,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3183:9:18","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3649,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3183:84:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3635,"id":3650,"nodeType":"Return","src":"3176:91:18"}]},"id":3652,"implemented":true,"kind":"function","modifiers":[],"name":"_buildDomainSeparator","nameLocation":"3026:21:18","nodeType":"FunctionDefinition","parameters":{"id":3632,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3627,"mutability":"mutable","name":"typeHash","nameLocation":"3065:8:18","nodeType":"VariableDeclaration","scope":3652,"src":"3057:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3626,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3057:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3629,"mutability":"mutable","name":"nameHash","nameLocation":"3091:8:18","nodeType":"VariableDeclaration","scope":3652,"src":"3083:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3628,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3083:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3631,"mutability":"mutable","name":"versionHash","nameLocation":"3117:11:18","nodeType":"VariableDeclaration","scope":3652,"src":"3109:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3630,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3109:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3047:87:18"},"returnParameters":{"id":3635,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3634,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3652,"src":"3157:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3633,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3157:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3156:9:18"},"scope":3692,"src":"3017:257:18","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":3667,"nodeType":"Block","src":"3985:90:18","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":3662,"name":"_domainSeparatorV4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3625,"src":"4035:18:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":3663,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4035:20:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3664,"name":"structHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3655,"src":"4057:10:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3660,"name":"ECDSAUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3542,"src":"4002:16:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSAUpgradeable_$3542_$","typeString":"type(library ECDSAUpgradeable)"}},"id":3661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4019:15:18","memberName":"toTypedDataHash","nodeType":"MemberAccess","referencedDeclaration":3541,"src":"4002:32:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":3665,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4002:66:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3659,"id":3666,"nodeType":"Return","src":"3995:73:18"}]},"documentation":{"id":3653,"nodeType":"StructuredDocumentation","src":"3280:614:18","text":" @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n function returns the hash of the fully encoded EIP712 message for this domain.\n This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n ```solidity\n bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     keccak256(\"Mail(address to,string contents)\"),\n     mailTo,\n     keccak256(bytes(mailContents))\n )));\n address signer = ECDSA.recover(digest, signature);\n ```"},"id":3668,"implemented":true,"kind":"function","modifiers":[],"name":"_hashTypedDataV4","nameLocation":"3908:16:18","nodeType":"FunctionDefinition","parameters":{"id":3656,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3655,"mutability":"mutable","name":"structHash","nameLocation":"3933:10:18","nodeType":"VariableDeclaration","scope":3668,"src":"3925:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3654,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3925:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3924:20:18"},"returnParameters":{"id":3659,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3658,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3668,"src":"3976:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3657,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3976:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3975:9:18"},"scope":3692,"src":"3899:176:18","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3676,"nodeType":"Block","src":"4378:36:18","statements":[{"expression":{"id":3674,"name":"_HASHED_NAME","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3551,"src":"4395:12:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3673,"id":3675,"nodeType":"Return","src":"4388:19:18"}]},"documentation":{"id":3669,"nodeType":"StructuredDocumentation","src":"4081:225:18","text":" @dev The hash of the name parameter for the EIP712 domain.\n NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n are a concern."},"id":3677,"implemented":true,"kind":"function","modifiers":[],"name":"_EIP712NameHash","nameLocation":"4320:15:18","nodeType":"FunctionDefinition","parameters":{"id":3670,"nodeType":"ParameterList","parameters":[],"src":"4335:2:18"},"returnParameters":{"id":3673,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3672,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3677,"src":"4369:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3671,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4369:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4368:9:18"},"scope":3692,"src":"4311:103:18","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3685,"nodeType":"Block","src":"4723:39:18","statements":[{"expression":{"id":3683,"name":"_HASHED_VERSION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3553,"src":"4740:15:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3682,"id":3684,"nodeType":"Return","src":"4733:22:18"}]},"documentation":{"id":3678,"nodeType":"StructuredDocumentation","src":"4420:228:18","text":" @dev The hash of the version parameter for the EIP712 domain.\n NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n are a concern."},"id":3686,"implemented":true,"kind":"function","modifiers":[],"name":"_EIP712VersionHash","nameLocation":"4662:18:18","nodeType":"FunctionDefinition","parameters":{"id":3679,"nodeType":"ParameterList","parameters":[],"src":"4680:2:18"},"returnParameters":{"id":3682,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3681,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3686,"src":"4714:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3680,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4714:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4713:9:18"},"scope":3692,"src":"4653:109:18","stateMutability":"view","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":3687,"nodeType":"StructuredDocumentation","src":"4768:254:18","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":3691,"mutability":"mutable","name":"__gap","nameLocation":"5047:5:18","nodeType":"VariableDeclaration","scope":3692,"src":"5027:25:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":3688,"name":"uint256","nodeType":"ElementaryTypeName","src":"5027:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3690,"length":{"hexValue":"3530","id":3689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5035:2:18","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"5027:11:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":3693,"src":"1391:3664:18","usedErrors":[]}],"src":"113:4943:18"},"id":18},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2904],"ERC165Upgradeable":[3736],"IERC165Upgradeable":[3748],"Initializable":[795]},"id":3737,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3694,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:19"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol","file":"./IERC165Upgradeable.sol","id":3695,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3737,"sourceUnit":3749,"src":"124:34:19","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../proxy/utils/Initializable.sol","id":3696,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3737,"sourceUnit":796,"src":"159:45:19","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":3698,"name":"Initializable","nameLocations":["822:13:19"],"nodeType":"IdentifierPath","referencedDeclaration":795,"src":"822:13:19"},"id":3699,"nodeType":"InheritanceSpecifier","src":"822:13:19"},{"baseName":{"id":3700,"name":"IERC165Upgradeable","nameLocations":["837:18:19"],"nodeType":"IdentifierPath","referencedDeclaration":3748,"src":"837:18:19"},"id":3701,"nodeType":"InheritanceSpecifier","src":"837:18:19"}],"canonicalName":"ERC165Upgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":3697,"nodeType":"StructuredDocumentation","src":"206:576:19","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."},"fullyImplemented":true,"id":3736,"linearizedBaseContracts":[3736,3748,795],"name":"ERC165Upgradeable","nameLocation":"801:17:19","nodeType":"ContractDefinition","nodes":[{"body":{"id":3706,"nodeType":"Block","src":"913:7:19","statements":[]},"id":3707,"implemented":true,"kind":"function","modifiers":[{"id":3704,"kind":"modifierInvocation","modifierName":{"id":3703,"name":"onlyInitializing","nameLocations":["896:16:19"],"nodeType":"IdentifierPath","referencedDeclaration":740,"src":"896:16:19"},"nodeType":"ModifierInvocation","src":"896:16:19"}],"name":"__ERC165_init","nameLocation":"871:13:19","nodeType":"FunctionDefinition","parameters":{"id":3702,"nodeType":"ParameterList","parameters":[],"src":"884:2:19"},"returnParameters":{"id":3705,"nodeType":"ParameterList","parameters":[],"src":"913:0:19"},"scope":3736,"src":"862:58:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3712,"nodeType":"Block","src":"987:7:19","statements":[]},"id":3713,"implemented":true,"kind":"function","modifiers":[{"id":3710,"kind":"modifierInvocation","modifierName":{"id":3709,"name":"onlyInitializing","nameLocations":["970:16:19"],"nodeType":"IdentifierPath","referencedDeclaration":740,"src":"970:16:19"},"nodeType":"ModifierInvocation","src":"970:16:19"}],"name":"__ERC165_init_unchained","nameLocation":"935:23:19","nodeType":"FunctionDefinition","parameters":{"id":3708,"nodeType":"ParameterList","parameters":[],"src":"958:2:19"},"returnParameters":{"id":3711,"nodeType":"ParameterList","parameters":[],"src":"987:0:19"},"scope":3736,"src":"926:68:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[3747],"body":{"id":3729,"nodeType":"Block","src":"1151:75:19","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3722,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3716,"src":"1168:11:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":3724,"name":"IERC165Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3748,"src":"1188:18:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165Upgradeable_$3748_$","typeString":"type(contract IERC165Upgradeable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165Upgradeable_$3748_$","typeString":"type(contract IERC165Upgradeable)"}],"id":3723,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1183:4:19","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1183:24:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165Upgradeable_$3748","typeString":"type(contract IERC165Upgradeable)"}},"id":3726,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1208:11:19","memberName":"interfaceId","nodeType":"MemberAccess","src":"1183:36:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1168:51:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3721,"id":3728,"nodeType":"Return","src":"1161:58:19"}]},"documentation":{"id":3714,"nodeType":"StructuredDocumentation","src":"999:56:19","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":3730,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1069:17:19","nodeType":"FunctionDefinition","overrides":{"id":3718,"nodeType":"OverrideSpecifier","overrides":[],"src":"1127:8:19"},"parameters":{"id":3717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3716,"mutability":"mutable","name":"interfaceId","nameLocation":"1094:11:19","nodeType":"VariableDeclaration","scope":3730,"src":"1087:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3715,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1087:6:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1086:20:19"},"returnParameters":{"id":3721,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3720,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3730,"src":"1145:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3719,"name":"bool","nodeType":"ElementaryTypeName","src":"1145:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1144:6:19"},"scope":3736,"src":"1060:166:19","stateMutability":"view","virtual":true,"visibility":"public"},{"constant":false,"documentation":{"id":3731,"nodeType":"StructuredDocumentation","src":"1232:254:19","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":3735,"mutability":"mutable","name":"__gap","nameLocation":"1511:5:19","nodeType":"VariableDeclaration","scope":3736,"src":"1491:25:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":3732,"name":"uint256","nodeType":"ElementaryTypeName","src":"1491:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3734,"length":{"hexValue":"3530","id":3733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1499:2:19","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1491:11:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":3737,"src":"783:736:19","usedErrors":[]}],"src":"99:1421:19"},"id":19},"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol","exportedSymbols":{"IERC165Upgradeable":[3748]},"id":3749,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3738,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:20"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165Upgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":3739,"nodeType":"StructuredDocumentation","src":"125:279:20","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":3748,"linearizedBaseContracts":[3748],"name":"IERC165Upgradeable","nameLocation":"415:18:20","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3740,"nodeType":"StructuredDocumentation","src":"440:340:20","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":3747,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"794:17:20","nodeType":"FunctionDefinition","parameters":{"id":3743,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3742,"mutability":"mutable","name":"interfaceId","nameLocation":"819:11:20","nodeType":"VariableDeclaration","scope":3747,"src":"812:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3741,"name":"bytes4","nodeType":"ElementaryTypeName","src":"812:6:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"811:20:20"},"returnParameters":{"id":3746,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3745,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3747,"src":"855:4:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3744,"name":"bool","nodeType":"ElementaryTypeName","src":"855:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"854:6:20"},"scope":3748,"src":"785:76:20","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3749,"src":"405:458:20","usedErrors":[]}],"src":"100:764:20"},"id":20},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[4613]},"id":4614,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3750,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:21"},{"abstract":false,"baseContracts":[],"canonicalName":"MathUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":3751,"nodeType":"StructuredDocumentation","src":"128:73:21","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":4613,"linearizedBaseContracts":[4613],"name":"MathUpgradeable","nameLocation":"210:15:21","nodeType":"ContractDefinition","nodes":[{"canonicalName":"MathUpgradeable.Rounding","id":3755,"members":[{"id":3752,"name":"Down","nameLocation":"256:4:21","nodeType":"EnumValue","src":"256:4:21"},{"id":3753,"name":"Up","nameLocation":"298:2:21","nodeType":"EnumValue","src":"298:2:21"},{"id":3754,"name":"Zero","nameLocation":"329:4:21","nodeType":"EnumValue","src":"329:4:21"}],"name":"Rounding","nameLocation":"237:8:21","nodeType":"EnumDefinition","src":"232:122:21"},{"body":{"id":3772,"nodeType":"Block","src":"491:37:21","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3765,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3758,"src":"508:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3766,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3760,"src":"512:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"508:5:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3769,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3760,"src":"520:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"508:13:21","trueExpression":{"id":3768,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3758,"src":"516:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3764,"id":3771,"nodeType":"Return","src":"501:20:21"}]},"documentation":{"id":3756,"nodeType":"StructuredDocumentation","src":"360:59:21","text":" @dev Returns the largest of two numbers."},"id":3773,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"433:3:21","nodeType":"FunctionDefinition","parameters":{"id":3761,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3758,"mutability":"mutable","name":"a","nameLocation":"445:1:21","nodeType":"VariableDeclaration","scope":3773,"src":"437:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3757,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3760,"mutability":"mutable","name":"b","nameLocation":"456:1:21","nodeType":"VariableDeclaration","scope":3773,"src":"448:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3759,"name":"uint256","nodeType":"ElementaryTypeName","src":"448:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"436:22:21"},"returnParameters":{"id":3764,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3763,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3773,"src":"482:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3762,"name":"uint256","nodeType":"ElementaryTypeName","src":"482:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"481:9:21"},"scope":4613,"src":"424:104:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3790,"nodeType":"Block","src":"666:37:21","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3783,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3776,"src":"683:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3784,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3778,"src":"687:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"683:5:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3787,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3778,"src":"695:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"683:13:21","trueExpression":{"id":3786,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3776,"src":"691:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3782,"id":3789,"nodeType":"Return","src":"676:20:21"}]},"documentation":{"id":3774,"nodeType":"StructuredDocumentation","src":"534:60:21","text":" @dev Returns the smallest of two numbers."},"id":3791,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"608:3:21","nodeType":"FunctionDefinition","parameters":{"id":3779,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3776,"mutability":"mutable","name":"a","nameLocation":"620:1:21","nodeType":"VariableDeclaration","scope":3791,"src":"612:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3775,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3778,"mutability":"mutable","name":"b","nameLocation":"631:1:21","nodeType":"VariableDeclaration","scope":3791,"src":"623:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3777,"name":"uint256","nodeType":"ElementaryTypeName","src":"623:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"611:22:21"},"returnParameters":{"id":3782,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3781,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3791,"src":"657:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3780,"name":"uint256","nodeType":"ElementaryTypeName","src":"657:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"656:9:21"},"scope":4613,"src":"599:104:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3813,"nodeType":"Block","src":"887:82:21","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3801,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3794,"src":"942:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":3802,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3796,"src":"946:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"942:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3804,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"941:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3805,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3794,"src":"952:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":3806,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3796,"src":"956:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"952:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3808,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"951:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":3809,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"961:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"951:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3800,"id":3812,"nodeType":"Return","src":"934:28:21"}]},"documentation":{"id":3792,"nodeType":"StructuredDocumentation","src":"709:102:21","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":3814,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"825:7:21","nodeType":"FunctionDefinition","parameters":{"id":3797,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3794,"mutability":"mutable","name":"a","nameLocation":"841:1:21","nodeType":"VariableDeclaration","scope":3814,"src":"833:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3793,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3796,"mutability":"mutable","name":"b","nameLocation":"852:1:21","nodeType":"VariableDeclaration","scope":3814,"src":"844:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3795,"name":"uint256","nodeType":"ElementaryTypeName","src":"844:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"832:22:21"},"returnParameters":{"id":3800,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3799,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3814,"src":"878:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3798,"name":"uint256","nodeType":"ElementaryTypeName","src":"878:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"877:9:21"},"scope":4613,"src":"816:153:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3838,"nodeType":"Block","src":"1239:123:21","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3824,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3817,"src":"1327:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3825,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1332:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1327:6:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3828,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3817,"src":"1341:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3829,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1345:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1341:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3831,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1340:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3832,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3819,"src":"1350:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1340:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3834,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1354:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1340:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1327:28:21","trueExpression":{"hexValue":"30","id":3827,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1336:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3823,"id":3837,"nodeType":"Return","src":"1320:35:21"}]},"documentation":{"id":3815,"nodeType":"StructuredDocumentation","src":"975:188:21","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":3839,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1177:7:21","nodeType":"FunctionDefinition","parameters":{"id":3820,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3817,"mutability":"mutable","name":"a","nameLocation":"1193:1:21","nodeType":"VariableDeclaration","scope":3839,"src":"1185:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3816,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3819,"mutability":"mutable","name":"b","nameLocation":"1204:1:21","nodeType":"VariableDeclaration","scope":3839,"src":"1196:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3818,"name":"uint256","nodeType":"ElementaryTypeName","src":"1196:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1184:22:21"},"returnParameters":{"id":3823,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3822,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3839,"src":"1230:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3821,"name":"uint256","nodeType":"ElementaryTypeName","src":"1230:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1229:9:21"},"scope":4613,"src":"1168:194:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3960,"nodeType":"Block","src":"1806:3797:21","statements":[{"id":3959,"nodeType":"UncheckedBlock","src":"1816:3781:21","statements":[{"assignments":[3852],"declarations":[{"constant":false,"id":3852,"mutability":"mutable","name":"prod0","nameLocation":"2145:5:21","nodeType":"VariableDeclaration","scope":3959,"src":"2137:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3851,"name":"uint256","nodeType":"ElementaryTypeName","src":"2137:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3853,"nodeType":"VariableDeclarationStatement","src":"2137:13:21"},{"assignments":[3855],"declarations":[{"constant":false,"id":3855,"mutability":"mutable","name":"prod1","nameLocation":"2217:5:21","nodeType":"VariableDeclaration","scope":3959,"src":"2209:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3854,"name":"uint256","nodeType":"ElementaryTypeName","src":"2209:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3856,"nodeType":"VariableDeclarationStatement","src":"2209:13:21"},{"AST":{"nodeType":"YulBlock","src":"2289:157:21","statements":[{"nodeType":"YulVariableDeclaration","src":"2307:30:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2324:1:21"},{"name":"y","nodeType":"YulIdentifier","src":"2327:1:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2334:1:21","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2330:3:21"},"nodeType":"YulFunctionCall","src":"2330:6:21"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2317:6:21"},"nodeType":"YulFunctionCall","src":"2317:20:21"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2311:2:21","type":""}]},{"nodeType":"YulAssignment","src":"2354:18:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2367:1:21"},{"name":"y","nodeType":"YulIdentifier","src":"2370:1:21"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2363:3:21"},"nodeType":"YulFunctionCall","src":"2363:9:21"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2354:5:21"}]},{"nodeType":"YulAssignment","src":"2389:43:21","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2406:2:21"},{"name":"prod0","nodeType":"YulIdentifier","src":"2410:5:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2402:3:21"},"nodeType":"YulFunctionCall","src":"2402:14:21"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2421:2:21"},{"name":"prod0","nodeType":"YulIdentifier","src":"2425:5:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2418:2:21"},"nodeType":"YulFunctionCall","src":"2418:13:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2398:3:21"},"nodeType":"YulFunctionCall","src":"2398:34:21"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2389:5:21"}]}]},"evmVersion":"london","externalReferences":[{"declaration":3852,"isOffset":false,"isSlot":false,"src":"2354:5:21","valueSize":1},{"declaration":3852,"isOffset":false,"isSlot":false,"src":"2410:5:21","valueSize":1},{"declaration":3852,"isOffset":false,"isSlot":false,"src":"2425:5:21","valueSize":1},{"declaration":3855,"isOffset":false,"isSlot":false,"src":"2389:5:21","valueSize":1},{"declaration":3842,"isOffset":false,"isSlot":false,"src":"2324:1:21","valueSize":1},{"declaration":3842,"isOffset":false,"isSlot":false,"src":"2367:1:21","valueSize":1},{"declaration":3844,"isOffset":false,"isSlot":false,"src":"2327:1:21","valueSize":1},{"declaration":3844,"isOffset":false,"isSlot":false,"src":"2370:1:21","valueSize":1}],"id":3857,"nodeType":"InlineAssembly","src":"2280:166:21"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3858,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3855,"src":"2527:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3859,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2536:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2527:10:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3866,"nodeType":"IfStatement","src":"2523:75:21","trueBody":{"id":3865,"nodeType":"Block","src":"2539:59:21","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3861,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3852,"src":"2564:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3862,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3846,"src":"2572:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2564:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3850,"id":3864,"nodeType":"Return","src":"2557:26:21"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3868,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3846,"src":"2708:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3869,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3855,"src":"2722:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2708:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3867,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2700:7:21","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":3871,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2700:28:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3872,"nodeType":"ExpressionStatement","src":"2700:28:21"},{"assignments":[3874],"declarations":[{"constant":false,"id":3874,"mutability":"mutable","name":"remainder","nameLocation":"2992:9:21","nodeType":"VariableDeclaration","scope":3959,"src":"2984:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3873,"name":"uint256","nodeType":"ElementaryTypeName","src":"2984:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3875,"nodeType":"VariableDeclarationStatement","src":"2984:17:21"},{"AST":{"nodeType":"YulBlock","src":"3024:291:21","statements":[{"nodeType":"YulAssignment","src":"3093:38:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3113:1:21"},{"name":"y","nodeType":"YulIdentifier","src":"3116:1:21"},{"name":"denominator","nodeType":"YulIdentifier","src":"3119:11:21"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3106:6:21"},"nodeType":"YulFunctionCall","src":"3106:25:21"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3093:9:21"}]},{"nodeType":"YulAssignment","src":"3213:41:21","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3226:5:21"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3236:9:21"},{"name":"prod0","nodeType":"YulIdentifier","src":"3247:5:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3233:2:21"},"nodeType":"YulFunctionCall","src":"3233:20:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3222:3:21"},"nodeType":"YulFunctionCall","src":"3222:32:21"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3213:5:21"}]},{"nodeType":"YulAssignment","src":"3271:30:21","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3284:5:21"},{"name":"remainder","nodeType":"YulIdentifier","src":"3291:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3280:3:21"},"nodeType":"YulFunctionCall","src":"3280:21:21"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3271:5:21"}]}]},"evmVersion":"london","externalReferences":[{"declaration":3846,"isOffset":false,"isSlot":false,"src":"3119:11:21","valueSize":1},{"declaration":3852,"isOffset":false,"isSlot":false,"src":"3247:5:21","valueSize":1},{"declaration":3852,"isOffset":false,"isSlot":false,"src":"3271:5:21","valueSize":1},{"declaration":3852,"isOffset":false,"isSlot":false,"src":"3284:5:21","valueSize":1},{"declaration":3855,"isOffset":false,"isSlot":false,"src":"3213:5:21","valueSize":1},{"declaration":3855,"isOffset":false,"isSlot":false,"src":"3226:5:21","valueSize":1},{"declaration":3874,"isOffset":false,"isSlot":false,"src":"3093:9:21","valueSize":1},{"declaration":3874,"isOffset":false,"isSlot":false,"src":"3236:9:21","valueSize":1},{"declaration":3874,"isOffset":false,"isSlot":false,"src":"3291:9:21","valueSize":1},{"declaration":3842,"isOffset":false,"isSlot":false,"src":"3113:1:21","valueSize":1},{"declaration":3844,"isOffset":false,"isSlot":false,"src":"3116:1:21","valueSize":1}],"id":3876,"nodeType":"InlineAssembly","src":"3015:300:21"},{"assignments":[3878],"declarations":[{"constant":false,"id":3878,"mutability":"mutable","name":"twos","nameLocation":"3630:4:21","nodeType":"VariableDeclaration","scope":3959,"src":"3622:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3877,"name":"uint256","nodeType":"ElementaryTypeName","src":"3622:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3886,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3879,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3846,"src":"3637:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3652:12:21","subExpression":{"id":3880,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3846,"src":"3653:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3882,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3667:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3652:16:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3884,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3651:18:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3637:32:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3622:47:21"},{"AST":{"nodeType":"YulBlock","src":"3692:362:21","statements":[{"nodeType":"YulAssignment","src":"3757:37:21","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"3776:11:21"},{"name":"twos","nodeType":"YulIdentifier","src":"3789:4:21"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3772:3:21"},"nodeType":"YulFunctionCall","src":"3772:22:21"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"3757:11:21"}]},{"nodeType":"YulAssignment","src":"3861:25:21","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3874:5:21"},{"name":"twos","nodeType":"YulIdentifier","src":"3881:4:21"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3870:3:21"},"nodeType":"YulFunctionCall","src":"3870:16:21"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3861:5:21"}]},{"nodeType":"YulAssignment","src":"4001:39:21","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4021:1:21","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4024:4:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4017:3:21"},"nodeType":"YulFunctionCall","src":"4017:12:21"},{"name":"twos","nodeType":"YulIdentifier","src":"4031:4:21"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4013:3:21"},"nodeType":"YulFunctionCall","src":"4013:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"4038:1:21","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4009:3:21"},"nodeType":"YulFunctionCall","src":"4009:31:21"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"4001:4:21"}]}]},"evmVersion":"london","externalReferences":[{"declaration":3846,"isOffset":false,"isSlot":false,"src":"3757:11:21","valueSize":1},{"declaration":3846,"isOffset":false,"isSlot":false,"src":"3776:11:21","valueSize":1},{"declaration":3852,"isOffset":false,"isSlot":false,"src":"3861:5:21","valueSize":1},{"declaration":3852,"isOffset":false,"isSlot":false,"src":"3874:5:21","valueSize":1},{"declaration":3878,"isOffset":false,"isSlot":false,"src":"3789:4:21","valueSize":1},{"declaration":3878,"isOffset":false,"isSlot":false,"src":"3881:4:21","valueSize":1},{"declaration":3878,"isOffset":false,"isSlot":false,"src":"4001:4:21","valueSize":1},{"declaration":3878,"isOffset":false,"isSlot":false,"src":"4024:4:21","valueSize":1},{"declaration":3878,"isOffset":false,"isSlot":false,"src":"4031:4:21","valueSize":1}],"id":3887,"nodeType":"InlineAssembly","src":"3683:371:21"},{"expression":{"id":3892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3888,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3852,"src":"4120:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3889,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3855,"src":"4129:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3890,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3878,"src":"4137:4:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4129:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4120:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3893,"nodeType":"ExpressionStatement","src":"4120:21:21"},{"assignments":[3895],"declarations":[{"constant":false,"id":3895,"mutability":"mutable","name":"inverse","nameLocation":"4467:7:21","nodeType":"VariableDeclaration","scope":3959,"src":"4459:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3894,"name":"uint256","nodeType":"ElementaryTypeName","src":"4459:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3902,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":3896,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4478:1:21","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3897,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3846,"src":"4482:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4478:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3899,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4477:17:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":3900,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4497:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4477:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4459:39:21"},{"expression":{"id":3909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3903,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3895,"src":"4715:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3904,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4726:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3905,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3846,"src":"4730:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3906,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3895,"src":"4744:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4730:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4726:25:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4715:36:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3910,"nodeType":"ExpressionStatement","src":"4715:36:21"},{"expression":{"id":3917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3911,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3895,"src":"4784:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3912,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4795:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3913,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3846,"src":"4799:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3914,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3895,"src":"4813:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4799:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4795:25:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4784:36:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3918,"nodeType":"ExpressionStatement","src":"4784:36:21"},{"expression":{"id":3925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3919,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3895,"src":"4854:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3920,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4865:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3921,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3846,"src":"4869:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3922,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3895,"src":"4883:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4869:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4865:25:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4854:36:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3926,"nodeType":"ExpressionStatement","src":"4854:36:21"},{"expression":{"id":3933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3927,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3895,"src":"4924:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3928,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4935:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3929,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3846,"src":"4939:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3930,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3895,"src":"4953:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4939:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4935:25:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4924:36:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3934,"nodeType":"ExpressionStatement","src":"4924:36:21"},{"expression":{"id":3941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3935,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3895,"src":"4994:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3936,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5005:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3939,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3937,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3846,"src":"5009:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3938,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3895,"src":"5023:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5009:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5005:25:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4994:36:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3942,"nodeType":"ExpressionStatement","src":"4994:36:21"},{"expression":{"id":3949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3943,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3895,"src":"5065:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3944,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5076:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3945,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3846,"src":"5080:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3946,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3895,"src":"5094:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5080:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5076:25:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:36:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3950,"nodeType":"ExpressionStatement","src":"5065:36:21"},{"expression":{"id":3955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3951,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3849,"src":"5535:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3952,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3852,"src":"5544:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3953,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3895,"src":"5552:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5544:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5535:24:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3956,"nodeType":"ExpressionStatement","src":"5535:24:21"},{"expression":{"id":3957,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3849,"src":"5580:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3850,"id":3958,"nodeType":"Return","src":"5573:13:21"}]}]},"documentation":{"id":3840,"nodeType":"StructuredDocumentation","src":"1368:305:21","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":3961,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1687:6:21","nodeType":"FunctionDefinition","parameters":{"id":3847,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3842,"mutability":"mutable","name":"x","nameLocation":"1711:1:21","nodeType":"VariableDeclaration","scope":3961,"src":"1703:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3841,"name":"uint256","nodeType":"ElementaryTypeName","src":"1703:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3844,"mutability":"mutable","name":"y","nameLocation":"1730:1:21","nodeType":"VariableDeclaration","scope":3961,"src":"1722:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3843,"name":"uint256","nodeType":"ElementaryTypeName","src":"1722:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3846,"mutability":"mutable","name":"denominator","nameLocation":"1749:11:21","nodeType":"VariableDeclaration","scope":3961,"src":"1741:19:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3845,"name":"uint256","nodeType":"ElementaryTypeName","src":"1741:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1693:73:21"},"returnParameters":{"id":3850,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3849,"mutability":"mutable","name":"result","nameLocation":"1798:6:21","nodeType":"VariableDeclaration","scope":3961,"src":"1790:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3848,"name":"uint256","nodeType":"ElementaryTypeName","src":"1790:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1789:16:21"},"scope":4613,"src":"1678:3925:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4004,"nodeType":"Block","src":"5883:189:21","statements":[{"assignments":[3977],"declarations":[{"constant":false,"id":3977,"mutability":"mutable","name":"result","nameLocation":"5901:6:21","nodeType":"VariableDeclaration","scope":4004,"src":"5893:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3976,"name":"uint256","nodeType":"ElementaryTypeName","src":"5893:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3983,"initialValue":{"arguments":[{"id":3979,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3964,"src":"5917:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3980,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3966,"src":"5920:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3981,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3968,"src":"5923:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3978,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[3961,4005],"referencedDeclaration":3961,"src":"5910:6:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3982,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5910:25:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5893:42:21"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3755","typeString":"enum MathUpgradeable.Rounding"},"id":3987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3984,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3971,"src":"5949:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3755","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3985,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3755,"src":"5961:8:21","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3755_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":3986,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5970:2:21","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3753,"src":"5961:11:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3755","typeString":"enum MathUpgradeable.Rounding"}},"src":"5949:23:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3989,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3964,"src":"5983:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3990,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3966,"src":"5986:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3991,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3968,"src":"5989:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3988,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"5976:6:21","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3992,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5976:25:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3993,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6004:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5976:29:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5949:56:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4001,"nodeType":"IfStatement","src":"5945:98:21","trueBody":{"id":4000,"nodeType":"Block","src":"6007:36:21","statements":[{"expression":{"id":3998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3996,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3977,"src":"6021:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3997,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6031:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6021:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3999,"nodeType":"ExpressionStatement","src":"6021:11:21"}]}},{"expression":{"id":4002,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3977,"src":"6059:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3975,"id":4003,"nodeType":"Return","src":"6052:13:21"}]},"documentation":{"id":3962,"nodeType":"StructuredDocumentation","src":"5609:121:21","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":4005,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"5744:6:21","nodeType":"FunctionDefinition","parameters":{"id":3972,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3964,"mutability":"mutable","name":"x","nameLocation":"5768:1:21","nodeType":"VariableDeclaration","scope":4005,"src":"5760:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3963,"name":"uint256","nodeType":"ElementaryTypeName","src":"5760:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3966,"mutability":"mutable","name":"y","nameLocation":"5787:1:21","nodeType":"VariableDeclaration","scope":4005,"src":"5779:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3965,"name":"uint256","nodeType":"ElementaryTypeName","src":"5779:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3968,"mutability":"mutable","name":"denominator","nameLocation":"5806:11:21","nodeType":"VariableDeclaration","scope":4005,"src":"5798:19:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3967,"name":"uint256","nodeType":"ElementaryTypeName","src":"5798:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3971,"mutability":"mutable","name":"rounding","nameLocation":"5836:8:21","nodeType":"VariableDeclaration","scope":4005,"src":"5827:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3755","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":3970,"nodeType":"UserDefinedTypeName","pathNode":{"id":3969,"name":"Rounding","nameLocations":["5827:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":3755,"src":"5827:8:21"},"referencedDeclaration":3755,"src":"5827:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3755","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"5750:100:21"},"returnParameters":{"id":3975,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3974,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4005,"src":"5874:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3973,"name":"uint256","nodeType":"ElementaryTypeName","src":"5874:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5873:9:21"},"scope":4613,"src":"5735:337:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4116,"nodeType":"Block","src":"6348:1585:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4013,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4008,"src":"6362:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4014,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6367:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6362:6:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4019,"nodeType":"IfStatement","src":"6358:45:21","trueBody":{"id":4018,"nodeType":"Block","src":"6370:33:21","statements":[{"expression":{"hexValue":"30","id":4016,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6391:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":4012,"id":4017,"nodeType":"Return","src":"6384:8:21"}]}},{"assignments":[4021],"declarations":[{"constant":false,"id":4021,"mutability":"mutable","name":"result","nameLocation":"7090:6:21","nodeType":"VariableDeclaration","scope":4116,"src":"7082:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4020,"name":"uint256","nodeType":"ElementaryTypeName","src":"7082:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4030,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4022,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7099:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4024,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4008,"src":"7110:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4023,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[4285,4321],"referencedDeclaration":4285,"src":"7105:4:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4025,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7105:7:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4026,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7116:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7105:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4028,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7104:14:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7099:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7082:36:21"},{"id":4115,"nodeType":"UncheckedBlock","src":"7519:408:21","statements":[{"expression":{"id":4040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4031,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4021,"src":"7543:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4032,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4021,"src":"7553:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4033,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4008,"src":"7562:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4034,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4021,"src":"7566:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7562:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7553:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4037,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7552:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4038,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7577:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7552:26:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7543:35:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4041,"nodeType":"ExpressionStatement","src":"7543:35:21"},{"expression":{"id":4051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4042,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4021,"src":"7592:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4043,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4021,"src":"7602:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4044,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4008,"src":"7611:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4045,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4021,"src":"7615:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7611:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7602:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4048,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7601:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4049,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7626:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7601:26:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7592:35:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4052,"nodeType":"ExpressionStatement","src":"7592:35:21"},{"expression":{"id":4062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4053,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4021,"src":"7641:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4054,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4021,"src":"7651:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4055,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4008,"src":"7660:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4056,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4021,"src":"7664:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7660:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7651:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4059,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7650:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4060,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7675:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7650:26:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7641:35:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4063,"nodeType":"ExpressionStatement","src":"7641:35:21"},{"expression":{"id":4073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4064,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4021,"src":"7690:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4065,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4021,"src":"7700:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4066,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4008,"src":"7709:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4067,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4021,"src":"7713:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7709:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7700:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4070,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7699:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4071,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7724:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7699:26:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7690:35:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4074,"nodeType":"ExpressionStatement","src":"7690:35:21"},{"expression":{"id":4084,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4075,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4021,"src":"7739:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4076,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4021,"src":"7749:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4077,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4008,"src":"7758:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4078,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4021,"src":"7762:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7758:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7749:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4081,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7748:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4082,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7773:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7748:26:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7739:35:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4085,"nodeType":"ExpressionStatement","src":"7739:35:21"},{"expression":{"id":4095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4086,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4021,"src":"7788:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4087,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4021,"src":"7798:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4088,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4008,"src":"7807:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4089,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4021,"src":"7811:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7807:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7798:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4092,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7797:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4093,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7822:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7797:26:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7788:35:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4096,"nodeType":"ExpressionStatement","src":"7788:35:21"},{"expression":{"id":4106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4097,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4021,"src":"7837:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4098,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4021,"src":"7847:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4099,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4008,"src":"7856:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4100,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4021,"src":"7860:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7856:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7847:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4103,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7846:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4104,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7871:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7846:26:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7837:35:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4107,"nodeType":"ExpressionStatement","src":"7837:35:21"},{"expression":{"arguments":[{"id":4109,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4021,"src":"7897:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4110,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4008,"src":"7905:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4111,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4021,"src":"7909:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7905:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4108,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3791,"src":"7893:3:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4113,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7893:23:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4012,"id":4114,"nodeType":"Return","src":"7886:30:21"}]}]},"documentation":{"id":4006,"nodeType":"StructuredDocumentation","src":"6078:208:21","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":4117,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6300:4:21","nodeType":"FunctionDefinition","parameters":{"id":4009,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4008,"mutability":"mutable","name":"a","nameLocation":"6313:1:21","nodeType":"VariableDeclaration","scope":4117,"src":"6305:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4007,"name":"uint256","nodeType":"ElementaryTypeName","src":"6305:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6304:11:21"},"returnParameters":{"id":4012,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4011,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4117,"src":"6339:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4010,"name":"uint256","nodeType":"ElementaryTypeName","src":"6339:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6338:9:21"},"scope":4613,"src":"6291:1642:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4152,"nodeType":"Block","src":"8109:161:21","statements":[{"id":4151,"nodeType":"UncheckedBlock","src":"8119:145:21","statements":[{"assignments":[4129],"declarations":[{"constant":false,"id":4129,"mutability":"mutable","name":"result","nameLocation":"8151:6:21","nodeType":"VariableDeclaration","scope":4151,"src":"8143:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4128,"name":"uint256","nodeType":"ElementaryTypeName","src":"8143:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4133,"initialValue":{"arguments":[{"id":4131,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4120,"src":"8165:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4130,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[4117,4153],"referencedDeclaration":4117,"src":"8160:4:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4132,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8160:7:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8143:24:21"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4134,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4129,"src":"8188:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3755","typeString":"enum MathUpgradeable.Rounding"},"id":4138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4135,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4123,"src":"8198:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3755","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4136,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3755,"src":"8210:8:21","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3755_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":4137,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8219:2:21","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3753,"src":"8210:11:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3755","typeString":"enum MathUpgradeable.Rounding"}},"src":"8198:23:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4139,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4129,"src":"8225:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4140,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4129,"src":"8234:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8225:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4142,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4120,"src":"8243:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8225:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8198:46:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4146,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8251:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8198:54:21","trueExpression":{"hexValue":"31","id":4145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8247:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4148,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8197:56:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8188:65:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4127,"id":4150,"nodeType":"Return","src":"8181:72:21"}]}]},"documentation":{"id":4118,"nodeType":"StructuredDocumentation","src":"7939:89:21","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":4153,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8042:4:21","nodeType":"FunctionDefinition","parameters":{"id":4124,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4120,"mutability":"mutable","name":"a","nameLocation":"8055:1:21","nodeType":"VariableDeclaration","scope":4153,"src":"8047:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4119,"name":"uint256","nodeType":"ElementaryTypeName","src":"8047:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4123,"mutability":"mutable","name":"rounding","nameLocation":"8067:8:21","nodeType":"VariableDeclaration","scope":4153,"src":"8058:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3755","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":4122,"nodeType":"UserDefinedTypeName","pathNode":{"id":4121,"name":"Rounding","nameLocations":["8058:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":3755,"src":"8058:8:21"},"referencedDeclaration":3755,"src":"8058:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3755","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"8046:30:21"},"returnParameters":{"id":4127,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4126,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4153,"src":"8100:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4125,"name":"uint256","nodeType":"ElementaryTypeName","src":"8100:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8099:9:21"},"scope":4613,"src":"8033:237:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4284,"nodeType":"Block","src":"8455:922:21","statements":[{"assignments":[4162],"declarations":[{"constant":false,"id":4162,"mutability":"mutable","name":"result","nameLocation":"8473:6:21","nodeType":"VariableDeclaration","scope":4284,"src":"8465:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4161,"name":"uint256","nodeType":"ElementaryTypeName","src":"8465:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4164,"initialValue":{"hexValue":"30","id":4163,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8482:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8465:18:21"},{"id":4281,"nodeType":"UncheckedBlock","src":"8493:855:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4165,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4156,"src":"8521:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":4166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8530:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8521:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8536:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8521:16:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4179,"nodeType":"IfStatement","src":"8517:99:21","trueBody":{"id":4178,"nodeType":"Block","src":"8539:77:21","statements":[{"expression":{"id":4172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4170,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4156,"src":"8557:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":4171,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8567:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8557:13:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4173,"nodeType":"ExpressionStatement","src":"8557:13:21"},{"expression":{"id":4176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4174,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4162,"src":"8588:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":4175,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8598:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8588:13:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4177,"nodeType":"ExpressionStatement","src":"8588:13:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4180,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4156,"src":"8633:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":4181,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8642:2:21","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8633:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4183,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8647:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8633:15:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4194,"nodeType":"IfStatement","src":"8629:96:21","trueBody":{"id":4193,"nodeType":"Block","src":"8650:75:21","statements":[{"expression":{"id":4187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4185,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4156,"src":"8668:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":4186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8678:2:21","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8668:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4188,"nodeType":"ExpressionStatement","src":"8668:12:21"},{"expression":{"id":4191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4189,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4162,"src":"8698:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":4190,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8708:2:21","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8698:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4192,"nodeType":"ExpressionStatement","src":"8698:12:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4195,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4156,"src":"8742:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":4196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8751:2:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8742:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8756:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8742:15:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4209,"nodeType":"IfStatement","src":"8738:96:21","trueBody":{"id":4208,"nodeType":"Block","src":"8759:75:21","statements":[{"expression":{"id":4202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4200,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4156,"src":"8777:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":4201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8787:2:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8777:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4203,"nodeType":"ExpressionStatement","src":"8777:12:21"},{"expression":{"id":4206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4204,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4162,"src":"8807:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":4205,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8817:2:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8807:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4207,"nodeType":"ExpressionStatement","src":"8807:12:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4210,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4156,"src":"8851:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":4211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8860:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8851:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4213,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8865:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8851:15:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4224,"nodeType":"IfStatement","src":"8847:96:21","trueBody":{"id":4223,"nodeType":"Block","src":"8868:75:21","statements":[{"expression":{"id":4217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4215,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4156,"src":"8886:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":4216,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8896:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8886:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4218,"nodeType":"ExpressionStatement","src":"8886:12:21"},{"expression":{"id":4221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4219,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4162,"src":"8916:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":4220,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8926:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8916:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4222,"nodeType":"ExpressionStatement","src":"8916:12:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4225,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4156,"src":"8960:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":4226,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8969:1:21","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8960:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8973:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8960:14:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4239,"nodeType":"IfStatement","src":"8956:93:21","trueBody":{"id":4238,"nodeType":"Block","src":"8976:73:21","statements":[{"expression":{"id":4232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4230,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4156,"src":"8994:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":4231,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9004:1:21","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8994:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4233,"nodeType":"ExpressionStatement","src":"8994:11:21"},{"expression":{"id":4236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4234,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4162,"src":"9023:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":4235,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9033:1:21","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9023:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4237,"nodeType":"ExpressionStatement","src":"9023:11:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4240,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4156,"src":"9066:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":4241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9075:1:21","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9066:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4243,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9079:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9066:14:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4254,"nodeType":"IfStatement","src":"9062:93:21","trueBody":{"id":4253,"nodeType":"Block","src":"9082:73:21","statements":[{"expression":{"id":4247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4245,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4156,"src":"9100:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":4246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9110:1:21","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9100:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4248,"nodeType":"ExpressionStatement","src":"9100:11:21"},{"expression":{"id":4251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4249,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4162,"src":"9129:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":4250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9139:1:21","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9129:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4252,"nodeType":"ExpressionStatement","src":"9129:11:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4255,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4156,"src":"9172:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":4256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9181:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9172:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4258,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9185:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9172:14:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4269,"nodeType":"IfStatement","src":"9168:93:21","trueBody":{"id":4268,"nodeType":"Block","src":"9188:73:21","statements":[{"expression":{"id":4262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4260,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4156,"src":"9206:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":4261,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9216:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9206:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4263,"nodeType":"ExpressionStatement","src":"9206:11:21"},{"expression":{"id":4266,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4264,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4162,"src":"9235:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":4265,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9245:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9235:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4267,"nodeType":"ExpressionStatement","src":"9235:11:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4270,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4156,"src":"9278:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4271,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9287:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9278:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9291:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9278:14:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4280,"nodeType":"IfStatement","src":"9274:64:21","trueBody":{"id":4279,"nodeType":"Block","src":"9294:44:21","statements":[{"expression":{"id":4277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4275,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4162,"src":"9312:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9322:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9312:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4278,"nodeType":"ExpressionStatement","src":"9312:11:21"}]}}]},{"expression":{"id":4282,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4162,"src":"9364:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4160,"id":4283,"nodeType":"Return","src":"9357:13:21"}]},"documentation":{"id":4154,"nodeType":"StructuredDocumentation","src":"8276:113:21","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":4285,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8403:4:21","nodeType":"FunctionDefinition","parameters":{"id":4157,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4156,"mutability":"mutable","name":"value","nameLocation":"8416:5:21","nodeType":"VariableDeclaration","scope":4285,"src":"8408:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4155,"name":"uint256","nodeType":"ElementaryTypeName","src":"8408:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8407:15:21"},"returnParameters":{"id":4160,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4159,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4285,"src":"8446:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4158,"name":"uint256","nodeType":"ElementaryTypeName","src":"8446:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8445:9:21"},"scope":4613,"src":"8394:983:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4320,"nodeType":"Block","src":"9610:165:21","statements":[{"id":4319,"nodeType":"UncheckedBlock","src":"9620:149:21","statements":[{"assignments":[4297],"declarations":[{"constant":false,"id":4297,"mutability":"mutable","name":"result","nameLocation":"9652:6:21","nodeType":"VariableDeclaration","scope":4319,"src":"9644:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4296,"name":"uint256","nodeType":"ElementaryTypeName","src":"9644:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4301,"initialValue":{"arguments":[{"id":4299,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4288,"src":"9666:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4298,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[4285,4321],"referencedDeclaration":4285,"src":"9661:4:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4300,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9661:11:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9644:28:21"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4302,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4297,"src":"9693:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3755","typeString":"enum MathUpgradeable.Rounding"},"id":4306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4303,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4291,"src":"9703:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3755","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4304,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3755,"src":"9715:8:21","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3755_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":4305,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9724:2:21","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3753,"src":"9715:11:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3755","typeString":"enum MathUpgradeable.Rounding"}},"src":"9703:23:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9730:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":4308,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4297,"src":"9735:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9730:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4310,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4288,"src":"9744:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9730:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9703:46:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9756:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9703:54:21","trueExpression":{"hexValue":"31","id":4313,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9752:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4316,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9702:56:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9693:65:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4295,"id":4318,"nodeType":"Return","src":"9686:72:21"}]}]},"documentation":{"id":4286,"nodeType":"StructuredDocumentation","src":"9383:142:21","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4321,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9539:4:21","nodeType":"FunctionDefinition","parameters":{"id":4292,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4288,"mutability":"mutable","name":"value","nameLocation":"9552:5:21","nodeType":"VariableDeclaration","scope":4321,"src":"9544:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4287,"name":"uint256","nodeType":"ElementaryTypeName","src":"9544:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4291,"mutability":"mutable","name":"rounding","nameLocation":"9568:8:21","nodeType":"VariableDeclaration","scope":4321,"src":"9559:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3755","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":4290,"nodeType":"UserDefinedTypeName","pathNode":{"id":4289,"name":"Rounding","nameLocations":["9559:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":3755,"src":"9559:8:21"},"referencedDeclaration":3755,"src":"9559:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3755","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"9543:34:21"},"returnParameters":{"id":4295,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4294,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4321,"src":"9601:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4293,"name":"uint256","nodeType":"ElementaryTypeName","src":"9601:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9600:9:21"},"scope":4613,"src":"9530:245:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4449,"nodeType":"Block","src":"9962:828:21","statements":[{"assignments":[4330],"declarations":[{"constant":false,"id":4330,"mutability":"mutable","name":"result","nameLocation":"9980:6:21","nodeType":"VariableDeclaration","scope":4449,"src":"9972:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4329,"name":"uint256","nodeType":"ElementaryTypeName","src":"9972:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4332,"initialValue":{"hexValue":"30","id":4331,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9989:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9972:18:21"},{"id":4446,"nodeType":"UncheckedBlock","src":"10000:761:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4333,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4324,"src":"10028:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":4336,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4334,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10037:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":4335,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10041:2:21","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10037:6:21","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10028:15:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4349,"nodeType":"IfStatement","src":"10024:99:21","trueBody":{"id":4348,"nodeType":"Block","src":"10045:78:21","statements":[{"expression":{"id":4342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4338,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4324,"src":"10063:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":4341,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4339,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10072:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":4340,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10076:2:21","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10072:6:21","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10063:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4343,"nodeType":"ExpressionStatement","src":"10063:15:21"},{"expression":{"id":4346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4344,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4330,"src":"10096:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":4345,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10106:2:21","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10096:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4347,"nodeType":"ExpressionStatement","src":"10096:12:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4350,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4324,"src":"10140:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":4353,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4351,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10149:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":4352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10153:2:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10149:6:21","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10140:15:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4366,"nodeType":"IfStatement","src":"10136:99:21","trueBody":{"id":4365,"nodeType":"Block","src":"10157:78:21","statements":[{"expression":{"id":4359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4355,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4324,"src":"10175:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":4358,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4356,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10184:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":4357,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10188:2:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10184:6:21","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10175:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4360,"nodeType":"ExpressionStatement","src":"10175:15:21"},{"expression":{"id":4363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4361,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4330,"src":"10208:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":4362,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10218:2:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10208:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4364,"nodeType":"ExpressionStatement","src":"10208:12:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4367,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4324,"src":"10252:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":4370,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4368,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10261:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":4369,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10265:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10261:6:21","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10252:15:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4383,"nodeType":"IfStatement","src":"10248:99:21","trueBody":{"id":4382,"nodeType":"Block","src":"10269:78:21","statements":[{"expression":{"id":4376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4372,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4324,"src":"10287:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":4375,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4373,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10296:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":4374,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10300:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10296:6:21","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10287:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4377,"nodeType":"ExpressionStatement","src":"10287:15:21"},{"expression":{"id":4380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4378,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4330,"src":"10320:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":4379,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10330:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10320:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4381,"nodeType":"ExpressionStatement","src":"10320:12:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4384,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4324,"src":"10364:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":4387,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10373:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":4386,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10377:1:21","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10373:5:21","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10364:14:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4400,"nodeType":"IfStatement","src":"10360:96:21","trueBody":{"id":4399,"nodeType":"Block","src":"10380:76:21","statements":[{"expression":{"id":4393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4389,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4324,"src":"10398:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":4392,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4390,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10407:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":4391,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10411:1:21","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10407:5:21","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10398:14:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4394,"nodeType":"ExpressionStatement","src":"10398:14:21"},{"expression":{"id":4397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4395,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4330,"src":"10430:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":4396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10440:1:21","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10430:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4398,"nodeType":"ExpressionStatement","src":"10430:11:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4401,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4324,"src":"10473:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":4404,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4402,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10482:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":4403,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10486:1:21","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10482:5:21","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10473:14:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4417,"nodeType":"IfStatement","src":"10469:96:21","trueBody":{"id":4416,"nodeType":"Block","src":"10489:76:21","statements":[{"expression":{"id":4410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4406,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4324,"src":"10507:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":4409,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10516:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":4408,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10520:1:21","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10516:5:21","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10507:14:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4411,"nodeType":"ExpressionStatement","src":"10507:14:21"},{"expression":{"id":4414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4412,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4330,"src":"10539:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":4413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10549:1:21","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10539:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4415,"nodeType":"ExpressionStatement","src":"10539:11:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4418,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4324,"src":"10582:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":4421,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10591:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":4420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10595:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10591:5:21","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10582:14:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4434,"nodeType":"IfStatement","src":"10578:96:21","trueBody":{"id":4433,"nodeType":"Block","src":"10598:76:21","statements":[{"expression":{"id":4427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4423,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4324,"src":"10616:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":4426,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4424,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10625:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":4425,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10629:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10625:5:21","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10616:14:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4428,"nodeType":"ExpressionStatement","src":"10616:14:21"},{"expression":{"id":4431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4429,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4330,"src":"10648:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":4430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10658:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10648:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4432,"nodeType":"ExpressionStatement","src":"10648:11:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4435,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4324,"src":"10691:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":4438,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4436,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10700:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":4437,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10704:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10700:5:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10691:14:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4445,"nodeType":"IfStatement","src":"10687:64:21","trueBody":{"id":4444,"nodeType":"Block","src":"10707:44:21","statements":[{"expression":{"id":4442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4440,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4330,"src":"10725:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4441,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10735:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10725:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4443,"nodeType":"ExpressionStatement","src":"10725:11:21"}]}}]},{"expression":{"id":4447,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4330,"src":"10777:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4328,"id":4448,"nodeType":"Return","src":"10770:13:21"}]},"documentation":{"id":4322,"nodeType":"StructuredDocumentation","src":"9781:114:21","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":4450,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"9909:5:21","nodeType":"FunctionDefinition","parameters":{"id":4325,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4324,"mutability":"mutable","name":"value","nameLocation":"9923:5:21","nodeType":"VariableDeclaration","scope":4450,"src":"9915:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4323,"name":"uint256","nodeType":"ElementaryTypeName","src":"9915:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9914:15:21"},"returnParameters":{"id":4328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4327,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4450,"src":"9953:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4326,"name":"uint256","nodeType":"ElementaryTypeName","src":"9953:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9952:9:21"},"scope":4613,"src":"9900:890:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4485,"nodeType":"Block","src":"11025:165:21","statements":[{"id":4484,"nodeType":"UncheckedBlock","src":"11035:149:21","statements":[{"assignments":[4462],"declarations":[{"constant":false,"id":4462,"mutability":"mutable","name":"result","nameLocation":"11067:6:21","nodeType":"VariableDeclaration","scope":4484,"src":"11059:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4461,"name":"uint256","nodeType":"ElementaryTypeName","src":"11059:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4466,"initialValue":{"arguments":[{"id":4464,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4453,"src":"11082:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4463,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[4450,4486],"referencedDeclaration":4450,"src":"11076:5:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4465,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11076:12:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11059:29:21"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4467,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4462,"src":"11109:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3755","typeString":"enum MathUpgradeable.Rounding"},"id":4471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4468,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4456,"src":"11119:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3755","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4469,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3755,"src":"11131:8:21","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3755_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":4470,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11140:2:21","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3753,"src":"11131:11:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3755","typeString":"enum MathUpgradeable.Rounding"}},"src":"11119:23:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11146:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":4473,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4462,"src":"11150:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11146:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4475,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4453,"src":"11159:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11146:18:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11119:45:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4479,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11171:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11119:53:21","trueExpression":{"hexValue":"31","id":4478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11167:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4481,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11118:55:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11109:64:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4460,"id":4483,"nodeType":"Return","src":"11102:71:21"}]}]},"documentation":{"id":4451,"nodeType":"StructuredDocumentation","src":"10796:143:21","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4486,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10953:5:21","nodeType":"FunctionDefinition","parameters":{"id":4457,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4453,"mutability":"mutable","name":"value","nameLocation":"10967:5:21","nodeType":"VariableDeclaration","scope":4486,"src":"10959:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4452,"name":"uint256","nodeType":"ElementaryTypeName","src":"10959:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4456,"mutability":"mutable","name":"rounding","nameLocation":"10983:8:21","nodeType":"VariableDeclaration","scope":4486,"src":"10974:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3755","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":4455,"nodeType":"UserDefinedTypeName","pathNode":{"id":4454,"name":"Rounding","nameLocations":["10974:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":3755,"src":"10974:8:21"},"referencedDeclaration":3755,"src":"10974:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3755","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"10958:34:21"},"returnParameters":{"id":4460,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4459,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4486,"src":"11016:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4458,"name":"uint256","nodeType":"ElementaryTypeName","src":"11016:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11015:9:21"},"scope":4613,"src":"10944:246:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4572,"nodeType":"Block","src":"11504:600:21","statements":[{"assignments":[4495],"declarations":[{"constant":false,"id":4495,"mutability":"mutable","name":"result","nameLocation":"11522:6:21","nodeType":"VariableDeclaration","scope":4572,"src":"11514:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4494,"name":"uint256","nodeType":"ElementaryTypeName","src":"11514:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4497,"initialValue":{"hexValue":"30","id":4496,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11531:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11514:18:21"},{"id":4569,"nodeType":"UncheckedBlock","src":"11542:533:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4498,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4489,"src":"11570:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":4499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11579:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11570:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11585:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11570:16:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4512,"nodeType":"IfStatement","src":"11566:98:21","trueBody":{"id":4511,"nodeType":"Block","src":"11588:76:21","statements":[{"expression":{"id":4505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4503,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4489,"src":"11606:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":4504,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11616:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11606:13:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4506,"nodeType":"ExpressionStatement","src":"11606:13:21"},{"expression":{"id":4509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4507,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4495,"src":"11637:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":4508,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11647:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11637:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4510,"nodeType":"ExpressionStatement","src":"11637:12:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4513,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4489,"src":"11681:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":4514,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11690:2:21","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11681:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4516,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11695:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11681:15:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4527,"nodeType":"IfStatement","src":"11677:95:21","trueBody":{"id":4526,"nodeType":"Block","src":"11698:74:21","statements":[{"expression":{"id":4520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4518,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4489,"src":"11716:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":4519,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11726:2:21","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11716:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4521,"nodeType":"ExpressionStatement","src":"11716:12:21"},{"expression":{"id":4524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4522,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4495,"src":"11746:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":4523,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11756:1:21","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11746:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4525,"nodeType":"ExpressionStatement","src":"11746:11:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4528,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4489,"src":"11789:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":4529,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11798:2:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11789:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4531,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11803:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11789:15:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4542,"nodeType":"IfStatement","src":"11785:95:21","trueBody":{"id":4541,"nodeType":"Block","src":"11806:74:21","statements":[{"expression":{"id":4535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4533,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4489,"src":"11824:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":4534,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11834:2:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11824:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4536,"nodeType":"ExpressionStatement","src":"11824:12:21"},{"expression":{"id":4539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4537,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4495,"src":"11854:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":4538,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11864:1:21","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11854:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4540,"nodeType":"ExpressionStatement","src":"11854:11:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4543,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4489,"src":"11897:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":4544,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11906:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11897:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11911:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11897:15:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4557,"nodeType":"IfStatement","src":"11893:95:21","trueBody":{"id":4556,"nodeType":"Block","src":"11914:74:21","statements":[{"expression":{"id":4550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4548,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4489,"src":"11932:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":4549,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11942:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11932:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4551,"nodeType":"ExpressionStatement","src":"11932:12:21"},{"expression":{"id":4554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4552,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4495,"src":"11962:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":4553,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11972:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11962:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4555,"nodeType":"ExpressionStatement","src":"11962:11:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4560,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4558,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4489,"src":"12005:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":4559,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12014:1:21","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12005:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4561,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12018:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12005:14:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4568,"nodeType":"IfStatement","src":"12001:64:21","trueBody":{"id":4567,"nodeType":"Block","src":"12021:44:21","statements":[{"expression":{"id":4565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4563,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4495,"src":"12039:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4564,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12049:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12039:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4566,"nodeType":"ExpressionStatement","src":"12039:11:21"}]}}]},{"expression":{"id":4570,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4495,"src":"12091:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4493,"id":4571,"nodeType":"Return","src":"12084:13:21"}]},"documentation":{"id":4487,"nodeType":"StructuredDocumentation","src":"11196:240:21","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":4573,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11450:6:21","nodeType":"FunctionDefinition","parameters":{"id":4490,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4489,"mutability":"mutable","name":"value","nameLocation":"11465:5:21","nodeType":"VariableDeclaration","scope":4573,"src":"11457:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4488,"name":"uint256","nodeType":"ElementaryTypeName","src":"11457:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11456:15:21"},"returnParameters":{"id":4493,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4492,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4573,"src":"11495:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4491,"name":"uint256","nodeType":"ElementaryTypeName","src":"11495:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11494:9:21"},"scope":4613,"src":"11441:663:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4611,"nodeType":"Block","src":"12340:173:21","statements":[{"id":4610,"nodeType":"UncheckedBlock","src":"12350:157:21","statements":[{"assignments":[4585],"declarations":[{"constant":false,"id":4585,"mutability":"mutable","name":"result","nameLocation":"12382:6:21","nodeType":"VariableDeclaration","scope":4610,"src":"12374:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4584,"name":"uint256","nodeType":"ElementaryTypeName","src":"12374:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4589,"initialValue":{"arguments":[{"id":4587,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4576,"src":"12398:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4586,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[4573,4612],"referencedDeclaration":4573,"src":"12391:6:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4588,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12391:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12374:30:21"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4590,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4585,"src":"12425:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3755","typeString":"enum MathUpgradeable.Rounding"},"id":4594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4591,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4579,"src":"12435:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3755","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4592,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3755,"src":"12447:8:21","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3755_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":4593,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12456:2:21","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3753,"src":"12447:11:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3755","typeString":"enum MathUpgradeable.Rounding"}},"src":"12435:23:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4595,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12462:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4596,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4585,"src":"12468:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"38","id":4597,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12477:1:21","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12468:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4599,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12467:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12462:17:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4601,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4576,"src":"12482:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12462:25:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12435:52:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4605,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12494:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12435:60:21","trueExpression":{"hexValue":"31","id":4604,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12490:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4607,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12434:62:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12425:71:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4583,"id":4609,"nodeType":"Return","src":"12418:78:21"}]}]},"documentation":{"id":4574,"nodeType":"StructuredDocumentation","src":"12110:143:21","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4612,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12267:6:21","nodeType":"FunctionDefinition","parameters":{"id":4580,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4576,"mutability":"mutable","name":"value","nameLocation":"12282:5:21","nodeType":"VariableDeclaration","scope":4612,"src":"12274:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4575,"name":"uint256","nodeType":"ElementaryTypeName","src":"12274:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4579,"mutability":"mutable","name":"rounding","nameLocation":"12298:8:21","nodeType":"VariableDeclaration","scope":4612,"src":"12289:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3755","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":4578,"nodeType":"UserDefinedTypeName","pathNode":{"id":4577,"name":"Rounding","nameLocations":["12289:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":3755,"src":"12289:8:21"},"referencedDeclaration":3755,"src":"12289:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3755","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"12273:34:21"},"returnParameters":{"id":4583,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4582,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4612,"src":"12331:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4581,"name":"uint256","nodeType":"ElementaryTypeName","src":"12331:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12330:9:21"},"scope":4613,"src":"12258:255:21","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4614,"src":"202:12313:21","usedErrors":[]}],"src":"103:12413:21"},"id":21},"src/ERC1967UUPSProxy.sol":{"ast":{"absolutePath":"src/ERC1967UUPSProxy.sol","exportedSymbols":{"ERC1967UUPSProxy":[4827]},"id":4828,"license":"CC0-1.0","nodeType":"SourceUnit","nodes":[{"id":4615,"literals":["solidity","^","0.8",".17"],"nodeType":"PragmaDirective","src":"36:24:22"},{"abstract":false,"baseContracts":[],"canonicalName":"ERC1967UUPSProxy","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":4827,"linearizedBaseContracts":[4827],"name":"ERC1967UUPSProxy","nameLocation":"10319:16:22","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":4618,"mutability":"constant","name":"_INITCODE","nameLocation":"10363:9:22","nodeType":"VariableDeclaration","scope":4827,"src":"10340:338:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4616,"name":"bytes","nodeType":"ElementaryTypeName","src":"10340:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":{"hexValue":"603960156a3d3d3d3d363d3d37363d7f3d7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60146079600c393d518082553d3d608d80380380913d393d845af46053578280fd5b3d605f573b6061575080fd5b505b6d545af43d3d93803e603757fd5bf3602e5260205252f3","id":4617,"isConstant":false,"isLValue":false,"isPure":true,"kind":"hexString","lValueRequested":false,"nodeType":"Literal","src":"10379:299:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_314e111ba8740841633c23bfc8862a21d64a9948acf73cc948a6a24129389bbe","typeString":"literal_string hex\"603960156a3d3d3d3d363d3d37363d7f3d7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60146079600c393d518082553d3d608d80380380913d393d845af46053578280fd5b3d605f573b6061575080fd5b505b6d545af43d3d93803e603757fd5bf3602e5260205252f3\""}},"visibility":"private"},{"body":{"id":4634,"nodeType":"Block","src":"10810:74:22","statements":[{"expression":{"arguments":[{"id":4629,"name":"_INITCODE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4618,"src":"10840:9:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4630,"name":"implementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4620,"src":"10851:14:22","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":4631,"name":"initializer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4622,"src":"10867:11:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":4627,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"10823:3:22","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4628,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10827:12:22","memberName":"encodePacked","nodeType":"MemberAccess","src":"10823:16:22","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4632,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10823:56:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4626,"id":4633,"nodeType":"Return","src":"10816:63:22"}]},"id":4635,"implemented":true,"kind":"function","modifiers":[],"name":"_packArgs","nameLocation":"10692:9:22","nodeType":"FunctionDefinition","parameters":{"id":4623,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4620,"mutability":"mutable","name":"implementation","nameLocation":"10718:14:22","nodeType":"VariableDeclaration","scope":4635,"src":"10702:30:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":4619,"name":"address","nodeType":"ElementaryTypeName","src":"10702:15:22","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":4622,"mutability":"mutable","name":"initializer","nameLocation":"10747:11:22","nodeType":"VariableDeclaration","scope":4635,"src":"10734:24:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4621,"name":"bytes","nodeType":"ElementaryTypeName","src":"10734:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"10701:58:22"},"returnParameters":{"id":4626,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4625,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4635,"src":"10794:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4624,"name":"bytes","nodeType":"ElementaryTypeName","src":"10794:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"10793:14:22"},"scope":4827,"src":"10683:201:22","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":4653,"nodeType":"Block","src":"10991:65:22","statements":[{"expression":{"arguments":[{"arguments":[{"id":4647,"name":"implementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4637,"src":"11019:14:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4646,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11011:8:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":4645,"name":"address","nodeType":"ElementaryTypeName","src":"11011:8:22","stateMutability":"payable","typeDescriptions":{}}},"id":4648,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11011:23:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":4649,"name":"initializer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4639,"src":"11036:11:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":4650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11049:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4644,"name":"create","nodeType":"Identifier","overloadedDeclarations":[4654,4695],"referencedDeclaration":4695,"src":"11004:6:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_payable_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_address_$","typeString":"function (address payable,bytes memory,uint256) returns (address)"}},"id":4651,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11004:47:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":4643,"id":4652,"nodeType":"Return","src":"10997:54:22"}]},"id":4654,"implemented":true,"kind":"function","modifiers":[],"name":"create","nameLocation":"10897:6:22","nodeType":"FunctionDefinition","parameters":{"id":4640,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4637,"mutability":"mutable","name":"implementation","nameLocation":"10912:14:22","nodeType":"VariableDeclaration","scope":4654,"src":"10904:22:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4636,"name":"address","nodeType":"ElementaryTypeName","src":"10904:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4639,"mutability":"mutable","name":"initializer","nameLocation":"10941:11:22","nodeType":"VariableDeclaration","scope":4654,"src":"10928:24:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4638,"name":"bytes","nodeType":"ElementaryTypeName","src":"10928:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"10903:50:22"},"returnParameters":{"id":4643,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4642,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4654,"src":"10980:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4641,"name":"address","nodeType":"ElementaryTypeName","src":"10980:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10979:9:22"},"scope":4827,"src":"10888:168:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4694,"nodeType":"Block","src":"11199:335:22","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":4668,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"11221:4:22","typeDescriptions":{"typeIdentifier":"t_contract$_ERC1967UUPSProxy_$4827","typeString":"library ERC1967UUPSProxy"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ERC1967UUPSProxy_$4827","typeString":"library ERC1967UUPSProxy"}],"id":4667,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11213:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4666,"name":"address","nodeType":"ElementaryTypeName","src":"11213:7:22","typeDescriptions":{}}},"id":4669,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11213:13:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11227:7:22","memberName":"balance","nodeType":"MemberAccess","src":"11213:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4671,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4660,"src":"11238:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11213:30:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936375555505350726f78793a20696e73756666696369656e742062616c616e6365","id":4673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11245:40:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_02e6f4d74f5bafa223a546b6b835ede058cd037088a5c2e8134540b54dd074d0","typeString":"literal_string \"ERC1967UUPSProxy: insufficient balance\""},"value":"ERC1967UUPSProxy: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_02e6f4d74f5bafa223a546b6b835ede058cd037088a5c2e8134540b54dd074d0","typeString":"literal_string \"ERC1967UUPSProxy: insufficient balance\""}],"id":4665,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11205:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11205:81:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4675,"nodeType":"ExpressionStatement","src":"11205:81:22"},{"assignments":[4677],"declarations":[{"constant":false,"id":4677,"mutability":"mutable","name":"initcode","nameLocation":"11305:8:22","nodeType":"VariableDeclaration","scope":4694,"src":"11292:21:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4676,"name":"bytes","nodeType":"ElementaryTypeName","src":"11292:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4682,"initialValue":{"arguments":[{"id":4679,"name":"implementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4656,"src":"11326:14:22","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":4680,"name":"initializer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4658,"src":"11342:11:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4678,"name":"_packArgs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4635,"src":"11316:9:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_payable_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address payable,bytes memory) pure returns (bytes memory)"}},"id":4681,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11316:38:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"11292:62:22"},{"AST":{"nodeType":"YulBlock","src":"11385:75:22","statements":[{"nodeType":"YulAssignment","src":"11393:61:22","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11410:5:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11421:4:22","type":"","value":"0x20"},{"name":"initcode","nodeType":"YulIdentifier","src":"11427:8:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11417:3:22"},"nodeType":"YulFunctionCall","src":"11417:19:22"},{"arguments":[{"name":"initcode","nodeType":"YulIdentifier","src":"11444:8:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11438:5:22"},"nodeType":"YulFunctionCall","src":"11438:15:22"}],"functionName":{"name":"create","nodeType":"YulIdentifier","src":"11403:6:22"},"nodeType":"YulFunctionCall","src":"11403:51:22"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"11393:6:22"}]}]},"evmVersion":"london","externalReferences":[{"declaration":4677,"isOffset":false,"isSlot":false,"src":"11427:8:22","valueSize":1},{"declaration":4677,"isOffset":false,"isSlot":false,"src":"11444:8:22","valueSize":1},{"declaration":4663,"isOffset":false,"isSlot":false,"src":"11393:6:22","valueSize":1},{"declaration":4660,"isOffset":false,"isSlot":false,"src":"11410:5:22","valueSize":1}],"flags":["memory-safe"],"id":4683,"nodeType":"InlineAssembly","src":"11360:100:22"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4685,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4663,"src":"11473:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":4688,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11491:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4687,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11483:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4686,"name":"address","nodeType":"ElementaryTypeName","src":"11483:7:22","typeDescriptions":{}}},"id":4689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11483:10:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11473:20:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936375555505350726f78793a20637265617465206661696c6564","id":4691,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11495:33:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_8211850e6fd5b0d938688aacca4f61af738ca276275570d414a3dff07c1dfe14","typeString":"literal_string \"ERC1967UUPSProxy: create failed\""},"value":"ERC1967UUPSProxy: create failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8211850e6fd5b0d938688aacca4f61af738ca276275570d414a3dff07c1dfe14","typeString":"literal_string \"ERC1967UUPSProxy: create failed\""}],"id":4684,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11465:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11465:64:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4693,"nodeType":"ExpressionStatement","src":"11465:64:22"}]},"id":4695,"implemented":true,"kind":"function","modifiers":[],"name":"create","nameLocation":"11069:6:22","nodeType":"FunctionDefinition","parameters":{"id":4661,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4656,"mutability":"mutable","name":"implementation","nameLocation":"11097:14:22","nodeType":"VariableDeclaration","scope":4695,"src":"11081:30:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":4655,"name":"address","nodeType":"ElementaryTypeName","src":"11081:15:22","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":4658,"mutability":"mutable","name":"initializer","nameLocation":"11130:11:22","nodeType":"VariableDeclaration","scope":4695,"src":"11117:24:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4657,"name":"bytes","nodeType":"ElementaryTypeName","src":"11117:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4660,"mutability":"mutable","name":"value","nameLocation":"11155:5:22","nodeType":"VariableDeclaration","scope":4695,"src":"11147:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4659,"name":"uint256","nodeType":"ElementaryTypeName","src":"11147:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11075:89:22"},"returnParameters":{"id":4664,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4663,"mutability":"mutable","name":"result","nameLocation":"11191:6:22","nodeType":"VariableDeclaration","scope":4695,"src":"11183:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4662,"name":"address","nodeType":"ElementaryTypeName","src":"11183:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11182:16:22"},"scope":4827,"src":"11060:474:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4716,"nodeType":"Block","src":"11674:84:22","statements":[{"expression":{"arguments":[{"arguments":[{"id":4709,"name":"implementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4697,"src":"11715:14:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4708,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11707:8:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":4707,"name":"address","nodeType":"ElementaryTypeName","src":"11707:8:22","stateMutability":"payable","typeDescriptions":{}}},"id":4710,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11707:23:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":4711,"name":"initializer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4699,"src":"11732:11:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4712,"name":"salt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4701,"src":"11745:4:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"30","id":4713,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11751:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4706,"name":"createDeterministic","nodeType":"Identifier","overloadedDeclarations":[4717,4760],"referencedDeclaration":4760,"src":"11687:19:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_payable_$_t_bytes_memory_ptr_$_t_bytes32_$_t_uint256_$returns$_t_address_$","typeString":"function (address payable,bytes memory,bytes32,uint256) returns (address)"}},"id":4714,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11687:66:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":4705,"id":4715,"nodeType":"Return","src":"11680:73:22"}]},"id":4717,"implemented":true,"kind":"function","modifiers":[],"name":"createDeterministic","nameLocation":"11547:19:22","nodeType":"FunctionDefinition","parameters":{"id":4702,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4697,"mutability":"mutable","name":"implementation","nameLocation":"11580:14:22","nodeType":"VariableDeclaration","scope":4717,"src":"11572:22:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4696,"name":"address","nodeType":"ElementaryTypeName","src":"11572:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4699,"mutability":"mutable","name":"initializer","nameLocation":"11613:11:22","nodeType":"VariableDeclaration","scope":4717,"src":"11600:24:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4698,"name":"bytes","nodeType":"ElementaryTypeName","src":"11600:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4701,"mutability":"mutable","name":"salt","nameLocation":"11638:4:22","nodeType":"VariableDeclaration","scope":4717,"src":"11630:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4700,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11630:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"11566:80:22"},"returnParameters":{"id":4705,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4704,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4717,"src":"11665:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4703,"name":"address","nodeType":"ElementaryTypeName","src":"11665:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11664:9:22"},"scope":4827,"src":"11538:220:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4759,"nodeType":"Block","src":"11932:343:22","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":4733,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"11954:4:22","typeDescriptions":{"typeIdentifier":"t_contract$_ERC1967UUPSProxy_$4827","typeString":"library ERC1967UUPSProxy"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ERC1967UUPSProxy_$4827","typeString":"library ERC1967UUPSProxy"}],"id":4732,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11946:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4731,"name":"address","nodeType":"ElementaryTypeName","src":"11946:7:22","typeDescriptions":{}}},"id":4734,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11946:13:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11960:7:22","memberName":"balance","nodeType":"MemberAccess","src":"11946:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4736,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4725,"src":"11971:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11946:30:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936375555505350726f78793a20696e73756666696369656e742062616c616e6365","id":4738,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11978:40:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_02e6f4d74f5bafa223a546b6b835ede058cd037088a5c2e8134540b54dd074d0","typeString":"literal_string \"ERC1967UUPSProxy: insufficient balance\""},"value":"ERC1967UUPSProxy: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_02e6f4d74f5bafa223a546b6b835ede058cd037088a5c2e8134540b54dd074d0","typeString":"literal_string \"ERC1967UUPSProxy: insufficient balance\""}],"id":4730,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11938:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4739,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11938:81:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4740,"nodeType":"ExpressionStatement","src":"11938:81:22"},{"assignments":[4742],"declarations":[{"constant":false,"id":4742,"mutability":"mutable","name":"initcode","nameLocation":"12038:8:22","nodeType":"VariableDeclaration","scope":4759,"src":"12025:21:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4741,"name":"bytes","nodeType":"ElementaryTypeName","src":"12025:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4747,"initialValue":{"arguments":[{"id":4744,"name":"implementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4719,"src":"12059:14:22","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":4745,"name":"initializer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4721,"src":"12075:11:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4743,"name":"_packArgs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4635,"src":"12049:9:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_payable_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address payable,bytes memory) pure returns (bytes memory)"}},"id":4746,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12049:38:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"12025:62:22"},{"AST":{"nodeType":"YulBlock","src":"12118:82:22","statements":[{"nodeType":"YulAssignment","src":"12126:68:22","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12144:5:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12155:4:22","type":"","value":"0x20"},{"name":"initcode","nodeType":"YulIdentifier","src":"12161:8:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12151:3:22"},"nodeType":"YulFunctionCall","src":"12151:19:22"},{"arguments":[{"name":"initcode","nodeType":"YulIdentifier","src":"12178:8:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12172:5:22"},"nodeType":"YulFunctionCall","src":"12172:15:22"},{"name":"salt","nodeType":"YulIdentifier","src":"12189:4:22"}],"functionName":{"name":"create2","nodeType":"YulIdentifier","src":"12136:7:22"},"nodeType":"YulFunctionCall","src":"12136:58:22"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"12126:6:22"}]}]},"evmVersion":"london","externalReferences":[{"declaration":4742,"isOffset":false,"isSlot":false,"src":"12161:8:22","valueSize":1},{"declaration":4742,"isOffset":false,"isSlot":false,"src":"12178:8:22","valueSize":1},{"declaration":4728,"isOffset":false,"isSlot":false,"src":"12126:6:22","valueSize":1},{"declaration":4723,"isOffset":false,"isSlot":false,"src":"12189:4:22","valueSize":1},{"declaration":4725,"isOffset":false,"isSlot":false,"src":"12144:5:22","valueSize":1}],"flags":["memory-safe"],"id":4748,"nodeType":"InlineAssembly","src":"12093:107:22"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4750,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4728,"src":"12213:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":4753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12231:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4752,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12223:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4751,"name":"address","nodeType":"ElementaryTypeName","src":"12223:7:22","typeDescriptions":{}}},"id":4754,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12223:10:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12213:20:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936375555505350726f78793a2063726561746532206661696c6564","id":4756,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12235:34:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_f8d80689a821655760516f5b722fb57a1b859e074452b4ed816388e126948c2f","typeString":"literal_string \"ERC1967UUPSProxy: create2 failed\""},"value":"ERC1967UUPSProxy: create2 failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f8d80689a821655760516f5b722fb57a1b859e074452b4ed816388e126948c2f","typeString":"literal_string \"ERC1967UUPSProxy: create2 failed\""}],"id":4749,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12205:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4757,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12205:65:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4758,"nodeType":"ExpressionStatement","src":"12205:65:22"}]},"id":4760,"implemented":true,"kind":"function","modifiers":[],"name":"createDeterministic","nameLocation":"11771:19:22","nodeType":"FunctionDefinition","parameters":{"id":4726,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4719,"mutability":"mutable","name":"implementation","nameLocation":"11812:14:22","nodeType":"VariableDeclaration","scope":4760,"src":"11796:30:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":4718,"name":"address","nodeType":"ElementaryTypeName","src":"11796:15:22","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":4721,"mutability":"mutable","name":"initializer","nameLocation":"11845:11:22","nodeType":"VariableDeclaration","scope":4760,"src":"11832:24:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4720,"name":"bytes","nodeType":"ElementaryTypeName","src":"11832:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4723,"mutability":"mutable","name":"salt","nameLocation":"11870:4:22","nodeType":"VariableDeclaration","scope":4760,"src":"11862:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4722,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11862:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4725,"mutability":"mutable","name":"value","nameLocation":"11888:5:22","nodeType":"VariableDeclaration","scope":4760,"src":"11880:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4724,"name":"uint256","nodeType":"ElementaryTypeName","src":"11880:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11790:107:22"},"returnParameters":{"id":4729,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4728,"mutability":"mutable","name":"result","nameLocation":"11924:6:22","nodeType":"VariableDeclaration","scope":4760,"src":"11916:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4727,"name":"address","nodeType":"ElementaryTypeName","src":"11916:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11915:16:22"},"scope":4827,"src":"11762:513:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4803,"nodeType":"Block","src":"12450:336:22","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"hexValue":"30786666","id":4784,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12592:4:22","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"0xff"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"}],"id":4783,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12585:6:22","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":4782,"name":"bytes1","nodeType":"ElementaryTypeName","src":"12585:6:22","typeDescriptions":{}}},"id":4785,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12585:12:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},{"id":4786,"name":"deployer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4768,"src":"12615:8:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4787,"name":"salt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4766,"src":"12641:4:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"arguments":[{"arguments":[{"id":4792,"name":"implementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4762,"src":"12691:14:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4791,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12683:8:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":4790,"name":"address","nodeType":"ElementaryTypeName","src":"12683:8:22","stateMutability":"payable","typeDescriptions":{}}},"id":4793,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12683:23:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":4794,"name":"initializer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4764,"src":"12708:11:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4789,"name":"_packArgs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4635,"src":"12673:9:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_payable_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address payable,bytes memory) pure returns (bytes memory)"}},"id":4795,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12673:47:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4788,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"12663:9:22","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4796,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12663:58:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4780,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"12551:3:22","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4781,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12555:12:22","memberName":"encodePacked","nodeType":"MemberAccess","src":"12551:16:22","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4797,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12551:186:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4779,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"12526:9:22","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4798,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12526:225:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4778,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12505:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4777,"name":"uint256","nodeType":"ElementaryTypeName","src":"12505:7:22","typeDescriptions":{}}},"id":4799,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12505:258:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4776,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12486:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4775,"name":"uint160","nodeType":"ElementaryTypeName","src":"12486:7:22","typeDescriptions":{}}},"id":4800,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12486:287:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":4774,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12469:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4773,"name":"address","nodeType":"ElementaryTypeName","src":"12469:7:22","typeDescriptions":{}}},"id":4801,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12469:312:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":4772,"id":4802,"nodeType":"Return","src":"12456:325:22"}]},"id":4804,"implemented":true,"kind":"function","modifiers":[],"name":"predictDeterministic","nameLocation":"12288:20:22","nodeType":"FunctionDefinition","parameters":{"id":4769,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4762,"mutability":"mutable","name":"implementation","nameLocation":"12322:14:22","nodeType":"VariableDeclaration","scope":4804,"src":"12314:22:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4761,"name":"address","nodeType":"ElementaryTypeName","src":"12314:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4764,"mutability":"mutable","name":"initializer","nameLocation":"12355:11:22","nodeType":"VariableDeclaration","scope":4804,"src":"12342:24:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4763,"name":"bytes","nodeType":"ElementaryTypeName","src":"12342:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4766,"mutability":"mutable","name":"salt","nameLocation":"12380:4:22","nodeType":"VariableDeclaration","scope":4804,"src":"12372:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4765,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12372:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4768,"mutability":"mutable","name":"deployer","nameLocation":"12398:8:22","nodeType":"VariableDeclaration","scope":4804,"src":"12390:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4767,"name":"address","nodeType":"ElementaryTypeName","src":"12390:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12308:102:22"},"returnParameters":{"id":4772,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4771,"mutability":"mutable","name":"result","nameLocation":"12442:6:22","nodeType":"VariableDeclaration","scope":4804,"src":"12434:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4770,"name":"address","nodeType":"ElementaryTypeName","src":"12434:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12433:16:22"},"scope":4827,"src":"12279:507:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4825,"nodeType":"Block","src":"12939:88:22","statements":[{"expression":{"arguments":[{"id":4816,"name":"implementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4806,"src":"12973:14:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4817,"name":"initializer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4808,"src":"12989:11:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4818,"name":"salt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4810,"src":"13002:4:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":4821,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"13016:4:22","typeDescriptions":{"typeIdentifier":"t_contract$_ERC1967UUPSProxy_$4827","typeString":"library ERC1967UUPSProxy"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ERC1967UUPSProxy_$4827","typeString":"library ERC1967UUPSProxy"}],"id":4820,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13008:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4819,"name":"address","nodeType":"ElementaryTypeName","src":"13008:7:22","typeDescriptions":{}}},"id":4822,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13008:13:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4815,"name":"predictDeterministic","nodeType":"Identifier","overloadedDeclarations":[4804,4826],"referencedDeclaration":4804,"src":"12952:20:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$_t_bytes_memory_ptr_$_t_bytes32_$_t_address_$returns$_t_address_$","typeString":"function (address,bytes memory,bytes32,address) pure returns (address)"}},"id":4823,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12952:70:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":4814,"id":4824,"nodeType":"Return","src":"12945:77:22"}]},"id":4826,"implemented":true,"kind":"function","modifiers":[],"name":"predictDeterministic","nameLocation":"12799:20:22","nodeType":"FunctionDefinition","parameters":{"id":4811,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4806,"mutability":"mutable","name":"implementation","nameLocation":"12833:14:22","nodeType":"VariableDeclaration","scope":4826,"src":"12825:22:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4805,"name":"address","nodeType":"ElementaryTypeName","src":"12825:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4808,"mutability":"mutable","name":"initializer","nameLocation":"12866:11:22","nodeType":"VariableDeclaration","scope":4826,"src":"12853:24:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4807,"name":"bytes","nodeType":"ElementaryTypeName","src":"12853:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4810,"mutability":"mutable","name":"salt","nameLocation":"12891:4:22","nodeType":"VariableDeclaration","scope":4826,"src":"12883:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4809,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12883:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"12819:80:22"},"returnParameters":{"id":4814,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4813,"mutability":"mutable","name":"result","nameLocation":"12931:6:22","nodeType":"VariableDeclaration","scope":4826,"src":"12923:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4812,"name":"address","nodeType":"ElementaryTypeName","src":"12923:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12922:16:22"},"scope":4827,"src":"12790:237:22","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":4828,"src":"10311:2718:22","usedErrors":[]}],"src":"36:12994:22"},"id":22},"src/JasmineEAT.sol":{"ast":{"absolutePath":"src/JasmineEAT.sol","exportedSymbols":{"ERC1155BurnableUpgradeable":[2428],"ERC1155SupplyUpgradeable":[2605],"ERC1155Upgradeable":[2176],"IERC1155Burnable":[6331],"IERC1155Mintable":[6358],"IJasmineEATExtensions":[6368],"JasmineEAT":[5290],"Ownable2StepUpgradeable":[105],"UUPSUpgradeable":[931]},"id":5291,"license":"BUSL-1.1","nodeType":"SourceUnit","nodes":[{"id":4829,"literals":["solidity","0.8",".17"],"nodeType":"PragmaDirective","src":"37:23:23"},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol","id":4831,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5291,"sourceUnit":106,"src":"62:115:23","symbolAliases":[{"foreign":{"id":4830,"name":"Ownable2StepUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":105,"src":"73:23:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","id":4833,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5291,"sourceUnit":932,"src":"178:104:23","symbolAliases":[{"foreign":{"id":4832,"name":"UUPSUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":931,"src":"189:15:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol","id":4835,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5291,"sourceUnit":2429,"src":"283:139:23","symbolAliases":[{"foreign":{"id":4834,"name":"ERC1155BurnableUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"294:26:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol","id":4837,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5291,"sourceUnit":2606,"src":"423:135:23","symbolAliases":[{"foreign":{"id":4836,"name":"ERC1155SupplyUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2605,"src":"434:24:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"src/interfaces/IERC1155Burnable.sol","file":"./interfaces/IERC1155Burnable.sol","id":4839,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5291,"sourceUnit":6332,"src":"559:67:23","symbolAliases":[{"foreign":{"id":4838,"name":"IERC1155Burnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6331,"src":"567:16:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"src/interfaces/IERC1155Mintable.sol","file":"./interfaces/IERC1155Mintable.sol","id":4841,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5291,"sourceUnit":6359,"src":"627:67:23","symbolAliases":[{"foreign":{"id":4840,"name":"IERC1155Mintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6358,"src":"635:16:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"src/interfaces/IJasmineEATExtensions.sol","file":"./interfaces/IJasmineEATExtensions.sol","id":4843,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5291,"sourceUnit":6369,"src":"695:77:23","symbolAliases":[{"foreign":{"id":4842,"name":"IJasmineEATExtensions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6368,"src":"703:21:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol","id":4845,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5291,"sourceUnit":2177,"src":"868:112:23","symbolAliases":[{"foreign":{"id":4844,"name":"ERC1155Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2176,"src":"879:18:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4847,"name":"Ownable2StepUpgradeable","nameLocations":["1235:23:23"],"nodeType":"IdentifierPath","referencedDeclaration":105,"src":"1235:23:23"},"id":4848,"nodeType":"InheritanceSpecifier","src":"1235:23:23"},{"baseName":{"id":4849,"name":"UUPSUpgradeable","nameLocations":["1262:15:23"],"nodeType":"IdentifierPath","referencedDeclaration":931,"src":"1262:15:23"},"id":4850,"nodeType":"InheritanceSpecifier","src":"1262:15:23"},{"baseName":{"id":4851,"name":"ERC1155BurnableUpgradeable","nameLocations":["1281:26:23"],"nodeType":"IdentifierPath","referencedDeclaration":2428,"src":"1281:26:23"},"id":4852,"nodeType":"InheritanceSpecifier","src":"1281:26:23"},{"baseName":{"id":4853,"name":"ERC1155SupplyUpgradeable","nameLocations":["1311:24:23"],"nodeType":"IdentifierPath","referencedDeclaration":2605,"src":"1311:24:23"},"id":4854,"nodeType":"InheritanceSpecifier","src":"1311:24:23"},{"baseName":{"id":4855,"name":"IERC1155Burnable","nameLocations":["1339:16:23"],"nodeType":"IdentifierPath","referencedDeclaration":6331,"src":"1339:16:23"},"id":4856,"nodeType":"InheritanceSpecifier","src":"1339:16:23"},{"baseName":{"id":4857,"name":"IERC1155Mintable","nameLocations":["1359:16:23"],"nodeType":"IdentifierPath","referencedDeclaration":6358,"src":"1359:16:23"},"id":4858,"nodeType":"InheritanceSpecifier","src":"1359:16:23"},{"baseName":{"id":4859,"name":"IJasmineEATExtensions","nameLocations":["1379:21:23"],"nodeType":"IdentifierPath","referencedDeclaration":6368,"src":"1379:21:23"},"id":4860,"nodeType":"InheritanceSpecifier","src":"1379:21:23"}],"canonicalName":"JasmineEAT","contractDependencies":[],"contractKind":"contract","documentation":{"id":4846,"nodeType":"StructuredDocumentation","src":"982:228:23","text":"@dev This contract is upgradeable. You can only append new contracts to the list of bases. You cannot delete bases or reorder them.\n @notice The tokens produced by this contract represent EACs held by the Jasmine bridge."},"fullyImplemented":true,"id":5290,"linearizedBaseContracts":[5290,6368,6358,6331,2605,2428,2176,2620,2339,3736,3748,931,616,247,105,237,2946,795],"name":"JasmineEAT","nameLocation":"1219:10:23","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[925],"body":{"id":4869,"nodeType":"Block","src":"1590:2:23","statements":[]},"documentation":{"id":4861,"nodeType":"StructuredDocumentation","src":"1405:118:23","text":"@dev We use the Ownable owner for upgrades, not the ERC1967 admin. The ERC1967 admin is not used by this contract."},"id":4870,"implemented":true,"kind":"function","modifiers":[{"id":4867,"kind":"modifierInvocation","modifierName":{"id":4866,"name":"onlyOwner","nameLocations":["1580:9:23"],"nodeType":"IdentifierPath","referencedDeclaration":151,"src":"1580:9:23"},"nodeType":"ModifierInvocation","src":"1580:9:23"}],"name":"_authorizeUpgrade","nameLocation":"1535:17:23","nodeType":"FunctionDefinition","overrides":{"id":4865,"nodeType":"OverrideSpecifier","overrides":[],"src":"1571:8:23"},"parameters":{"id":4864,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4863,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4870,"src":"1553:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4862,"name":"address","nodeType":"ElementaryTypeName","src":"1553:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1552:9:23"},"returnParameters":{"id":4868,"nodeType":"ParameterList","parameters":[],"src":"1590:0:23"},"scope":5290,"src":"1526:66:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":false,"documentation":{"id":4871,"nodeType":"StructuredDocumentation","src":"1596:99:23","text":"@notice This address is the mint authorization checker. The minter is controlled by the bridge."},"functionSelector":"07546172","id":4873,"mutability":"mutable","name":"minter","nameLocation":"1713:6:23","nodeType":"VariableDeclaration","scope":5290,"src":"1698:21:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4872,"name":"address","nodeType":"ElementaryTypeName","src":"1698:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"body":{"id":4884,"nodeType":"Block","src":"1762:82:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4877,"name":"minter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4873,"src":"1776:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4878,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2931,"src":"1786:10:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4879,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1786:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1776:22:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4a61736d696e654541543a2063616c6c6572206973206e6f7420746865206d696e746572","id":4881,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1800:38:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_3309865acede588af16caec4e420328ad7b719a526e615ac76b33915e726cc2f","typeString":"literal_string \"JasmineEAT: caller is not the minter\""},"value":"JasmineEAT: caller is not the minter"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3309865acede588af16caec4e420328ad7b719a526e615ac76b33915e726cc2f","typeString":"literal_string \"JasmineEAT: caller is not the minter\""}],"id":4876,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1768:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4882,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1768:71:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4883,"nodeType":"ExpressionStatement","src":"1768:71:23"}]},"id":4885,"implemented":true,"kind":"function","modifiers":[],"name":"_checkMinter","nameLocation":"1733:12:23","nodeType":"FunctionDefinition","parameters":{"id":4874,"nodeType":"ParameterList","parameters":[],"src":"1745:2:23"},"returnParameters":{"id":4875,"nodeType":"ParameterList","parameters":[],"src":"1762:0:23"},"scope":5290,"src":"1724:120:23","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4891,"nodeType":"Block","src":"1870:32:23","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4887,"name":"_checkMinter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4885,"src":"1876:12:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":4888,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1876:14:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4889,"nodeType":"ExpressionStatement","src":"1876:14:23"},{"id":4890,"nodeType":"PlaceholderStatement","src":"1896:1:23"}]},"id":4892,"name":"onlyMinter","nameLocation":"1857:10:23","nodeType":"ModifierDefinition","parameters":{"id":4886,"nodeType":"ParameterList","parameters":[],"src":"1867:2:23"},"src":"1848:54:23","virtual":false,"visibility":"internal"},{"anonymous":false,"eventSelector":"b6b8f1859c5c352e5ffad07d0f77e384ac725512c015bd3a3ffc885831c8a425","id":4896,"name":"MinterChanged","nameLocation":"1912:13:23","nodeType":"EventDefinition","parameters":{"id":4895,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4894,"indexed":true,"mutability":"mutable","name":"newMinter","nameLocation":"1942:9:23","nodeType":"VariableDeclaration","scope":4896,"src":"1926:25:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4893,"name":"address","nodeType":"ElementaryTypeName","src":"1926:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1925:27:23"},"src":"1906:47:23"},{"body":{"id":4912,"nodeType":"Block","src":"2139:64:23","statements":[{"expression":{"id":4906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4904,"name":"minter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4873,"src":"2145:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4905,"name":"newMinter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4899,"src":"2154:9:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2145:18:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4907,"nodeType":"ExpressionStatement","src":"2145:18:23"},{"eventCall":{"arguments":[{"id":4909,"name":"newMinter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4899,"src":"2188:9:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4908,"name":"MinterChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4896,"src":"2174:13:23","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":4910,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2174:24:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4911,"nodeType":"EmitStatement","src":"2169:29:23"}]},"documentation":{"id":4897,"nodeType":"StructuredDocumentation","src":"1957:122:23","text":"@notice In the event of a minter migration (not just an upgrade), the owner has the ability to set the minter address."},"functionSelector":"fca3b5aa","id":4913,"implemented":true,"kind":"function","modifiers":[{"id":4902,"kind":"modifierInvocation","modifierName":{"id":4901,"name":"onlyOwner","nameLocations":["2129:9:23"],"nodeType":"IdentifierPath","referencedDeclaration":151,"src":"2129:9:23"},"nodeType":"ModifierInvocation","src":"2129:9:23"}],"name":"setMinter","nameLocation":"2091:9:23","nodeType":"FunctionDefinition","parameters":{"id":4900,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4899,"mutability":"mutable","name":"newMinter","nameLocation":"2109:9:23","nodeType":"VariableDeclaration","scope":4913,"src":"2101:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4898,"name":"address","nodeType":"ElementaryTypeName","src":"2101:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2100:19:23"},"returnParameters":{"id":4903,"nodeType":"ParameterList","parameters":[],"src":"2139:0:23"},"scope":5290,"src":"2082:121:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[6367],"constant":false,"functionSelector":"e9ac0440","id":4918,"mutability":"mutable","name":"frozen","nameLocation":"2248:6:23","nodeType":"VariableDeclaration","overrides":{"id":4917,"nodeType":"OverrideSpecifier","overrides":[],"src":"2239:8:23"},"scope":5290,"src":"2207:47:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"},"typeName":{"id":4916,"keyType":{"id":4914,"name":"uint256","nodeType":"ElementaryTypeName","src":"2215:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"2207:24:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"},"valueType":{"id":4915,"name":"bool","nodeType":"ElementaryTypeName","src":"2226:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"baseFunctions":[1995,2599],"body":{"id":4980,"nodeType":"Block","src":"2582:227:23","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4939,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4925,"src":"2592:2:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":4942,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2606:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4941,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2598:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4940,"name":"address","nodeType":"ElementaryTypeName","src":"2598:7:23","typeDescriptions":{}}},"id":4943,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2598:10:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2592:16:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4968,"nodeType":"IfStatement","src":"2588:145:23","trueBody":{"id":4967,"nodeType":"Block","src":"2610:123:23","statements":[{"body":{"id":4965,"nodeType":"Block","src":"2655:72:23","statements":[{"expression":{"arguments":[{"id":4961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2673:15:23","subExpression":{"baseExpression":{"id":4956,"name":"frozen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4918,"src":"2674:6:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":4960,"indexExpression":{"baseExpression":{"id":4957,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4928,"src":"2681:3:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4959,"indexExpression":{"id":4958,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4946,"src":"2685:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2681:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2674:14:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4a61736d696e654541543a2066726f7a656e20736572696573","id":4962,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2690:27:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_58d3bf342e3a24adcc42cd2019e9893394d2d62bfa52bd8547533b9422e1827b","typeString":"literal_string \"JasmineEAT: frozen series\""},"value":"JasmineEAT: frozen series"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_58d3bf342e3a24adcc42cd2019e9893394d2d62bfa52bd8547533b9422e1827b","typeString":"literal_string \"JasmineEAT: frozen series\""}],"id":4955,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2665:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4963,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2665:53:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4964,"nodeType":"ExpressionStatement","src":"2665:53:23"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4948,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4946,"src":"2634:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":4949,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4928,"src":"2638:3:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2642:6:23","memberName":"length","nodeType":"MemberAccess","src":"2638:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2634:14:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4966,"initializationExpression":{"assignments":[4946],"declarations":[{"constant":false,"id":4946,"mutability":"mutable","name":"i","nameLocation":"2631:1:23","nodeType":"VariableDeclaration","scope":4966,"src":"2623:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4945,"name":"uint256","nodeType":"ElementaryTypeName","src":"2623:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4947,"nodeType":"VariableDeclarationStatement","src":"2623:9:23"},"loopExpression":{"expression":{"id":4953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2650:3:23","subExpression":{"id":4952,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4946,"src":"2650:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4954,"nodeType":"ExpressionStatement","src":"2650:3:23"},"nodeType":"ForStatement","src":"2618:109:23"}]}},{"expression":{"arguments":[{"id":4972,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4921,"src":"2765:8:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4973,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4923,"src":"2775:4:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4974,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4925,"src":"2781:2:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4975,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4928,"src":"2785:3:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":4976,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4931,"src":"2790:7:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":4977,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4933,"src":"2799:4:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":4969,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2738:5:23","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_JasmineEAT_$5290_$","typeString":"type(contract super JasmineEAT)"}},"id":4971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2744:20:23","memberName":"_beforeTokenTransfer","nodeType":"MemberAccess","referencedDeclaration":2599,"src":"2738:26:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":4978,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2738:66:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4979,"nodeType":"ExpressionStatement","src":"2738:66:23"}]},"documentation":{"id":4919,"nodeType":"StructuredDocumentation","src":"2259:87:23","text":"@dev EAT series that are frozen cannot be transferred. They can be burned, however."},"id":4981,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"2358:20:23","nodeType":"FunctionDefinition","overrides":{"id":4937,"nodeType":"OverrideSpecifier","overrides":[{"id":4935,"name":"ERC1155Upgradeable","nameLocations":["2536:18:23"],"nodeType":"IdentifierPath","referencedDeclaration":2176,"src":"2536:18:23"},{"id":4936,"name":"ERC1155SupplyUpgradeable","nameLocations":["2556:24:23"],"nodeType":"IdentifierPath","referencedDeclaration":2605,"src":"2556:24:23"}],"src":"2527:54:23"},"parameters":{"id":4934,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4921,"mutability":"mutable","name":"operator","nameLocation":"2392:8:23","nodeType":"VariableDeclaration","scope":4981,"src":"2384:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4920,"name":"address","nodeType":"ElementaryTypeName","src":"2384:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4923,"mutability":"mutable","name":"from","nameLocation":"2414:4:23","nodeType":"VariableDeclaration","scope":4981,"src":"2406:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4922,"name":"address","nodeType":"ElementaryTypeName","src":"2406:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4925,"mutability":"mutable","name":"to","nameLocation":"2432:2:23","nodeType":"VariableDeclaration","scope":4981,"src":"2424:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4924,"name":"address","nodeType":"ElementaryTypeName","src":"2424:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4928,"mutability":"mutable","name":"ids","nameLocation":"2457:3:23","nodeType":"VariableDeclaration","scope":4981,"src":"2440:20:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4926,"name":"uint256","nodeType":"ElementaryTypeName","src":"2440:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4927,"nodeType":"ArrayTypeName","src":"2440:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":4931,"mutability":"mutable","name":"amounts","nameLocation":"2483:7:23","nodeType":"VariableDeclaration","scope":4981,"src":"2466:24:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4929,"name":"uint256","nodeType":"ElementaryTypeName","src":"2466:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4930,"nodeType":"ArrayTypeName","src":"2466:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":4933,"mutability":"mutable","name":"data","nameLocation":"2509:4:23","nodeType":"VariableDeclaration","scope":4981,"src":"2496:17:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4932,"name":"bytes","nodeType":"ElementaryTypeName","src":"2496:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2378:139:23"},"returnParameters":{"id":4938,"nodeType":"ParameterList","parameters":[],"src":"2582:0:23"},"scope":5290,"src":"2349:460:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5013,"nodeType":"Block","src":"2949:198:23","statements":[{"expression":{"arguments":[{"id":4995,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4987,"src":"2974:12:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4994,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[77],"referencedDeclaration":77,"src":"2955:18:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":4996,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2955:32:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4997,"nodeType":"ExpressionStatement","src":"2955:32:23"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4998,"name":"__UUPSUpgradeable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":813,"src":"3019:22:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4999,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3019:24:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5000,"nodeType":"ExpressionStatement","src":"3019:24:23"},{"expression":{"arguments":[{"id":5002,"name":"initialURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4983,"src":"3064:10:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5001,"name":"__ERC1155_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":981,"src":"3049:14:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory)"}},"id":5003,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3049:26:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5004,"nodeType":"ExpressionStatement","src":"3049:26:23"},{"expression":{"id":5007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5005,"name":"minter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4873,"src":"3081:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5006,"name":"initialMinter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4985,"src":"3090:13:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3081:22:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5008,"nodeType":"ExpressionStatement","src":"3081:22:23"},{"eventCall":{"arguments":[{"id":5010,"name":"initialMinter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4985,"src":"3128:13:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5009,"name":"MinterChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4896,"src":"3114:13:23","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":5011,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3114:28:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5012,"nodeType":"EmitStatement","src":"3109:33:23"}]},"functionSelector":"463fd1af","id":5014,"implemented":true,"kind":"function","modifiers":[{"id":4990,"kind":"modifierInvocation","modifierName":{"id":4989,"name":"initializer","nameLocations":["2921:11:23"],"nodeType":"IdentifierPath","referencedDeclaration":697,"src":"2921:11:23"},"nodeType":"ModifierInvocation","src":"2921:11:23"},{"id":4992,"kind":"modifierInvocation","modifierName":{"id":4991,"name":"onlyProxy","nameLocations":["2937:9:23"],"nodeType":"IdentifierPath","referencedDeclaration":849,"src":"2937:9:23"},"nodeType":"ModifierInvocation","src":"2937:9:23"}],"name":"initialize","nameLocation":"2822:10:23","nodeType":"FunctionDefinition","parameters":{"id":4988,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4983,"mutability":"mutable","name":"initialURI","nameLocation":"2847:10:23","nodeType":"VariableDeclaration","scope":5014,"src":"2833:24:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4982,"name":"string","nodeType":"ElementaryTypeName","src":"2833:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4985,"mutability":"mutable","name":"initialMinter","nameLocation":"2867:13:23","nodeType":"VariableDeclaration","scope":5014,"src":"2859:21:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4984,"name":"address","nodeType":"ElementaryTypeName","src":"2859:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4987,"mutability":"mutable","name":"initialOwner","nameLocation":"2890:12:23","nodeType":"VariableDeclaration","scope":5014,"src":"2882:20:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4986,"name":"address","nodeType":"ElementaryTypeName","src":"2882:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2832:71:23"},"returnParameters":{"id":4993,"nodeType":"ParameterList","parameters":[],"src":"2949:0:23"},"scope":5290,"src":"2813:334:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[6344],"body":{"id":5036,"nodeType":"Block","src":"3368:38:23","statements":[{"expression":{"arguments":[{"id":5030,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5017,"src":"3380:2:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5031,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5019,"src":"3384:2:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5032,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5021,"src":"3388:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5033,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5023,"src":"3396:4:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5029,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1605,"src":"3374:5:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,uint256,bytes memory)"}},"id":5034,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3374:27:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5035,"nodeType":"ExpressionStatement","src":"3374:27:23"}]},"documentation":{"id":5015,"nodeType":"StructuredDocumentation","src":"3151:92:23","text":"@notice Create new EATs when EACs are received by the bridge. Only callable by `minter`."},"functionSelector":"731133e9","id":5037,"implemented":true,"kind":"function","modifiers":[{"id":5027,"kind":"modifierInvocation","modifierName":{"id":5026,"name":"onlyMinter","nameLocations":["3357:10:23"],"nodeType":"IdentifierPath","referencedDeclaration":4892,"src":"3357:10:23"},"nodeType":"ModifierInvocation","src":"3357:10:23"}],"name":"mint","nameLocation":"3255:4:23","nodeType":"FunctionDefinition","overrides":{"id":5025,"nodeType":"OverrideSpecifier","overrides":[],"src":"3348:8:23"},"parameters":{"id":5024,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5017,"mutability":"mutable","name":"to","nameLocation":"3273:2:23","nodeType":"VariableDeclaration","scope":5037,"src":"3265:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5016,"name":"address","nodeType":"ElementaryTypeName","src":"3265:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5019,"mutability":"mutable","name":"id","nameLocation":"3289:2:23","nodeType":"VariableDeclaration","scope":5037,"src":"3281:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5018,"name":"uint256","nodeType":"ElementaryTypeName","src":"3281:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5021,"mutability":"mutable","name":"amount","nameLocation":"3305:6:23","nodeType":"VariableDeclaration","scope":5037,"src":"3297:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5020,"name":"uint256","nodeType":"ElementaryTypeName","src":"3297:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5023,"mutability":"mutable","name":"data","nameLocation":"3330:4:23","nodeType":"VariableDeclaration","scope":5037,"src":"3317:17:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5022,"name":"bytes","nodeType":"ElementaryTypeName","src":"3317:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3259:79:23"},"returnParameters":{"id":5028,"nodeType":"ParameterList","parameters":[],"src":"3368:0:23"},"scope":5290,"src":"3246:160:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[6357],"body":{"id":5061,"nodeType":"Block","src":"3652:45:23","statements":[{"expression":{"arguments":[{"id":5055,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5040,"src":"3669:2:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5056,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5043,"src":"3673:3:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":5057,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5046,"src":"3678:7:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":5058,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5048,"src":"3687:4:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5054,"name":"_mintBatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1716,"src":"3658:10:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":5059,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3658:34:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5060,"nodeType":"ExpressionStatement","src":"3658:34:23"}]},"documentation":{"id":5038,"nodeType":"StructuredDocumentation","src":"3410:92:23","text":"@notice Create new EATs when EACs are received by the bridge. Only callable by `minter`."},"functionSelector":"1f7fdffa","id":5062,"implemented":true,"kind":"function","modifiers":[{"id":5052,"kind":"modifierInvocation","modifierName":{"id":5051,"name":"onlyMinter","nameLocations":["3641:10:23"],"nodeType":"IdentifierPath","referencedDeclaration":4892,"src":"3641:10:23"},"nodeType":"ModifierInvocation","src":"3641:10:23"}],"name":"mintBatch","nameLocation":"3514:9:23","nodeType":"FunctionDefinition","overrides":{"id":5050,"nodeType":"OverrideSpecifier","overrides":[],"src":"3632:8:23"},"parameters":{"id":5049,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5040,"mutability":"mutable","name":"to","nameLocation":"3537:2:23","nodeType":"VariableDeclaration","scope":5062,"src":"3529:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5039,"name":"address","nodeType":"ElementaryTypeName","src":"3529:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5043,"mutability":"mutable","name":"ids","nameLocation":"3562:3:23","nodeType":"VariableDeclaration","scope":5062,"src":"3545:20:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5041,"name":"uint256","nodeType":"ElementaryTypeName","src":"3545:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5042,"nodeType":"ArrayTypeName","src":"3545:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":5046,"mutability":"mutable","name":"amounts","nameLocation":"3588:7:23","nodeType":"VariableDeclaration","scope":5062,"src":"3571:24:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5044,"name":"uint256","nodeType":"ElementaryTypeName","src":"3571:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5045,"nodeType":"ArrayTypeName","src":"3571:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":5048,"mutability":"mutable","name":"data","nameLocation":"3614:4:23","nodeType":"VariableDeclaration","scope":5062,"src":"3601:17:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5047,"name":"bytes","nodeType":"ElementaryTypeName","src":"3601:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3523:99:23"},"returnParameters":{"id":5053,"nodeType":"ParameterList","parameters":[],"src":"3652:0:23"},"scope":5290,"src":"3505:192:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"anonymous":false,"eventSelector":"4d69b51fee53c28bd8b61fe008151577ca65160b5248f6225e74d64fd4cf7328","id":5066,"name":"Frozen","nameLocation":"3707:6:23","nodeType":"EventDefinition","parameters":{"id":5065,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5064,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"3730:2:23","nodeType":"VariableDeclaration","scope":5066,"src":"3714:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5063,"name":"uint256","nodeType":"ElementaryTypeName","src":"3714:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3713:20:23"},"src":"3701:33:23"},{"body":{"id":5084,"nodeType":"Block","src":"3904:49:23","statements":[{"expression":{"id":5078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5074,"name":"frozen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4918,"src":"3910:6:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":5076,"indexExpression":{"id":5075,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5069,"src":"3917:2:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3910:10:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":5077,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3923:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3910:17:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5079,"nodeType":"ExpressionStatement","src":"3910:17:23"},{"eventCall":{"arguments":[{"id":5081,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5069,"src":"3945:2:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5080,"name":"Frozen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5066,"src":"3938:6:23","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":5082,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3938:10:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5083,"nodeType":"EmitStatement","src":"3933:15:23"}]},"documentation":{"id":5067,"nodeType":"StructuredDocumentation","src":"3738:116:23","text":"@notice If there is an error in an EAC or in the issuance of the EAT, the EAT series may be frozen by the owner."},"functionSelector":"d7a78db8","id":5085,"implemented":true,"kind":"function","modifiers":[{"id":5072,"kind":"modifierInvocation","modifierName":{"id":5071,"name":"onlyOwner","nameLocations":["3894:9:23"],"nodeType":"IdentifierPath","referencedDeclaration":151,"src":"3894:9:23"},"nodeType":"ModifierInvocation","src":"3894:9:23"}],"name":"freeze","nameLocation":"3866:6:23","nodeType":"FunctionDefinition","parameters":{"id":5070,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5069,"mutability":"mutable","name":"id","nameLocation":"3881:2:23","nodeType":"VariableDeclaration","scope":5085,"src":"3873:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5068,"name":"uint256","nodeType":"ElementaryTypeName","src":"3873:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3872:12:23"},"returnParameters":{"id":5073,"nodeType":"ParameterList","parameters":[],"src":"3904:0:23"},"scope":5290,"src":"3857:96:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"anonymous":false,"eventSelector":"d7ea826caa575891b88b771d03fe1da3092d4a65c5adeaccc99be085978cebe8","id":5089,"name":"Thawed","nameLocation":"3963:6:23","nodeType":"EventDefinition","parameters":{"id":5088,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5087,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"3986:2:23","nodeType":"VariableDeclaration","scope":5089,"src":"3970:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5086,"name":"uint256","nodeType":"ElementaryTypeName","src":"3970:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3969:20:23"},"src":"3957:33:23"},{"body":{"id":5107,"nodeType":"Block","src":"4089:50:23","statements":[{"expression":{"id":5101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5097,"name":"frozen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4918,"src":"4095:6:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":5099,"indexExpression":{"id":5098,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5092,"src":"4102:2:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4095:10:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":5100,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4108:5:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"4095:18:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5102,"nodeType":"ExpressionStatement","src":"4095:18:23"},{"eventCall":{"arguments":[{"id":5104,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5092,"src":"4131:2:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5103,"name":"Thawed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5089,"src":"4124:6:23","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":5105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4124:10:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5106,"nodeType":"EmitStatement","src":"4119:15:23"}]},"documentation":{"id":5090,"nodeType":"StructuredDocumentation","src":"3994:47:23","text":"@notice This un-does the effects of freeze."},"functionSelector":"e77cfaae","id":5108,"implemented":true,"kind":"function","modifiers":[{"id":5095,"kind":"modifierInvocation","modifierName":{"id":5094,"name":"onlyOwner","nameLocations":["4079:9:23"],"nodeType":"IdentifierPath","referencedDeclaration":151,"src":"4079:9:23"},"nodeType":"ModifierInvocation","src":"4079:9:23"}],"name":"thaw","nameLocation":"4053:4:23","nodeType":"FunctionDefinition","parameters":{"id":5093,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5092,"mutability":"mutable","name":"id","nameLocation":"4066:2:23","nodeType":"VariableDeclaration","scope":5108,"src":"4058:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5091,"name":"uint256","nodeType":"ElementaryTypeName","src":"4058:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4057:12:23"},"returnParameters":{"id":5096,"nodeType":"ParameterList","parameters":[],"src":"4089:0:23"},"scope":5290,"src":"4044:95:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5149,"nodeType":"Block","src":"4356:193:23","statements":[{"expression":{"arguments":[{"baseExpression":{"id":5121,"name":"frozen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4918,"src":"4370:6:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":5123,"indexExpression":{"id":5122,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5113,"src":"4377:2:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4370:10:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4a61736d696e654541543a20736572696573206e6f742066726f7a656e","id":5124,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4382:31:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_81503871d1586f0b01077b4a94a5a619c714a55f197757f1647f429e1ea6170d","typeString":"literal_string \"JasmineEAT: series not frozen\""},"value":"JasmineEAT: series not frozen"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_81503871d1586f0b01077b4a94a5a619c714a55f197757f1647f429e1ea6170d","typeString":"literal_string \"JasmineEAT: series not frozen\""}],"id":5120,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4362:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5125,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4362:52:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5126,"nodeType":"ExpressionStatement","src":"4362:52:23"},{"assignments":[5128],"declarations":[{"constant":false,"id":5128,"mutability":"mutable","name":"balance","nameLocation":"4428:7:23","nodeType":"VariableDeclaration","scope":5149,"src":"4420:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5127,"name":"uint256","nodeType":"ElementaryTypeName","src":"4420:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5133,"initialValue":{"arguments":[{"id":5130,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5111,"src":"4448:4:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5131,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5113,"src":"4454:2:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5129,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1064,"src":"4438:9:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256) view returns (uint256)"}},"id":5132,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4438:19:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4420:37:23"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5134,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5128,"src":"4467:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5135,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5115,"src":"4477:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4467:16:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5142,"nodeType":"IfStatement","src":"4463:53:23","trueBody":{"id":5141,"nodeType":"Block","src":"4485:31:23","statements":[{"expression":{"id":5139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5137,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5115,"src":"4493:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5138,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5128,"src":"4502:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4493:16:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5140,"nodeType":"ExpressionStatement","src":"4493:16:23"}]}},{"expression":{"arguments":[{"id":5144,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5111,"src":"4527:4:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5145,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5113,"src":"4533:2:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5146,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5115,"src":"4537:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5143,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1821,"src":"4521:5:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":5147,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4521:23:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5148,"nodeType":"ExpressionStatement","src":"4521:23:23"}]},"documentation":{"id":5109,"nodeType":"StructuredDocumentation","src":"4143:118:23","text":"@notice If the owner determines that there is no resolution to an erroneous EAT series, the EATs may be destroyed."},"functionSelector":"70f81f6c","id":5150,"implemented":true,"kind":"function","modifiers":[{"id":5118,"kind":"modifierInvocation","modifierName":{"id":5117,"name":"onlyOwner","nameLocations":["4346:9:23"],"nodeType":"IdentifierPath","referencedDeclaration":151,"src":"4346:9:23"},"nodeType":"ModifierInvocation","src":"4346:9:23"}],"name":"slash","nameLocation":"4273:5:23","nodeType":"FunctionDefinition","parameters":{"id":5116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5111,"mutability":"mutable","name":"from","nameLocation":"4292:4:23","nodeType":"VariableDeclaration","scope":5150,"src":"4284:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5110,"name":"address","nodeType":"ElementaryTypeName","src":"4284:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5113,"mutability":"mutable","name":"id","nameLocation":"4310:2:23","nodeType":"VariableDeclaration","scope":5150,"src":"4302:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5112,"name":"uint256","nodeType":"ElementaryTypeName","src":"4302:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5115,"mutability":"mutable","name":"amount","nameLocation":"4326:6:23","nodeType":"VariableDeclaration","scope":5150,"src":"4318:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5114,"name":"uint256","nodeType":"ElementaryTypeName","src":"4318:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4278:58:23"},"returnParameters":{"id":5119,"nodeType":"ParameterList","parameters":[],"src":"4356:0:23"},"scope":5290,"src":"4264:285:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5215,"nodeType":"Block","src":"4791:294:23","statements":[{"body":{"id":5207,"nodeType":"Block","src":"4834:211:23","statements":[{"assignments":[5175],"declarations":[{"constant":false,"id":5175,"mutability":"mutable","name":"id","nameLocation":"4850:2:23","nodeType":"VariableDeclaration","scope":5207,"src":"4842:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5174,"name":"uint256","nodeType":"ElementaryTypeName","src":"4842:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5179,"initialValue":{"baseExpression":{"id":5176,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5156,"src":"4855:3:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5178,"indexExpression":{"id":5177,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5165,"src":"4859:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4855:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4842:19:23"},{"expression":{"arguments":[{"baseExpression":{"id":5181,"name":"frozen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4918,"src":"4877:6:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":5183,"indexExpression":{"id":5182,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5175,"src":"4884:2:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4877:10:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4a61736d696e654541543a20736572696573206e6f742066726f7a656e","id":5184,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4889:31:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_81503871d1586f0b01077b4a94a5a619c714a55f197757f1647f429e1ea6170d","typeString":"literal_string \"JasmineEAT: series not frozen\""},"value":"JasmineEAT: series not frozen"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_81503871d1586f0b01077b4a94a5a619c714a55f197757f1647f429e1ea6170d","typeString":"literal_string \"JasmineEAT: series not frozen\""}],"id":5180,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4869:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5185,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4869:52:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5186,"nodeType":"ExpressionStatement","src":"4869:52:23"},{"assignments":[5188],"declarations":[{"constant":false,"id":5188,"mutability":"mutable","name":"balance","nameLocation":"4937:7:23","nodeType":"VariableDeclaration","scope":5207,"src":"4929:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5187,"name":"uint256","nodeType":"ElementaryTypeName","src":"4929:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5193,"initialValue":{"arguments":[{"id":5190,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5153,"src":"4957:4:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5191,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5175,"src":"4963:2:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5189,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1064,"src":"4947:9:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256) view returns (uint256)"}},"id":5192,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4947:19:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4929:37:23"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5194,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5188,"src":"4978:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"baseExpression":{"id":5195,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5159,"src":"4988:7:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5197,"indexExpression":{"id":5196,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5165,"src":"4996:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4988:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4978:20:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5206,"nodeType":"IfStatement","src":"4974:65:23","trueBody":{"id":5205,"nodeType":"Block","src":"5000:39:23","statements":[{"expression":{"id":5203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5199,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5159,"src":"5010:7:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5201,"indexExpression":{"id":5200,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5165,"src":"5018:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5010:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5202,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5188,"src":"5023:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5010:20:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5204,"nodeType":"ExpressionStatement","src":"5010:20:23"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5167,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5165,"src":"4813:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":5168,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5156,"src":"4817:3:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4821:6:23","memberName":"length","nodeType":"MemberAccess","src":"4817:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4813:14:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5208,"initializationExpression":{"assignments":[5165],"declarations":[{"constant":false,"id":5165,"mutability":"mutable","name":"i","nameLocation":"4810:1:23","nodeType":"VariableDeclaration","scope":5208,"src":"4802:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5164,"name":"uint256","nodeType":"ElementaryTypeName","src":"4802:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5166,"nodeType":"VariableDeclarationStatement","src":"4802:9:23"},"loopExpression":{"expression":{"id":5172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"4829:3:23","subExpression":{"id":5171,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5165,"src":"4829:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5173,"nodeType":"ExpressionStatement","src":"4829:3:23"},"nodeType":"ForStatement","src":"4797:248:23"},{"expression":{"arguments":[{"id":5210,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5153,"src":"5061:4:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5211,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5156,"src":"5067:3:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":5212,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5159,"src":"5072:7:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":5209,"name":"_burnBatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1944,"src":"5050:10:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,uint256[] memory,uint256[] memory)"}},"id":5213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5050:30:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5214,"nodeType":"ExpressionStatement","src":"5050:30:23"}]},"documentation":{"id":5151,"nodeType":"StructuredDocumentation","src":"4553:118:23","text":"@notice If the owner determines that there is no resolution to an erroneous EAT series, the EATs may be destroyed."},"functionSelector":"7c8a8970","id":5216,"implemented":true,"kind":"function","modifiers":[{"id":5162,"kind":"modifierInvocation","modifierName":{"id":5161,"name":"onlyOwner","nameLocations":["4781:9:23"],"nodeType":"IdentifierPath","referencedDeclaration":151,"src":"4781:9:23"},"nodeType":"ModifierInvocation","src":"4781:9:23"}],"name":"slashBatch","nameLocation":"4683:10:23","nodeType":"FunctionDefinition","parameters":{"id":5160,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5153,"mutability":"mutable","name":"from","nameLocation":"4707:4:23","nodeType":"VariableDeclaration","scope":5216,"src":"4699:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5152,"name":"address","nodeType":"ElementaryTypeName","src":"4699:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5156,"mutability":"mutable","name":"ids","nameLocation":"4734:3:23","nodeType":"VariableDeclaration","scope":5216,"src":"4717:20:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5154,"name":"uint256","nodeType":"ElementaryTypeName","src":"4717:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5155,"nodeType":"ArrayTypeName","src":"4717:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":5159,"mutability":"mutable","name":"amounts","nameLocation":"4760:7:23","nodeType":"VariableDeclaration","scope":5216,"src":"4743:24:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5157,"name":"uint256","nodeType":"ElementaryTypeName","src":"4743:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5158,"nodeType":"ArrayTypeName","src":"4743:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"4693:78:23"},"returnParameters":{"id":5163,"nodeType":"ParameterList","parameters":[],"src":"4791:0:23"},"scope":5290,"src":"4674:411:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[2390,6319],"body":{"id":5236,"nodeType":"Block","src":"5297:38:23","statements":[{"expression":{"arguments":[{"id":5231,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5218,"src":"5314:4:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5232,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5220,"src":"5320:2:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5233,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5222,"src":"5324:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5228,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"5303:5:23","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_JasmineEAT_$5290_$","typeString":"type(contract super JasmineEAT)"}},"id":5230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5309:4:23","memberName":"burn","nodeType":"MemberAccess","referencedDeclaration":2390,"src":"5303:10:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":5234,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5303:27:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5235,"nodeType":"ExpressionStatement","src":"5303:27:23"}]},"functionSelector":"f5298aca","id":5237,"implemented":true,"kind":"function","modifiers":[],"name":"burn","nameLocation":"5173:4:23","nodeType":"FunctionDefinition","overrides":{"id":5226,"nodeType":"OverrideSpecifier","overrides":[{"id":5224,"name":"ERC1155BurnableUpgradeable","nameLocations":["5251:26:23"],"nodeType":"IdentifierPath","referencedDeclaration":2428,"src":"5251:26:23"},{"id":5225,"name":"IERC1155Burnable","nameLocations":["5279:16:23"],"nodeType":"IdentifierPath","referencedDeclaration":6331,"src":"5279:16:23"}],"src":"5242:54:23"},"parameters":{"id":5223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5218,"mutability":"mutable","name":"from","nameLocation":"5191:4:23","nodeType":"VariableDeclaration","scope":5237,"src":"5183:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5217,"name":"address","nodeType":"ElementaryTypeName","src":"5183:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5220,"mutability":"mutable","name":"id","nameLocation":"5209:2:23","nodeType":"VariableDeclaration","scope":5237,"src":"5201:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5219,"name":"uint256","nodeType":"ElementaryTypeName","src":"5201:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5222,"mutability":"mutable","name":"value","nameLocation":"5225:5:23","nodeType":"VariableDeclaration","scope":5237,"src":"5217:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5221,"name":"uint256","nodeType":"ElementaryTypeName","src":"5217:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5177:57:23"},"returnParameters":{"id":5227,"nodeType":"ParameterList","parameters":[],"src":"5297:0:23"},"scope":5290,"src":"5164:171:23","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[2422,6330],"body":{"id":5259,"nodeType":"Block","src":"5497:45:23","statements":[{"expression":{"arguments":[{"id":5254,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5239,"src":"5519:4:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5255,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5242,"src":"5525:3:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":5256,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5245,"src":"5530:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"expression":{"id":5251,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"5503:5:23","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_JasmineEAT_$5290_$","typeString":"type(contract super JasmineEAT)"}},"id":5253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5509:9:23","memberName":"burnBatch","nodeType":"MemberAccess","referencedDeclaration":2422,"src":"5503:15:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,uint256[] memory,uint256[] memory)"}},"id":5257,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5503:34:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5258,"nodeType":"ExpressionStatement","src":"5503:34:23"}]},"functionSelector":"6b20c454","id":5260,"implemented":true,"kind":"function","modifiers":[],"name":"burnBatch","nameLocation":"5348:9:23","nodeType":"FunctionDefinition","overrides":{"id":5249,"nodeType":"OverrideSpecifier","overrides":[{"id":5247,"name":"ERC1155BurnableUpgradeable","nameLocations":["5451:26:23"],"nodeType":"IdentifierPath","referencedDeclaration":2428,"src":"5451:26:23"},{"id":5248,"name":"IERC1155Burnable","nameLocations":["5479:16:23"],"nodeType":"IdentifierPath","referencedDeclaration":6331,"src":"5479:16:23"}],"src":"5442:54:23"},"parameters":{"id":5246,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5239,"mutability":"mutable","name":"from","nameLocation":"5371:4:23","nodeType":"VariableDeclaration","scope":5260,"src":"5363:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5238,"name":"address","nodeType":"ElementaryTypeName","src":"5363:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5242,"mutability":"mutable","name":"ids","nameLocation":"5398:3:23","nodeType":"VariableDeclaration","scope":5260,"src":"5381:20:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5240,"name":"uint256","nodeType":"ElementaryTypeName","src":"5381:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5241,"nodeType":"ArrayTypeName","src":"5381:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":5245,"mutability":"mutable","name":"values","nameLocation":"5424:6:23","nodeType":"VariableDeclaration","scope":5260,"src":"5407:23:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5243,"name":"uint256","nodeType":"ElementaryTypeName","src":"5407:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5244,"nodeType":"ArrayTypeName","src":"5407:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"5357:77:23"},"returnParameters":{"id":5250,"nodeType":"ParameterList","parameters":[],"src":"5497:0:23"},"scope":5290,"src":"5339:203:23","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5283,"nodeType":"Block","src":"5660:108:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":5271,"name":"_newURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5263,"src":"5680:7:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5270,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5674:5:23","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":5269,"name":"bytes","nodeType":"ElementaryTypeName","src":"5674:5:23","typeDescriptions":{}}},"id":5272,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5674:14:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5689:6:23","memberName":"length","nodeType":"MemberAccess","src":"5674:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":5274,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5699:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5674:26:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4a61736d696e654541543a206e6577205552492063616e6e6f7420626520656d7074792e","id":5276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5702:38:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_c9f6e1d4764a43e1875de37d341057c450497e88370e2f61aa9c76de108b9daf","typeString":"literal_string \"JasmineEAT: new URI cannot be empty.\""},"value":"JasmineEAT: new URI cannot be empty."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c9f6e1d4764a43e1875de37d341057c450497e88370e2f61aa9c76de108b9daf","typeString":"literal_string \"JasmineEAT: new URI cannot be empty.\""}],"id":5268,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5666:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5666:75:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5278,"nodeType":"ExpressionStatement","src":"5666:75:23"},{"expression":{"arguments":[{"id":5280,"name":"_newURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5263,"src":"5755:7:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5279,"name":"_setURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1504,"src":"5747:7:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory)"}},"id":5281,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5747:16:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5282,"nodeType":"ExpressionStatement","src":"5747:16:23"}]},"documentation":{"id":5261,"nodeType":"StructuredDocumentation","src":"5546:45:23","text":"@dev Update the base URI of the contract."},"functionSelector":"98cd6153","id":5284,"implemented":true,"kind":"function","modifiers":[{"id":5266,"kind":"modifierInvocation","modifierName":{"id":5265,"name":"onlyOwner","nameLocations":["5650:9:23"],"nodeType":"IdentifierPath","referencedDeclaration":151,"src":"5650:9:23"},"nodeType":"ModifierInvocation","src":"5650:9:23"}],"name":"updateTokenURI","nameLocation":"5603:14:23","nodeType":"FunctionDefinition","parameters":{"id":5264,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5263,"mutability":"mutable","name":"_newURI","nameLocation":"5632:7:23","nodeType":"VariableDeclaration","scope":5284,"src":"5618:21:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5262,"name":"string","nodeType":"ElementaryTypeName","src":"5618:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5617:23:23"},"returnParameters":{"id":5267,"nodeType":"ParameterList","parameters":[],"src":"5660:0:23"},"scope":5290,"src":"5594:174:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"constant":false,"documentation":{"id":5285,"nodeType":"StructuredDocumentation","src":"5772:105:23","text":"@dev Reserved storage gap. LINK: https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":5289,"mutability":"mutable","name":"__gap","nameLocation":"5900:5:23","nodeType":"VariableDeclaration","scope":5290,"src":"5880:25:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":5286,"name":"uint256","nodeType":"ElementaryTypeName","src":"5880:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5288,"length":{"hexValue":"3530","id":5287,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5888:2:23","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"5880:11:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":5291,"src":"1210:4698:23","usedErrors":[]}],"src":"37:5872:23"},"id":23},"src/JasmineMinter.sol":{"ast":{"absolutePath":"src/JasmineMinter.sol","exportedSymbols":{"ECDSAUpgradeable":[3542],"EIP712Upgradeable":[3692],"IERC1155Burnable":[6331],"IERC1155Mintable":[6358],"IJasmineEATExtensions":[6368],"IJasmineOracle":[6378],"JasmineMinter":[5918],"Ownable2StepUpgradeable":[105],"UUPSUpgradeable":[931]},"id":5919,"license":"BUSL-1.1","nodeType":"SourceUnit","nodes":[{"id":5292,"literals":["solidity","0.8",".17"],"nodeType":"PragmaDirective","src":"37:23:24"},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol","id":5294,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5919,"sourceUnit":106,"src":"62:115:24","symbolAliases":[{"foreign":{"id":5293,"name":"Ownable2StepUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":105,"src":"73:23:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","id":5296,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5919,"sourceUnit":932,"src":"178:104:24","symbolAliases":[{"foreign":{"id":5295,"name":"UUPSUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":931,"src":"189:15:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol","id":5298,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5919,"sourceUnit":3693,"src":"283:115:24","symbolAliases":[{"foreign":{"id":5297,"name":"EIP712Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3692,"src":"294:17:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol","id":5300,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5919,"sourceUnit":3543,"src":"399:113:24","symbolAliases":[{"foreign":{"id":5299,"name":"ECDSAUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3542,"src":"410:16:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"src/interfaces/IJasmineOracle.sol","file":"./interfaces/IJasmineOracle.sol","id":5302,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5919,"sourceUnit":6379,"src":"513:63:24","symbolAliases":[{"foreign":{"id":5301,"name":"IJasmineOracle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6378,"src":"521:14:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"src/interfaces/IERC1155Burnable.sol","file":"./interfaces/IERC1155Burnable.sol","id":5304,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5919,"sourceUnit":6332,"src":"577:67:24","symbolAliases":[{"foreign":{"id":5303,"name":"IERC1155Burnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6331,"src":"585:16:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"src/interfaces/IERC1155Mintable.sol","file":"./interfaces/IERC1155Mintable.sol","id":5306,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5919,"sourceUnit":6359,"src":"645:67:24","symbolAliases":[{"foreign":{"id":5305,"name":"IERC1155Mintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6358,"src":"653:16:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"src/interfaces/IJasmineEATExtensions.sol","file":"./interfaces/IJasmineEATExtensions.sol","id":5308,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5919,"sourceUnit":6369,"src":"713:77:24","symbolAliases":[{"foreign":{"id":5307,"name":"IJasmineEATExtensions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6368,"src":"721:21:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5310,"name":"Ownable2StepUpgradeable","nameLocations":["1140:23:24"],"nodeType":"IdentifierPath","referencedDeclaration":105,"src":"1140:23:24"},"id":5311,"nodeType":"InheritanceSpecifier","src":"1140:23:24"},{"baseName":{"id":5312,"name":"UUPSUpgradeable","nameLocations":["1165:15:24"],"nodeType":"IdentifierPath","referencedDeclaration":931,"src":"1165:15:24"},"id":5313,"nodeType":"InheritanceSpecifier","src":"1165:15:24"},{"baseName":{"id":5314,"name":"EIP712Upgradeable","nameLocations":["1182:17:24"],"nodeType":"IdentifierPath","referencedDeclaration":3692,"src":"1182:17:24"},"id":5315,"nodeType":"InheritanceSpecifier","src":"1182:17:24"}],"canonicalName":"JasmineMinter","contractDependencies":[],"contractKind":"contract","documentation":{"id":5309,"nodeType":"StructuredDocumentation","src":"792:322:24","text":"@dev This contract is upgradeable. You can only append new contracts to the list of bases. You cannot delete bases or reorder them.\n @notice This contract is responsible for validating that the bridge has authorized an EAT mint.\n @notice This contract also updates the oracle with EAT metadata during each mint."},"fullyImplemented":true,"id":5918,"linearizedBaseContracts":[5918,3692,931,616,247,105,237,2946,795],"name":"JasmineMinter","nameLocation":"1123:13:24","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[925],"body":{"id":5324,"nodeType":"Block","src":"1391:2:24","statements":[]},"documentation":{"id":5316,"nodeType":"StructuredDocumentation","src":"1204:120:24","text":"@dev We use the `Ownable` owner for upgrades, not the ERC1967 admin. The ERC1967 admin is not used by this contract."},"id":5325,"implemented":true,"kind":"function","modifiers":[{"id":5322,"kind":"modifierInvocation","modifierName":{"id":5321,"name":"onlyOwner","nameLocations":["1381:9:24"],"nodeType":"IdentifierPath","referencedDeclaration":151,"src":"1381:9:24"},"nodeType":"ModifierInvocation","src":"1381:9:24"}],"name":"_authorizeUpgrade","nameLocation":"1336:17:24","nodeType":"FunctionDefinition","overrides":{"id":5320,"nodeType":"OverrideSpecifier","overrides":[],"src":"1372:8:24"},"parameters":{"id":5319,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5318,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5325,"src":"1354:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5317,"name":"address","nodeType":"ElementaryTypeName","src":"1354:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1353:9:24"},"returnParameters":{"id":5323,"nodeType":"ParameterList","parameters":[],"src":"1391:0:24"},"scope":5918,"src":"1327:66:24","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":false,"functionSelector":"fc0c546a","id":5327,"mutability":"immutable","name":"token","nameLocation":"1422:5:24","nodeType":"VariableDeclaration","scope":5918,"src":"1397:30:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5326,"name":"address","nodeType":"ElementaryTypeName","src":"1397:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"functionSelector":"7dc0d1d0","id":5329,"mutability":"immutable","name":"oracle","nameLocation":"1456:6:24","nodeType":"VariableDeclaration","scope":5918,"src":"1431:31:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5328,"name":"address","nodeType":"ElementaryTypeName","src":"1431:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"body":{"id":5344,"nodeType":"Block","src":"1512:47:24","statements":[{"expression":{"id":5338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5336,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5327,"src":"1518:5:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5337,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5331,"src":"1526:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1518:14:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5339,"nodeType":"ExpressionStatement","src":"1518:14:24"},{"expression":{"id":5342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5340,"name":"oracle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5329,"src":"1538:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5341,"name":"_oracle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5333,"src":"1547:7:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1538:16:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5343,"nodeType":"ExpressionStatement","src":"1538:16:24"}]},"id":5345,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5331,"mutability":"mutable","name":"_token","nameLocation":"1487:6:24","nodeType":"VariableDeclaration","scope":5345,"src":"1479:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5330,"name":"address","nodeType":"ElementaryTypeName","src":"1479:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5333,"mutability":"mutable","name":"_oracle","nameLocation":"1503:7:24","nodeType":"VariableDeclaration","scope":5345,"src":"1495:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5332,"name":"address","nodeType":"ElementaryTypeName","src":"1495:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1478:33:24"},"returnParameters":{"id":5335,"nodeType":"ParameterList","parameters":[],"src":"1512:0:24"},"scope":5918,"src":"1467:92:24","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"constant":false,"documentation":{"id":5346,"nodeType":"StructuredDocumentation","src":"1563:148:24","text":"@dev This is the wallet/EOA address that authorizes minting new EATs. This is a separate authority from the right to upgrade protocol contracts."},"functionSelector":"e78cea92","id":5348,"mutability":"mutable","name":"bridge","nameLocation":"1729:6:24","nodeType":"VariableDeclaration","scope":5918,"src":"1714:21:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5347,"name":"address","nodeType":"ElementaryTypeName","src":"1714:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"anonymous":false,"eventSelector":"9775531310b2880b61484ed85cbb0b491c8fde3a07f289c63b92551782794497","id":5352,"name":"BridgeChanged","nameLocation":"1746:13:24","nodeType":"EventDefinition","parameters":{"id":5351,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5350,"indexed":true,"mutability":"mutable","name":"newBridge","nameLocation":"1776:9:24","nodeType":"VariableDeclaration","scope":5352,"src":"1760:25:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5349,"name":"address","nodeType":"ElementaryTypeName","src":"1760:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1759:27:24"},"src":"1740:47:24"},{"body":{"id":5368,"nodeType":"Block","src":"1940:64:24","statements":[{"expression":{"id":5362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5360,"name":"bridge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5348,"src":"1946:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5361,"name":"newBridge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5355,"src":"1955:9:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1946:18:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5363,"nodeType":"ExpressionStatement","src":"1946:18:24"},{"eventCall":{"arguments":[{"id":5365,"name":"newBridge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5355,"src":"1989:9:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5364,"name":"BridgeChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5352,"src":"1975:13:24","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":5366,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1975:24:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5367,"nodeType":"EmitStatement","src":"1970:29:24"}]},"documentation":{"id":5353,"nodeType":"StructuredDocumentation","src":"1791:89:24","text":"@notice When the bridge wallet/EOA is migrated, the owner updates the bridge address."},"functionSelector":"8dd14802","id":5369,"implemented":true,"kind":"function","modifiers":[{"id":5358,"kind":"modifierInvocation","modifierName":{"id":5357,"name":"onlyOwner","nameLocations":["1930:9:24"],"nodeType":"IdentifierPath","referencedDeclaration":151,"src":"1930:9:24"},"nodeType":"ModifierInvocation","src":"1930:9:24"}],"name":"setBridge","nameLocation":"1892:9:24","nodeType":"FunctionDefinition","parameters":{"id":5356,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5355,"mutability":"mutable","name":"newBridge","nameLocation":"1910:9:24","nodeType":"VariableDeclaration","scope":5369,"src":"1902:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5354,"name":"address","nodeType":"ElementaryTypeName","src":"1902:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1901:19:24"},"returnParameters":{"id":5359,"nodeType":"ParameterList","parameters":[],"src":"1940:0:24"},"scope":5918,"src":"1883:121:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"constant":false,"documentation":{"id":5370,"nodeType":"StructuredDocumentation","src":"2008:86:24","text":"@dev This is the EIP712 domain name. It is exposed here for ease of introspection."},"functionSelector":"06fdde03","id":5372,"mutability":"mutable","name":"name","nameLocation":"2111:4:24","nodeType":"VariableDeclaration","scope":5918,"src":"2097:18:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":5371,"name":"string","nodeType":"ElementaryTypeName","src":"2097:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"public"},{"constant":false,"documentation":{"id":5373,"nodeType":"StructuredDocumentation","src":"2119:89:24","text":"@dev This is the EIP712 domain version. It is exposed here for ease of introspection."},"functionSelector":"54fd4d50","id":5375,"mutability":"mutable","name":"version","nameLocation":"2225:7:24","nodeType":"VariableDeclaration","scope":5918,"src":"2211:21:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":5374,"name":"string","nodeType":"ElementaryTypeName","src":"2211:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"public"},{"constant":false,"documentation":{"id":5376,"nodeType":"StructuredDocumentation","src":"2237:309:24","text":"@notice Whether a particular nonce has been used to prevent replay.\n @dev This contract uses non-sequential nonces so that multiple mint authorizations can be issued concurrently. The downside to this approach is that it is slightly more involved to invalidate a nonce that has not yet been consumed."},"functionSelector":"10dbebce","id":5380,"mutability":"mutable","name":"consumedNonces","nameLocation":"2581:14:24","nodeType":"VariableDeclaration","scope":5918,"src":"2549:46:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"typeName":{"id":5379,"keyType":{"id":5377,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2557:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2549:24:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"valueType":{"id":5378,"name":"bool","nodeType":"ElementaryTypeName","src":"2568:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"body":{"id":5389,"nodeType":"Block","src":"2757:38:24","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5386,"name":"_domainSeparatorV4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3625,"src":"2770:18:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":5387,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2770:20:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":5385,"id":5388,"nodeType":"Return","src":"2763:27:24"}]},"documentation":{"id":5381,"nodeType":"StructuredDocumentation","src":"2600:94:24","text":"@notice This is the EIP712 domain separator. It is exposed here for ease of introspection."},"functionSelector":"3644e515","id":5390,"implemented":true,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"2706:16:24","nodeType":"FunctionDefinition","parameters":{"id":5382,"nodeType":"ParameterList","parameters":[],"src":"2722:2:24"},"returnParameters":{"id":5385,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5384,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5390,"src":"2748:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5383,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2748:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2747:9:24"},"scope":5918,"src":"2697:98:24","stateMutability":"view","virtual":false,"visibility":"external"},{"constant":true,"functionSelector":"f76fc35e","id":5395,"mutability":"constant","name":"MINT_TYPEHASH","nameLocation":"2869:13:24","nodeType":"VariableDeclaration","scope":5918,"src":"2845:176:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5391,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2845:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"4d696e74417574686f72697a6174696f6e2861646472657373206d696e7465722c75696e743235362069642c75696e7432353620616d6f756e742c6279746573206f7261636c65446174612c75696e7432353620646561646c696e652c62797465733332206e6f6e636529","id":5393,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2906:109:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_7ed266a150d7268b399e18c9036ad7ff35a4bf8f1ddf162234a3684916e16dc8","typeString":"literal_string \"MintAuthorization(address minter,uint256 id,uint256 amount,bytes oracleData,uint256 deadline,bytes32 nonce)\""},"value":"MintAuthorization(address minter,uint256 id,uint256 amount,bytes oracleData,uint256 deadline,bytes32 nonce)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_7ed266a150d7268b399e18c9036ad7ff35a4bf8f1ddf162234a3684916e16dc8","typeString":"literal_string \"MintAuthorization(address minter,uint256 id,uint256 amount,bytes oracleData,uint256 deadline,bytes32 nonce)\""}],"id":5392,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2889:9:24","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5394,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2889:132:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"b3c9ed59","id":5400,"mutability":"constant","name":"MINTBATCH_TYPEHASH","nameLocation":"3049:18:24","nodeType":"VariableDeclaration","scope":5918,"src":"3025:195:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5396,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3025:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"4d696e744261746368417574686f72697a6174696f6e2861646472657373206d696e7465722c75696e743235365b5d206964732c75696e743235365b5d20616d6f756e74732c62797465735b5d206f7261636c6544617461732c75696e7432353620646561646c696e652c62797465733332206e6f6e636529","id":5398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3091:123:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_47b77ff24f11d889436314cd63fdefeb0b0f9531da691f5627f546c47e5f002c","typeString":"literal_string \"MintBatchAuthorization(address minter,uint256[] ids,uint256[] amounts,bytes[] oracleDatas,uint256 deadline,bytes32 nonce)\""},"value":"MintBatchAuthorization(address minter,uint256[] ids,uint256[] amounts,bytes[] oracleDatas,uint256 deadline,bytes32 nonce)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_47b77ff24f11d889436314cd63fdefeb0b0f9531da691f5627f546c47e5f002c","typeString":"literal_string \"MintBatchAuthorization(address minter,uint256[] ids,uint256[] amounts,bytes[] oracleDatas,uint256 deadline,bytes32 nonce)\""}],"id":5397,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3074:9:24","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5399,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3074:146:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"ce89a040","id":5405,"mutability":"constant","name":"CONSUMENONCE_TYPEHASH","nameLocation":"3248:21:24","nodeType":"VariableDeclaration","scope":5918,"src":"3224:92:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5401,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3224:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"436f6e73756d654e6f6e63652862797465733332206e6f6e636529","id":5403,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3286:29:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_b0426304b718d58e27f05888d480cc1c9c956afaab3ba8d45afcce29f30d6448","typeString":"literal_string \"ConsumeNonce(bytes32 nonce)\""},"value":"ConsumeNonce(bytes32 nonce)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_b0426304b718d58e27f05888d480cc1c9c956afaab3ba8d45afcce29f30d6448","typeString":"literal_string \"ConsumeNonce(bytes32 nonce)\""}],"id":5402,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3276:9:24","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3276:40:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"body":{"id":5448,"nodeType":"Block","src":"3494:268:24","statements":[{"expression":{"arguments":[{"id":5421,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5413,"src":"3519:12:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5420,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[77],"referencedDeclaration":77,"src":"3500:18:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":5422,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3500:32:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5423,"nodeType":"ExpressionStatement","src":"3500:32:24"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5424,"name":"__UUPSUpgradeable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":813,"src":"3564:22:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":5425,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3564:24:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5426,"nodeType":"ExpressionStatement","src":"3564:24:24"},{"expression":{"arguments":[{"id":5428,"name":"initialName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5407,"src":"3608:11:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":5429,"name":"initialVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5409,"src":"3621:14:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5427,"name":"__EIP712_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3574,"src":"3594:13:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory,string memory)"}},"id":5430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3594:42:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5431,"nodeType":"ExpressionStatement","src":"3594:42:24"},{"expression":{"id":5434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5432,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5372,"src":"3642:4:24","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5433,"name":"initialName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5407,"src":"3649:11:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"3642:18:24","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":5435,"nodeType":"ExpressionStatement","src":"3642:18:24"},{"expression":{"id":5438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5436,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5375,"src":"3666:7:24","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5437,"name":"initialVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5409,"src":"3676:14:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"3666:24:24","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":5439,"nodeType":"ExpressionStatement","src":"3666:24:24"},{"expression":{"id":5442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5440,"name":"bridge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5348,"src":"3696:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5441,"name":"initialBridge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5411,"src":"3705:13:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3696:22:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5443,"nodeType":"ExpressionStatement","src":"3696:22:24"},{"eventCall":{"arguments":[{"id":5445,"name":"initialBridge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5411,"src":"3743:13:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5444,"name":"BridgeChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5352,"src":"3729:13:24","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":5446,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3729:28:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5447,"nodeType":"EmitStatement","src":"3724:33:24"}]},"functionSelector":"8f15b414","id":5449,"implemented":true,"kind":"function","modifiers":[{"id":5416,"kind":"modifierInvocation","modifierName":{"id":5415,"name":"initializer","nameLocations":["3472:11:24"],"nodeType":"IdentifierPath","referencedDeclaration":697,"src":"3472:11:24"},"nodeType":"ModifierInvocation","src":"3472:11:24"},{"id":5418,"kind":"modifierInvocation","modifierName":{"id":5417,"name":"onlyProxy","nameLocations":["3484:9:24"],"nodeType":"IdentifierPath","referencedDeclaration":849,"src":"3484:9:24"},"nodeType":"ModifierInvocation","src":"3484:9:24"}],"name":"initialize","nameLocation":"3330:10:24","nodeType":"FunctionDefinition","parameters":{"id":5414,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5407,"mutability":"mutable","name":"initialName","nameLocation":"3360:11:24","nodeType":"VariableDeclaration","scope":5449,"src":"3346:25:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5406,"name":"string","nodeType":"ElementaryTypeName","src":"3346:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5409,"mutability":"mutable","name":"initialVersion","nameLocation":"3391:14:24","nodeType":"VariableDeclaration","scope":5449,"src":"3377:28:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5408,"name":"string","nodeType":"ElementaryTypeName","src":"3377:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5411,"mutability":"mutable","name":"initialBridge","nameLocation":"3419:13:24","nodeType":"VariableDeclaration","scope":5449,"src":"3411:21:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5410,"name":"address","nodeType":"ElementaryTypeName","src":"3411:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5413,"mutability":"mutable","name":"initialOwner","nameLocation":"3446:12:24","nodeType":"VariableDeclaration","scope":5449,"src":"3438:20:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5412,"name":"address","nodeType":"ElementaryTypeName","src":"3438:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3340:122:24"},"returnParameters":{"id":5419,"nodeType":"ParameterList","parameters":[],"src":"3494:0:24"},"scope":5918,"src":"3321:441:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"anonymous":false,"eventSelector":"70cd0c14252edef0440009634a4e86036a1747c9fbe7e4c2c05b8b62f9c410e2","id":5453,"name":"NonceConsumed","nameLocation":"3772:13:24","nodeType":"EventDefinition","parameters":{"id":5452,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5451,"indexed":true,"mutability":"mutable","name":"nonce","nameLocation":"3802:5:24","nodeType":"VariableDeclaration","scope":5453,"src":"3786:21:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5450,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3786:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3785:23:24"},"src":"3766:43:24"},{"body":{"id":5554,"nodeType":"Block","src":"5617:842:24","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5474,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"5659:5:24","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":5475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5665:9:24","memberName":"timestamp","nodeType":"MemberAccess","src":"5659:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":5476,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5466,"src":"5678:8:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5659:27:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4a61736d696e654d696e7465723a2065787069726564","id":5478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5688:24:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_fae1d53a06674f782f7e6c9acc836dfc0f6ccd86af9201cd196e6ea6361131e5","typeString":"literal_string \"JasmineMinter: expired\""},"value":"JasmineMinter: expired"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fae1d53a06674f782f7e6c9acc836dfc0f6ccd86af9201cd196e6ea6361131e5","typeString":"literal_string \"JasmineMinter: expired\""}],"id":5473,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5651:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5479,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5651:62:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5480,"nodeType":"ExpressionStatement","src":"5651:62:24"},{"assignments":[5482],"declarations":[{"constant":false,"id":5482,"mutability":"mutable","name":"structHash","nameLocation":"5761:10:24","nodeType":"VariableDeclaration","scope":5554,"src":"5753:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5481,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5753:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":5498,"initialValue":{"arguments":[{"arguments":[{"id":5486,"name":"MINT_TYPEHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5395,"src":"5802:13:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":5487,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2931,"src":"5817:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5488,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5817:12:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5489,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5458,"src":"5831:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5490,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5460,"src":"5835:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":5492,"name":"oracleData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5464,"src":"5853:10:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5491,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"5843:9:24","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5493,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5843:21:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5494,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5466,"src":"5866:8:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5495,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5468,"src":"5876:5:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":5484,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5791:3:24","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5485,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5795:6:24","memberName":"encode","nodeType":"MemberAccess","src":"5791:10:24","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":5496,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5791:91:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5483,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"5774:9:24","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5497,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5774:114:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5753:135:24"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":5503,"name":"structHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5482,"src":"5951:10:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5502,"name":"_hashTypedDataV4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3668,"src":"5934:16:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":5504,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5934:28:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5505,"name":"sig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5470,"src":"5964:3:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":5500,"name":"ECDSAUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3542,"src":"5909:16:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSAUpgradeable_$3542_$","typeString":"type(library ECDSAUpgradeable)"}},"id":5501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5926:7:24","memberName":"recover","nodeType":"MemberAccess","referencedDeclaration":3308,"src":"5909:24:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$","typeString":"function (bytes32,bytes memory) pure returns (address)"}},"id":5506,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5909:59:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5507,"name":"bridge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5348,"src":"5972:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5909:69:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4a61736d696e654d696e7465723a20626164207369676e61747572652f77726f6e67207369676e6572","id":5509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5986:43:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_2f2c7f3aa71c7d1af89585f8c6fe06b516954bdd914e34b10b05f2f1e4d63ed8","typeString":"literal_string \"JasmineMinter: bad signature/wrong signer\""},"value":"JasmineMinter: bad signature/wrong signer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2f2c7f3aa71c7d1af89585f8c6fe06b516954bdd914e34b10b05f2f1e4d63ed8","typeString":"literal_string \"JasmineMinter: bad signature/wrong signer\""}],"id":5499,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5894:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5510,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5894:141:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5511,"nodeType":"ExpressionStatement","src":"5894:141:24"},{"expression":{"arguments":[{"id":5516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6072:22:24","subExpression":{"baseExpression":{"id":5513,"name":"consumedNonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5380,"src":"6073:14:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":5515,"indexExpression":{"id":5514,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5468,"src":"6088:5:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6073:21:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4a61736d696e654d696e7465723a206e6f6e6365207265706c6179","id":5517,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6096:29:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_151cbd16c266184352ebde6b137391339f946268ebac138a34bbf5fc5cbfac2c","typeString":"literal_string \"JasmineMinter: nonce replay\""},"value":"JasmineMinter: nonce replay"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_151cbd16c266184352ebde6b137391339f946268ebac138a34bbf5fc5cbfac2c","typeString":"literal_string \"JasmineMinter: nonce replay\""}],"id":5512,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6064:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5518,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6064:62:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5519,"nodeType":"ExpressionStatement","src":"6064:62:24"},{"expression":{"id":5524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5520,"name":"consumedNonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5380,"src":"6132:14:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":5522,"indexExpression":{"id":5521,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5468,"src":"6147:5:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6132:21:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":5523,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6156:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"6132:28:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5525,"nodeType":"ExpressionStatement","src":"6132:28:24"},{"eventCall":{"arguments":[{"id":5527,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5468,"src":"6185:5:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5526,"name":"NonceConsumed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5453,"src":"6171:13:24","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$returns$__$","typeString":"function (bytes32)"}},"id":5528,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6171:20:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5529,"nodeType":"EmitStatement","src":"6166:25:24"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5530,"name":"oracleData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5464,"src":"6295:10:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6306:6:24","memberName":"length","nodeType":"MemberAccess","src":"6295:17:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":5532,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6316:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6295:22:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5543,"nodeType":"IfStatement","src":"6291:94:24","trueBody":{"id":5542,"nodeType":"Block","src":"6319:66:24","statements":[{"expression":{"arguments":[{"id":5538,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5458,"src":"6363:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5539,"name":"oracleData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5464,"src":"6367:10:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":5535,"name":"oracle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5329,"src":"6342:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5534,"name":"IJasmineOracle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6378,"src":"6327:14:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IJasmineOracle_$6378_$","typeString":"type(contract IJasmineOracle)"}},"id":5536,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6327:22:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IJasmineOracle_$6378","typeString":"contract IJasmineOracle"}},"id":5537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6350:12:24","memberName":"updateSeries","nodeType":"MemberAccess","referencedDeclaration":6377,"src":"6327:35:24","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (uint256,bytes memory) external"}},"id":5540,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6327:51:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5541,"nodeType":"ExpressionStatement","src":"6327:51:24"}]}},{"expression":{"arguments":[{"id":5548,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5456,"src":"6419:8:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5549,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5458,"src":"6429:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5550,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5460,"src":"6433:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5551,"name":"transferData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5462,"src":"6441:12:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":5545,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5327,"src":"6407:5:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5544,"name":"IERC1155Mintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6358,"src":"6390:16:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Mintable_$6358_$","typeString":"type(contract IERC1155Mintable)"}},"id":5546,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6390:23:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$6358","typeString":"contract IERC1155Mintable"}},"id":5547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6414:4:24","memberName":"mint","nodeType":"MemberAccess","referencedDeclaration":6344,"src":"6390:28:24","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,uint256,bytes memory) external"}},"id":5552,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6390:64:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5553,"nodeType":"ExpressionStatement","src":"6390:64:24"}]},"documentation":{"id":5454,"nodeType":"StructuredDocumentation","src":"3813:1593:24","text":"@notice Mint a new EAT.\n @notice Only callable by the address specified in the EIP712 mint authoriztaion.\n @param receiver The initial owner of the newly-minted EATs. If this is a contract, it must support IERC1155Receiver.onERC1155Received. Failure of the receiver callback does not invalidate the nonce. The receiver is NOT part of the EIP712 minting authorization.\n @param id The identifier of the EAT series to mint. See JasmineOracle for the constraints on this value. The id is part of the EIP712 minting authorization.\n @param amount The quantity of EATs to mint. The amount is part of the EIP712 minting authorization.\n @param transferData Additional argument to be passed to `receiver`'s callback. Ignored if `receiver` is not a contract. The transferData is NOT part of the EIP712 minting authorization.\n @param oracleData Authenticated EAT metadata passed to the oracle. Oracle updates are idempotent. The oracleData is part of the EIP712 minting authorization.\n @param deadline The latest timestamp at which the mint authorization remains valid. After this time, attempts to mint will revert. The deadline is part of the EIP712 minting authorization.\n @param nonce Used to prevent signature replay. The nonce is part of the EIP712 minting authorization. If consumedNonces(nonce), the minting authorization is invalid.\n @param sig Encoded ECDSA signature by `bridge` over the EIP712 minting authorization. Formed as the 65-byte concatenation of r, s, and v in that order. s must be in the lower half of the curve. v must be 27 or 28."},"functionSelector":"36b09227","id":5555,"implemented":true,"kind":"function","modifiers":[],"name":"mint","nameLocation":"5418:4:24","nodeType":"FunctionDefinition","parameters":{"id":5471,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5456,"mutability":"mutable","name":"receiver","nameLocation":"5436:8:24","nodeType":"VariableDeclaration","scope":5555,"src":"5428:16:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5455,"name":"address","nodeType":"ElementaryTypeName","src":"5428:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5458,"mutability":"mutable","name":"id","nameLocation":"5458:2:24","nodeType":"VariableDeclaration","scope":5555,"src":"5450:10:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5457,"name":"uint256","nodeType":"ElementaryTypeName","src":"5450:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5460,"mutability":"mutable","name":"amount","nameLocation":"5474:6:24","nodeType":"VariableDeclaration","scope":5555,"src":"5466:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5459,"name":"uint256","nodeType":"ElementaryTypeName","src":"5466:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5462,"mutability":"mutable","name":"transferData","nameLocation":"5499:12:24","nodeType":"VariableDeclaration","scope":5555,"src":"5486:25:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5461,"name":"bytes","nodeType":"ElementaryTypeName","src":"5486:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5464,"mutability":"mutable","name":"oracleData","nameLocation":"5530:10:24","nodeType":"VariableDeclaration","scope":5555,"src":"5517:23:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5463,"name":"bytes","nodeType":"ElementaryTypeName","src":"5517:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5466,"mutability":"mutable","name":"deadline","nameLocation":"5554:8:24","nodeType":"VariableDeclaration","scope":5555,"src":"5546:16:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5465,"name":"uint256","nodeType":"ElementaryTypeName","src":"5546:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5468,"mutability":"mutable","name":"nonce","nameLocation":"5576:5:24","nodeType":"VariableDeclaration","scope":5555,"src":"5568:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5467,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5568:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5470,"mutability":"mutable","name":"sig","nameLocation":"5600:3:24","nodeType":"VariableDeclaration","scope":5555,"src":"5587:16:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5469,"name":"bytes","nodeType":"ElementaryTypeName","src":"5587:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5422:185:24"},"returnParameters":{"id":5472,"nodeType":"ParameterList","parameters":[],"src":"5617:0:24"},"scope":5918,"src":"5409:1050:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5564,"nodeType":"Block","src":"6542:100:24","statements":[{"AST":{"nodeType":"YulBlock","src":"6573:65:24","statements":[{"nodeType":"YulAssignment","src":"6581:51:24","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6605:4:24","type":"","value":"0x20"},{"name":"a","nodeType":"YulIdentifier","src":"6611:1:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6601:3:24"},"nodeType":"YulFunctionCall","src":"6601:12:24"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6619:1:24","type":"","value":"5"},{"arguments":[{"name":"a","nodeType":"YulIdentifier","src":"6628:1:24"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6622:5:24"},"nodeType":"YulFunctionCall","src":"6622:8:24"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6615:3:24"},"nodeType":"YulFunctionCall","src":"6615:16:24"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"6591:9:24"},"nodeType":"YulFunctionCall","src":"6591:41:24"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"6581:6:24"}]}]},"evmVersion":"london","externalReferences":[{"declaration":5558,"isOffset":false,"isSlot":false,"src":"6611:1:24","valueSize":1},{"declaration":5558,"isOffset":false,"isSlot":false,"src":"6628:1:24","valueSize":1},{"declaration":5561,"isOffset":false,"isSlot":false,"src":"6581:6:24","valueSize":1}],"flags":["memory-safe"],"id":5563,"nodeType":"InlineAssembly","src":"6548:90:24"}]},"id":5565,"implemented":true,"kind":"function","modifiers":[],"name":"_hashArray","nameLocation":"6472:10:24","nodeType":"FunctionDefinition","parameters":{"id":5559,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5558,"mutability":"mutable","name":"a","nameLocation":"6500:1:24","nodeType":"VariableDeclaration","scope":5565,"src":"6483:18:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5556,"name":"uint256","nodeType":"ElementaryTypeName","src":"6483:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5557,"nodeType":"ArrayTypeName","src":"6483:9:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6482:20:24"},"returnParameters":{"id":5562,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5561,"mutability":"mutable","name":"result","nameLocation":"6534:6:24","nodeType":"VariableDeclaration","scope":5565,"src":"6526:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5560,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6526:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6525:16:24"},"scope":5918,"src":"6463:179:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5739,"nodeType":"Block","src":"8489:1620:24","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5589,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5571,"src":"8607:3:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8611:6:24","memberName":"length","nodeType":"MemberAccess","src":"8607:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":5591,"name":"oracleDatas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5579,"src":"8621:11:24","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":5592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8633:6:24","memberName":"length","nodeType":"MemberAccess","src":"8621:18:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8607:32:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4a61736d696e654d696e7465723a2069647320616e64206f7261636c654461746173206c656e677468206d69736d61746368","id":5594,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8647:52:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_9255a47dfbd5a3ccd82274f7fbcd278a7de4302eaa96aac250ed7ff8d0c1772f","typeString":"literal_string \"JasmineMinter: ids and oracleDatas length mismatch\""},"value":"JasmineMinter: ids and oracleDatas length mismatch"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9255a47dfbd5a3ccd82274f7fbcd278a7de4302eaa96aac250ed7ff8d0c1772f","typeString":"literal_string \"JasmineMinter: ids and oracleDatas length mismatch\""}],"id":5588,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8592:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5595,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8592:113:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5596,"nodeType":"ExpressionStatement","src":"8592:113:24"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5598,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"8747:5:24","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":5599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8753:9:24","memberName":"timestamp","nodeType":"MemberAccess","src":"8747:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":5600,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5581,"src":"8766:8:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8747:27:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4a61736d696e654d696e7465723a2065787069726564","id":5602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8776:24:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_fae1d53a06674f782f7e6c9acc836dfc0f6ccd86af9201cd196e6ea6361131e5","typeString":"literal_string \"JasmineMinter: expired\""},"value":"JasmineMinter: expired"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fae1d53a06674f782f7e6c9acc836dfc0f6ccd86af9201cd196e6ea6361131e5","typeString":"literal_string \"JasmineMinter: expired\""}],"id":5597,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8739:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8739:62:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5604,"nodeType":"ExpressionStatement","src":"8739:62:24"},{"assignments":[5609],"declarations":[{"constant":false,"id":5609,"mutability":"mutable","name":"oracleDataHashes","nameLocation":"9023:16:24","nodeType":"VariableDeclaration","scope":5739,"src":"9006:33:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5607,"name":"uint256","nodeType":"ElementaryTypeName","src":"9006:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5608,"nodeType":"ArrayTypeName","src":"9006:9:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":5616,"initialValue":{"arguments":[{"expression":{"id":5613,"name":"oracleDatas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5579,"src":"9056:11:24","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":5614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9068:6:24","memberName":"length","nodeType":"MemberAccess","src":"9056:18:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5612,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"9042:13:24","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":5610,"name":"uint256","nodeType":"ElementaryTypeName","src":"9046:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5611,"nodeType":"ArrayTypeName","src":"9046:9:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":5615,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9042:33:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"9006:69:24"},{"body":{"id":5640,"nodeType":"Block","src":"9126:71:24","statements":[{"expression":{"id":5638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5627,"name":"oracleDataHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5609,"src":"9134:16:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5629,"indexExpression":{"id":5628,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5618,"src":"9151:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9134:19:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"baseExpression":{"id":5633,"name":"oracleDatas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5579,"src":"9174:11:24","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":5635,"indexExpression":{"id":5634,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5618,"src":"9186:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9174:14:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5632,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"9164:9:24","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5636,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9164:25:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5631,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9156:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5630,"name":"uint256","nodeType":"ElementaryTypeName","src":"9156:7:24","typeDescriptions":{}}},"id":5637,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9156:34:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9134:56:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5639,"nodeType":"ExpressionStatement","src":"9134:56:24"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5620,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5618,"src":"9097:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":5621,"name":"oracleDatas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5579,"src":"9101:11:24","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":5622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9113:6:24","memberName":"length","nodeType":"MemberAccess","src":"9101:18:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9097:22:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5641,"initializationExpression":{"assignments":[5618],"declarations":[{"constant":false,"id":5618,"mutability":"mutable","name":"i","nameLocation":"9094:1:24","nodeType":"VariableDeclaration","scope":5641,"src":"9086:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5617,"name":"uint256","nodeType":"ElementaryTypeName","src":"9086:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5619,"nodeType":"VariableDeclarationStatement","src":"9086:9:24"},"loopExpression":{"expression":{"id":5625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"9121:3:24","subExpression":{"id":5624,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5618,"src":"9121:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5626,"nodeType":"ExpressionStatement","src":"9121:3:24"},"nodeType":"ForStatement","src":"9081:116:24"},{"assignments":[5643],"declarations":[{"constant":false,"id":5643,"mutability":"mutable","name":"structHash","nameLocation":"9210:10:24","nodeType":"VariableDeclaration","scope":5739,"src":"9202:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5642,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9202:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":5663,"initialValue":{"arguments":[{"arguments":[{"id":5647,"name":"MINTBATCH_TYPEHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5400,"src":"9260:18:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":5648,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2931,"src":"9288:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5649,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9288:12:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":5651,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5571,"src":"9321:3:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":5650,"name":"_hashArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5565,"src":"9310:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_uint256_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (uint256[] memory) pure returns (bytes32)"}},"id":5652,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9310:15:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":5654,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5574,"src":"9346:7:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":5653,"name":"_hashArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5565,"src":"9335:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_uint256_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (uint256[] memory) pure returns (bytes32)"}},"id":5655,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9335:19:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":5657,"name":"oracleDataHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5609,"src":"9375:16:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":5656,"name":"_hashArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5565,"src":"9364:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_uint256_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (uint256[] memory) pure returns (bytes32)"}},"id":5658,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9364:28:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5659,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5581,"src":"9402:8:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5660,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5583,"src":"9420:5:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":5645,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"9240:3:24","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5646,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9244:6:24","memberName":"encode","nodeType":"MemberAccess","src":"9240:10:24","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":5661,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9240:193:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5644,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"9223:9:24","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5662,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9223:216:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"9202:237:24"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":5668,"name":"structHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5643,"src":"9502:10:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5667,"name":"_hashTypedDataV4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3668,"src":"9485:16:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":5669,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9485:28:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5670,"name":"sig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5585,"src":"9515:3:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":5665,"name":"ECDSAUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3542,"src":"9460:16:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSAUpgradeable_$3542_$","typeString":"type(library ECDSAUpgradeable)"}},"id":5666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9477:7:24","memberName":"recover","nodeType":"MemberAccess","referencedDeclaration":3308,"src":"9460:24:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$","typeString":"function (bytes32,bytes memory) pure returns (address)"}},"id":5671,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9460:59:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5672,"name":"bridge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5348,"src":"9523:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9460:69:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4a61736d696e654d696e7465723a20626164207369676e61747572652f77726f6e67207369676e6572","id":5674,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9537:43:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_2f2c7f3aa71c7d1af89585f8c6fe06b516954bdd914e34b10b05f2f1e4d63ed8","typeString":"literal_string \"JasmineMinter: bad signature/wrong signer\""},"value":"JasmineMinter: bad signature/wrong signer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2f2c7f3aa71c7d1af89585f8c6fe06b516954bdd914e34b10b05f2f1e4d63ed8","typeString":"literal_string \"JasmineMinter: bad signature/wrong signer\""}],"id":5664,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9445:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5675,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9445:141:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5676,"nodeType":"ExpressionStatement","src":"9445:141:24"},{"expression":{"arguments":[{"id":5681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9601:22:24","subExpression":{"baseExpression":{"id":5678,"name":"consumedNonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5380,"src":"9602:14:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":5680,"indexExpression":{"id":5679,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5583,"src":"9617:5:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9602:21:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4a61736d696e654d696e7465723a206e6f6e6365207265706c6179","id":5682,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9625:29:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_151cbd16c266184352ebde6b137391339f946268ebac138a34bbf5fc5cbfac2c","typeString":"literal_string \"JasmineMinter: nonce replay\""},"value":"JasmineMinter: nonce replay"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_151cbd16c266184352ebde6b137391339f946268ebac138a34bbf5fc5cbfac2c","typeString":"literal_string \"JasmineMinter: nonce replay\""}],"id":5677,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9593:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5683,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9593:62:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5684,"nodeType":"ExpressionStatement","src":"9593:62:24"},{"expression":{"id":5689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5685,"name":"consumedNonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5380,"src":"9661:14:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":5687,"indexExpression":{"id":5686,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5583,"src":"9676:5:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9661:21:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":5688,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9685:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"9661:28:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5690,"nodeType":"ExpressionStatement","src":"9661:28:24"},{"eventCall":{"arguments":[{"id":5692,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5583,"src":"9714:5:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5691,"name":"NonceConsumed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5453,"src":"9700:13:24","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$returns$__$","typeString":"function (bytes32)"}},"id":5693,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9700:20:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5694,"nodeType":"EmitStatement","src":"9695:25:24"},{"body":{"id":5727,"nodeType":"Block","src":"9864:164:24","statements":[{"assignments":[5706],"declarations":[{"constant":false,"id":5706,"mutability":"mutable","name":"oracleData","nameLocation":"9885:10:24","nodeType":"VariableDeclaration","scope":5727,"src":"9872:23:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5705,"name":"bytes","nodeType":"ElementaryTypeName","src":"9872:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":5710,"initialValue":{"baseExpression":{"id":5707,"name":"oracleDatas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5579,"src":"9898:11:24","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":5709,"indexExpression":{"id":5708,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5696,"src":"9910:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9898:14:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"9872:40:24"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5711,"name":"oracleData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5706,"src":"9924:10:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9935:6:24","memberName":"length","nodeType":"MemberAccess","src":"9924:17:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":5713,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9945:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9924:22:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5726,"nodeType":"IfStatement","src":"9920:102:24","trueBody":{"id":5725,"nodeType":"Block","src":"9948:74:24","statements":[{"expression":{"arguments":[{"baseExpression":{"id":5719,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5571,"src":"9994:3:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5721,"indexExpression":{"id":5720,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5696,"src":"9998:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9994:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5722,"name":"oracleData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5706,"src":"10002:10:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":5716,"name":"oracle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5329,"src":"9973:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5715,"name":"IJasmineOracle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6378,"src":"9958:14:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IJasmineOracle_$6378_$","typeString":"type(contract IJasmineOracle)"}},"id":5717,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9958:22:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IJasmineOracle_$6378","typeString":"contract IJasmineOracle"}},"id":5718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9981:12:24","memberName":"updateSeries","nodeType":"MemberAccess","referencedDeclaration":6377,"src":"9958:35:24","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (uint256,bytes memory) external"}},"id":5723,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9958:55:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5724,"nodeType":"ExpressionStatement","src":"9958:55:24"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5698,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5696,"src":"9835:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":5699,"name":"oracleDatas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5579,"src":"9839:11:24","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":5700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9851:6:24","memberName":"length","nodeType":"MemberAccess","src":"9839:18:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9835:22:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5728,"initializationExpression":{"assignments":[5696],"declarations":[{"constant":false,"id":5696,"mutability":"mutable","name":"i","nameLocation":"9832:1:24","nodeType":"VariableDeclaration","scope":5728,"src":"9824:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5695,"name":"uint256","nodeType":"ElementaryTypeName","src":"9824:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5697,"nodeType":"VariableDeclarationStatement","src":"9824:9:24"},"loopExpression":{"expression":{"id":5703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"9859:3:24","subExpression":{"id":5702,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5696,"src":"9859:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5704,"nodeType":"ExpressionStatement","src":"9859:3:24"},"nodeType":"ForStatement","src":"9819:209:24"},{"expression":{"arguments":[{"id":5733,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5568,"src":"10067:8:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5734,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5571,"src":"10077:3:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":5735,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5574,"src":"10082:7:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":5736,"name":"transferData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5576,"src":"10091:12:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":5730,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5327,"src":"10050:5:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5729,"name":"IERC1155Mintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6358,"src":"10033:16:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Mintable_$6358_$","typeString":"type(contract IERC1155Mintable)"}},"id":5731,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10033:23:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$6358","typeString":"contract IERC1155Mintable"}},"id":5732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10057:9:24","memberName":"mintBatch","nodeType":"MemberAccess","referencedDeclaration":6357,"src":"10033:33:24","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256[] memory,uint256[] memory,bytes memory) external"}},"id":5737,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10033:71:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5738,"nodeType":"ExpressionStatement","src":"10033:71:24"}]},"documentation":{"id":5566,"nodeType":"StructuredDocumentation","src":"6646:1604:24","text":"@notice Mint a new EAT.\n @notice Only callable by the address specified in the EIP712 mint authoriztaion.\n @param receiver The initial owner of the newly-minted EATs. If this is a contract, it must support IERC1155Receiver.onERC1155Received. Failure of the receiver callback does not invalidate the nonce. The receiver is NOT part of the EIP712 minting authorization.\n @param ids The identifiers of the EAT series to mint. See JasmineOracle for the constraints on this value. The ids are part of the EIP712 minting authorization.\n @param amounts The quantities of EATs to mint. The amounts are part of the EIP712 minting authorization.\n @param transferData Additional argument to be passed to `receiver`'s callback. Ignored if `receiver` is not a contract. The transferData is NOT part of the EIP712 minting authorization.\n @param oracleDatas Authenticated EAT metadatas passed to the oracle. Oracle updates are idempotent. The oracleData is part of the EIP712 minting authorization.\n @param deadline The latest timestamp at which the mint authorization remains valid. After this time, attempts to mint will revert. The deadline is part of the EIP712 minting authorization.\n @param nonce Used to prevent signature replay. The nonce is part of the EIP712 minting authorization. If consumedNonces(nonce), the minting authorization is invalid.\n @param sig Encoded ECDSA signature by `bridge` over the EIP712 minting authorization. Formed as the 65-byte concatenation of r, s, and v in that order. s must be in the lower half of the curve. v must be 27 or 28."},"functionSelector":"163c50ac","id":5740,"implemented":true,"kind":"function","modifiers":[],"name":"mintBatch","nameLocation":"8262:9:24","nodeType":"FunctionDefinition","parameters":{"id":5586,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5568,"mutability":"mutable","name":"receiver","nameLocation":"8285:8:24","nodeType":"VariableDeclaration","scope":5740,"src":"8277:16:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5567,"name":"address","nodeType":"ElementaryTypeName","src":"8277:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5571,"mutability":"mutable","name":"ids","nameLocation":"8316:3:24","nodeType":"VariableDeclaration","scope":5740,"src":"8299:20:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5569,"name":"uint256","nodeType":"ElementaryTypeName","src":"8299:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5570,"nodeType":"ArrayTypeName","src":"8299:9:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":5574,"mutability":"mutable","name":"amounts","nameLocation":"8342:7:24","nodeType":"VariableDeclaration","scope":5740,"src":"8325:24:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5572,"name":"uint256","nodeType":"ElementaryTypeName","src":"8325:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5573,"nodeType":"ArrayTypeName","src":"8325:9:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":5576,"mutability":"mutable","name":"transferData","nameLocation":"8368:12:24","nodeType":"VariableDeclaration","scope":5740,"src":"8355:25:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5575,"name":"bytes","nodeType":"ElementaryTypeName","src":"8355:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5579,"mutability":"mutable","name":"oracleDatas","nameLocation":"8401:11:24","nodeType":"VariableDeclaration","scope":5740,"src":"8386:26:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":5577,"name":"bytes","nodeType":"ElementaryTypeName","src":"8386:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":5578,"nodeType":"ArrayTypeName","src":"8386:7:24","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"},{"constant":false,"id":5581,"mutability":"mutable","name":"deadline","nameLocation":"8426:8:24","nodeType":"VariableDeclaration","scope":5740,"src":"8418:16:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5580,"name":"uint256","nodeType":"ElementaryTypeName","src":"8418:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5583,"mutability":"mutable","name":"nonce","nameLocation":"8448:5:24","nodeType":"VariableDeclaration","scope":5740,"src":"8440:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5582,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8440:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5585,"mutability":"mutable","name":"sig","nameLocation":"8472:3:24","nodeType":"VariableDeclaration","scope":5740,"src":"8459:16:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5584,"name":"bytes","nodeType":"ElementaryTypeName","src":"8459:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8271:208:24"},"returnParameters":{"id":5587,"nodeType":"ParameterList","parameters":[],"src":"8489:0:24"},"scope":5918,"src":"8253:1856:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5789,"nodeType":"Block","src":"10268:363:24","statements":[{"assignments":[5749],"declarations":[{"constant":false,"id":5749,"mutability":"mutable","name":"structHash","nameLocation":"10282:10:24","nodeType":"VariableDeclaration","scope":5789,"src":"10274:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5748,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10274:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":5757,"initialValue":{"arguments":[{"arguments":[{"id":5753,"name":"CONSUMENONCE_TYPEHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5405,"src":"10316:21:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5754,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5743,"src":"10339:5:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":5751,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"10305:3:24","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5752,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10309:6:24","memberName":"encode","nodeType":"MemberAccess","src":"10305:10:24","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":5755,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10305:40:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5750,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"10295:9:24","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5756,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10295:51:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"10274:72:24"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":5762,"name":"structHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5749,"src":"10409:10:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5761,"name":"_hashTypedDataV4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3668,"src":"10392:16:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":5763,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10392:28:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5764,"name":"sig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5745,"src":"10422:3:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":5759,"name":"ECDSAUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3542,"src":"10367:16:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSAUpgradeable_$3542_$","typeString":"type(library ECDSAUpgradeable)"}},"id":5760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10384:7:24","memberName":"recover","nodeType":"MemberAccess","referencedDeclaration":3308,"src":"10367:24:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$","typeString":"function (bytes32,bytes memory) pure returns (address)"}},"id":5765,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10367:59:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5766,"name":"bridge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5348,"src":"10430:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10367:69:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4a61736d696e654d696e7465723a20626164207369676e61747572652f77726f6e67207369676e6572","id":5768,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10444:43:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_2f2c7f3aa71c7d1af89585f8c6fe06b516954bdd914e34b10b05f2f1e4d63ed8","typeString":"literal_string \"JasmineMinter: bad signature/wrong signer\""},"value":"JasmineMinter: bad signature/wrong signer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2f2c7f3aa71c7d1af89585f8c6fe06b516954bdd914e34b10b05f2f1e4d63ed8","typeString":"literal_string \"JasmineMinter: bad signature/wrong signer\""}],"id":5758,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10352:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5769,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10352:141:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5770,"nodeType":"ExpressionStatement","src":"10352:141:24"},{"expression":{"arguments":[{"id":5775,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"10507:22:24","subExpression":{"baseExpression":{"id":5772,"name":"consumedNonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5380,"src":"10508:14:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":5774,"indexExpression":{"id":5773,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5743,"src":"10523:5:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10508:21:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4a61736d696e654d696e7465723a206e6f6e6365207265706c6179","id":5776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10531:29:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_151cbd16c266184352ebde6b137391339f946268ebac138a34bbf5fc5cbfac2c","typeString":"literal_string \"JasmineMinter: nonce replay\""},"value":"JasmineMinter: nonce replay"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_151cbd16c266184352ebde6b137391339f946268ebac138a34bbf5fc5cbfac2c","typeString":"literal_string \"JasmineMinter: nonce replay\""}],"id":5771,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10499:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5777,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10499:62:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5778,"nodeType":"ExpressionStatement","src":"10499:62:24"},{"expression":{"id":5783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5779,"name":"consumedNonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5380,"src":"10567:14:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":5781,"indexExpression":{"id":5780,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5743,"src":"10582:5:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10567:21:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":5782,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"10591:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"10567:28:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5784,"nodeType":"ExpressionStatement","src":"10567:28:24"},{"eventCall":{"arguments":[{"id":5786,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5743,"src":"10620:5:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5785,"name":"NonceConsumed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5453,"src":"10606:13:24","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$returns$__$","typeString":"function (bytes32)"}},"id":5787,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10606:20:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5788,"nodeType":"EmitStatement","src":"10601:25:24"}]},"documentation":{"id":5741,"nodeType":"StructuredDocumentation","src":"10113:88:24","text":"@notice Used to invalidate a nonce embedded in another EIP712 minting authorization."},"functionSelector":"e922ba79","id":5790,"implemented":true,"kind":"function","modifiers":[],"name":"consumeNonce","nameLocation":"10213:12:24","nodeType":"FunctionDefinition","parameters":{"id":5746,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5743,"mutability":"mutable","name":"nonce","nameLocation":"10234:5:24","nodeType":"VariableDeclaration","scope":5790,"src":"10226:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5742,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10226:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5745,"mutability":"mutable","name":"sig","nameLocation":"10254:3:24","nodeType":"VariableDeclaration","scope":5790,"src":"10241:16:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5744,"name":"bytes","nodeType":"ElementaryTypeName","src":"10241:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"10225:33:24"},"returnParameters":{"id":5747,"nodeType":"ParameterList","parameters":[],"src":"10268:0:24"},"scope":5918,"src":"10204:427:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"anonymous":false,"eventSelector":"422475c8264e559fa982d4f66450a9bd1d5bee42cf8a98f6e032d1715b859552","id":5800,"name":"BurnedSingle","nameLocation":"10641:12:24","nodeType":"EventDefinition","parameters":{"id":5799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5792,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"10670:5:24","nodeType":"VariableDeclaration","scope":5800,"src":"10654:21:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5791,"name":"address","nodeType":"ElementaryTypeName","src":"10654:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5794,"indexed":false,"mutability":"mutable","name":"id","nameLocation":"10685:2:24","nodeType":"VariableDeclaration","scope":5800,"src":"10677:10:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5793,"name":"uint256","nodeType":"ElementaryTypeName","src":"10677:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5796,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"10697:6:24","nodeType":"VariableDeclaration","scope":5800,"src":"10689:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5795,"name":"uint256","nodeType":"ElementaryTypeName","src":"10689:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5798,"indexed":false,"mutability":"mutable","name":"metadata","nameLocation":"10711:8:24","nodeType":"VariableDeclaration","scope":5800,"src":"10705:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5797,"name":"bytes","nodeType":"ElementaryTypeName","src":"10705:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"10653:67:24"},"src":"10635:86:24"},{"body":{"id":5841,"nodeType":"Block","src":"11542:211:24","statements":[{"expression":{"arguments":[{"id":5819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"11556:40:24","subExpression":{"arguments":[{"id":5817,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5803,"src":"11593:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5814,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5327,"src":"11579:5:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5813,"name":"IJasmineEATExtensions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6368,"src":"11557:21:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IJasmineEATExtensions_$6368_$","typeString":"type(contract IJasmineEATExtensions)"}},"id":5815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11557:28:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IJasmineEATExtensions_$6368","typeString":"contract IJasmineEATExtensions"}},"id":5816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11586:6:24","memberName":"frozen","nodeType":"MemberAccess","referencedDeclaration":6367,"src":"11557:35:24","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view external returns (bool)"}},"id":5818,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11557:39:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4a61736d696e654d696e7465723a2066726f7a656e20736572696573","id":5820,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11598:30:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_6a202c3fb661fc6d1c876b693892fa18c66d222ca913c0aa6eb0dfcf881c0e8a","typeString":"literal_string \"JasmineMinter: frozen series\""},"value":"JasmineMinter: frozen series"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6a202c3fb661fc6d1c876b693892fa18c66d222ca913c0aa6eb0dfcf881c0e8a","typeString":"literal_string \"JasmineMinter: frozen series\""}],"id":5812,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11548:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5821,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11548:81:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5822,"nodeType":"ExpressionStatement","src":"11548:81:24"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":5824,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2931,"src":"11653:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5825,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11653:12:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5826,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5803,"src":"11667:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5827,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5805,"src":"11671:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5828,"name":"metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5807,"src":"11679:8:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5823,"name":"BurnedSingle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5800,"src":"11640:12:24","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,uint256,bytes memory)"}},"id":5829,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11640:48:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5830,"nodeType":"EmitStatement","src":"11635:53:24"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":5835,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2931,"src":"11723:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5836,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11723:12:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5837,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5803,"src":"11737:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5838,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5805,"src":"11741:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5832,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5327,"src":"11711:5:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5831,"name":"IERC1155Burnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6331,"src":"11694:16:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Burnable_$6331_$","typeString":"type(contract IERC1155Burnable)"}},"id":5833,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11694:23:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$6331","typeString":"contract IERC1155Burnable"}},"id":5834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11718:4:24","memberName":"burn","nodeType":"MemberAccess","referencedDeclaration":6319,"src":"11694:28:24","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256) external"}},"id":5839,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11694:54:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5840,"nodeType":"ExpressionStatement","src":"11694:54:24"}]},"documentation":{"id":5801,"nodeType":"StructuredDocumentation","src":"10725:714:24","text":"@notice Used in both redemption and bridge-off flows.\n @dev JasmineMinter must be approved to spend the caller's EATs for the operation to succeed. JasmineMinter indirectly authenticates that the caller owns the specified amount of the specified EATs.\n @param id The series of EAT to be redeemed/bridged-off.\n @param amount The amount of EAT of the specified series to be redeemed/bridged-off.\n @param metadata Message to the bridge specifying whether to redeem or bridge-off. If the operation is a bridge-off, also specifies the destination of the EAC. JasmineMinter imposes no authentication or structure on the metadata. Malformed or otherwise invalid metadata is an unrecoverable error."},"functionSelector":"80a5a371","id":5842,"implemented":true,"kind":"function","modifiers":[{"id":5810,"kind":"modifierInvocation","modifierName":{"id":5809,"name":"onlyProxy","nameLocations":["11532:9:24"],"nodeType":"IdentifierPath","referencedDeclaration":849,"src":"11532:9:24"},"nodeType":"ModifierInvocation","src":"11532:9:24"}],"name":"burn","nameLocation":"11451:4:24","nodeType":"FunctionDefinition","parameters":{"id":5808,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5803,"mutability":"mutable","name":"id","nameLocation":"11469:2:24","nodeType":"VariableDeclaration","scope":5842,"src":"11461:10:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5802,"name":"uint256","nodeType":"ElementaryTypeName","src":"11461:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5805,"mutability":"mutable","name":"amount","nameLocation":"11485:6:24","nodeType":"VariableDeclaration","scope":5842,"src":"11477:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5804,"name":"uint256","nodeType":"ElementaryTypeName","src":"11477:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5807,"mutability":"mutable","name":"metadata","nameLocation":"11510:8:24","nodeType":"VariableDeclaration","scope":5842,"src":"11497:21:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5806,"name":"bytes","nodeType":"ElementaryTypeName","src":"11497:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"11455:67:24"},"returnParameters":{"id":5811,"nodeType":"ParameterList","parameters":[],"src":"11542:0:24"},"scope":5918,"src":"11442:311:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"anonymous":false,"eventSelector":"f989b967ab06cb95ffa87edfc41b030132a3a687e55e92faf63512234d18e28f","id":5854,"name":"BurnedBatch","nameLocation":"11763:11:24","nodeType":"EventDefinition","parameters":{"id":5853,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5844,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"11796:5:24","nodeType":"VariableDeclaration","scope":5854,"src":"11780:21:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5843,"name":"address","nodeType":"ElementaryTypeName","src":"11780:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5847,"indexed":false,"mutability":"mutable","name":"ids","nameLocation":"11817:3:24","nodeType":"VariableDeclaration","scope":5854,"src":"11807:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5845,"name":"uint256","nodeType":"ElementaryTypeName","src":"11807:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5846,"nodeType":"ArrayTypeName","src":"11807:9:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":5850,"indexed":false,"mutability":"mutable","name":"amounts","nameLocation":"11836:7:24","nodeType":"VariableDeclaration","scope":5854,"src":"11826:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5848,"name":"uint256","nodeType":"ElementaryTypeName","src":"11826:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5849,"nodeType":"ArrayTypeName","src":"11826:9:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":5852,"indexed":false,"mutability":"mutable","name":"metadata","nameLocation":"11855:8:24","nodeType":"VariableDeclaration","scope":5854,"src":"11849:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5851,"name":"bytes","nodeType":"ElementaryTypeName","src":"11849:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"11774:93:24"},"src":"11757:111:24"},{"body":{"id":5911,"nodeType":"Block","src":"12719:298:24","statements":[{"body":{"id":5891,"nodeType":"Block","src":"12762:124:24","statements":[{"expression":{"arguments":[{"id":5887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"12787:44:24","subExpression":{"arguments":[{"baseExpression":{"id":5883,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5858,"src":"12824:3:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5885,"indexExpression":{"id":5884,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5869,"src":"12828:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12824:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5880,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5327,"src":"12810:5:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5879,"name":"IJasmineEATExtensions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6368,"src":"12788:21:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IJasmineEATExtensions_$6368_$","typeString":"type(contract IJasmineEATExtensions)"}},"id":5881,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12788:28:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IJasmineEATExtensions_$6368","typeString":"contract IJasmineEATExtensions"}},"id":5882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12817:6:24","memberName":"frozen","nodeType":"MemberAccess","referencedDeclaration":6367,"src":"12788:35:24","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view external returns (bool)"}},"id":5886,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12788:43:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4a61736d696e654d696e7465723a2066726f7a656e20736572696573","id":5888,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12841:30:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_6a202c3fb661fc6d1c876b693892fa18c66d222ca913c0aa6eb0dfcf881c0e8a","typeString":"literal_string \"JasmineMinter: frozen series\""},"value":"JasmineMinter: frozen series"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6a202c3fb661fc6d1c876b693892fa18c66d222ca913c0aa6eb0dfcf881c0e8a","typeString":"literal_string \"JasmineMinter: frozen series\""}],"id":5878,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12770:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5889,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12770:109:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5890,"nodeType":"ExpressionStatement","src":"12770:109:24"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5871,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5869,"src":"12741:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":5872,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5858,"src":"12745:3:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12749:6:24","memberName":"length","nodeType":"MemberAccess","src":"12745:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12741:14:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5892,"initializationExpression":{"assignments":[5869],"declarations":[{"constant":false,"id":5869,"mutability":"mutable","name":"i","nameLocation":"12738:1:24","nodeType":"VariableDeclaration","scope":5892,"src":"12730:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5868,"name":"uint256","nodeType":"ElementaryTypeName","src":"12730:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5870,"nodeType":"VariableDeclarationStatement","src":"12730:9:24"},"loopExpression":{"expression":{"id":5876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"12757:3:24","subExpression":{"id":5875,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5869,"src":"12757:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5877,"nodeType":"ExpressionStatement","src":"12757:3:24"},"nodeType":"ForStatement","src":"12725:161:24"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":5894,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2931,"src":"12908:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5895,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12908:12:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5896,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5858,"src":"12922:3:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":5897,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5861,"src":"12927:7:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":5898,"name":"metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5863,"src":"12936:8:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5893,"name":"BurnedBatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5854,"src":"12896:11:24","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":5899,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12896:49:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5900,"nodeType":"EmitStatement","src":"12891:54:24"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":5905,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2931,"src":"12985:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5906,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12985:12:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5907,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5858,"src":"12999:3:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":5908,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5861,"src":"13004:7:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"expression":{"arguments":[{"id":5902,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5327,"src":"12968:5:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5901,"name":"IERC1155Burnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6331,"src":"12951:16:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Burnable_$6331_$","typeString":"type(contract IERC1155Burnable)"}},"id":5903,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12951:23:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$6331","typeString":"contract IERC1155Burnable"}},"id":5904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12975:9:24","memberName":"burnBatch","nodeType":"MemberAccess","referencedDeclaration":6330,"src":"12951:33:24","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,uint256[] memory,uint256[] memory) external"}},"id":5909,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12951:61:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5910,"nodeType":"ExpressionStatement","src":"12951:61:24"}]},"documentation":{"id":5855,"nodeType":"StructuredDocumentation","src":"11872:719:24","text":"@notice Used in both redemption and bridge-off flows.\n @dev JasmineMinter must be approved to spend the caller's EATs for the operation to succeed. JasmineMinter indirectly authenticates that the caller owns the specified amount of the specified EATs.\n @param ids The series of EATs to be redeemed/bridged-off.\n @param amounts The amounts of EATs of the specified series to be redeemed/bridged-off.\n @param metadata Message to the bridge specifying whether to redeem or bridge-off. If the operation is a bridge-off, also specifies the destination of the EAC. JasmineMinter imposes no authentication or structure on the metadata. Malformed or otherwise invalid metadata is an unrecoverable error."},"functionSelector":"e090fa3c","id":5912,"implemented":true,"kind":"function","modifiers":[{"id":5866,"kind":"modifierInvocation","modifierName":{"id":5865,"name":"onlyProxy","nameLocations":["12709:9:24"],"nodeType":"IdentifierPath","referencedDeclaration":849,"src":"12709:9:24"},"nodeType":"ModifierInvocation","src":"12709:9:24"}],"name":"burnBatch","nameLocation":"12603:9:24","nodeType":"FunctionDefinition","parameters":{"id":5864,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5858,"mutability":"mutable","name":"ids","nameLocation":"12635:3:24","nodeType":"VariableDeclaration","scope":5912,"src":"12618:20:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5856,"name":"uint256","nodeType":"ElementaryTypeName","src":"12618:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5857,"nodeType":"ArrayTypeName","src":"12618:9:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":5861,"mutability":"mutable","name":"amounts","nameLocation":"12661:7:24","nodeType":"VariableDeclaration","scope":5912,"src":"12644:24:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5859,"name":"uint256","nodeType":"ElementaryTypeName","src":"12644:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5860,"nodeType":"ArrayTypeName","src":"12644:9:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":5863,"mutability":"mutable","name":"metadata","nameLocation":"12687:8:24","nodeType":"VariableDeclaration","scope":5912,"src":"12674:21:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5862,"name":"bytes","nodeType":"ElementaryTypeName","src":"12674:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"12612:87:24"},"returnParameters":{"id":5867,"nodeType":"ParameterList","parameters":[],"src":"12719:0:24"},"scope":5918,"src":"12594:423:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"constant":false,"documentation":{"id":5913,"nodeType":"StructuredDocumentation","src":"13021:105:24","text":"@dev Reserved storage gap. LINK: https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":5917,"mutability":"mutable","name":"__gap","nameLocation":"13149:5:24","nodeType":"VariableDeclaration","scope":5918,"src":"13129:25:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":5914,"name":"uint256","nodeType":"ElementaryTypeName","src":"13129:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5916,"length":{"hexValue":"3530","id":5915,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13137:2:24","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"13129:11:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":5919,"src":"1114:12043:24","usedErrors":[]}],"src":"37:13121:24"},"id":24},"src/JasmineOracle.sol":{"ast":{"absolutePath":"src/JasmineOracle.sol","exportedSymbols":{"IJasmineOracle":[6378],"JasmineOracle":[6308],"Ownable2StepUpgradeable":[105],"UUPSUpgradeable":[931]},"id":6309,"license":"BUSL-1.1","nodeType":"SourceUnit","nodes":[{"id":5920,"literals":["solidity","0.8",".17"],"nodeType":"PragmaDirective","src":"37:23:25"},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol","id":5922,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6309,"sourceUnit":106,"src":"62:115:25","symbolAliases":[{"foreign":{"id":5921,"name":"Ownable2StepUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":105,"src":"73:23:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","id":5924,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6309,"sourceUnit":932,"src":"178:104:25","symbolAliases":[{"foreign":{"id":5923,"name":"UUPSUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":931,"src":"189:15:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"src/interfaces/IJasmineOracle.sol","file":"./interfaces/IJasmineOracle.sol","id":5926,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6309,"sourceUnit":6379,"src":"283:63:25","symbolAliases":[{"foreign":{"id":5925,"name":"IJasmineOracle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6378,"src":"291:14:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5928,"name":"Ownable2StepUpgradeable","nameLocations":["729:23:25"],"nodeType":"IdentifierPath","referencedDeclaration":105,"src":"729:23:25"},"id":5929,"nodeType":"InheritanceSpecifier","src":"729:23:25"},{"baseName":{"id":5930,"name":"UUPSUpgradeable","nameLocations":["754:15:25"],"nodeType":"IdentifierPath","referencedDeclaration":931,"src":"754:15:25"},"id":5931,"nodeType":"InheritanceSpecifier","src":"754:15:25"},{"baseName":{"id":5932,"name":"IJasmineOracle","nameLocations":["771:14:25"],"nodeType":"IdentifierPath","referencedDeclaration":6378,"src":"771:14:25"},"id":5933,"nodeType":"InheritanceSpecifier","src":"771:14:25"}],"canonicalName":"JasmineOracle","contractDependencies":[],"contractKind":"contract","documentation":{"id":5927,"nodeType":"StructuredDocumentation","src":"348:355:25","text":"@dev This contract is upgradeable. You can only append new contracts to the list of bases. You cannot delete bases or reorder them.\n @notice This contract stores the machine-readable metadata about each EAT series. This is used to determine whether a particular EAT is eligible for certain on-chain uses (e.g. membership in a solar-only EAT pool)."},"fullyImplemented":true,"id":6308,"linearizedBaseContracts":[6308,6378,931,616,247,105,237,2946,795],"name":"JasmineOracle","nameLocation":"712:13:25","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[925],"body":{"id":5942,"nodeType":"Block","src":"977:2:25","statements":[]},"documentation":{"id":5934,"nodeType":"StructuredDocumentation","src":"790:120:25","text":"@dev We use the `Ownable` owner for upgrades, not the ERC1967 admin. The ERC1967 admin is not used by this contract."},"id":5943,"implemented":true,"kind":"function","modifiers":[{"id":5940,"kind":"modifierInvocation","modifierName":{"id":5939,"name":"onlyOwner","nameLocations":["967:9:25"],"nodeType":"IdentifierPath","referencedDeclaration":151,"src":"967:9:25"},"nodeType":"ModifierInvocation","src":"967:9:25"}],"name":"_authorizeUpgrade","nameLocation":"922:17:25","nodeType":"FunctionDefinition","overrides":{"id":5938,"nodeType":"OverrideSpecifier","overrides":[],"src":"958:8:25"},"parameters":{"id":5937,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5936,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5943,"src":"940:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5935,"name":"address","nodeType":"ElementaryTypeName","src":"940:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"939:9:25"},"returnParameters":{"id":5941,"nodeType":"ParameterList","parameters":[],"src":"977:0:25"},"scope":6308,"src":"913:66:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":false,"documentation":{"id":5944,"nodeType":"StructuredDocumentation","src":"983:99:25","text":"@notice This address is the mint authorization checker. The minter is controlled by the bridge."},"functionSelector":"07546172","id":5946,"mutability":"mutable","name":"minter","nameLocation":"1100:6:25","nodeType":"VariableDeclaration","scope":6308,"src":"1085:21:25","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5945,"name":"address","nodeType":"ElementaryTypeName","src":"1085:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"body":{"id":5957,"nodeType":"Block","src":"1149:85:25","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5950,"name":"minter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5946,"src":"1163:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5951,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2931,"src":"1173:10:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5952,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1173:12:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1163:22:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4a61736d696e654f7261636c653a2063616c6c6572206973206e6f7420746865206d696e746572","id":5954,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1187:41:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_3634f33128b839ba5aef34071c3d16bdb2be9a8409f06e01b36f02ba0c6fd43c","typeString":"literal_string \"JasmineOracle: caller is not the minter\""},"value":"JasmineOracle: caller is not the minter"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3634f33128b839ba5aef34071c3d16bdb2be9a8409f06e01b36f02ba0c6fd43c","typeString":"literal_string \"JasmineOracle: caller is not the minter\""}],"id":5949,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1155:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5955,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1155:74:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5956,"nodeType":"ExpressionStatement","src":"1155:74:25"}]},"id":5958,"implemented":true,"kind":"function","modifiers":[],"name":"_checkMinter","nameLocation":"1120:12:25","nodeType":"FunctionDefinition","parameters":{"id":5947,"nodeType":"ParameterList","parameters":[],"src":"1132:2:25"},"returnParameters":{"id":5948,"nodeType":"ParameterList","parameters":[],"src":"1149:0:25"},"scope":6308,"src":"1111:123:25","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5964,"nodeType":"Block","src":"1260:32:25","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5960,"name":"_checkMinter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5958,"src":"1266:12:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":5961,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1266:14:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5962,"nodeType":"ExpressionStatement","src":"1266:14:25"},{"id":5963,"nodeType":"PlaceholderStatement","src":"1286:1:25"}]},"id":5965,"name":"onlyMinter","nameLocation":"1247:10:25","nodeType":"ModifierDefinition","parameters":{"id":5959,"nodeType":"ParameterList","parameters":[],"src":"1257:2:25"},"src":"1238:54:25","virtual":false,"visibility":"internal"},{"anonymous":false,"eventSelector":"b6b8f1859c5c352e5ffad07d0f77e384ac725512c015bd3a3ffc885831c8a425","id":5969,"name":"MinterChanged","nameLocation":"1302:13:25","nodeType":"EventDefinition","parameters":{"id":5968,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5967,"indexed":true,"mutability":"mutable","name":"newMinter","nameLocation":"1332:9:25","nodeType":"VariableDeclaration","scope":5969,"src":"1316:25:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5966,"name":"address","nodeType":"ElementaryTypeName","src":"1316:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1315:27:25"},"src":"1296:47:25"},{"body":{"id":5985,"nodeType":"Block","src":"1529:64:25","statements":[{"expression":{"id":5979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5977,"name":"minter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5946,"src":"1535:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5978,"name":"newMinter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5972,"src":"1544:9:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1535:18:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5980,"nodeType":"ExpressionStatement","src":"1535:18:25"},{"eventCall":{"arguments":[{"id":5982,"name":"newMinter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5972,"src":"1578:9:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5981,"name":"MinterChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5969,"src":"1564:13:25","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":5983,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1564:24:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5984,"nodeType":"EmitStatement","src":"1559:29:25"}]},"documentation":{"id":5970,"nodeType":"StructuredDocumentation","src":"1347:122:25","text":"@notice In the event of a minter migration (not just an upgrade), the owner has the ability to set the minter address."},"functionSelector":"fca3b5aa","id":5986,"implemented":true,"kind":"function","modifiers":[{"id":5975,"kind":"modifierInvocation","modifierName":{"id":5974,"name":"onlyOwner","nameLocations":["1519:9:25"],"nodeType":"IdentifierPath","referencedDeclaration":151,"src":"1519:9:25"},"nodeType":"ModifierInvocation","src":"1519:9:25"}],"name":"setMinter","nameLocation":"1481:9:25","nodeType":"FunctionDefinition","parameters":{"id":5973,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5972,"mutability":"mutable","name":"newMinter","nameLocation":"1499:9:25","nodeType":"VariableDeclaration","scope":5986,"src":"1491:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5971,"name":"address","nodeType":"ElementaryTypeName","src":"1491:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1490:19:25"},"returnParameters":{"id":5976,"nodeType":"ParameterList","parameters":[],"src":"1529:0:25"},"scope":6308,"src":"1472:121:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":6012,"nodeType":"Block","src":"1693:166:25","statements":[{"expression":{"arguments":[{"id":5998,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5990,"src":"1718:12:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5997,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[77],"referencedDeclaration":77,"src":"1699:18:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":5999,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1699:32:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6000,"nodeType":"ExpressionStatement","src":"1699:32:25"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":6001,"name":"__UUPSUpgradeable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":813,"src":"1763:22:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":6002,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1763:24:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6003,"nodeType":"ExpressionStatement","src":"1763:24:25"},{"expression":{"id":6006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6004,"name":"minter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5946,"src":"1793:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6005,"name":"initialMinter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5988,"src":"1802:13:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1793:22:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6007,"nodeType":"ExpressionStatement","src":"1793:22:25"},{"eventCall":{"arguments":[{"id":6009,"name":"initialMinter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5988,"src":"1840:13:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6008,"name":"MinterChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5969,"src":"1826:13:25","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":6010,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1826:28:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6011,"nodeType":"EmitStatement","src":"1821:33:25"}]},"functionSelector":"485cc955","id":6013,"implemented":true,"kind":"function","modifiers":[{"id":5993,"kind":"modifierInvocation","modifierName":{"id":5992,"name":"initializer","nameLocations":["1671:11:25"],"nodeType":"IdentifierPath","referencedDeclaration":697,"src":"1671:11:25"},"nodeType":"ModifierInvocation","src":"1671:11:25"},{"id":5995,"kind":"modifierInvocation","modifierName":{"id":5994,"name":"onlyProxy","nameLocations":["1683:9:25"],"nodeType":"IdentifierPath","referencedDeclaration":849,"src":"1683:9:25"},"nodeType":"ModifierInvocation","src":"1683:9:25"}],"name":"initialize","nameLocation":"1606:10:25","nodeType":"FunctionDefinition","parameters":{"id":5991,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5988,"mutability":"mutable","name":"initialMinter","nameLocation":"1625:13:25","nodeType":"VariableDeclaration","scope":6013,"src":"1617:21:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5987,"name":"address","nodeType":"ElementaryTypeName","src":"1617:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5990,"mutability":"mutable","name":"initialOwner","nameLocation":"1648:12:25","nodeType":"VariableDeclaration","scope":6013,"src":"1640:20:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5989,"name":"address","nodeType":"ElementaryTypeName","src":"1640:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1616:45:25"},"returnParameters":{"id":5996,"nodeType":"ParameterList","parameters":[],"src":"1693:0:25"},"scope":6308,"src":"1597:262:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"canonicalName":"JasmineOracle.EATMetadata","id":6022,"members":[{"constant":false,"id":6015,"mutability":"mutable","name":"_version","nameLocation":"1894:8:25","nodeType":"VariableDeclaration","scope":6022,"src":"1888:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":6014,"name":"uint8","nodeType":"ElementaryTypeName","src":"1888:5:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":6017,"mutability":"mutable","name":"fuel","nameLocation":"1915:4:25","nodeType":"VariableDeclaration","scope":6022,"src":"1908:11:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6016,"name":"uint32","nodeType":"ElementaryTypeName","src":"1908:6:25","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":6019,"mutability":"mutable","name":"certificateType","nameLocation":"1932:15:25","nodeType":"VariableDeclaration","scope":6022,"src":"1925:22:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6018,"name":"uint32","nodeType":"ElementaryTypeName","src":"1925:6:25","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":6021,"mutability":"mutable","name":"endorsement","nameLocation":"1960:11:25","nodeType":"VariableDeclaration","scope":6022,"src":"1953:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6020,"name":"uint32","nodeType":"ElementaryTypeName","src":"1953:6:25","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"name":"EATMetadata","nameLocation":"1870:11:25","nodeType":"StructDefinition","scope":6308,"src":"1863:113:25","visibility":"public"},{"constant":false,"id":6027,"mutability":"mutable","name":"_metadata","nameLocation":"2021:9:25","nodeType":"VariableDeclaration","scope":6308,"src":"1980:50:25","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_EATMetadata_$6022_storage_$","typeString":"mapping(uint256 => struct JasmineOracle.EATMetadata)"},"typeName":{"id":6026,"keyType":{"id":6023,"name":"uint256","nodeType":"ElementaryTypeName","src":"1988:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1980:31:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_EATMetadata_$6022_storage_$","typeString":"mapping(uint256 => struct JasmineOracle.EATMetadata)"},"valueType":{"id":6025,"nodeType":"UserDefinedTypeName","pathNode":{"id":6024,"name":"EATMetadata","nameLocations":["1999:11:25"],"nodeType":"IdentifierPath","referencedDeclaration":6022,"src":"1999:11:25"},"referencedDeclaration":6022,"src":"1999:11:25","typeDescriptions":{"typeIdentifier":"t_struct$_EATMetadata_$6022_storage_ptr","typeString":"struct JasmineOracle.EATMetadata"}}},"visibility":"internal"},{"body":{"id":6086,"nodeType":"Block","src":"2181:239:25","statements":[{"assignments":[6039],"declarations":[{"constant":false,"id":6039,"mutability":"mutable","name":"pad","nameLocation":"2195:3:25","nodeType":"VariableDeclaration","scope":6086,"src":"2187:11:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6038,"name":"uint256","nodeType":"ElementaryTypeName","src":"2187:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6040,"nodeType":"VariableDeclarationStatement","src":"2187:11:25"},{"expression":{"id":6077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":6041,"name":"uuid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6032,"src":"2205:4:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6042,"name":"registry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6034,"src":"2211:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6043,"name":"vintage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6036,"src":"2221:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6044,"name":"pad","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6039,"src":"2230:3:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6045,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"2204:30:25","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256,uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6046,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6029,"src":"2245:2:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":6047,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2251:3:25","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2245:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6049,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6029,"src":"2263:2:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3936","id":6050,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2269:2:25","typeDescriptions":{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},"value":"96"},"src":"2263:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6052,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2262:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"expression":{"arguments":[{"id":6055,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2280:6:25","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":6054,"name":"uint32","nodeType":"ElementaryTypeName","src":"2280:6:25","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"}],"id":6053,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2275:4:25","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":6056,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2275:12:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint32","typeString":"type(uint32)"}},"id":6057,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2288:3:25","memberName":"max","nodeType":"MemberAccess","src":"2275:16:25","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"2262:29:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6059,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6029,"src":"2300:2:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3536","id":6060,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2306:2:25","typeDescriptions":{"typeIdentifier":"t_rational_56_by_1","typeString":"int_const 56"},"value":"56"},"src":"2300:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6062,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2299:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"expression":{"arguments":[{"id":6065,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2317:6:25","typeDescriptions":{"typeIdentifier":"t_type$_t_uint40_$","typeString":"type(uint40)"},"typeName":{"id":6064,"name":"uint40","nodeType":"ElementaryTypeName","src":"2317:6:25","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint40_$","typeString":"type(uint40)"}],"id":6063,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2312:4:25","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":6066,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2312:12:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint40","typeString":"type(uint40)"}},"id":6067,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2325:3:25","memberName":"max","nodeType":"MemberAccess","src":"2312:16:25","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"src":"2299:29:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6069,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6029,"src":"2336:2:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"expression":{"arguments":[{"id":6072,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2346:6:25","typeDescriptions":{"typeIdentifier":"t_type$_t_uint56_$","typeString":"type(uint56)"},"typeName":{"id":6071,"name":"uint56","nodeType":"ElementaryTypeName","src":"2346:6:25","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint56_$","typeString":"type(uint56)"}],"id":6070,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2341:4:25","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":6073,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2341:12:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint56","typeString":"type(uint56)"}},"id":6074,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2354:3:25","memberName":"max","nodeType":"MemberAccess","src":"2341:16:25","typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"}},"src":"2336:21:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6076,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2237:126:25","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256,uint256,uint256)"}},"src":"2204:159:25","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6078,"nodeType":"ExpressionStatement","src":"2204:159:25"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6082,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6080,"name":"pad","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6039,"src":"2377:3:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":6081,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2384:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2377:8:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4a61736d696e654f7261636c653a20696e76616c6964204944","id":6083,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2387:27:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_df9425266fe7933ff585facc22dca0a4c1e3703f9880cb0c973bca3701fe9bdb","typeString":"literal_string \"JasmineOracle: invalid ID\""},"value":"JasmineOracle: invalid ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_df9425266fe7933ff585facc22dca0a4c1e3703f9880cb0c973bca3701fe9bdb","typeString":"literal_string \"JasmineOracle: invalid ID\""}],"id":6079,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2369:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6084,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2369:46:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6085,"nodeType":"ExpressionStatement","src":"2369:46:25"}]},"id":6087,"implemented":true,"kind":"function","modifiers":[],"name":"_destructureId","nameLocation":"2044:14:25","nodeType":"FunctionDefinition","parameters":{"id":6030,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6029,"mutability":"mutable","name":"id","nameLocation":"2067:2:25","nodeType":"VariableDeclaration","scope":6087,"src":"2059:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6028,"name":"uint256","nodeType":"ElementaryTypeName","src":"2059:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2058:12:25"},"returnParameters":{"id":6037,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6032,"mutability":"mutable","name":"uuid","nameLocation":"2121:4:25","nodeType":"VariableDeclaration","scope":6087,"src":"2113:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6031,"name":"uint256","nodeType":"ElementaryTypeName","src":"2113:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6034,"mutability":"mutable","name":"registry","nameLocation":"2141:8:25","nodeType":"VariableDeclaration","scope":6087,"src":"2133:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6033,"name":"uint256","nodeType":"ElementaryTypeName","src":"2133:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6036,"mutability":"mutable","name":"vintage","nameLocation":"2165:7:25","nodeType":"VariableDeclaration","scope":6087,"src":"2157:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6035,"name":"uint256","nodeType":"ElementaryTypeName","src":"2157:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2105:73:25"},"scope":6308,"src":"2035:385:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6106,"nodeType":"Block","src":"2629:76:25","statements":[{"assignments":[6096,null,null],"declarations":[{"constant":false,"id":6096,"mutability":"mutable","name":"uuid","nameLocation":"2644:4:25","nodeType":"VariableDeclaration","scope":6106,"src":"2636:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6095,"name":"uint256","nodeType":"ElementaryTypeName","src":"2636:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},null,null],"id":6100,"initialValue":{"arguments":[{"id":6098,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6090,"src":"2671:2:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6097,"name":"_destructureId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6087,"src":"2656:14:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"function (uint256) pure returns (uint256,uint256,uint256)"}},"id":6099,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2656:18:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"2635:39:25"},{"expression":{"arguments":[{"id":6103,"name":"uuid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6096,"src":"2695:4:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6102,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2687:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":6101,"name":"uint128","nodeType":"ElementaryTypeName","src":"2687:7:25","typeDescriptions":{}}},"id":6104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2687:13:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"functionReturnParameters":6094,"id":6105,"nodeType":"Return","src":"2680:20:25"}]},"documentation":{"id":6088,"nodeType":"StructuredDocumentation","src":"2424:141:25","text":"@notice Each EAT series has a UUID associated with it. This has no structure, but serves to identify the series to an off-chain database."},"functionSelector":"69cffd17","id":6107,"implemented":true,"kind":"function","modifiers":[],"name":"getUUID","nameLocation":"2577:7:25","nodeType":"FunctionDefinition","parameters":{"id":6091,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6090,"mutability":"mutable","name":"id","nameLocation":"2593:2:25","nodeType":"VariableDeclaration","scope":6107,"src":"2585:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6089,"name":"uint256","nodeType":"ElementaryTypeName","src":"2585:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2584:12:25"},"returnParameters":{"id":6094,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6093,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6107,"src":"2620:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":6092,"name":"uint128","nodeType":"ElementaryTypeName","src":"2620:7:25","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"2619:9:25"},"scope":6308,"src":"2568:137:25","stateMutability":"pure","virtual":false,"visibility":"external"},{"body":{"id":6127,"nodeType":"Block","src":"2956:84:25","statements":[{"assignments":[null,6118,null],"declarations":[null,{"constant":false,"id":6118,"mutability":"mutable","name":"registry","nameLocation":"2973:8:25","nodeType":"VariableDeclaration","scope":6127,"src":"2965:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6117,"name":"uint256","nodeType":"ElementaryTypeName","src":"2965:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},null],"id":6122,"initialValue":{"arguments":[{"id":6120,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6110,"src":"3002:2:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6119,"name":"_destructureId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6087,"src":"2987:14:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"function (uint256) pure returns (uint256,uint256,uint256)"}},"id":6121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2987:18:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"2962:43:25"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6123,"name":"registry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6118,"src":"3018:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":6124,"name":"query","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6112,"src":"3030:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3018:17:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":6116,"id":6126,"nodeType":"Return","src":"3011:24:25"}]},"documentation":{"id":6108,"nodeType":"StructuredDocumentation","src":"2709:167:25","text":"@notice Each EAT is traded on an EAT registry. EATs cannot generally be moved between registries. The registry id is opaque, but can be checked for an exact match."},"functionSelector":"d7c9d1c5","id":6128,"implemented":true,"kind":"function","modifiers":[],"name":"hasRegistry","nameLocation":"2888:11:25","nodeType":"FunctionDefinition","parameters":{"id":6113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6110,"mutability":"mutable","name":"id","nameLocation":"2908:2:25","nodeType":"VariableDeclaration","scope":6128,"src":"2900:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6109,"name":"uint256","nodeType":"ElementaryTypeName","src":"2900:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6112,"mutability":"mutable","name":"query","nameLocation":"2920:5:25","nodeType":"VariableDeclaration","scope":6128,"src":"2912:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6111,"name":"uint256","nodeType":"ElementaryTypeName","src":"2912:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2899:27:25"},"returnParameters":{"id":6116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6115,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6128,"src":"2950:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6114,"name":"bool","nodeType":"ElementaryTypeName","src":"2950:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2949:6:25"},"scope":6308,"src":"2879:161:25","stateMutability":"pure","virtual":false,"visibility":"external"},{"body":{"id":6154,"nodeType":"Block","src":"3372:98:25","statements":[{"assignments":[null,null,6141],"declarations":[null,null,{"constant":false,"id":6141,"mutability":"mutable","name":"vintage","nameLocation":"3391:7:25","nodeType":"VariableDeclaration","scope":6154,"src":"3383:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6140,"name":"uint256","nodeType":"ElementaryTypeName","src":"3383:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6145,"initialValue":{"arguments":[{"id":6143,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6131,"src":"3417:2:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6142,"name":"_destructureId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6087,"src":"3402:14:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"function (uint256) pure returns (uint256,uint256,uint256)"}},"id":6144,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3402:18:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"3378:42:25"},{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6146,"name":"vintage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6141,"src":"3433:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":6147,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6133,"src":"3444:3:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3433:14:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6149,"name":"vintage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6141,"src":"3451:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":6150,"name":"max","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6135,"src":"3462:3:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3451:14:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3433:32:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":6139,"id":6153,"nodeType":"Return","src":"3426:39:25"}]},"documentation":{"id":6129,"nodeType":"StructuredDocumentation","src":"3044:222:25","text":"@notice The vintage of an EAT identifies the time at which it was generated. The vintage is represented as a UNIX timestamp. The granularity of an EAT's vintage depends on the conventions of its registry and generator."},"functionSelector":"54e69d0e","id":6155,"implemented":true,"kind":"function","modifiers":[],"name":"hasVintage","nameLocation":"3278:10:25","nodeType":"FunctionDefinition","parameters":{"id":6136,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6131,"mutability":"mutable","name":"id","nameLocation":"3302:2:25","nodeType":"VariableDeclaration","scope":6155,"src":"3294:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6130,"name":"uint256","nodeType":"ElementaryTypeName","src":"3294:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6133,"mutability":"mutable","name":"min","nameLocation":"3318:3:25","nodeType":"VariableDeclaration","scope":6155,"src":"3310:11:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6132,"name":"uint256","nodeType":"ElementaryTypeName","src":"3310:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6135,"mutability":"mutable","name":"max","nameLocation":"3335:3:25","nodeType":"VariableDeclaration","scope":6155,"src":"3327:11:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6134,"name":"uint256","nodeType":"ElementaryTypeName","src":"3327:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3288:54:25"},"returnParameters":{"id":6139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6138,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6155,"src":"3366:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6137,"name":"bool","nodeType":"ElementaryTypeName","src":"3366:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3365:6:25"},"scope":6308,"src":"3269:201:25","stateMutability":"pure","virtual":false,"visibility":"external"},{"body":{"id":6172,"nodeType":"Block","src":"3787:45:25","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":6165,"name":"_metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6027,"src":"3800:9:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_EATMetadata_$6022_storage_$","typeString":"mapping(uint256 => struct JasmineOracle.EATMetadata storage ref)"}},"id":6167,"indexExpression":{"id":6166,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6158,"src":"3810:2:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3800:13:25","typeDescriptions":{"typeIdentifier":"t_struct$_EATMetadata_$6022_storage","typeString":"struct JasmineOracle.EATMetadata storage ref"}},"id":6168,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3814:4:25","memberName":"fuel","nodeType":"MemberAccess","referencedDeclaration":6017,"src":"3800:18:25","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":6169,"name":"query","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6160,"src":"3822:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3800:27:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":6164,"id":6171,"nodeType":"Return","src":"3793:34:25"}]},"documentation":{"id":6156,"nodeType":"StructuredDocumentation","src":"3474:237:25","text":"@notice The fuel type of an EAT identifies the source of the energy used to generate the corresponding electrical power. This is an opaque value that can only be checked for an exact match. Future EATs may have more than 1 fuel type."},"functionSelector":"f776e98d","id":6173,"implemented":true,"kind":"function","modifiers":[],"name":"hasFuel","nameLocation":"3723:7:25","nodeType":"FunctionDefinition","parameters":{"id":6161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6158,"mutability":"mutable","name":"id","nameLocation":"3739:2:25","nodeType":"VariableDeclaration","scope":6173,"src":"3731:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6157,"name":"uint256","nodeType":"ElementaryTypeName","src":"3731:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6160,"mutability":"mutable","name":"query","nameLocation":"3751:5:25","nodeType":"VariableDeclaration","scope":6173,"src":"3743:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6159,"name":"uint256","nodeType":"ElementaryTypeName","src":"3743:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3730:27:25"},"returnParameters":{"id":6164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6163,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6173,"src":"3781:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6162,"name":"bool","nodeType":"ElementaryTypeName","src":"3781:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3780:6:25"},"scope":6308,"src":"3714:118:25","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":6189,"nodeType":"Block","src":"3920:56:25","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":6182,"name":"_metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6027,"src":"3933:9:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_EATMetadata_$6022_storage_$","typeString":"mapping(uint256 => struct JasmineOracle.EATMetadata storage ref)"}},"id":6184,"indexExpression":{"id":6183,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6175,"src":"3943:2:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3933:13:25","typeDescriptions":{"typeIdentifier":"t_struct$_EATMetadata_$6022_storage","typeString":"struct JasmineOracle.EATMetadata storage ref"}},"id":6185,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3947:15:25","memberName":"certificateType","nodeType":"MemberAccess","referencedDeclaration":6019,"src":"3933:29:25","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":6186,"name":"query","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6177,"src":"3966:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3933:38:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":6181,"id":6188,"nodeType":"Return","src":"3926:45:25"}]},"functionSelector":"4ce78e5f","id":6190,"implemented":true,"kind":"function","modifiers":[],"name":"hasCertificateType","nameLocation":"3845:18:25","nodeType":"FunctionDefinition","parameters":{"id":6178,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6175,"mutability":"mutable","name":"id","nameLocation":"3872:2:25","nodeType":"VariableDeclaration","scope":6190,"src":"3864:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6174,"name":"uint256","nodeType":"ElementaryTypeName","src":"3864:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6177,"mutability":"mutable","name":"query","nameLocation":"3884:5:25","nodeType":"VariableDeclaration","scope":6190,"src":"3876:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6176,"name":"uint256","nodeType":"ElementaryTypeName","src":"3876:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3863:27:25"},"returnParameters":{"id":6181,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6180,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6190,"src":"3914:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6179,"name":"bool","nodeType":"ElementaryTypeName","src":"3914:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3913:6:25"},"scope":6308,"src":"3836:140:25","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":6206,"nodeType":"Block","src":"4060:52:25","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":6199,"name":"_metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6027,"src":"4073:9:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_EATMetadata_$6022_storage_$","typeString":"mapping(uint256 => struct JasmineOracle.EATMetadata storage ref)"}},"id":6201,"indexExpression":{"id":6200,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6192,"src":"4083:2:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4073:13:25","typeDescriptions":{"typeIdentifier":"t_struct$_EATMetadata_$6022_storage","typeString":"struct JasmineOracle.EATMetadata storage ref"}},"id":6202,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4087:11:25","memberName":"endorsement","nodeType":"MemberAccess","referencedDeclaration":6021,"src":"4073:25:25","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":6203,"name":"query","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6194,"src":"4102:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4073:34:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":6198,"id":6205,"nodeType":"Return","src":"4066:41:25"}]},"functionSelector":"bc5f8ccd","id":6207,"implemented":true,"kind":"function","modifiers":[],"name":"hasEndorsement","nameLocation":"3989:14:25","nodeType":"FunctionDefinition","parameters":{"id":6195,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6192,"mutability":"mutable","name":"id","nameLocation":"4012:2:25","nodeType":"VariableDeclaration","scope":6207,"src":"4004:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6191,"name":"uint256","nodeType":"ElementaryTypeName","src":"4004:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6194,"mutability":"mutable","name":"query","nameLocation":"4024:5:25","nodeType":"VariableDeclaration","scope":6207,"src":"4016:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6193,"name":"uint256","nodeType":"ElementaryTypeName","src":"4016:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4003:27:25"},"returnParameters":{"id":6198,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6197,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6207,"src":"4054:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6196,"name":"bool","nodeType":"ElementaryTypeName","src":"4054:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4053:6:25"},"scope":6308,"src":"3980:132:25","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[6377],"body":{"id":6301,"nodeType":"Block","src":"4882:736:25","statements":[{"assignments":[6219,6221,6223],"declarations":[{"constant":false,"id":6219,"mutability":"mutable","name":"uuid","nameLocation":"4897:4:25","nodeType":"VariableDeclaration","scope":6301,"src":"4889:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6218,"name":"uint256","nodeType":"ElementaryTypeName","src":"4889:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6221,"mutability":"mutable","name":"registry","nameLocation":"4911:8:25","nodeType":"VariableDeclaration","scope":6301,"src":"4903:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6220,"name":"uint256","nodeType":"ElementaryTypeName","src":"4903:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6223,"mutability":"mutable","name":"vintage","nameLocation":"4929:7:25","nodeType":"VariableDeclaration","scope":6301,"src":"4921:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6222,"name":"uint256","nodeType":"ElementaryTypeName","src":"4921:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6227,"initialValue":{"arguments":[{"id":6225,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6210,"src":"4955:2:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6224,"name":"_destructureId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6087,"src":"4940:14:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"function (uint256) pure returns (uint256,uint256,uint256)"}},"id":6226,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4940:18:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"4888:70:25"},{"assignments":[6229,6231,6233,6235,6237,6239,6241],"declarations":[{"constant":false,"id":6229,"mutability":"mutable","name":"version","nameLocation":"4978:7:25","nodeType":"VariableDeclaration","scope":6301,"src":"4972:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":6228,"name":"uint8","nodeType":"ElementaryTypeName","src":"4972:5:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":6231,"mutability":"mutable","name":"metaUuid","nameLocation":"5001:8:25","nodeType":"VariableDeclaration","scope":6301,"src":"4993:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":6230,"name":"uint128","nodeType":"ElementaryTypeName","src":"4993:7:25","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":6233,"mutability":"mutable","name":"metaRegistry","nameLocation":"5024:12:25","nodeType":"VariableDeclaration","scope":6301,"src":"5017:19:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6232,"name":"uint32","nodeType":"ElementaryTypeName","src":"5017:6:25","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":6235,"mutability":"mutable","name":"metaVintage","nameLocation":"5051:11:25","nodeType":"VariableDeclaration","scope":6301,"src":"5044:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"},"typeName":{"id":6234,"name":"uint40","nodeType":"ElementaryTypeName","src":"5044:6:25","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"visibility":"internal"},{"constant":false,"id":6237,"mutability":"mutable","name":"fuel","nameLocation":"5077:4:25","nodeType":"VariableDeclaration","scope":6301,"src":"5070:11:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6236,"name":"uint32","nodeType":"ElementaryTypeName","src":"5070:6:25","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":6239,"mutability":"mutable","name":"certificateType","nameLocation":"5096:15:25","nodeType":"VariableDeclaration","scope":6301,"src":"5089:22:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6238,"name":"uint32","nodeType":"ElementaryTypeName","src":"5089:6:25","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":6241,"mutability":"mutable","name":"endorsement","nameLocation":"5126:11:25","nodeType":"VariableDeclaration","scope":6301,"src":"5119:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6240,"name":"uint32","nodeType":"ElementaryTypeName","src":"5119:6:25","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"id":6261,"initialValue":{"arguments":[{"id":6244,"name":"encodedMetadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6212,"src":"5166:15:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":6246,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5192:5:25","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":6245,"name":"uint8","nodeType":"ElementaryTypeName","src":"5192:5:25","typeDescriptions":{}}},{"id":6248,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5199:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":6247,"name":"uint128","nodeType":"ElementaryTypeName","src":"5199:7:25","typeDescriptions":{}}},{"id":6250,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5208:6:25","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":6249,"name":"uint32","nodeType":"ElementaryTypeName","src":"5208:6:25","typeDescriptions":{}}},{"id":6252,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5216:6:25","typeDescriptions":{"typeIdentifier":"t_type$_t_uint40_$","typeString":"type(uint40)"},"typeName":{"id":6251,"name":"uint40","nodeType":"ElementaryTypeName","src":"5216:6:25","typeDescriptions":{}}},{"id":6254,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5224:6:25","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":6253,"name":"uint32","nodeType":"ElementaryTypeName","src":"5224:6:25","typeDescriptions":{}}},{"id":6256,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5232:6:25","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":6255,"name":"uint32","nodeType":"ElementaryTypeName","src":"5232:6:25","typeDescriptions":{}}},{"id":6258,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5240:6:25","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":6257,"name":"uint32","nodeType":"ElementaryTypeName","src":"5240:6:25","typeDescriptions":{}}}],"id":6259,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"5191:56:25","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_uint8_$_$_t_type$_t_uint128_$_$_t_type$_t_uint32_$_$_t_type$_t_uint40_$_$_t_type$_t_uint32_$_$_t_type$_t_uint32_$_$_t_type$_t_uint32_$_$","typeString":"tuple(type(uint8),type(uint128),type(uint32),type(uint40),type(uint32),type(uint32),type(uint32))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_tuple$_t_type$_t_uint8_$_$_t_type$_t_uint128_$_$_t_type$_t_uint32_$_$_t_type$_t_uint40_$_$_t_type$_t_uint32_$_$_t_type$_t_uint32_$_$_t_type$_t_uint32_$_$","typeString":"tuple(type(uint8),type(uint128),type(uint32),type(uint40),type(uint32),type(uint32),type(uint32))"}],"expression":{"id":6242,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5146:3:25","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":6243,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5150:6:25","memberName":"decode","nodeType":"MemberAccess","src":"5146:10:25","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":6260,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5146:109:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint8_$_t_uint128_$_t_uint32_$_t_uint40_$_t_uint32_$_t_uint32_$_t_uint32_$","typeString":"tuple(uint8,uint128,uint32,uint40,uint32,uint32,uint32)"}},"nodeType":"VariableDeclarationStatement","src":"4964:291:25"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":6265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6263,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6229,"src":"5269:7:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":6264,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5280:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5269:12:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4a61736d696e654f7261636c653a20696e76616c6964206d657461646174612076657273696f6e","id":6266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5283:41:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_47a3bd5b6e49234fa94e9da8ea5a7d8a1dc9626493701a7bc7dbdf644696d561","typeString":"literal_string \"JasmineOracle: invalid metadata version\""},"value":"JasmineOracle: invalid metadata version"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_47a3bd5b6e49234fa94e9da8ea5a7d8a1dc9626493701a7bc7dbdf644696d561","typeString":"literal_string \"JasmineOracle: invalid metadata version\""}],"id":6262,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5261:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6267,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5261:64:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6268,"nodeType":"ExpressionStatement","src":"5261:64:25"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6270,"name":"uuid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6219,"src":"5339:4:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":6271,"name":"metaUuid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6231,"src":"5347:8:25","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"5339:16:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4a61736d696e654f7261636c653a2055554944206d69736d61746368","id":6273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5357:30:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb632be90e6be82dfa05c64f79aee82f69a0acc10696a637a916b6886e169fbd","typeString":"literal_string \"JasmineOracle: UUID mismatch\""},"value":"JasmineOracle: UUID mismatch"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cb632be90e6be82dfa05c64f79aee82f69a0acc10696a637a916b6886e169fbd","typeString":"literal_string \"JasmineOracle: UUID mismatch\""}],"id":6269,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5331:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6274,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5331:57:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6275,"nodeType":"ExpressionStatement","src":"5331:57:25"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6277,"name":"registry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6221,"src":"5402:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":6278,"name":"metaRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6233,"src":"5414:12:25","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"5402:24:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4a61736d696e654f7261636c653a207265676973747279206d69736d61746368","id":6280,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5428:34:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_8b616c52b3148b05e75083b1a70f12c0e7167f192499878c62938ea41e452dbb","typeString":"literal_string \"JasmineOracle: registry mismatch\""},"value":"JasmineOracle: registry mismatch"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8b616c52b3148b05e75083b1a70f12c0e7167f192499878c62938ea41e452dbb","typeString":"literal_string \"JasmineOracle: registry mismatch\""}],"id":6276,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5394:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6281,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5394:69:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6282,"nodeType":"ExpressionStatement","src":"5394:69:25"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6284,"name":"vintage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6223,"src":"5477:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":6285,"name":"metaVintage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6235,"src":"5488:11:25","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"src":"5477:22:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4a61736d696e654f7261636c653a2076696e74616765206d69736d61746368","id":6287,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5501:33:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_6d452a5da70bea7507f7f2b90704a455c1547a2793b598dadcd558c856077ca3","typeString":"literal_string \"JasmineOracle: vintage mismatch\""},"value":"JasmineOracle: vintage mismatch"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6d452a5da70bea7507f7f2b90704a455c1547a2793b598dadcd558c856077ca3","typeString":"literal_string \"JasmineOracle: vintage mismatch\""}],"id":6283,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5469:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6288,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5469:66:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6289,"nodeType":"ExpressionStatement","src":"5469:66:25"},{"expression":{"id":6299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":6290,"name":"_metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6027,"src":"5541:9:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_EATMetadata_$6022_storage_$","typeString":"mapping(uint256 => struct JasmineOracle.EATMetadata storage ref)"}},"id":6292,"indexExpression":{"id":6291,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6210,"src":"5551:2:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5541:13:25","typeDescriptions":{"typeIdentifier":"t_struct$_EATMetadata_$6022_storage","typeString":"struct JasmineOracle.EATMetadata storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6294,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6229,"src":"5569:7:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":6295,"name":"fuel","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6237,"src":"5578:4:25","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":6296,"name":"certificateType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6239,"src":"5584:15:25","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":6297,"name":"endorsement","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6241,"src":"5601:11:25","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":6293,"name":"EATMetadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6022,"src":"5557:11:25","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_EATMetadata_$6022_storage_ptr_$","typeString":"type(struct JasmineOracle.EATMetadata storage pointer)"}},"id":6298,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5557:56:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_EATMetadata_$6022_memory_ptr","typeString":"struct JasmineOracle.EATMetadata memory"}},"src":"5541:72:25","typeDescriptions":{"typeIdentifier":"t_struct$_EATMetadata_$6022_storage","typeString":"struct JasmineOracle.EATMetadata storage ref"}},"id":6300,"nodeType":"ExpressionStatement","src":"5541:72:25"}]},"documentation":{"id":6208,"nodeType":"StructuredDocumentation","src":"4116:85:25","text":"@notice The encodedMetadata is structured as the ABI encoding the metadata fields"},"functionSelector":"07e3810c","id":6302,"implemented":true,"kind":"function","modifiers":[{"id":6216,"kind":"modifierInvocation","modifierName":{"id":6215,"name":"onlyMinter","nameLocations":["4869:10:25"],"nodeType":"IdentifierPath","referencedDeclaration":5965,"src":"4869:10:25"},"nodeType":"ModifierInvocation","src":"4869:10:25"}],"name":"updateSeries","nameLocation":"4784:12:25","nodeType":"FunctionDefinition","overrides":{"id":6214,"nodeType":"OverrideSpecifier","overrides":[],"src":"4856:8:25"},"parameters":{"id":6213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6210,"mutability":"mutable","name":"id","nameLocation":"4805:2:25","nodeType":"VariableDeclaration","scope":6302,"src":"4797:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6209,"name":"uint256","nodeType":"ElementaryTypeName","src":"4797:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6212,"mutability":"mutable","name":"encodedMetadata","nameLocation":"4822:15:25","nodeType":"VariableDeclaration","scope":6302,"src":"4809:28:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6211,"name":"bytes","nodeType":"ElementaryTypeName","src":"4809:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4796:42:25"},"returnParameters":{"id":6217,"nodeType":"ParameterList","parameters":[],"src":"4882:0:25"},"scope":6308,"src":"4775:843:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"constant":false,"documentation":{"id":6303,"nodeType":"StructuredDocumentation","src":"5622:105:25","text":"@dev Reserved storage gap. LINK: https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":6307,"mutability":"mutable","name":"__gap","nameLocation":"5750:5:25","nodeType":"VariableDeclaration","scope":6308,"src":"5730:25:25","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":6304,"name":"uint256","nodeType":"ElementaryTypeName","src":"5730:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6306,"length":{"hexValue":"3530","id":6305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5738:2:25","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"5730:11:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":6309,"src":"703:5055:25","usedErrors":[]}],"src":"37:5722:25"},"id":25},"src/interfaces/IERC1155Burnable.sol":{"ast":{"absolutePath":"src/interfaces/IERC1155Burnable.sol","exportedSymbols":{"IERC1155Burnable":[6331]},"id":6332,"license":"BUSL-1.1","nodeType":"SourceUnit","nodes":[{"id":6310,"literals":["solidity","0.8",".17"],"nodeType":"PragmaDirective","src":"37:23:26"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155Burnable","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":6331,"linearizedBaseContracts":[6331],"name":"IERC1155Burnable","nameLocation":"72:16:26","nodeType":"ContractDefinition","nodes":[{"functionSelector":"f5298aca","id":6319,"implemented":false,"kind":"function","modifiers":[],"name":"burn","nameLocation":"102:4:26","nodeType":"FunctionDefinition","parameters":{"id":6317,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6312,"mutability":"mutable","name":"account","nameLocation":"120:7:26","nodeType":"VariableDeclaration","scope":6319,"src":"112:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6311,"name":"address","nodeType":"ElementaryTypeName","src":"112:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6314,"mutability":"mutable","name":"id","nameLocation":"141:2:26","nodeType":"VariableDeclaration","scope":6319,"src":"133:10:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6313,"name":"uint256","nodeType":"ElementaryTypeName","src":"133:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6316,"mutability":"mutable","name":"value","nameLocation":"157:5:26","nodeType":"VariableDeclaration","scope":6319,"src":"149:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6315,"name":"uint256","nodeType":"ElementaryTypeName","src":"149:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"106:60:26"},"returnParameters":{"id":6318,"nodeType":"ParameterList","parameters":[],"src":"175:0:26"},"scope":6331,"src":"93:83:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"6b20c454","id":6330,"implemented":false,"kind":"function","modifiers":[],"name":"burnBatch","nameLocation":"189:9:26","nodeType":"FunctionDefinition","parameters":{"id":6328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6321,"mutability":"mutable","name":"account","nameLocation":"212:7:26","nodeType":"VariableDeclaration","scope":6330,"src":"204:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6320,"name":"address","nodeType":"ElementaryTypeName","src":"204:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6324,"mutability":"mutable","name":"ids","nameLocation":"242:3:26","nodeType":"VariableDeclaration","scope":6330,"src":"225:20:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":6322,"name":"uint256","nodeType":"ElementaryTypeName","src":"225:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6323,"nodeType":"ArrayTypeName","src":"225:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":6327,"mutability":"mutable","name":"values","nameLocation":"268:6:26","nodeType":"VariableDeclaration","scope":6330,"src":"251:23:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":6325,"name":"uint256","nodeType":"ElementaryTypeName","src":"251:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6326,"nodeType":"ArrayTypeName","src":"251:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"198:80:26"},"returnParameters":{"id":6329,"nodeType":"ParameterList","parameters":[],"src":"287:0:26"},"scope":6331,"src":"180:108:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":6332,"src":"62:228:26","usedErrors":[]}],"src":"37:254:26"},"id":26},"src/interfaces/IERC1155Mintable.sol":{"ast":{"absolutePath":"src/interfaces/IERC1155Mintable.sol","exportedSymbols":{"IERC1155Mintable":[6358]},"id":6359,"license":"BUSL-1.1","nodeType":"SourceUnit","nodes":[{"id":6333,"literals":["solidity","0.8",".17"],"nodeType":"PragmaDirective","src":"37:23:27"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155Mintable","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":6358,"linearizedBaseContracts":[6358],"name":"IERC1155Mintable","nameLocation":"72:16:27","nodeType":"ContractDefinition","nodes":[{"functionSelector":"731133e9","id":6344,"implemented":false,"kind":"function","modifiers":[],"name":"mint","nameLocation":"102:4:27","nodeType":"FunctionDefinition","parameters":{"id":6342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6335,"mutability":"mutable","name":"to","nameLocation":"120:2:27","nodeType":"VariableDeclaration","scope":6344,"src":"112:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6334,"name":"address","nodeType":"ElementaryTypeName","src":"112:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6337,"mutability":"mutable","name":"id","nameLocation":"136:2:27","nodeType":"VariableDeclaration","scope":6344,"src":"128:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6336,"name":"uint256","nodeType":"ElementaryTypeName","src":"128:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6339,"mutability":"mutable","name":"amount","nameLocation":"152:6:27","nodeType":"VariableDeclaration","scope":6344,"src":"144:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6338,"name":"uint256","nodeType":"ElementaryTypeName","src":"144:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6341,"mutability":"mutable","name":"data","nameLocation":"177:4:27","nodeType":"VariableDeclaration","scope":6344,"src":"164:17:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6340,"name":"bytes","nodeType":"ElementaryTypeName","src":"164:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"106:79:27"},"returnParameters":{"id":6343,"nodeType":"ParameterList","parameters":[],"src":"194:0:27"},"scope":6358,"src":"93:102:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"1f7fdffa","id":6357,"implemented":false,"kind":"function","modifiers":[],"name":"mintBatch","nameLocation":"208:9:27","nodeType":"FunctionDefinition","parameters":{"id":6355,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6346,"mutability":"mutable","name":"to","nameLocation":"231:2:27","nodeType":"VariableDeclaration","scope":6357,"src":"223:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6345,"name":"address","nodeType":"ElementaryTypeName","src":"223:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6349,"mutability":"mutable","name":"ids","nameLocation":"256:3:27","nodeType":"VariableDeclaration","scope":6357,"src":"239:20:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":6347,"name":"uint256","nodeType":"ElementaryTypeName","src":"239:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6348,"nodeType":"ArrayTypeName","src":"239:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":6352,"mutability":"mutable","name":"amounts","nameLocation":"282:7:27","nodeType":"VariableDeclaration","scope":6357,"src":"265:24:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":6350,"name":"uint256","nodeType":"ElementaryTypeName","src":"265:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6351,"nodeType":"ArrayTypeName","src":"265:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":6354,"mutability":"mutable","name":"data","nameLocation":"308:4:27","nodeType":"VariableDeclaration","scope":6357,"src":"295:17:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6353,"name":"bytes","nodeType":"ElementaryTypeName","src":"295:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"217:99:27"},"returnParameters":{"id":6356,"nodeType":"ParameterList","parameters":[],"src":"325:0:27"},"scope":6358,"src":"199:127:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":6359,"src":"62:266:27","usedErrors":[]}],"src":"37:292:27"},"id":27},"src/interfaces/IJasmineEATExtensions.sol":{"ast":{"absolutePath":"src/interfaces/IJasmineEATExtensions.sol","exportedSymbols":{"IJasmineEATExtensions":[6368]},"id":6369,"license":"BUSL-1.1","nodeType":"SourceUnit","nodes":[{"id":6360,"literals":["solidity","0.8",".17"],"nodeType":"PragmaDirective","src":"37:23:28"},{"abstract":false,"baseContracts":[],"canonicalName":"IJasmineEATExtensions","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":6368,"linearizedBaseContracts":[6368],"name":"IJasmineEATExtensions","nameLocation":"72:21:28","nodeType":"ContractDefinition","nodes":[{"functionSelector":"e9ac0440","id":6367,"implemented":false,"kind":"function","modifiers":[],"name":"frozen","nameLocation":"107:6:28","nodeType":"FunctionDefinition","parameters":{"id":6363,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6362,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6367,"src":"114:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6361,"name":"uint256","nodeType":"ElementaryTypeName","src":"114:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"113:9:28"},"returnParameters":{"id":6366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6365,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6367,"src":"146:4:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6364,"name":"bool","nodeType":"ElementaryTypeName","src":"146:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"145:6:28"},"scope":6368,"src":"98:54:28","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":6369,"src":"62:92:28","usedErrors":[]}],"src":"37:118:28"},"id":28},"src/interfaces/IJasmineOracle.sol":{"ast":{"absolutePath":"src/interfaces/IJasmineOracle.sol","exportedSymbols":{"IJasmineOracle":[6378]},"id":6379,"license":"BUSL-1.1","nodeType":"SourceUnit","nodes":[{"id":6370,"literals":["solidity","0.8",".17"],"nodeType":"PragmaDirective","src":"37:23:29"},{"abstract":false,"baseContracts":[],"canonicalName":"IJasmineOracle","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":6378,"linearizedBaseContracts":[6378],"name":"IJasmineOracle","nameLocation":"72:14:29","nodeType":"ContractDefinition","nodes":[{"functionSelector":"07e3810c","id":6377,"implemented":false,"kind":"function","modifiers":[],"name":"updateSeries","nameLocation":"301:12:29","nodeType":"FunctionDefinition","parameters":{"id":6375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6372,"mutability":"mutable","name":"id","nameLocation":"322:2:29","nodeType":"VariableDeclaration","scope":6377,"src":"314:10:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6371,"name":"uint256","nodeType":"ElementaryTypeName","src":"314:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6374,"mutability":"mutable","name":"encodedMetadata","nameLocation":"339:15:29","nodeType":"VariableDeclaration","scope":6377,"src":"326:28:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6373,"name":"bytes","nodeType":"ElementaryTypeName","src":"326:5:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"313:42:29"},"returnParameters":{"id":6376,"nodeType":"ParameterList","parameters":[],"src":"364:0:29"},"scope":6378,"src":"292:73:29","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":6379,"src":"62:305:29","usedErrors":[]}],"src":"37:331:29"},"id":29}},"contracts":{"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol":{"Ownable2StepUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferStarted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pendingOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership} and {acceptOwnership}. This module is used through inheritance. It will make available all functions from parent (Ownable).","kind":"dev","methods":{"acceptOwnership()":{"details":"The new owner accepts the ownership transfer."},"owner()":{"details":"Returns the address of the current owner."},"pendingOwner()":{"details":"Returns the address of the pending owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"acceptOwnership()":"79ba5097","owner()":"8da5cb5b","pendingOwner()":"e30c3978","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership} and {acceptOwnership}. This module is used through inheritance. It will make available all functions from parent (Ownable).\",\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":\"Ownable2StepUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() external {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd712fb45b3ea0ab49679164e3895037adc26ce12879d5184feb040e01c1c07a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":633,"contract":"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":636,"contract":"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2945,"contract":"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":116,"contract":"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":236,"contract":"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":25,"contract":"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable","label":"_pendingOwner","offset":0,"slot":"101","type":"t_address"},{"astId":104,"contract":"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable","label":"__gap","offset":0,"slot":"102","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"OwnableUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":633,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":636,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2945,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":116,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":236,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol":{"IERC1822ProxiableUpgradeable":{"abi":[{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.","kind":"dev","methods":{"proxiableUUID()":{"details":"Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"proxiableUUID()":"52d1902d"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.\",\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":\"IERC1822ProxiableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol":{"ERC1967UpgradeUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"delegatecall","details":"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._","events":{"AdminChanged(address,address)":{"details":"Emitted when the admin account has changed."},"BeaconUpgraded(address)":{"details":"Emitted when the beacon is upgraded."},"Upgraded(address)":{"details":"Emitted when the implementation is upgraded."}},"kind":"dev","methods":{},"stateVariables":{"_ADMIN_SLOT":{"details":"Storage slot with the admin of the contract. This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is validated in the constructor."},"_BEACON_SLOT":{"details":"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."},"_IMPLEMENTATION_SLOT":{"details":"Storage slot with the address of the current implementation. This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is validated in the constructor."},"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"delegatecall\",\"details\":\"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is upgraded.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_ADMIN_SLOT\":{\"details\":\"Storage slot with the admin of the contract. This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is validated in the constructor.\"},\"_BEACON_SLOT\":{\"details\":\"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\"},\"_IMPLEMENTATION_SLOT\":{\"details\":\"Storage slot with the address of the current implementation. This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is validated in the constructor.\"},\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":\"ERC1967UpgradeUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":633,"contract":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":636,"contract":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":615,"contract":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol":{"IBeaconUpgradeable":{"abi":[{"inputs":[],"name":"implementation","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This is the interface that {BeaconProxy} expects of its beacon.","kind":"dev","methods":{"implementation()":{"details":"Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"implementation()":"5c60da1b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This is the interface that {BeaconProxy} expects of its beacon.\",\"kind\":\"dev\",\"methods\":{\"implementation()\":{\"details\":\"Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":\"IBeaconUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"Initializable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"constructor constructor() {     _disableInitializers(); } ``` ====","details":"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"_initialized":{"custom:oz-retyped-from":"bool","details":"Indicates that the contract has been initialized."},"_initializing":{"details":"Indicates that the contract is in the process of being initialized."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":633,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":636,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"UUPSUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"}],"name":"upgradeTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"details":"An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy. A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing `UUPSUpgradeable` with a custom implementation of upgrades. The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism. _Available since v4.1._","kind":"dev","methods":{"proxiableUUID()":{"details":"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"upgradeTo(address)":{"details":"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."},"upgradeToAndCall(address,bytes)":{"details":"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"__self":{"custom:oz-upgrades-unsafe-allow":"state-variable-immutable state-variable-assignment"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"proxiableUUID()":"52d1902d","upgradeTo(address)":"3659cfe6","upgradeToAndCall(address,bytes)":"4f1ef286"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy. A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing `UUPSUpgradeable` with a custom implementation of upgrades. The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"},\"__self\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable state-variable-assignment\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":\"UUPSUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":633,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":636,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":615,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":930,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol":{"ERC1155Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the basic standard multi-token. See https://eips.ethereum.org/EIPS/eip-1155 Originally based on code by Enjin: https://github.com/enjin/erc-1155 _Available since v3.1._","kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."},"balanceOfBatch(address[],uint256[])":{"details":"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."},"isApprovedForAll(address,address)":{"details":"See {IERC1155-isApprovedForAll}."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"See {IERC1155-safeBatchTransferFrom}."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"See {IERC1155-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC1155-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"uri(uint256)":{"details":"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1384 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x87 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4E1273F4 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0x10A JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x12A JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x13D JUMPI DUP1 PUSH4 0xF242432A EQ PUSH2 0x179 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0xFDD58E EQ PUSH2 0x8C JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xB2 JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0xD5 JUMPI DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0xF5 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9F PUSH2 0x9A CALLDATASIZE PUSH1 0x4 PUSH2 0xB49 JUMP JUMPDEST PUSH2 0x18C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC5 PUSH2 0xC0 CALLDATASIZE PUSH1 0x4 PUSH2 0xB8C JUMP JUMPDEST PUSH2 0x227 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xA9 JUMP JUMPDEST PUSH2 0xE8 PUSH2 0xE3 CALLDATASIZE PUSH1 0x4 PUSH2 0xBB0 JUMP JUMPDEST PUSH2 0x277 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA9 SWAP2 SWAP1 PUSH2 0xC0F JUMP JUMPDEST PUSH2 0x108 PUSH2 0x103 CALLDATASIZE PUSH1 0x4 PUSH2 0xD6E JUMP JUMPDEST PUSH2 0x30B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x11D PUSH2 0x118 CALLDATASIZE PUSH1 0x4 PUSH2 0xE18 JUMP JUMPDEST PUSH2 0x357 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA9 SWAP2 SWAP1 PUSH2 0xF1E JUMP JUMPDEST PUSH2 0x108 PUSH2 0x138 CALLDATASIZE PUSH1 0x4 PUSH2 0xF31 JUMP JUMPDEST PUSH2 0x481 JUMP JUMPDEST PUSH2 0xC5 PUSH2 0x14B CALLDATASIZE PUSH1 0x4 PUSH2 0xF6D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x66 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x108 PUSH2 0x187 CALLDATASIZE PUSH1 0x4 PUSH2 0xFA0 JUMP JUMPDEST PUSH2 0x490 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1FC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2061646472657373207A65726F206973206E6F7420612076 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x30B634B21037BBB732B9 PUSH1 0xB1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x6CDB3D13 PUSH1 0xE1 SHL EQ DUP1 PUSH2 0x258 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x3A24D07 PUSH1 0xE2 SHL EQ JUMPDEST DUP1 PUSH2 0x221 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x221 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x67 DUP1 SLOAD PUSH2 0x286 SWAP1 PUSH2 0x1005 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2B2 SWAP1 PUSH2 0x1005 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2FF JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2D4 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2FF JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2E2 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ DUP1 PUSH2 0x327 JUMPI POP PUSH2 0x327 DUP6 CALLER PUSH2 0x14B JUMP JUMPDEST PUSH2 0x343 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x103F JUMP JUMPDEST PUSH2 0x350 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x4D5 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x3BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206163636F756E747320616E6420696473206C656E677468 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x40DAD2E6DAC2E8C6D PUSH1 0xBB SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3D8 JUMPI PUSH2 0x3D8 PUSH2 0xC22 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x401 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x479 JUMPI PUSH2 0x44C DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x425 JUMPI PUSH2 0x425 PUSH2 0x108D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x43F JUMPI PUSH2 0x43F PUSH2 0x108D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x18C JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x45E JUMPI PUSH2 0x45E PUSH2 0x108D JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH2 0x472 DUP2 PUSH2 0x10B9 JUMP JUMPDEST SWAP1 POP PUSH2 0x407 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x48C CALLER DUP4 DUP4 PUSH2 0x6B5 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ DUP1 PUSH2 0x4AC JUMPI POP PUSH2 0x4AC DUP6 CALLER PUSH2 0x14B JUMP JUMPDEST PUSH2 0x4C8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x103F JUMP JUMPDEST PUSH2 0x350 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x795 JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x537 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2069647320616E6420616D6F756E7473206C656E67746820 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0xDAD2E6DAC2E8C6D PUSH1 0xC3 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x55D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x10D2 JUMP JUMPDEST CALLER PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x647 JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x57E JUMPI PUSH2 0x57E PUSH2 0x108D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x59C JUMPI PUSH2 0x59C PUSH2 0x108D JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x65 DUP4 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 AND DUP4 MSTORE SWAP1 SWAP4 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP2 DUP2 LT ISZERO PUSH2 0x5ED JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x1117 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP1 DUP12 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x62C SWAP1 DUP5 SWAP1 PUSH2 0x1161 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP POP DUP1 PUSH2 0x640 SWAP1 PUSH2 0x10B9 JUMP JUMPDEST SWAP1 POP PUSH2 0x561 JUMP JUMPDEST POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x697 SWAP3 SWAP2 SWAP1 PUSH2 0x1174 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x6AD DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x8C3 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x728 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2073657474696E6720617070726F76616C20737461747573 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x103337B91039B2B633 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x66 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x7BB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x10D2 JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x7C7 DUP6 PUSH2 0xA27 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7D4 DUP6 PUSH2 0xA27 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP6 DUP2 LT ISZERO PUSH2 0x819 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x1117 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP10 DUP6 SUB SWAP1 SSTORE SWAP1 DUP11 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP9 SWAP3 SWAP1 PUSH2 0x858 SWAP1 DUP5 SWAP1 PUSH2 0x1161 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP9 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP12 AND SWAP3 DUP13 DUP3 AND SWAP3 SWAP2 DUP9 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x8B8 DUP5 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0xA72 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x6AD JUMPI PUSH1 0x40 MLOAD PUSH4 0xBC197C81 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xBC197C81 SWAP1 PUSH2 0x907 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x11A2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x942 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x93F SWAP2 DUP2 ADD SWAP1 PUSH2 0x1200 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x9EE JUMPI PUSH2 0x94E PUSH2 0x121D JUMP JUMPDEST DUP1 PUSH4 0x8C379A0 SUB PUSH2 0x987 JUMPI POP PUSH2 0x962 PUSH2 0x1239 JUMP JUMPDEST DUP1 PUSH2 0x96D JUMPI POP PUSH2 0x989 JUMP JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP2 SWAP1 PUSH2 0xC0F JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F206E6F6E2D45524331313535 PUSH1 0x44 DUP3 ADD MSTORE PUSH20 0x2932B1B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x61 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xBC197C81 PUSH1 0xE0 SHL EQ PUSH2 0xA1E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x12C3 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP3 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xA61 JUMPI PUSH2 0xA61 PUSH2 0x108D JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x6AD JUMPI PUSH1 0x40 MLOAD PUSH4 0xF23A6E61 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xF23A6E61 SWAP1 PUSH2 0xAB6 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x130B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xAF1 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xAEE SWAP2 DUP2 ADD SWAP1 PUSH2 0x1200 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xAFD JUMPI PUSH2 0x94E PUSH2 0x121D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xF23A6E61 PUSH1 0xE0 SHL EQ PUSH2 0xA1E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x12C3 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xB44 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB65 DUP4 PUSH2 0xB2D JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xB89 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xBA9 DUP2 PUSH2 0xB73 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBC2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xBEF JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0xBD3 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xBA9 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xBC9 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xC5E JUMPI PUSH2 0xC5E PUSH2 0xC22 JUMP JUMPDEST PUSH1 0x40 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xC7F JUMPI PUSH2 0xC7F PUSH2 0xC22 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xC9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0xCA7 DUP3 PUSH2 0xC65 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCB4 DUP3 DUP3 PUSH2 0xC38 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x5 SWAP4 SWAP1 SWAP4 SHL DUP6 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP2 POP DUP7 DUP5 GT ISZERO PUSH2 0xCD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xCEF JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0xCD8 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xD0B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xD25 JUMPI PUSH2 0xD25 PUSH2 0xC22 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD3C PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 PUSH2 0xC38 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0xD51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xD86 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD8F DUP7 PUSH2 0xB2D JUMP JUMPDEST SWAP5 POP PUSH2 0xD9D PUSH1 0x20 DUP8 ADD PUSH2 0xB2D JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xDBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDC6 DUP10 DUP4 DUP11 ADD PUSH2 0xC89 JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xDDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDE8 DUP10 DUP4 DUP11 ADD PUSH2 0xC89 JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xDFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE0B DUP9 DUP3 DUP10 ADD PUSH2 0xCFA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE2B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xE43 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xE57 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0xE64 DUP3 PUSH2 0xC65 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE71 DUP3 DUP3 PUSH2 0xC38 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x5 SWAP4 SWAP1 SWAP4 SHL DUP6 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP2 POP DUP10 DUP5 GT ISZERO PUSH2 0xE91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0xEB6 JUMPI PUSH2 0xEA7 DUP7 PUSH2 0xB2D JUMP JUMPDEST DUP3 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP1 DUP3 ADD SWAP1 PUSH2 0xE96 JUMP JUMPDEST SWAP7 POP POP DUP7 ADD CALLDATALOAD SWAP3 POP POP DUP1 DUP3 GT ISZERO PUSH2 0xECC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xED9 DUP6 DUP3 DUP7 ADD PUSH2 0xC89 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xF13 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xEF7 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xBA9 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xEE3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF44 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF4D DUP4 PUSH2 0xB2D JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xF62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF89 DUP4 PUSH2 0xB2D JUMP JUMPDEST SWAP2 POP PUSH2 0xF97 PUSH1 0x20 DUP5 ADD PUSH2 0xB2D JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xFB8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xFC1 DUP7 PUSH2 0xB2D JUMP JUMPDEST SWAP5 POP PUSH2 0xFCF PUSH1 0x20 DUP8 ADD PUSH2 0xB2D JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xFF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE0B DUP9 DUP3 DUP10 ADD PUSH2 0xCFA JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1019 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1039 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A2063616C6C6572206973206E6F7420746F6B656E206F776E PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x195C881BDC88185C1C1C9BDD9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x10CB JUMPI PUSH2 0x10CB PUSH2 0x10A3 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F20746865207A65726F206164 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A20696E73756666696369656E742062616C616E636520666F PUSH1 0x40 DUP3 ADD MSTORE PUSH10 0x39103A3930B739B332B9 PUSH1 0xB1 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x221 JUMPI PUSH2 0x221 PUSH2 0x10A3 JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1187 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0xEE3 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1199 DUP2 DUP6 PUSH2 0xEE3 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND DUP4 MSTORE DUP1 DUP8 AND PUSH1 0x20 DUP5 ADD MSTORE POP PUSH1 0xA0 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x11CE PUSH1 0xA0 DUP4 ADD DUP7 PUSH2 0xEE3 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x11E0 DUP2 DUP7 PUSH2 0xEE3 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x11F4 DUP2 DUP6 PUSH2 0xBC9 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1212 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xBA9 DUP2 PUSH2 0xB73 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 RETURNDATASIZE GT ISZERO PUSH2 0x1236 JUMPI PUSH1 0x4 PUSH1 0x0 DUP1 RETURNDATACOPY POP PUSH1 0x0 MLOAD PUSH1 0xE0 SHR JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x44 RETURNDATASIZE LT ISZERO PUSH2 0x1247 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x3 NOT RETURNDATASIZE DUP2 ADD PUSH1 0x4 DUP4 RETURNDATACOPY DUP2 MLOAD RETURNDATASIZE PUSH8 0xFFFFFFFFFFFFFFFF DUP2 PUSH1 0x24 DUP5 ADD GT DUP2 DUP5 GT OR ISZERO PUSH2 0x1277 JUMPI POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP3 DUP6 ADD SWAP2 POP DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x128F JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP5 RETURNDATASIZE DUP8 ADD ADD PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x12A9 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x12B8 PUSH1 0x20 DUP3 DUP7 ADD ADD DUP8 PUSH2 0xC38 JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A204552433131353552656365697665722072656A65637465 PUSH1 0x40 DUP3 ADD MSTORE PUSH8 0x6420746F6B656E73 PUSH1 0xC0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND DUP4 MSTORE DUP1 DUP8 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP5 PUSH1 0x40 DUP4 ADD MSTORE DUP4 PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0xA0 PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x1343 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0xBC9 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SIGNEXTEND 0x5F BLOCKHASH 0xEF SWAP13 JUMP 0xA7 PUSH19 0x4719124204351BF2E356F42AAD83FF6030ACC6 0xD MSTORE 0xE5 0xD8 PUSH5 0x64736F6C63 NUMBER STOP ADDMOD GT STOP CALLER ","sourceMap":"682:17320:7:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_2014":{"entryPoint":null,"id":2014,"parameterSlots":6,"returnSlots":0},"@_asSingletonArray_2170":{"entryPoint":2599,"id":2170,"parameterSlots":1,"returnSlots":1},"@_beforeTokenTransfer_1995":{"entryPoint":null,"id":1995,"parameterSlots":6,"returnSlots":0},"@_doSafeBatchTransferAcceptanceCheck_2142":{"entryPoint":2243,"id":2142,"parameterSlots":6,"returnSlots":0},"@_doSafeTransferAcceptanceCheck_2077":{"entryPoint":2674,"id":2077,"parameterSlots":6,"returnSlots":0},"@_msgSender_2931":{"entryPoint":null,"id":2931,"parameterSlots":0,"returnSlots":1},"@_safeBatchTransferFrom_1493":{"entryPoint":1237,"id":1493,"parameterSlots":5,"returnSlots":0},"@_safeTransferFrom_1358":{"entryPoint":1941,"id":1358,"parameterSlots":5,"returnSlots":0},"@_setApprovalForAll_1976":{"entryPoint":1717,"id":1976,"parameterSlots":3,"returnSlots":0},"@balanceOfBatch_1128":{"entryPoint":855,"id":1128,"parameterSlots":2,"returnSlots":1},"@balanceOf_1064":{"entryPoint":396,"id":1064,"parameterSlots":2,"returnSlots":1},"@isApprovedForAll_1163":{"entryPoint":null,"id":1163,"parameterSlots":2,"returnSlots":1},"@isContract_2638":{"entryPoint":null,"id":2638,"parameterSlots":1,"returnSlots":1},"@safeBatchTransferFrom_1241":{"entryPoint":779,"id":1241,"parameterSlots":5,"returnSlots":0},"@safeTransferFrom_1201":{"entryPoint":1168,"id":1201,"parameterSlots":5,"returnSlots":0},"@setApprovalForAll_1145":{"entryPoint":1153,"id":1145,"parameterSlots":2,"returnSlots":0},"@supportsInterface_1024":{"entryPoint":551,"id":1024,"parameterSlots":1,"returnSlots":1},"@supportsInterface_3730":{"entryPoint":null,"id":3730,"parameterSlots":1,"returnSlots":1},"@uri_1036":{"entryPoint":631,"id":1036,"parameterSlots":1,"returnSlots":1},"abi_decode_address":{"entryPoint":2861,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_uint256_dyn":{"entryPoint":3209,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes":{"entryPoint":3322,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":3949,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr":{"entryPoint":3438,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr":{"entryPoint":4000,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_bool":{"entryPoint":3889,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":2889,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":3608,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":2956,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":4608,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":2992,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_array_uint256_dyn":{"entryPoint":3811,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string":{"entryPoint":3017,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":4514,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":4875,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":3870,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":4468,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3087,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4803,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4159,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4306,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4375,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"array_allocation_size_array_uint256_dyn":{"entryPoint":3173,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":4449,"id":null,"parameterSlots":2,"returnSlots":1},"extract_byte_array_length":{"entryPoint":4101,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":3128,"id":null,"parameterSlots":2,"returnSlots":0},"increment_t_uint256":{"entryPoint":4281,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":4259,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":4237,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":3106,"id":null,"parameterSlots":0,"returnSlots":0},"return_data_selector":{"entryPoint":4637,"id":null,"parameterSlots":0,"returnSlots":1},"try_decode_error_message":{"entryPoint":4665,"id":null,"parameterSlots":0,"returnSlots":1},"validator_revert_bytes4":{"entryPoint":2931,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:15929:30","statements":[{"nodeType":"YulBlock","src":"6:3:30","statements":[]},{"body":{"nodeType":"YulBlock","src":"63:147:30","statements":[{"nodeType":"YulAssignment","src":"73:29:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"95:6:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"82:12:30"},"nodeType":"YulFunctionCall","src":"82:20:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"73:5:30"}]},{"body":{"nodeType":"YulBlock","src":"188:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"197:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"200:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"190:6:30"},"nodeType":"YulFunctionCall","src":"190:12:30"},"nodeType":"YulExpressionStatement","src":"190:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"124:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"135:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"142:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"131:3:30"},"nodeType":"YulFunctionCall","src":"131:54:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"121:2:30"},"nodeType":"YulFunctionCall","src":"121:65:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"114:6:30"},"nodeType":"YulFunctionCall","src":"114:73:30"},"nodeType":"YulIf","src":"111:93:30"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"42:6:30","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"53:5:30","type":""}],"src":"14:196:30"},{"body":{"nodeType":"YulBlock","src":"302:167:30","statements":[{"body":{"nodeType":"YulBlock","src":"348:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"357:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"360:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"350:6:30"},"nodeType":"YulFunctionCall","src":"350:12:30"},"nodeType":"YulExpressionStatement","src":"350:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"323:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"332:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"319:3:30"},"nodeType":"YulFunctionCall","src":"319:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"344:2:30","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"315:3:30"},"nodeType":"YulFunctionCall","src":"315:32:30"},"nodeType":"YulIf","src":"312:52:30"},{"nodeType":"YulAssignment","src":"373:39:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"402:9:30"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"383:18:30"},"nodeType":"YulFunctionCall","src":"383:29:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"373:6:30"}]},{"nodeType":"YulAssignment","src":"421:42:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"448:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"459:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"444:3:30"},"nodeType":"YulFunctionCall","src":"444:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"431:12:30"},"nodeType":"YulFunctionCall","src":"431:32:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"421:6:30"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"260:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"271:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"283:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"291:6:30","type":""}],"src":"215:254:30"},{"body":{"nodeType":"YulBlock","src":"575:76:30","statements":[{"nodeType":"YulAssignment","src":"585:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"597:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"608:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"593:3:30"},"nodeType":"YulFunctionCall","src":"593:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"585:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"627:9:30"},{"name":"value0","nodeType":"YulIdentifier","src":"638:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"620:6:30"},"nodeType":"YulFunctionCall","src":"620:25:30"},"nodeType":"YulExpressionStatement","src":"620:25:30"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"544:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"555:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"566:4:30","type":""}],"src":"474:177:30"},{"body":{"nodeType":"YulBlock","src":"700:87:30","statements":[{"body":{"nodeType":"YulBlock","src":"765:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"774:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"777:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"767:6:30"},"nodeType":"YulFunctionCall","src":"767:12:30"},"nodeType":"YulExpressionStatement","src":"767:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"723:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"734:5:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"745:3:30","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"750:10:30","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"741:3:30"},"nodeType":"YulFunctionCall","src":"741:20:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"730:3:30"},"nodeType":"YulFunctionCall","src":"730:32:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"720:2:30"},"nodeType":"YulFunctionCall","src":"720:43:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"713:6:30"},"nodeType":"YulFunctionCall","src":"713:51:30"},"nodeType":"YulIf","src":"710:71:30"}]},"name":"validator_revert_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"689:5:30","type":""}],"src":"656:131:30"},{"body":{"nodeType":"YulBlock","src":"861:176:30","statements":[{"body":{"nodeType":"YulBlock","src":"907:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"916:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"919:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"909:6:30"},"nodeType":"YulFunctionCall","src":"909:12:30"},"nodeType":"YulExpressionStatement","src":"909:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"882:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"891:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"878:3:30"},"nodeType":"YulFunctionCall","src":"878:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"903:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"874:3:30"},"nodeType":"YulFunctionCall","src":"874:32:30"},"nodeType":"YulIf","src":"871:52:30"},{"nodeType":"YulVariableDeclaration","src":"932:36:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"958:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"945:12:30"},"nodeType":"YulFunctionCall","src":"945:23:30"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"936:5:30","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1001:5:30"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"977:23:30"},"nodeType":"YulFunctionCall","src":"977:30:30"},"nodeType":"YulExpressionStatement","src":"977:30:30"},{"nodeType":"YulAssignment","src":"1016:15:30","value":{"name":"value","nodeType":"YulIdentifier","src":"1026:5:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1016:6:30"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"827:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"838:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"850:6:30","type":""}],"src":"792:245:30"},{"body":{"nodeType":"YulBlock","src":"1137:92:30","statements":[{"nodeType":"YulAssignment","src":"1147:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1159:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"1170:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1155:3:30"},"nodeType":"YulFunctionCall","src":"1155:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1147:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1189:9:30"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1214:6:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1207:6:30"},"nodeType":"YulFunctionCall","src":"1207:14:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1200:6:30"},"nodeType":"YulFunctionCall","src":"1200:22:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1182:6:30"},"nodeType":"YulFunctionCall","src":"1182:41:30"},"nodeType":"YulExpressionStatement","src":"1182:41:30"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1106:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1117:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1128:4:30","type":""}],"src":"1042:187:30"},{"body":{"nodeType":"YulBlock","src":"1304:110:30","statements":[{"body":{"nodeType":"YulBlock","src":"1350:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1359:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1362:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1352:6:30"},"nodeType":"YulFunctionCall","src":"1352:12:30"},"nodeType":"YulExpressionStatement","src":"1352:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1325:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"1334:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1321:3:30"},"nodeType":"YulFunctionCall","src":"1321:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"1346:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1317:3:30"},"nodeType":"YulFunctionCall","src":"1317:32:30"},"nodeType":"YulIf","src":"1314:52:30"},{"nodeType":"YulAssignment","src":"1375:33:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1398:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1385:12:30"},"nodeType":"YulFunctionCall","src":"1385:23:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1375:6:30"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1270:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1281:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1293:6:30","type":""}],"src":"1234:180:30"},{"body":{"nodeType":"YulBlock","src":"1469:373:30","statements":[{"nodeType":"YulVariableDeclaration","src":"1479:26:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1499:5:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1493:5:30"},"nodeType":"YulFunctionCall","src":"1493:12:30"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1483:6:30","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1521:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"1526:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1514:6:30"},"nodeType":"YulFunctionCall","src":"1514:19:30"},"nodeType":"YulExpressionStatement","src":"1514:19:30"},{"nodeType":"YulVariableDeclaration","src":"1542:10:30","value":{"kind":"number","nodeType":"YulLiteral","src":"1551:1:30","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1546:1:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"1613:110:30","statements":[{"nodeType":"YulVariableDeclaration","src":"1627:14:30","value":{"kind":"number","nodeType":"YulLiteral","src":"1637:4:30","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1631:2:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1669:3:30"},{"name":"i","nodeType":"YulIdentifier","src":"1674:1:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1665:3:30"},"nodeType":"YulFunctionCall","src":"1665:11:30"},{"name":"_1","nodeType":"YulIdentifier","src":"1678:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1661:3:30"},"nodeType":"YulFunctionCall","src":"1661:20:30"},{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1697:5:30"},{"name":"i","nodeType":"YulIdentifier","src":"1704:1:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1693:3:30"},"nodeType":"YulFunctionCall","src":"1693:13:30"},{"name":"_1","nodeType":"YulIdentifier","src":"1708:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1689:3:30"},"nodeType":"YulFunctionCall","src":"1689:22:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1683:5:30"},"nodeType":"YulFunctionCall","src":"1683:29:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1654:6:30"},"nodeType":"YulFunctionCall","src":"1654:59:30"},"nodeType":"YulExpressionStatement","src":"1654:59:30"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1572:1:30"},{"name":"length","nodeType":"YulIdentifier","src":"1575:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1569:2:30"},"nodeType":"YulFunctionCall","src":"1569:13:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1583:21:30","statements":[{"nodeType":"YulAssignment","src":"1585:17:30","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1594:1:30"},{"kind":"number","nodeType":"YulLiteral","src":"1597:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1590:3:30"},"nodeType":"YulFunctionCall","src":"1590:12:30"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1585:1:30"}]}]},"pre":{"nodeType":"YulBlock","src":"1565:3:30","statements":[]},"src":"1561:162:30"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1747:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"1752:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1743:3:30"},"nodeType":"YulFunctionCall","src":"1743:16:30"},{"kind":"number","nodeType":"YulLiteral","src":"1761:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1739:3:30"},"nodeType":"YulFunctionCall","src":"1739:27:30"},{"kind":"number","nodeType":"YulLiteral","src":"1768:1:30","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1732:6:30"},"nodeType":"YulFunctionCall","src":"1732:38:30"},"nodeType":"YulExpressionStatement","src":"1732:38:30"},{"nodeType":"YulAssignment","src":"1779:57:30","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1794:3:30"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1807:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"1815:2:30","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1803:3:30"},"nodeType":"YulFunctionCall","src":"1803:15:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1824:2:30","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1820:3:30"},"nodeType":"YulFunctionCall","src":"1820:7:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1799:3:30"},"nodeType":"YulFunctionCall","src":"1799:29:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1790:3:30"},"nodeType":"YulFunctionCall","src":"1790:39:30"},{"kind":"number","nodeType":"YulLiteral","src":"1831:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1786:3:30"},"nodeType":"YulFunctionCall","src":"1786:50:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1779:3:30"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1446:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1453:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"1461:3:30","type":""}],"src":"1419:423:30"},{"body":{"nodeType":"YulBlock","src":"1968:99:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1985:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"1996:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1978:6:30"},"nodeType":"YulFunctionCall","src":"1978:21:30"},"nodeType":"YulExpressionStatement","src":"1978:21:30"},{"nodeType":"YulAssignment","src":"2008:53:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2034:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2046:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"2057:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2042:3:30"},"nodeType":"YulFunctionCall","src":"2042:18:30"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"2016:17:30"},"nodeType":"YulFunctionCall","src":"2016:45:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2008:4:30"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1937:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1948:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1959:4:30","type":""}],"src":"1847:220:30"},{"body":{"nodeType":"YulBlock","src":"2104:95:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2121:1:30","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2128:3:30","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2133:10:30","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2124:3:30"},"nodeType":"YulFunctionCall","src":"2124:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2114:6:30"},"nodeType":"YulFunctionCall","src":"2114:31:30"},"nodeType":"YulExpressionStatement","src":"2114:31:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2161:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2164:4:30","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2154:6:30"},"nodeType":"YulFunctionCall","src":"2154:15:30"},"nodeType":"YulExpressionStatement","src":"2154:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2185:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2188:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2178:6:30"},"nodeType":"YulFunctionCall","src":"2178:15:30"},"nodeType":"YulExpressionStatement","src":"2178:15:30"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"2072:127:30"},{"body":{"nodeType":"YulBlock","src":"2251:202:30","statements":[{"nodeType":"YulVariableDeclaration","src":"2261:58:30","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2283:6:30"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"2299:4:30"},{"kind":"number","nodeType":"YulLiteral","src":"2305:2:30","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2295:3:30"},"nodeType":"YulFunctionCall","src":"2295:13:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2314:2:30","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2310:3:30"},"nodeType":"YulFunctionCall","src":"2310:7:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2291:3:30"},"nodeType":"YulFunctionCall","src":"2291:27:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2279:3:30"},"nodeType":"YulFunctionCall","src":"2279:40:30"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"2265:10:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"2394:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2396:16:30"},"nodeType":"YulFunctionCall","src":"2396:18:30"},"nodeType":"YulExpressionStatement","src":"2396:18:30"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2337:10:30"},{"kind":"number","nodeType":"YulLiteral","src":"2349:18:30","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2334:2:30"},"nodeType":"YulFunctionCall","src":"2334:34:30"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2373:10:30"},{"name":"memPtr","nodeType":"YulIdentifier","src":"2385:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2370:2:30"},"nodeType":"YulFunctionCall","src":"2370:22:30"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2331:2:30"},"nodeType":"YulFunctionCall","src":"2331:62:30"},"nodeType":"YulIf","src":"2328:88:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2432:2:30","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2436:10:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2425:6:30"},"nodeType":"YulFunctionCall","src":"2425:22:30"},"nodeType":"YulExpressionStatement","src":"2425:22:30"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"2233:6:30","type":""},{"name":"size","nodeType":"YulTypedName","src":"2241:4:30","type":""}],"src":"2204:249:30"},{"body":{"nodeType":"YulBlock","src":"2527:114:30","statements":[{"body":{"nodeType":"YulBlock","src":"2571:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2573:16:30"},"nodeType":"YulFunctionCall","src":"2573:18:30"},"nodeType":"YulExpressionStatement","src":"2573:18:30"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2543:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"2551:18:30","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2540:2:30"},"nodeType":"YulFunctionCall","src":"2540:30:30"},"nodeType":"YulIf","src":"2537:56:30"},{"nodeType":"YulAssignment","src":"2602:33:30","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2618:1:30","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"2621:6:30"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2614:3:30"},"nodeType":"YulFunctionCall","src":"2614:14:30"},{"kind":"number","nodeType":"YulLiteral","src":"2630:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2610:3:30"},"nodeType":"YulFunctionCall","src":"2610:25:30"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"2602:4:30"}]}]},"name":"array_allocation_size_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"2507:6:30","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"2518:4:30","type":""}],"src":"2458:183:30"},{"body":{"nodeType":"YulBlock","src":"2710:660:30","statements":[{"body":{"nodeType":"YulBlock","src":"2759:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2768:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2771:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2761:6:30"},"nodeType":"YulFunctionCall","src":"2761:12:30"},"nodeType":"YulExpressionStatement","src":"2761:12:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2738:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"2746:4:30","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2734:3:30"},"nodeType":"YulFunctionCall","src":"2734:17:30"},{"name":"end","nodeType":"YulIdentifier","src":"2753:3:30"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2730:3:30"},"nodeType":"YulFunctionCall","src":"2730:27:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2723:6:30"},"nodeType":"YulFunctionCall","src":"2723:35:30"},"nodeType":"YulIf","src":"2720:55:30"},{"nodeType":"YulVariableDeclaration","src":"2784:30:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2807:6:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2794:12:30"},"nodeType":"YulFunctionCall","src":"2794:20:30"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2788:2:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2823:14:30","value":{"kind":"number","nodeType":"YulLiteral","src":"2833:4:30","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2827:2:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2846:53:30","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2896:2:30"}],"functionName":{"name":"array_allocation_size_array_uint256_dyn","nodeType":"YulIdentifier","src":"2856:39:30"},"nodeType":"YulFunctionCall","src":"2856:43:30"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"2850:2:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2908:23:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2928:2:30","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2922:5:30"},"nodeType":"YulFunctionCall","src":"2922:9:30"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"2912:6:30","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2960:6:30"},{"name":"_3","nodeType":"YulIdentifier","src":"2968:2:30"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"2940:19:30"},"nodeType":"YulFunctionCall","src":"2940:31:30"},"nodeType":"YulExpressionStatement","src":"2940:31:30"},{"nodeType":"YulVariableDeclaration","src":"2980:17:30","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"2991:6:30"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"2984:3:30","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3013:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"3021:2:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3006:6:30"},"nodeType":"YulFunctionCall","src":"3006:18:30"},"nodeType":"YulExpressionStatement","src":"3006:18:30"},{"nodeType":"YulAssignment","src":"3033:22:30","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3044:6:30"},{"name":"_2","nodeType":"YulIdentifier","src":"3052:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3040:3:30"},"nodeType":"YulFunctionCall","src":"3040:15:30"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3033:3:30"}]},{"nodeType":"YulVariableDeclaration","src":"3064:46:30","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3086:6:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3098:1:30","type":"","value":"5"},{"name":"_1","nodeType":"YulIdentifier","src":"3101:2:30"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3094:3:30"},"nodeType":"YulFunctionCall","src":"3094:10:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3082:3:30"},"nodeType":"YulFunctionCall","src":"3082:23:30"},{"name":"_2","nodeType":"YulIdentifier","src":"3107:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3078:3:30"},"nodeType":"YulFunctionCall","src":"3078:32:30"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"3068:6:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"3138:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3147:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3150:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3140:6:30"},"nodeType":"YulFunctionCall","src":"3140:12:30"},"nodeType":"YulExpressionStatement","src":"3140:12:30"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"3125:6:30"},{"name":"end","nodeType":"YulIdentifier","src":"3133:3:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3122:2:30"},"nodeType":"YulFunctionCall","src":"3122:15:30"},"nodeType":"YulIf","src":"3119:35:30"},{"nodeType":"YulVariableDeclaration","src":"3163:26:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3178:6:30"},{"name":"_2","nodeType":"YulIdentifier","src":"3186:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3174:3:30"},"nodeType":"YulFunctionCall","src":"3174:15:30"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"3167:3:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"3254:86:30","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3275:3:30"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3293:3:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3280:12:30"},"nodeType":"YulFunctionCall","src":"3280:17:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3268:6:30"},"nodeType":"YulFunctionCall","src":"3268:30:30"},"nodeType":"YulExpressionStatement","src":"3268:30:30"},{"nodeType":"YulAssignment","src":"3311:19:30","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3322:3:30"},{"name":"_2","nodeType":"YulIdentifier","src":"3327:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3318:3:30"},"nodeType":"YulFunctionCall","src":"3318:12:30"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3311:3:30"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3209:3:30"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"3214:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3206:2:30"},"nodeType":"YulFunctionCall","src":"3206:15:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3222:23:30","statements":[{"nodeType":"YulAssignment","src":"3224:19:30","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3235:3:30"},{"name":"_2","nodeType":"YulIdentifier","src":"3240:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3231:3:30"},"nodeType":"YulFunctionCall","src":"3231:12:30"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"3224:3:30"}]}]},"pre":{"nodeType":"YulBlock","src":"3202:3:30","statements":[]},"src":"3198:142:30"},{"nodeType":"YulAssignment","src":"3349:15:30","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"3358:6:30"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3349:5:30"}]}]},"name":"abi_decode_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2684:6:30","type":""},{"name":"end","nodeType":"YulTypedName","src":"2692:3:30","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2700:5:30","type":""}],"src":"2646:724:30"},{"body":{"nodeType":"YulBlock","src":"3427:503:30","statements":[{"body":{"nodeType":"YulBlock","src":"3476:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3485:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3488:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3478:6:30"},"nodeType":"YulFunctionCall","src":"3478:12:30"},"nodeType":"YulExpressionStatement","src":"3478:12:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3455:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"3463:4:30","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3451:3:30"},"nodeType":"YulFunctionCall","src":"3451:17:30"},{"name":"end","nodeType":"YulIdentifier","src":"3470:3:30"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3447:3:30"},"nodeType":"YulFunctionCall","src":"3447:27:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3440:6:30"},"nodeType":"YulFunctionCall","src":"3440:35:30"},"nodeType":"YulIf","src":"3437:55:30"},{"nodeType":"YulVariableDeclaration","src":"3501:30:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3524:6:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3511:12:30"},"nodeType":"YulFunctionCall","src":"3511:20:30"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3505:2:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"3570:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3572:16:30"},"nodeType":"YulFunctionCall","src":"3572:18:30"},"nodeType":"YulExpressionStatement","src":"3572:18:30"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3546:2:30"},{"kind":"number","nodeType":"YulLiteral","src":"3550:18:30","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3543:2:30"},"nodeType":"YulFunctionCall","src":"3543:26:30"},"nodeType":"YulIf","src":"3540:52:30"},{"nodeType":"YulVariableDeclaration","src":"3601:23:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3621:2:30","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3615:5:30"},"nodeType":"YulFunctionCall","src":"3615:9:30"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"3605:6:30","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3653:6:30"},{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3673:2:30"},{"kind":"number","nodeType":"YulLiteral","src":"3677:4:30","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3669:3:30"},"nodeType":"YulFunctionCall","src":"3669:13:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3688:2:30","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3684:3:30"},"nodeType":"YulFunctionCall","src":"3684:7:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3665:3:30"},"nodeType":"YulFunctionCall","src":"3665:27:30"},{"kind":"number","nodeType":"YulLiteral","src":"3694:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3661:3:30"},"nodeType":"YulFunctionCall","src":"3661:38:30"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"3633:19:30"},"nodeType":"YulFunctionCall","src":"3633:67:30"},"nodeType":"YulExpressionStatement","src":"3633:67:30"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3716:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"3724:2:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3709:6:30"},"nodeType":"YulFunctionCall","src":"3709:18:30"},"nodeType":"YulExpressionStatement","src":"3709:18:30"},{"body":{"nodeType":"YulBlock","src":"3775:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3784:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3787:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3777:6:30"},"nodeType":"YulFunctionCall","src":"3777:12:30"},"nodeType":"YulExpressionStatement","src":"3777:12:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3750:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"3758:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3746:3:30"},"nodeType":"YulFunctionCall","src":"3746:15:30"},{"kind":"number","nodeType":"YulLiteral","src":"3763:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3742:3:30"},"nodeType":"YulFunctionCall","src":"3742:26:30"},{"name":"end","nodeType":"YulIdentifier","src":"3770:3:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3739:2:30"},"nodeType":"YulFunctionCall","src":"3739:35:30"},"nodeType":"YulIf","src":"3736:55:30"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3817:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"3825:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3813:3:30"},"nodeType":"YulFunctionCall","src":"3813:17:30"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3836:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"3844:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3832:3:30"},"nodeType":"YulFunctionCall","src":"3832:17:30"},{"name":"_1","nodeType":"YulIdentifier","src":"3851:2:30"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"3800:12:30"},"nodeType":"YulFunctionCall","src":"3800:54:30"},"nodeType":"YulExpressionStatement","src":"3800:54:30"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3878:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"3886:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3874:3:30"},"nodeType":"YulFunctionCall","src":"3874:15:30"},{"kind":"number","nodeType":"YulLiteral","src":"3891:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3870:3:30"},"nodeType":"YulFunctionCall","src":"3870:26:30"},{"kind":"number","nodeType":"YulLiteral","src":"3898:1:30","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3863:6:30"},"nodeType":"YulFunctionCall","src":"3863:37:30"},"nodeType":"YulExpressionStatement","src":"3863:37:30"},{"nodeType":"YulAssignment","src":"3909:15:30","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"3918:6:30"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3909:5:30"}]}]},"name":"abi_decode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3401:6:30","type":""},{"name":"end","nodeType":"YulTypedName","src":"3409:3:30","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3417:5:30","type":""}],"src":"3375:555:30"},{"body":{"nodeType":"YulBlock","src":"4132:746:30","statements":[{"body":{"nodeType":"YulBlock","src":"4179:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4188:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4191:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4181:6:30"},"nodeType":"YulFunctionCall","src":"4181:12:30"},"nodeType":"YulExpressionStatement","src":"4181:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4153:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"4162:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4149:3:30"},"nodeType":"YulFunctionCall","src":"4149:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"4174:3:30","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4145:3:30"},"nodeType":"YulFunctionCall","src":"4145:33:30"},"nodeType":"YulIf","src":"4142:53:30"},{"nodeType":"YulAssignment","src":"4204:39:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4233:9:30"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4214:18:30"},"nodeType":"YulFunctionCall","src":"4214:29:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4204:6:30"}]},{"nodeType":"YulAssignment","src":"4252:48:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4285:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"4296:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4281:3:30"},"nodeType":"YulFunctionCall","src":"4281:18:30"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4262:18:30"},"nodeType":"YulFunctionCall","src":"4262:38:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4252:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"4309:46:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4340:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"4351:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4336:3:30"},"nodeType":"YulFunctionCall","src":"4336:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4323:12:30"},"nodeType":"YulFunctionCall","src":"4323:32:30"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4313:6:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4364:28:30","value":{"kind":"number","nodeType":"YulLiteral","src":"4374:18:30","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4368:2:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"4419:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4428:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4431:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4421:6:30"},"nodeType":"YulFunctionCall","src":"4421:12:30"},"nodeType":"YulExpressionStatement","src":"4421:12:30"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4407:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"4415:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4404:2:30"},"nodeType":"YulFunctionCall","src":"4404:14:30"},"nodeType":"YulIf","src":"4401:34:30"},{"nodeType":"YulAssignment","src":"4444:71:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4487:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"4498:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4483:3:30"},"nodeType":"YulFunctionCall","src":"4483:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4507:7:30"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"4454:28:30"},"nodeType":"YulFunctionCall","src":"4454:61:30"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4444:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"4524:48:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4557:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"4568:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4553:3:30"},"nodeType":"YulFunctionCall","src":"4553:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4540:12:30"},"nodeType":"YulFunctionCall","src":"4540:32:30"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"4528:8:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"4601:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4610:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4613:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4603:6:30"},"nodeType":"YulFunctionCall","src":"4603:12:30"},"nodeType":"YulExpressionStatement","src":"4603:12:30"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"4587:8:30"},{"name":"_1","nodeType":"YulIdentifier","src":"4597:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4584:2:30"},"nodeType":"YulFunctionCall","src":"4584:16:30"},"nodeType":"YulIf","src":"4581:36:30"},{"nodeType":"YulAssignment","src":"4626:73:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4669:9:30"},{"name":"offset_1","nodeType":"YulIdentifier","src":"4680:8:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4665:3:30"},"nodeType":"YulFunctionCall","src":"4665:24:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4691:7:30"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"4636:28:30"},"nodeType":"YulFunctionCall","src":"4636:63:30"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4626:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"4708:49:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4741:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"4752:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4737:3:30"},"nodeType":"YulFunctionCall","src":"4737:19:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4724:12:30"},"nodeType":"YulFunctionCall","src":"4724:33:30"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"4712:8:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"4786:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4795:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4798:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4788:6:30"},"nodeType":"YulFunctionCall","src":"4788:12:30"},"nodeType":"YulExpressionStatement","src":"4788:12:30"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"4772:8:30"},{"name":"_1","nodeType":"YulIdentifier","src":"4782:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4769:2:30"},"nodeType":"YulFunctionCall","src":"4769:16:30"},"nodeType":"YulIf","src":"4766:36:30"},{"nodeType":"YulAssignment","src":"4811:61:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4842:9:30"},{"name":"offset_2","nodeType":"YulIdentifier","src":"4853:8:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4838:3:30"},"nodeType":"YulFunctionCall","src":"4838:24:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4864:7:30"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"4821:16:30"},"nodeType":"YulFunctionCall","src":"4821:51:30"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"4811:6:30"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4066:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4077:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4089:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4097:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4105:6:30","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4113:6:30","type":""},{"name":"value4","nodeType":"YulTypedName","src":"4121:6:30","type":""}],"src":"3935:943:30"},{"body":{"nodeType":"YulBlock","src":"5020:1071:30","statements":[{"body":{"nodeType":"YulBlock","src":"5066:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5075:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5078:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5068:6:30"},"nodeType":"YulFunctionCall","src":"5068:12:30"},"nodeType":"YulExpressionStatement","src":"5068:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5041:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"5050:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5037:3:30"},"nodeType":"YulFunctionCall","src":"5037:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"5062:2:30","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5033:3:30"},"nodeType":"YulFunctionCall","src":"5033:32:30"},"nodeType":"YulIf","src":"5030:52:30"},{"nodeType":"YulVariableDeclaration","src":"5091:37:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5118:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5105:12:30"},"nodeType":"YulFunctionCall","src":"5105:23:30"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5095:6:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5137:28:30","value":{"kind":"number","nodeType":"YulLiteral","src":"5147:18:30","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5141:2:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"5192:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5201:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5204:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5194:6:30"},"nodeType":"YulFunctionCall","src":"5194:12:30"},"nodeType":"YulExpressionStatement","src":"5194:12:30"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5180:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"5188:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5177:2:30"},"nodeType":"YulFunctionCall","src":"5177:14:30"},"nodeType":"YulIf","src":"5174:34:30"},{"nodeType":"YulVariableDeclaration","src":"5217:32:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5231:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"5242:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5227:3:30"},"nodeType":"YulFunctionCall","src":"5227:22:30"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"5221:2:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"5297:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5306:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5309:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5299:6:30"},"nodeType":"YulFunctionCall","src":"5299:12:30"},"nodeType":"YulExpressionStatement","src":"5299:12:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"5276:2:30"},{"kind":"number","nodeType":"YulLiteral","src":"5280:4:30","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5272:3:30"},"nodeType":"YulFunctionCall","src":"5272:13:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5287:7:30"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5268:3:30"},"nodeType":"YulFunctionCall","src":"5268:27:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5261:6:30"},"nodeType":"YulFunctionCall","src":"5261:35:30"},"nodeType":"YulIf","src":"5258:55:30"},{"nodeType":"YulVariableDeclaration","src":"5322:26:30","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"5345:2:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5332:12:30"},"nodeType":"YulFunctionCall","src":"5332:16:30"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"5326:2:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5357:14:30","value":{"kind":"number","nodeType":"YulLiteral","src":"5367:4:30","type":"","value":"0x20"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"5361:2:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5380:53:30","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"5430:2:30"}],"functionName":{"name":"array_allocation_size_array_uint256_dyn","nodeType":"YulIdentifier","src":"5390:39:30"},"nodeType":"YulFunctionCall","src":"5390:43:30"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"5384:2:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5442:23:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5462:2:30","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5456:5:30"},"nodeType":"YulFunctionCall","src":"5456:9:30"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"5446:6:30","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5494:6:30"},{"name":"_5","nodeType":"YulIdentifier","src":"5502:2:30"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"5474:19:30"},"nodeType":"YulFunctionCall","src":"5474:31:30"},"nodeType":"YulExpressionStatement","src":"5474:31:30"},{"nodeType":"YulVariableDeclaration","src":"5514:17:30","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"5525:6:30"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"5518:3:30","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5547:6:30"},{"name":"_3","nodeType":"YulIdentifier","src":"5555:2:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5540:6:30"},"nodeType":"YulFunctionCall","src":"5540:18:30"},"nodeType":"YulExpressionStatement","src":"5540:18:30"},{"nodeType":"YulAssignment","src":"5567:22:30","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5578:6:30"},{"name":"_4","nodeType":"YulIdentifier","src":"5586:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5574:3:30"},"nodeType":"YulFunctionCall","src":"5574:15:30"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"5567:3:30"}]},{"nodeType":"YulVariableDeclaration","src":"5598:42:30","value":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"5620:2:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5628:1:30","type":"","value":"5"},{"name":"_3","nodeType":"YulIdentifier","src":"5631:2:30"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5624:3:30"},"nodeType":"YulFunctionCall","src":"5624:10:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5616:3:30"},"nodeType":"YulFunctionCall","src":"5616:19:30"},{"name":"_4","nodeType":"YulIdentifier","src":"5637:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5612:3:30"},"nodeType":"YulFunctionCall","src":"5612:28:30"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"5602:6:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"5672:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5681:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5684:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5674:6:30"},"nodeType":"YulFunctionCall","src":"5674:12:30"},"nodeType":"YulExpressionStatement","src":"5674:12:30"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"5655:6:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5663:7:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5652:2:30"},"nodeType":"YulFunctionCall","src":"5652:19:30"},"nodeType":"YulIf","src":"5649:39:30"},{"nodeType":"YulVariableDeclaration","src":"5697:22:30","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"5712:2:30"},{"name":"_4","nodeType":"YulIdentifier","src":"5716:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5708:3:30"},"nodeType":"YulFunctionCall","src":"5708:11:30"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"5701:3:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"5784:92:30","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5805:3:30"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5829:3:30"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"5810:18:30"},"nodeType":"YulFunctionCall","src":"5810:23:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5798:6:30"},"nodeType":"YulFunctionCall","src":"5798:36:30"},"nodeType":"YulExpressionStatement","src":"5798:36:30"},{"nodeType":"YulAssignment","src":"5847:19:30","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5858:3:30"},{"name":"_4","nodeType":"YulIdentifier","src":"5863:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5854:3:30"},"nodeType":"YulFunctionCall","src":"5854:12:30"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"5847:3:30"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5739:3:30"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"5744:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5736:2:30"},"nodeType":"YulFunctionCall","src":"5736:15:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"5752:23:30","statements":[{"nodeType":"YulAssignment","src":"5754:19:30","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5765:3:30"},{"name":"_4","nodeType":"YulIdentifier","src":"5770:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5761:3:30"},"nodeType":"YulFunctionCall","src":"5761:12:30"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"5754:3:30"}]}]},"pre":{"nodeType":"YulBlock","src":"5732:3:30","statements":[]},"src":"5728:148:30"},{"nodeType":"YulAssignment","src":"5885:16:30","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"5895:6:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5885:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"5910:48:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5943:9:30"},{"name":"_4","nodeType":"YulIdentifier","src":"5954:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5939:3:30"},"nodeType":"YulFunctionCall","src":"5939:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5926:12:30"},"nodeType":"YulFunctionCall","src":"5926:32:30"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"5914:8:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"5987:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5996:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5999:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5989:6:30"},"nodeType":"YulFunctionCall","src":"5989:12:30"},"nodeType":"YulExpressionStatement","src":"5989:12:30"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"5973:8:30"},{"name":"_1","nodeType":"YulIdentifier","src":"5983:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5970:2:30"},"nodeType":"YulFunctionCall","src":"5970:16:30"},"nodeType":"YulIf","src":"5967:36:30"},{"nodeType":"YulAssignment","src":"6012:73:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6055:9:30"},{"name":"offset_1","nodeType":"YulIdentifier","src":"6066:8:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6051:3:30"},"nodeType":"YulFunctionCall","src":"6051:24:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6077:7:30"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"6022:28:30"},"nodeType":"YulFunctionCall","src":"6022:63:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6012:6:30"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4978:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4989:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5001:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5009:6:30","type":""}],"src":"4883:1208:30"},{"body":{"nodeType":"YulBlock","src":"6157:374:30","statements":[{"nodeType":"YulVariableDeclaration","src":"6167:26:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6187:5:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6181:5:30"},"nodeType":"YulFunctionCall","src":"6181:12:30"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"6171:6:30","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6209:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"6214:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6202:6:30"},"nodeType":"YulFunctionCall","src":"6202:19:30"},"nodeType":"YulExpressionStatement","src":"6202:19:30"},{"nodeType":"YulVariableDeclaration","src":"6230:14:30","value":{"kind":"number","nodeType":"YulLiteral","src":"6240:4:30","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"6234:2:30","type":""}]},{"nodeType":"YulAssignment","src":"6253:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6264:3:30"},{"name":"_1","nodeType":"YulIdentifier","src":"6269:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6260:3:30"},"nodeType":"YulFunctionCall","src":"6260:12:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6253:3:30"}]},{"nodeType":"YulVariableDeclaration","src":"6281:28:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6299:5:30"},{"name":"_1","nodeType":"YulIdentifier","src":"6306:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6295:3:30"},"nodeType":"YulFunctionCall","src":"6295:14:30"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"6285:6:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6318:10:30","value":{"kind":"number","nodeType":"YulLiteral","src":"6327:1:30","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"6322:1:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"6386:120:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6407:3:30"},{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"6418:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6412:5:30"},"nodeType":"YulFunctionCall","src":"6412:13:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6400:6:30"},"nodeType":"YulFunctionCall","src":"6400:26:30"},"nodeType":"YulExpressionStatement","src":"6400:26:30"},{"nodeType":"YulAssignment","src":"6439:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6450:3:30"},{"name":"_1","nodeType":"YulIdentifier","src":"6455:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6446:3:30"},"nodeType":"YulFunctionCall","src":"6446:12:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6439:3:30"}]},{"nodeType":"YulAssignment","src":"6471:25:30","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"6485:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"6493:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6481:3:30"},"nodeType":"YulFunctionCall","src":"6481:15:30"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"6471:6:30"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6348:1:30"},{"name":"length","nodeType":"YulIdentifier","src":"6351:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6345:2:30"},"nodeType":"YulFunctionCall","src":"6345:13:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"6359:18:30","statements":[{"nodeType":"YulAssignment","src":"6361:14:30","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6370:1:30"},{"kind":"number","nodeType":"YulLiteral","src":"6373:1:30","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6366:3:30"},"nodeType":"YulFunctionCall","src":"6366:9:30"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"6361:1:30"}]}]},"pre":{"nodeType":"YulBlock","src":"6341:3:30","statements":[]},"src":"6337:169:30"},{"nodeType":"YulAssignment","src":"6515:10:30","value":{"name":"pos","nodeType":"YulIdentifier","src":"6522:3:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6515:3:30"}]}]},"name":"abi_encode_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6134:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6141:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6149:3:30","type":""}],"src":"6096:435:30"},{"body":{"nodeType":"YulBlock","src":"6687:110:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6704:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"6715:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6697:6:30"},"nodeType":"YulFunctionCall","src":"6697:21:30"},"nodeType":"YulExpressionStatement","src":"6697:21:30"},{"nodeType":"YulAssignment","src":"6727:64:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6764:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6776:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"6787:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6772:3:30"},"nodeType":"YulFunctionCall","src":"6772:18:30"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"6735:28:30"},"nodeType":"YulFunctionCall","src":"6735:56:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6727:4:30"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6656:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6667:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6678:4:30","type":""}],"src":"6536:261:30"},{"body":{"nodeType":"YulBlock","src":"6886:263:30","statements":[{"body":{"nodeType":"YulBlock","src":"6932:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6941:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6944:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6934:6:30"},"nodeType":"YulFunctionCall","src":"6934:12:30"},"nodeType":"YulExpressionStatement","src":"6934:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6907:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"6916:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6903:3:30"},"nodeType":"YulFunctionCall","src":"6903:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"6928:2:30","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6899:3:30"},"nodeType":"YulFunctionCall","src":"6899:32:30"},"nodeType":"YulIf","src":"6896:52:30"},{"nodeType":"YulAssignment","src":"6957:39:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6986:9:30"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"6967:18:30"},"nodeType":"YulFunctionCall","src":"6967:29:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6957:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"7005:45:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7035:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"7046:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7031:3:30"},"nodeType":"YulFunctionCall","src":"7031:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7018:12:30"},"nodeType":"YulFunctionCall","src":"7018:32:30"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"7009:5:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"7103:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7112:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7115:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7105:6:30"},"nodeType":"YulFunctionCall","src":"7105:12:30"},"nodeType":"YulExpressionStatement","src":"7105:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7072:5:30"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7093:5:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7086:6:30"},"nodeType":"YulFunctionCall","src":"7086:13:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7079:6:30"},"nodeType":"YulFunctionCall","src":"7079:21:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7069:2:30"},"nodeType":"YulFunctionCall","src":"7069:32:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7062:6:30"},"nodeType":"YulFunctionCall","src":"7062:40:30"},"nodeType":"YulIf","src":"7059:60:30"},{"nodeType":"YulAssignment","src":"7128:15:30","value":{"name":"value","nodeType":"YulIdentifier","src":"7138:5:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7128:6:30"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6844:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6855:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6867:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6875:6:30","type":""}],"src":"6802:347:30"},{"body":{"nodeType":"YulBlock","src":"7241:173:30","statements":[{"body":{"nodeType":"YulBlock","src":"7287:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7296:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7299:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7289:6:30"},"nodeType":"YulFunctionCall","src":"7289:12:30"},"nodeType":"YulExpressionStatement","src":"7289:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7262:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"7271:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7258:3:30"},"nodeType":"YulFunctionCall","src":"7258:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"7283:2:30","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7254:3:30"},"nodeType":"YulFunctionCall","src":"7254:32:30"},"nodeType":"YulIf","src":"7251:52:30"},{"nodeType":"YulAssignment","src":"7312:39:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7341:9:30"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"7322:18:30"},"nodeType":"YulFunctionCall","src":"7322:29:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7312:6:30"}]},{"nodeType":"YulAssignment","src":"7360:48:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7393:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"7404:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7389:3:30"},"nodeType":"YulFunctionCall","src":"7389:18:30"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"7370:18:30"},"nodeType":"YulFunctionCall","src":"7370:38:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7360:6:30"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7199:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7210:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7222:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7230:6:30","type":""}],"src":"7154:260:30"},{"body":{"nodeType":"YulBlock","src":"7566:459:30","statements":[{"body":{"nodeType":"YulBlock","src":"7613:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7622:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7625:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7615:6:30"},"nodeType":"YulFunctionCall","src":"7615:12:30"},"nodeType":"YulExpressionStatement","src":"7615:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7587:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"7596:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7583:3:30"},"nodeType":"YulFunctionCall","src":"7583:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"7608:3:30","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7579:3:30"},"nodeType":"YulFunctionCall","src":"7579:33:30"},"nodeType":"YulIf","src":"7576:53:30"},{"nodeType":"YulAssignment","src":"7638:39:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7667:9:30"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"7648:18:30"},"nodeType":"YulFunctionCall","src":"7648:29:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7638:6:30"}]},{"nodeType":"YulAssignment","src":"7686:48:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7719:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"7730:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7715:3:30"},"nodeType":"YulFunctionCall","src":"7715:18:30"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"7696:18:30"},"nodeType":"YulFunctionCall","src":"7696:38:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7686:6:30"}]},{"nodeType":"YulAssignment","src":"7743:42:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7770:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"7781:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7766:3:30"},"nodeType":"YulFunctionCall","src":"7766:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7753:12:30"},"nodeType":"YulFunctionCall","src":"7753:32:30"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"7743:6:30"}]},{"nodeType":"YulAssignment","src":"7794:42:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7821:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"7832:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7817:3:30"},"nodeType":"YulFunctionCall","src":"7817:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7804:12:30"},"nodeType":"YulFunctionCall","src":"7804:32:30"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"7794:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"7845:47:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7876:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"7887:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7872:3:30"},"nodeType":"YulFunctionCall","src":"7872:19:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7859:12:30"},"nodeType":"YulFunctionCall","src":"7859:33:30"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7849:6:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"7935:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7944:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7947:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7937:6:30"},"nodeType":"YulFunctionCall","src":"7937:12:30"},"nodeType":"YulExpressionStatement","src":"7937:12:30"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7907:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"7915:18:30","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7904:2:30"},"nodeType":"YulFunctionCall","src":"7904:30:30"},"nodeType":"YulIf","src":"7901:50:30"},{"nodeType":"YulAssignment","src":"7960:59:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7991:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"8002:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7987:3:30"},"nodeType":"YulFunctionCall","src":"7987:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8011:7:30"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"7970:16:30"},"nodeType":"YulFunctionCall","src":"7970:49:30"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"7960:6:30"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7500:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7511:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7523:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7531:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7539:6:30","type":""},{"name":"value3","nodeType":"YulTypedName","src":"7547:6:30","type":""},{"name":"value4","nodeType":"YulTypedName","src":"7555:6:30","type":""}],"src":"7419:606:30"},{"body":{"nodeType":"YulBlock","src":"8204:232:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8221:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"8232:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8214:6:30"},"nodeType":"YulFunctionCall","src":"8214:21:30"},"nodeType":"YulExpressionStatement","src":"8214:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8255:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"8266:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8251:3:30"},"nodeType":"YulFunctionCall","src":"8251:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"8271:2:30","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8244:6:30"},"nodeType":"YulFunctionCall","src":"8244:30:30"},"nodeType":"YulExpressionStatement","src":"8244:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8294:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"8305:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8290:3:30"},"nodeType":"YulFunctionCall","src":"8290:18:30"},{"hexValue":"455243313135353a2061646472657373207a65726f206973206e6f7420612076","kind":"string","nodeType":"YulLiteral","src":"8310:34:30","type":"","value":"ERC1155: address zero is not a v"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8283:6:30"},"nodeType":"YulFunctionCall","src":"8283:62:30"},"nodeType":"YulExpressionStatement","src":"8283:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8365:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"8376:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8361:3:30"},"nodeType":"YulFunctionCall","src":"8361:18:30"},{"hexValue":"616c6964206f776e6572","kind":"string","nodeType":"YulLiteral","src":"8381:12:30","type":"","value":"alid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8354:6:30"},"nodeType":"YulFunctionCall","src":"8354:40:30"},"nodeType":"YulExpressionStatement","src":"8354:40:30"},{"nodeType":"YulAssignment","src":"8403:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8415:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"8426:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8411:3:30"},"nodeType":"YulFunctionCall","src":"8411:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8403:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8181:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8195:4:30","type":""}],"src":"8030:406:30"},{"body":{"nodeType":"YulBlock","src":"8496:325:30","statements":[{"nodeType":"YulAssignment","src":"8506:22:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8520:1:30","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"8523:4:30"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"8516:3:30"},"nodeType":"YulFunctionCall","src":"8516:12:30"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"8506:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"8537:38:30","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"8567:4:30"},{"kind":"number","nodeType":"YulLiteral","src":"8573:1:30","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8563:3:30"},"nodeType":"YulFunctionCall","src":"8563:12:30"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"8541:18:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"8614:31:30","statements":[{"nodeType":"YulAssignment","src":"8616:27:30","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8630:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"8638:4:30","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8626:3:30"},"nodeType":"YulFunctionCall","src":"8626:17:30"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"8616:6:30"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"8594:18:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8587:6:30"},"nodeType":"YulFunctionCall","src":"8587:26:30"},"nodeType":"YulIf","src":"8584:61:30"},{"body":{"nodeType":"YulBlock","src":"8704:111:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8725:1:30","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8732:3:30","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"8737:10:30","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8728:3:30"},"nodeType":"YulFunctionCall","src":"8728:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8718:6:30"},"nodeType":"YulFunctionCall","src":"8718:31:30"},"nodeType":"YulExpressionStatement","src":"8718:31:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8769:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"8772:4:30","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8762:6:30"},"nodeType":"YulFunctionCall","src":"8762:15:30"},"nodeType":"YulExpressionStatement","src":"8762:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8797:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8800:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8790:6:30"},"nodeType":"YulFunctionCall","src":"8790:15:30"},"nodeType":"YulExpressionStatement","src":"8790:15:30"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"8660:18:30"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8683:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"8691:2:30","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8680:2:30"},"nodeType":"YulFunctionCall","src":"8680:14:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"8657:2:30"},"nodeType":"YulFunctionCall","src":"8657:38:30"},"nodeType":"YulIf","src":"8654:161:30"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"8476:4:30","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"8485:6:30","type":""}],"src":"8441:380:30"},{"body":{"nodeType":"YulBlock","src":"9000:236:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9017:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9028:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9010:6:30"},"nodeType":"YulFunctionCall","src":"9010:21:30"},"nodeType":"YulExpressionStatement","src":"9010:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9051:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9062:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9047:3:30"},"nodeType":"YulFunctionCall","src":"9047:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"9067:2:30","type":"","value":"46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9040:6:30"},"nodeType":"YulFunctionCall","src":"9040:30:30"},"nodeType":"YulExpressionStatement","src":"9040:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9090:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9101:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9086:3:30"},"nodeType":"YulFunctionCall","src":"9086:18:30"},{"hexValue":"455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e","kind":"string","nodeType":"YulLiteral","src":"9106:34:30","type":"","value":"ERC1155: caller is not token own"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9079:6:30"},"nodeType":"YulFunctionCall","src":"9079:62:30"},"nodeType":"YulExpressionStatement","src":"9079:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9161:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9172:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9157:3:30"},"nodeType":"YulFunctionCall","src":"9157:18:30"},{"hexValue":"6572206f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"9177:16:30","type":"","value":"er or approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9150:6:30"},"nodeType":"YulFunctionCall","src":"9150:44:30"},"nodeType":"YulExpressionStatement","src":"9150:44:30"},{"nodeType":"YulAssignment","src":"9203:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9215:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9226:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9211:3:30"},"nodeType":"YulFunctionCall","src":"9211:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9203:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8977:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8991:4:30","type":""}],"src":"8826:410:30"},{"body":{"nodeType":"YulBlock","src":"9415:231:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9432:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9443:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9425:6:30"},"nodeType":"YulFunctionCall","src":"9425:21:30"},"nodeType":"YulExpressionStatement","src":"9425:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9466:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9477:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9462:3:30"},"nodeType":"YulFunctionCall","src":"9462:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"9482:2:30","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9455:6:30"},"nodeType":"YulFunctionCall","src":"9455:30:30"},"nodeType":"YulExpressionStatement","src":"9455:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9505:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9516:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9501:3:30"},"nodeType":"YulFunctionCall","src":"9501:18:30"},{"hexValue":"455243313135353a206163636f756e747320616e6420696473206c656e677468","kind":"string","nodeType":"YulLiteral","src":"9521:34:30","type":"","value":"ERC1155: accounts and ids length"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9494:6:30"},"nodeType":"YulFunctionCall","src":"9494:62:30"},"nodeType":"YulExpressionStatement","src":"9494:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9576:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9587:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9572:3:30"},"nodeType":"YulFunctionCall","src":"9572:18:30"},{"hexValue":"206d69736d61746368","kind":"string","nodeType":"YulLiteral","src":"9592:11:30","type":"","value":" mismatch"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9565:6:30"},"nodeType":"YulFunctionCall","src":"9565:39:30"},"nodeType":"YulExpressionStatement","src":"9565:39:30"},{"nodeType":"YulAssignment","src":"9613:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9625:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9636:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9621:3:30"},"nodeType":"YulFunctionCall","src":"9621:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9613:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9392:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9406:4:30","type":""}],"src":"9241:405:30"},{"body":{"nodeType":"YulBlock","src":"9683:95:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9700:1:30","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9707:3:30","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"9712:10:30","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9703:3:30"},"nodeType":"YulFunctionCall","src":"9703:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9693:6:30"},"nodeType":"YulFunctionCall","src":"9693:31:30"},"nodeType":"YulExpressionStatement","src":"9693:31:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9740:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9743:4:30","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9733:6:30"},"nodeType":"YulFunctionCall","src":"9733:15:30"},"nodeType":"YulExpressionStatement","src":"9733:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9764:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9767:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9757:6:30"},"nodeType":"YulFunctionCall","src":"9757:15:30"},"nodeType":"YulExpressionStatement","src":"9757:15:30"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"9651:127:30"},{"body":{"nodeType":"YulBlock","src":"9815:95:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9832:1:30","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9839:3:30","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"9844:10:30","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9835:3:30"},"nodeType":"YulFunctionCall","src":"9835:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9825:6:30"},"nodeType":"YulFunctionCall","src":"9825:31:30"},"nodeType":"YulExpressionStatement","src":"9825:31:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9872:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9875:4:30","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9865:6:30"},"nodeType":"YulFunctionCall","src":"9865:15:30"},"nodeType":"YulExpressionStatement","src":"9865:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9896:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9899:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9889:6:30"},"nodeType":"YulFunctionCall","src":"9889:15:30"},"nodeType":"YulExpressionStatement","src":"9889:15:30"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"9783:127:30"},{"body":{"nodeType":"YulBlock","src":"9962:88:30","statements":[{"body":{"nodeType":"YulBlock","src":"9993:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"9995:16:30"},"nodeType":"YulFunctionCall","src":"9995:18:30"},"nodeType":"YulExpressionStatement","src":"9995:18:30"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9978:5:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9989:1:30","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"9985:3:30"},"nodeType":"YulFunctionCall","src":"9985:6:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"9975:2:30"},"nodeType":"YulFunctionCall","src":"9975:17:30"},"nodeType":"YulIf","src":"9972:43:30"},{"nodeType":"YulAssignment","src":"10024:20:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10035:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"10042:1:30","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10031:3:30"},"nodeType":"YulFunctionCall","src":"10031:13:30"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"10024:3:30"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9944:5:30","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"9954:3:30","type":""}],"src":"9915:135:30"},{"body":{"nodeType":"YulBlock","src":"10229:230:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10246:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10257:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10239:6:30"},"nodeType":"YulFunctionCall","src":"10239:21:30"},"nodeType":"YulExpressionStatement","src":"10239:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10280:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10291:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10276:3:30"},"nodeType":"YulFunctionCall","src":"10276:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"10296:2:30","type":"","value":"40"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10269:6:30"},"nodeType":"YulFunctionCall","src":"10269:30:30"},"nodeType":"YulExpressionStatement","src":"10269:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10319:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10330:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10315:3:30"},"nodeType":"YulFunctionCall","src":"10315:18:30"},{"hexValue":"455243313135353a2069647320616e6420616d6f756e7473206c656e67746820","kind":"string","nodeType":"YulLiteral","src":"10335:34:30","type":"","value":"ERC1155: ids and amounts length "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10308:6:30"},"nodeType":"YulFunctionCall","src":"10308:62:30"},"nodeType":"YulExpressionStatement","src":"10308:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10390:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10401:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10386:3:30"},"nodeType":"YulFunctionCall","src":"10386:18:30"},{"hexValue":"6d69736d61746368","kind":"string","nodeType":"YulLiteral","src":"10406:10:30","type":"","value":"mismatch"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10379:6:30"},"nodeType":"YulFunctionCall","src":"10379:38:30"},"nodeType":"YulExpressionStatement","src":"10379:38:30"},{"nodeType":"YulAssignment","src":"10426:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10438:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10449:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10434:3:30"},"nodeType":"YulFunctionCall","src":"10434:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10426:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10206:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10220:4:30","type":""}],"src":"10055:404:30"},{"body":{"nodeType":"YulBlock","src":"10638:227:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10655:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10666:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10648:6:30"},"nodeType":"YulFunctionCall","src":"10648:21:30"},"nodeType":"YulExpressionStatement","src":"10648:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10689:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10700:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10685:3:30"},"nodeType":"YulFunctionCall","src":"10685:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"10705:2:30","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10678:6:30"},"nodeType":"YulFunctionCall","src":"10678:30:30"},"nodeType":"YulExpressionStatement","src":"10678:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10728:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10739:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10724:3:30"},"nodeType":"YulFunctionCall","src":"10724:18:30"},{"hexValue":"455243313135353a207472616e7366657220746f20746865207a65726f206164","kind":"string","nodeType":"YulLiteral","src":"10744:34:30","type":"","value":"ERC1155: transfer to the zero ad"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10717:6:30"},"nodeType":"YulFunctionCall","src":"10717:62:30"},"nodeType":"YulExpressionStatement","src":"10717:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10799:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10810:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10795:3:30"},"nodeType":"YulFunctionCall","src":"10795:18:30"},{"hexValue":"6472657373","kind":"string","nodeType":"YulLiteral","src":"10815:7:30","type":"","value":"dress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10788:6:30"},"nodeType":"YulFunctionCall","src":"10788:35:30"},"nodeType":"YulExpressionStatement","src":"10788:35:30"},{"nodeType":"YulAssignment","src":"10832:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10844:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10855:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10840:3:30"},"nodeType":"YulFunctionCall","src":"10840:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10832:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10615:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10629:4:30","type":""}],"src":"10464:401:30"},{"body":{"nodeType":"YulBlock","src":"11044:232:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11061:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"11072:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11054:6:30"},"nodeType":"YulFunctionCall","src":"11054:21:30"},"nodeType":"YulExpressionStatement","src":"11054:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11095:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"11106:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11091:3:30"},"nodeType":"YulFunctionCall","src":"11091:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"11111:2:30","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11084:6:30"},"nodeType":"YulFunctionCall","src":"11084:30:30"},"nodeType":"YulExpressionStatement","src":"11084:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11134:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"11145:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11130:3:30"},"nodeType":"YulFunctionCall","src":"11130:18:30"},{"hexValue":"455243313135353a20696e73756666696369656e742062616c616e636520666f","kind":"string","nodeType":"YulLiteral","src":"11150:34:30","type":"","value":"ERC1155: insufficient balance fo"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11123:6:30"},"nodeType":"YulFunctionCall","src":"11123:62:30"},"nodeType":"YulExpressionStatement","src":"11123:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11205:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"11216:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11201:3:30"},"nodeType":"YulFunctionCall","src":"11201:18:30"},{"hexValue":"72207472616e73666572","kind":"string","nodeType":"YulLiteral","src":"11221:12:30","type":"","value":"r transfer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11194:6:30"},"nodeType":"YulFunctionCall","src":"11194:40:30"},"nodeType":"YulExpressionStatement","src":"11194:40:30"},{"nodeType":"YulAssignment","src":"11243:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11255:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"11266:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11251:3:30"},"nodeType":"YulFunctionCall","src":"11251:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11243:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11021:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11035:4:30","type":""}],"src":"10870:406:30"},{"body":{"nodeType":"YulBlock","src":"11329:77:30","statements":[{"nodeType":"YulAssignment","src":"11339:16:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11350:1:30"},{"name":"y","nodeType":"YulIdentifier","src":"11353:1:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11346:3:30"},"nodeType":"YulFunctionCall","src":"11346:9:30"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"11339:3:30"}]},{"body":{"nodeType":"YulBlock","src":"11378:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"11380:16:30"},"nodeType":"YulFunctionCall","src":"11380:18:30"},"nodeType":"YulExpressionStatement","src":"11380:18:30"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11370:1:30"},{"name":"sum","nodeType":"YulIdentifier","src":"11373:3:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11367:2:30"},"nodeType":"YulFunctionCall","src":"11367:10:30"},"nodeType":"YulIf","src":"11364:36:30"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"11312:1:30","type":""},{"name":"y","nodeType":"YulTypedName","src":"11315:1:30","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"11321:3:30","type":""}],"src":"11281:125:30"},{"body":{"nodeType":"YulBlock","src":"11640:236:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11657:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"11668:2:30","type":"","value":"64"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11650:6:30"},"nodeType":"YulFunctionCall","src":"11650:21:30"},"nodeType":"YulExpressionStatement","src":"11650:21:30"},{"nodeType":"YulVariableDeclaration","src":"11680:70:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11723:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11735:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"11746:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11731:3:30"},"nodeType":"YulFunctionCall","src":"11731:18:30"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"11694:28:30"},"nodeType":"YulFunctionCall","src":"11694:56:30"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"11684:6:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11770:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"11781:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11766:3:30"},"nodeType":"YulFunctionCall","src":"11766:18:30"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"11790:6:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"11798:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11786:3:30"},"nodeType":"YulFunctionCall","src":"11786:22:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11759:6:30"},"nodeType":"YulFunctionCall","src":"11759:50:30"},"nodeType":"YulExpressionStatement","src":"11759:50:30"},{"nodeType":"YulAssignment","src":"11818:52:30","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11855:6:30"},{"name":"tail_1","nodeType":"YulIdentifier","src":"11863:6:30"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"11826:28:30"},"nodeType":"YulFunctionCall","src":"11826:44:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11818:4:30"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11601:9:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11612:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11620:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11631:4:30","type":""}],"src":"11411:465:30"},{"body":{"nodeType":"YulBlock","src":"12055:231:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12072:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12083:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12065:6:30"},"nodeType":"YulFunctionCall","src":"12065:21:30"},"nodeType":"YulExpressionStatement","src":"12065:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12106:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12117:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12102:3:30"},"nodeType":"YulFunctionCall","src":"12102:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"12122:2:30","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12095:6:30"},"nodeType":"YulFunctionCall","src":"12095:30:30"},"nodeType":"YulExpressionStatement","src":"12095:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12145:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12156:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12141:3:30"},"nodeType":"YulFunctionCall","src":"12141:18:30"},{"hexValue":"455243313135353a2073657474696e6720617070726f76616c20737461747573","kind":"string","nodeType":"YulLiteral","src":"12161:34:30","type":"","value":"ERC1155: setting approval status"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12134:6:30"},"nodeType":"YulFunctionCall","src":"12134:62:30"},"nodeType":"YulExpressionStatement","src":"12134:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12216:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12227:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12212:3:30"},"nodeType":"YulFunctionCall","src":"12212:18:30"},{"hexValue":"20666f722073656c66","kind":"string","nodeType":"YulLiteral","src":"12232:11:30","type":"","value":" for self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12205:6:30"},"nodeType":"YulFunctionCall","src":"12205:39:30"},"nodeType":"YulExpressionStatement","src":"12205:39:30"},{"nodeType":"YulAssignment","src":"12253:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12265:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12276:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12261:3:30"},"nodeType":"YulFunctionCall","src":"12261:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12253:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12032:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12046:4:30","type":""}],"src":"11881:405:30"},{"body":{"nodeType":"YulBlock","src":"12420:119:30","statements":[{"nodeType":"YulAssignment","src":"12430:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12442:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12453:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12438:3:30"},"nodeType":"YulFunctionCall","src":"12438:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12430:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12472:9:30"},{"name":"value0","nodeType":"YulIdentifier","src":"12483:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12465:6:30"},"nodeType":"YulFunctionCall","src":"12465:25:30"},"nodeType":"YulExpressionStatement","src":"12465:25:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12510:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12521:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12506:3:30"},"nodeType":"YulFunctionCall","src":"12506:18:30"},{"name":"value1","nodeType":"YulIdentifier","src":"12526:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12499:6:30"},"nodeType":"YulFunctionCall","src":"12499:34:30"},"nodeType":"YulExpressionStatement","src":"12499:34:30"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12381:9:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12392:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12400:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12411:4:30","type":""}],"src":"12291:248:30"},{"body":{"nodeType":"YulBlock","src":"12875:519:30","statements":[{"nodeType":"YulVariableDeclaration","src":"12885:52:30","value":{"kind":"number","nodeType":"YulLiteral","src":"12895:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"12889:2:30","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12953:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12968:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"12976:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12964:3:30"},"nodeType":"YulFunctionCall","src":"12964:15:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12946:6:30"},"nodeType":"YulFunctionCall","src":"12946:34:30"},"nodeType":"YulExpressionStatement","src":"12946:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13000:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13011:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12996:3:30"},"nodeType":"YulFunctionCall","src":"12996:18:30"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"13020:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"13028:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13016:3:30"},"nodeType":"YulFunctionCall","src":"13016:15:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12989:6:30"},"nodeType":"YulFunctionCall","src":"12989:43:30"},"nodeType":"YulExpressionStatement","src":"12989:43:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13052:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13063:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13048:3:30"},"nodeType":"YulFunctionCall","src":"13048:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"13068:3:30","type":"","value":"160"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13041:6:30"},"nodeType":"YulFunctionCall","src":"13041:31:30"},"nodeType":"YulExpressionStatement","src":"13041:31:30"},{"nodeType":"YulVariableDeclaration","src":"13081:71:30","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"13124:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13136:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13147:3:30","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13132:3:30"},"nodeType":"YulFunctionCall","src":"13132:19:30"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"13095:28:30"},"nodeType":"YulFunctionCall","src":"13095:57:30"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"13085:6:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13172:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13183:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13168:3:30"},"nodeType":"YulFunctionCall","src":"13168:18:30"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"13192:6:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"13200:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13188:3:30"},"nodeType":"YulFunctionCall","src":"13188:22:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13161:6:30"},"nodeType":"YulFunctionCall","src":"13161:50:30"},"nodeType":"YulExpressionStatement","src":"13161:50:30"},{"nodeType":"YulVariableDeclaration","src":"13220:58:30","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"13263:6:30"},{"name":"tail_1","nodeType":"YulIdentifier","src":"13271:6:30"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"13234:28:30"},"nodeType":"YulFunctionCall","src":"13234:44:30"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"13224:6:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13298:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13309:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13294:3:30"},"nodeType":"YulFunctionCall","src":"13294:19:30"},{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"13319:6:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"13327:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13315:3:30"},"nodeType":"YulFunctionCall","src":"13315:22:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13287:6:30"},"nodeType":"YulFunctionCall","src":"13287:51:30"},"nodeType":"YulExpressionStatement","src":"13287:51:30"},{"nodeType":"YulAssignment","src":"13347:41:30","value":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"13373:6:30"},{"name":"tail_2","nodeType":"YulIdentifier","src":"13381:6:30"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"13355:17:30"},"nodeType":"YulFunctionCall","src":"13355:33:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13347:4:30"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12812:9:30","type":""},{"name":"value4","nodeType":"YulTypedName","src":"12823:6:30","type":""},{"name":"value3","nodeType":"YulTypedName","src":"12831:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"12839:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12847:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12855:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12866:4:30","type":""}],"src":"12544:850:30"},{"body":{"nodeType":"YulBlock","src":"13479:169:30","statements":[{"body":{"nodeType":"YulBlock","src":"13525:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13534:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13537:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13527:6:30"},"nodeType":"YulFunctionCall","src":"13527:12:30"},"nodeType":"YulExpressionStatement","src":"13527:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"13500:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"13509:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13496:3:30"},"nodeType":"YulFunctionCall","src":"13496:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"13521:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"13492:3:30"},"nodeType":"YulFunctionCall","src":"13492:32:30"},"nodeType":"YulIf","src":"13489:52:30"},{"nodeType":"YulVariableDeclaration","src":"13550:29:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13569:9:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13563:5:30"},"nodeType":"YulFunctionCall","src":"13563:16:30"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"13554:5:30","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13612:5:30"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"13588:23:30"},"nodeType":"YulFunctionCall","src":"13588:30:30"},"nodeType":"YulExpressionStatement","src":"13588:30:30"},{"nodeType":"YulAssignment","src":"13627:15:30","value":{"name":"value","nodeType":"YulIdentifier","src":"13637:5:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"13627:6:30"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13445:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"13456:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"13468:6:30","type":""}],"src":"13399:249:30"},{"body":{"nodeType":"YulBlock","src":"13696:136:30","statements":[{"body":{"nodeType":"YulBlock","src":"13741:85:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13770:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13773:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13776:1:30","type":"","value":"4"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"13755:14:30"},"nodeType":"YulFunctionCall","src":"13755:23:30"},"nodeType":"YulExpressionStatement","src":"13755:23:30"},{"nodeType":"YulAssignment","src":"13791:25:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13802:3:30","type":"","value":"224"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13813:1:30","type":"","value":"0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13807:5:30"},"nodeType":"YulFunctionCall","src":"13807:8:30"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"13798:3:30"},"nodeType":"YulFunctionCall","src":"13798:18:30"},"variableNames":[{"name":"sig","nodeType":"YulIdentifier","src":"13791:3:30"}]}]},"condition":{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"13712:14:30"},"nodeType":"YulFunctionCall","src":"13712:16:30"},{"kind":"number","nodeType":"YulLiteral","src":"13730:1:30","type":"","value":"3"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"13709:2:30"},"nodeType":"YulFunctionCall","src":"13709:23:30"},"nodeType":"YulIf","src":"13706:120:30"}]},"name":"return_data_selector","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"sig","nodeType":"YulTypedName","src":"13688:3:30","type":""}],"src":"13653:179:30"},{"body":{"nodeType":"YulBlock","src":"13884:624:30","statements":[{"body":{"nodeType":"YulBlock","src":"13924:9:30","statements":[{"nodeType":"YulLeave","src":"13926:5:30"}]},"condition":{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"13900:14:30"},"nodeType":"YulFunctionCall","src":"13900:16:30"},{"kind":"number","nodeType":"YulLiteral","src":"13918:4:30","type":"","value":"0x44"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"13897:2:30"},"nodeType":"YulFunctionCall","src":"13897:26:30"},"nodeType":"YulIf","src":"13894:39:30"},{"nodeType":"YulVariableDeclaration","src":"13942:21:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13960:2:30","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13954:5:30"},"nodeType":"YulFunctionCall","src":"13954:9:30"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"13946:4:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13972:16:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13986:1:30","type":"","value":"3"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"13982:3:30"},"nodeType":"YulFunctionCall","src":"13982:6:30"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"13976:2:30","type":""}]},{"expression":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"14012:4:30"},{"kind":"number","nodeType":"YulLiteral","src":"14018:1:30","type":"","value":"4"},{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"14025:14:30"},"nodeType":"YulFunctionCall","src":"14025:16:30"},{"name":"_1","nodeType":"YulIdentifier","src":"14043:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14021:3:30"},"nodeType":"YulFunctionCall","src":"14021:25:30"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"13997:14:30"},"nodeType":"YulFunctionCall","src":"13997:50:30"},"nodeType":"YulExpressionStatement","src":"13997:50:30"},{"nodeType":"YulVariableDeclaration","src":"14056:25:30","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"14076:4:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14070:5:30"},"nodeType":"YulFunctionCall","src":"14070:11:30"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"14060:6:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"14090:26:30","value":{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"14100:14:30"},"nodeType":"YulFunctionCall","src":"14100:16:30"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"14094:2:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"14125:28:30","value":{"kind":"number","nodeType":"YulLiteral","src":"14135:18:30","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"14129:2:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"14211:9:30","statements":[{"nodeType":"YulLeave","src":"14213:5:30"}]},"condition":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14171:6:30"},{"name":"_3","nodeType":"YulIdentifier","src":"14179:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14168:2:30"},"nodeType":"YulFunctionCall","src":"14168:14:30"},{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14191:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"14199:4:30","type":"","value":"0x24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14187:3:30"},"nodeType":"YulFunctionCall","src":"14187:17:30"},{"name":"_2","nodeType":"YulIdentifier","src":"14206:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14184:2:30"},"nodeType":"YulFunctionCall","src":"14184:25:30"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"14165:2:30"},"nodeType":"YulFunctionCall","src":"14165:45:30"},"nodeType":"YulIf","src":"14162:58:30"},{"nodeType":"YulVariableDeclaration","src":"14229:28:30","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"14244:4:30"},{"name":"offset","nodeType":"YulIdentifier","src":"14250:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14240:3:30"},"nodeType":"YulFunctionCall","src":"14240:17:30"},"variables":[{"name":"msg","nodeType":"YulTypedName","src":"14233:3:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"14266:24:30","value":{"arguments":[{"name":"msg","nodeType":"YulIdentifier","src":"14286:3:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14280:5:30"},"nodeType":"YulFunctionCall","src":"14280:10:30"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"14270:6:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"14317:9:30","statements":[{"nodeType":"YulLeave","src":"14319:5:30"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"14305:6:30"},{"name":"_3","nodeType":"YulIdentifier","src":"14313:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14302:2:30"},"nodeType":"YulFunctionCall","src":"14302:14:30"},"nodeType":"YulIf","src":"14299:27:30"},{"body":{"nodeType":"YulBlock","src":"14408:9:30","statements":[{"nodeType":"YulLeave","src":"14410:5:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"msg","nodeType":"YulIdentifier","src":"14349:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"14354:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14345:3:30"},"nodeType":"YulFunctionCall","src":"14345:16:30"},{"kind":"number","nodeType":"YulLiteral","src":"14363:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14341:3:30"},"nodeType":"YulFunctionCall","src":"14341:27:30"},{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"14378:4:30"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"14384:14:30"},"nodeType":"YulFunctionCall","src":"14384:16:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14374:3:30"},"nodeType":"YulFunctionCall","src":"14374:27:30"},{"name":"_1","nodeType":"YulIdentifier","src":"14403:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14370:3:30"},"nodeType":"YulFunctionCall","src":"14370:36:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14338:2:30"},"nodeType":"YulFunctionCall","src":"14338:69:30"},"nodeType":"YulIf","src":"14335:82:30"},{"expression":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"14446:4:30"},{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14460:6:30"},{"name":"length","nodeType":"YulIdentifier","src":"14468:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14456:3:30"},"nodeType":"YulFunctionCall","src":"14456:19:30"},{"kind":"number","nodeType":"YulLiteral","src":"14477:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14452:3:30"},"nodeType":"YulFunctionCall","src":"14452:30:30"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"14426:19:30"},"nodeType":"YulFunctionCall","src":"14426:57:30"},"nodeType":"YulExpressionStatement","src":"14426:57:30"},{"nodeType":"YulAssignment","src":"14492:10:30","value":{"name":"msg","nodeType":"YulIdentifier","src":"14499:3:30"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"14492:3:30"}]}]},"name":"try_decode_error_message","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"13876:3:30","type":""}],"src":"13837:671:30"},{"body":{"nodeType":"YulBlock","src":"14687:242:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14704:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14715:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14697:6:30"},"nodeType":"YulFunctionCall","src":"14697:21:30"},"nodeType":"YulExpressionStatement","src":"14697:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14738:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14749:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14734:3:30"},"nodeType":"YulFunctionCall","src":"14734:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"14754:2:30","type":"","value":"52"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14727:6:30"},"nodeType":"YulFunctionCall","src":"14727:30:30"},"nodeType":"YulExpressionStatement","src":"14727:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14777:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14788:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14773:3:30"},"nodeType":"YulFunctionCall","src":"14773:18:30"},{"hexValue":"455243313135353a207472616e7366657220746f206e6f6e2d45524331313535","kind":"string","nodeType":"YulLiteral","src":"14793:34:30","type":"","value":"ERC1155: transfer to non-ERC1155"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14766:6:30"},"nodeType":"YulFunctionCall","src":"14766:62:30"},"nodeType":"YulExpressionStatement","src":"14766:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14848:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14859:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14844:3:30"},"nodeType":"YulFunctionCall","src":"14844:18:30"},{"hexValue":"526563656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"14864:22:30","type":"","value":"Receiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14837:6:30"},"nodeType":"YulFunctionCall","src":"14837:50:30"},"nodeType":"YulExpressionStatement","src":"14837:50:30"},{"nodeType":"YulAssignment","src":"14896:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14908:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14919:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14904:3:30"},"nodeType":"YulFunctionCall","src":"14904:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14896:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14664:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14678:4:30","type":""}],"src":"14513:416:30"},{"body":{"nodeType":"YulBlock","src":"15108:230:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15125:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15136:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15118:6:30"},"nodeType":"YulFunctionCall","src":"15118:21:30"},"nodeType":"YulExpressionStatement","src":"15118:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15159:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15170:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15155:3:30"},"nodeType":"YulFunctionCall","src":"15155:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"15175:2:30","type":"","value":"40"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15148:6:30"},"nodeType":"YulFunctionCall","src":"15148:30:30"},"nodeType":"YulExpressionStatement","src":"15148:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15198:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15209:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15194:3:30"},"nodeType":"YulFunctionCall","src":"15194:18:30"},{"hexValue":"455243313135353a204552433131353552656365697665722072656a65637465","kind":"string","nodeType":"YulLiteral","src":"15214:34:30","type":"","value":"ERC1155: ERC1155Receiver rejecte"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15187:6:30"},"nodeType":"YulFunctionCall","src":"15187:62:30"},"nodeType":"YulExpressionStatement","src":"15187:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15269:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15280:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15265:3:30"},"nodeType":"YulFunctionCall","src":"15265:18:30"},{"hexValue":"6420746f6b656e73","kind":"string","nodeType":"YulLiteral","src":"15285:10:30","type":"","value":"d tokens"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15258:6:30"},"nodeType":"YulFunctionCall","src":"15258:38:30"},"nodeType":"YulExpressionStatement","src":"15258:38:30"},{"nodeType":"YulAssignment","src":"15305:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15317:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15328:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15313:3:30"},"nodeType":"YulFunctionCall","src":"15313:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15305:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15085:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15099:4:30","type":""}],"src":"14934:404:30"},{"body":{"nodeType":"YulBlock","src":"15574:353:30","statements":[{"nodeType":"YulVariableDeclaration","src":"15584:52:30","value":{"kind":"number","nodeType":"YulLiteral","src":"15594:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"15588:2:30","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15652:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15667:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"15675:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15663:3:30"},"nodeType":"YulFunctionCall","src":"15663:15:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15645:6:30"},"nodeType":"YulFunctionCall","src":"15645:34:30"},"nodeType":"YulExpressionStatement","src":"15645:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15699:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15710:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15695:3:30"},"nodeType":"YulFunctionCall","src":"15695:18:30"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"15719:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"15727:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15715:3:30"},"nodeType":"YulFunctionCall","src":"15715:15:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15688:6:30"},"nodeType":"YulFunctionCall","src":"15688:43:30"},"nodeType":"YulExpressionStatement","src":"15688:43:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15751:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15762:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15747:3:30"},"nodeType":"YulFunctionCall","src":"15747:18:30"},{"name":"value2","nodeType":"YulIdentifier","src":"15767:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15740:6:30"},"nodeType":"YulFunctionCall","src":"15740:34:30"},"nodeType":"YulExpressionStatement","src":"15740:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15794:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15805:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15790:3:30"},"nodeType":"YulFunctionCall","src":"15790:18:30"},{"name":"value3","nodeType":"YulIdentifier","src":"15810:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15783:6:30"},"nodeType":"YulFunctionCall","src":"15783:34:30"},"nodeType":"YulExpressionStatement","src":"15783:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15837:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15848:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15833:3:30"},"nodeType":"YulFunctionCall","src":"15833:19:30"},{"kind":"number","nodeType":"YulLiteral","src":"15854:3:30","type":"","value":"160"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15826:6:30"},"nodeType":"YulFunctionCall","src":"15826:32:30"},"nodeType":"YulExpressionStatement","src":"15826:32:30"},{"nodeType":"YulAssignment","src":"15867:54:30","value":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"15893:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15905:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15916:3:30","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15901:3:30"},"nodeType":"YulFunctionCall","src":"15901:19:30"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"15875:17:30"},"nodeType":"YulFunctionCall","src":"15875:46:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15867:4:30"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15511:9:30","type":""},{"name":"value4","nodeType":"YulTypedName","src":"15522:6:30","type":""},{"name":"value3","nodeType":"YulTypedName","src":"15530:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"15538:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15546:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15554:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15565:4:30","type":""}],"src":"15343:584:30"}]},"contents":"{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 0x20) }\n        {\n            let _1 := 0x20\n            mstore(add(add(pos, i), _1), mload(add(add(value, i), _1)))\n        }\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function finalize_allocation(memPtr, size)\n    {\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_array_uint256_dyn(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(shl(5, length), 0x20)\n    }\n    function abi_decode_array_uint256_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let _3 := array_allocation_size_array_uint256_dyn(_1)\n        let memPtr := mload(64)\n        finalize_allocation(memPtr, _3)\n        let dst := memPtr\n        mstore(memPtr, _1)\n        dst := add(memPtr, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _2)\n        }\n        array := memPtr\n    }\n    function abi_decode_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        if gt(_1, 0xffffffffffffffff) { panic_error_0x41() }\n        let memPtr := mload(64)\n        finalize_allocation(memPtr, add(and(add(_1, 0x1f), not(31)), 0x20))\n        mstore(memPtr, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(memPtr, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(memPtr, _1), 0x20), 0)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value2 := abi_decode_array_uint256_dyn(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value3 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n        let offset_2 := calldataload(add(headStart, 128))\n        if gt(offset_2, _1) { revert(0, 0) }\n        value4 := abi_decode_bytes(add(headStart, offset_2), dataEnd)\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        let _4 := 0x20\n        let _5 := array_allocation_size_array_uint256_dyn(_3)\n        let memPtr := mload(64)\n        finalize_allocation(memPtr, _5)\n        let dst := memPtr\n        mstore(memPtr, _3)\n        dst := add(memPtr, _4)\n        let srcEnd := add(add(_2, shl(5, _3)), _4)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_2, _4)\n        for { } lt(src, srcEnd) { src := add(src, _4) }\n        {\n            mstore(dst, abi_decode_address(src))\n            dst := add(dst, _4)\n        }\n        value0 := memPtr\n        let offset_1 := calldataload(add(headStart, _4))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n    }\n    function abi_encode_array_uint256_dyn(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let _1 := 0x20\n        pos := add(pos, _1)\n        let srcPtr := add(value, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_array_uint256_dyn(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let offset := calldataload(add(headStart, 128))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value4 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"ERC1155: address zero is not a v\")\n        mstore(add(headStart, 96), \"alid owner\")\n        tail := add(headStart, 128)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"ERC1155: caller is not token own\")\n        mstore(add(headStart, 96), \"er or approved\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1155: accounts and ids length\")\n        mstore(add(headStart, 96), \" mismatch\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"ERC1155: ids and amounts length \")\n        mstore(add(headStart, 96), \"mismatch\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC1155: transfer to the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"ERC1155: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r transfer\")\n        tail := add(headStart, 128)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let tail_1 := abi_encode_array_uint256_dyn(value0, add(headStart, 64))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        tail := abi_encode_array_uint256_dyn(value1, tail_1)\n    }\n    function abi_encode_tuple_t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1155: setting approval status\")\n        mstore(add(headStart, 96), \" for self\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), 160)\n        let tail_1 := abi_encode_array_uint256_dyn(value2, add(headStart, 160))\n        mstore(add(headStart, 96), sub(tail_1, headStart))\n        let tail_2 := abi_encode_array_uint256_dyn(value3, tail_1)\n        mstore(add(headStart, 128), sub(tail_2, headStart))\n        tail := abi_encode_string(value4, tail_2)\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function return_data_selector() -> sig\n    {\n        if gt(returndatasize(), 3)\n        {\n            returndatacopy(0, 0, 4)\n            sig := shr(224, mload(0))\n        }\n    }\n    function try_decode_error_message() -> ret\n    {\n        if lt(returndatasize(), 0x44) { leave }\n        let data := mload(64)\n        let _1 := not(3)\n        returndatacopy(data, 4, add(returndatasize(), _1))\n        let offset := mload(data)\n        let _2 := returndatasize()\n        let _3 := 0xffffffffffffffff\n        if or(gt(offset, _3), gt(add(offset, 0x24), _2)) { leave }\n        let msg := add(data, offset)\n        let length := mload(msg)\n        if gt(length, _3) { leave }\n        if gt(add(add(msg, length), 0x20), add(add(data, returndatasize()), _1)) { leave }\n        finalize_allocation(data, add(add(offset, length), 0x20))\n        ret := msg\n    }\n    function abi_encode_tuple_t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 52)\n        mstore(add(headStart, 64), \"ERC1155: transfer to non-ERC1155\")\n        mstore(add(headStart, 96), \"Receiver implementer\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"ERC1155: ERC1155Receiver rejecte\")\n        mstore(add(headStart, 96), \"d tokens\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), 160)\n        tail := abi_encode_string(value4, add(headStart, 160))\n    }\n}","id":30,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100875760003560e01c80634e1273f41161005b5780634e1273f41461010a578063a22cb4651461012a578063e985e9c51461013d578063f242432a1461017957600080fd5b8062fdd58e1461008c57806301ffc9a7146100b25780630e89341c146100d55780632eb2c2d6146100f5575b600080fd5b61009f61009a366004610b49565b61018c565b6040519081526020015b60405180910390f35b6100c56100c0366004610b8c565b610227565b60405190151581526020016100a9565b6100e86100e3366004610bb0565b610277565b6040516100a99190610c0f565b610108610103366004610d6e565b61030b565b005b61011d610118366004610e18565b610357565b6040516100a99190610f1e565b610108610138366004610f31565b610481565b6100c561014b366004610f6d565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205460ff1690565b610108610187366004610fa0565b610490565b60006001600160a01b0383166101fc5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b5060008181526065602090815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b148061025857506001600160e01b031982166303a24d0760e21b145b8061022157506301ffc9a760e01b6001600160e01b0319831614610221565b60606067805461028690611005565b80601f01602080910402602001604051908101604052809291908181526020018280546102b290611005565b80156102ff5780601f106102d4576101008083540402835291602001916102ff565b820191906000526020600020905b8154815290600101906020018083116102e257829003601f168201915b50505050509050919050565b6001600160a01b0385163314806103275750610327853361014b565b6103435760405162461bcd60e51b81526004016101f39061103f565b61035085858585856104d5565b5050505050565b606081518351146103bc5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016101f3565b6000835167ffffffffffffffff8111156103d8576103d8610c22565b604051908082528060200260200182016040528015610401578160200160208202803683370190505b50905060005b84518110156104795761044c8582815181106104255761042561108d565b602002602001015185838151811061043f5761043f61108d565b602002602001015161018c565b82828151811061045e5761045e61108d565b6020908102919091010152610472816110b9565b9050610407565b509392505050565b61048c3383836106b5565b5050565b6001600160a01b0385163314806104ac57506104ac853361014b565b6104c85760405162461bcd60e51b81526004016101f39061103f565b6103508585858585610795565b81518351146105375760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016101f3565b6001600160a01b03841661055d5760405162461bcd60e51b81526004016101f3906110d2565b3360005b845181101561064757600085828151811061057e5761057e61108d565b60200260200101519050600085838151811061059c5761059c61108d565b60209081029190910181015160008481526065835260408082206001600160a01b038e1683529093529190912054909150818110156105ed5760405162461bcd60e51b81526004016101f390611117565b60008381526065602090815260408083206001600160a01b038e8116855292528083208585039055908b1682528120805484929061062c908490611161565b9250508190555050505080610640906110b9565b9050610561565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610697929190611174565b60405180910390a46106ad8187878787876108c3565b505050505050565b816001600160a01b0316836001600160a01b0316036107285760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016101f3565b6001600160a01b03838116600081815260666020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166107bb5760405162461bcd60e51b81526004016101f3906110d2565b3360006107c785610a27565b905060006107d485610a27565b905060008681526065602090815260408083206001600160a01b038c168452909152902054858110156108195760405162461bcd60e51b81526004016101f390611117565b60008781526065602090815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290610858908490611161565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46108b8848a8a8a8a8a610a72565b505050505050505050565b6001600160a01b0384163b156106ad5760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061090790899089908890889088906004016111a2565b6020604051808303816000875af1925050508015610942575060408051601f3d908101601f1916820190925261093f91810190611200565b60015b6109ee5761094e61121d565b806308c379a0036109875750610962611239565b8061096d5750610989565b8060405162461bcd60e51b81526004016101f39190610c0f565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016101f3565b6001600160e01b0319811663bc197c8160e01b14610a1e5760405162461bcd60e51b81526004016101f3906112c3565b50505050505050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110610a6157610a6161108d565b602090810291909101015292915050565b6001600160a01b0384163b156106ad5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190610ab6908990899088908890889060040161130b565b6020604051808303816000875af1925050508015610af1575060408051601f3d908101601f19168201909252610aee91810190611200565b60015b610afd5761094e61121d565b6001600160e01b0319811663f23a6e6160e01b14610a1e5760405162461bcd60e51b81526004016101f3906112c3565b80356001600160a01b0381168114610b4457600080fd5b919050565b60008060408385031215610b5c57600080fd5b610b6583610b2d565b946020939093013593505050565b6001600160e01b031981168114610b8957600080fd5b50565b600060208284031215610b9e57600080fd5b8135610ba981610b73565b9392505050565b600060208284031215610bc257600080fd5b5035919050565b6000815180845260005b81811015610bef57602081850181015186830182015201610bd3565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610ba96020830184610bc9565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715610c5e57610c5e610c22565b6040525050565b600067ffffffffffffffff821115610c7f57610c7f610c22565b5060051b60200190565b600082601f830112610c9a57600080fd5b81356020610ca782610c65565b604051610cb48282610c38565b83815260059390931b8501820192828101915086841115610cd457600080fd5b8286015b84811015610cef5780358352918301918301610cd8565b509695505050505050565b600082601f830112610d0b57600080fd5b813567ffffffffffffffff811115610d2557610d25610c22565b604051610d3c601f8301601f191660200182610c38565b818152846020838601011115610d5157600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215610d8657600080fd5b610d8f86610b2d565b9450610d9d60208701610b2d565b9350604086013567ffffffffffffffff80821115610dba57600080fd5b610dc689838a01610c89565b94506060880135915080821115610ddc57600080fd5b610de889838a01610c89565b93506080880135915080821115610dfe57600080fd5b50610e0b88828901610cfa565b9150509295509295909350565b60008060408385031215610e2b57600080fd5b823567ffffffffffffffff80821115610e4357600080fd5b818501915085601f830112610e5757600080fd5b81356020610e6482610c65565b604051610e718282610c38565b83815260059390931b8501820192828101915089841115610e9157600080fd5b948201945b83861015610eb657610ea786610b2d565b82529482019490820190610e96565b96505086013592505080821115610ecc57600080fd5b50610ed985828601610c89565b9150509250929050565b600081518084526020808501945080840160005b83811015610f1357815187529582019590820190600101610ef7565b509495945050505050565b602081526000610ba96020830184610ee3565b60008060408385031215610f4457600080fd5b610f4d83610b2d565b915060208301358015158114610f6257600080fd5b809150509250929050565b60008060408385031215610f8057600080fd5b610f8983610b2d565b9150610f9760208401610b2d565b90509250929050565b600080600080600060a08688031215610fb857600080fd5b610fc186610b2d565b9450610fcf60208701610b2d565b93506040860135925060608601359150608086013567ffffffffffffffff811115610ff957600080fd5b610e0b88828901610cfa565b600181811c9082168061101957607f821691505b60208210810361103957634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016110cb576110cb6110a3565b5060010190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b80820180821115610221576102216110a3565b6040815260006111876040830185610ee3565b82810360208401526111998185610ee3565b95945050505050565b60006001600160a01b03808816835280871660208401525060a060408301526111ce60a0830186610ee3565b82810360608401526111e08186610ee3565b905082810360808401526111f48185610bc9565b98975050505050505050565b60006020828403121561121257600080fd5b8151610ba981610b73565b600060033d11156112365760046000803e5060005160e01c5b90565b600060443d10156112475790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561127757505050505090565b828501915081518181111561128f5750505050505090565b843d87010160208285010111156112a95750505050505090565b6112b860208286010187610c38565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a0608083015261134360a0830184610bc9565b97965050505050505056fea26469706673582212200b5f40ef9c56a7724719124204351bf2e356f42aad83ff6030acc60d52e5d86464736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x87 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4E1273F4 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0x10A JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x12A JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x13D JUMPI DUP1 PUSH4 0xF242432A EQ PUSH2 0x179 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0xFDD58E EQ PUSH2 0x8C JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xB2 JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0xD5 JUMPI DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0xF5 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9F PUSH2 0x9A CALLDATASIZE PUSH1 0x4 PUSH2 0xB49 JUMP JUMPDEST PUSH2 0x18C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC5 PUSH2 0xC0 CALLDATASIZE PUSH1 0x4 PUSH2 0xB8C JUMP JUMPDEST PUSH2 0x227 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xA9 JUMP JUMPDEST PUSH2 0xE8 PUSH2 0xE3 CALLDATASIZE PUSH1 0x4 PUSH2 0xBB0 JUMP JUMPDEST PUSH2 0x277 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA9 SWAP2 SWAP1 PUSH2 0xC0F JUMP JUMPDEST PUSH2 0x108 PUSH2 0x103 CALLDATASIZE PUSH1 0x4 PUSH2 0xD6E JUMP JUMPDEST PUSH2 0x30B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x11D PUSH2 0x118 CALLDATASIZE PUSH1 0x4 PUSH2 0xE18 JUMP JUMPDEST PUSH2 0x357 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA9 SWAP2 SWAP1 PUSH2 0xF1E JUMP JUMPDEST PUSH2 0x108 PUSH2 0x138 CALLDATASIZE PUSH1 0x4 PUSH2 0xF31 JUMP JUMPDEST PUSH2 0x481 JUMP JUMPDEST PUSH2 0xC5 PUSH2 0x14B CALLDATASIZE PUSH1 0x4 PUSH2 0xF6D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x66 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x108 PUSH2 0x187 CALLDATASIZE PUSH1 0x4 PUSH2 0xFA0 JUMP JUMPDEST PUSH2 0x490 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1FC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2061646472657373207A65726F206973206E6F7420612076 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x30B634B21037BBB732B9 PUSH1 0xB1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x6CDB3D13 PUSH1 0xE1 SHL EQ DUP1 PUSH2 0x258 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x3A24D07 PUSH1 0xE2 SHL EQ JUMPDEST DUP1 PUSH2 0x221 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x221 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x67 DUP1 SLOAD PUSH2 0x286 SWAP1 PUSH2 0x1005 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2B2 SWAP1 PUSH2 0x1005 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2FF JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2D4 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2FF JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2E2 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ DUP1 PUSH2 0x327 JUMPI POP PUSH2 0x327 DUP6 CALLER PUSH2 0x14B JUMP JUMPDEST PUSH2 0x343 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x103F JUMP JUMPDEST PUSH2 0x350 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x4D5 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x3BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206163636F756E747320616E6420696473206C656E677468 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x40DAD2E6DAC2E8C6D PUSH1 0xBB SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3D8 JUMPI PUSH2 0x3D8 PUSH2 0xC22 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x401 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x479 JUMPI PUSH2 0x44C DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x425 JUMPI PUSH2 0x425 PUSH2 0x108D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x43F JUMPI PUSH2 0x43F PUSH2 0x108D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x18C JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x45E JUMPI PUSH2 0x45E PUSH2 0x108D JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH2 0x472 DUP2 PUSH2 0x10B9 JUMP JUMPDEST SWAP1 POP PUSH2 0x407 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x48C CALLER DUP4 DUP4 PUSH2 0x6B5 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ DUP1 PUSH2 0x4AC JUMPI POP PUSH2 0x4AC DUP6 CALLER PUSH2 0x14B JUMP JUMPDEST PUSH2 0x4C8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x103F JUMP JUMPDEST PUSH2 0x350 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x795 JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x537 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2069647320616E6420616D6F756E7473206C656E67746820 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0xDAD2E6DAC2E8C6D PUSH1 0xC3 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x55D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x10D2 JUMP JUMPDEST CALLER PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x647 JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x57E JUMPI PUSH2 0x57E PUSH2 0x108D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x59C JUMPI PUSH2 0x59C PUSH2 0x108D JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x65 DUP4 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 AND DUP4 MSTORE SWAP1 SWAP4 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP2 DUP2 LT ISZERO PUSH2 0x5ED JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x1117 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP1 DUP12 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x62C SWAP1 DUP5 SWAP1 PUSH2 0x1161 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP POP DUP1 PUSH2 0x640 SWAP1 PUSH2 0x10B9 JUMP JUMPDEST SWAP1 POP PUSH2 0x561 JUMP JUMPDEST POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x697 SWAP3 SWAP2 SWAP1 PUSH2 0x1174 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x6AD DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x8C3 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x728 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2073657474696E6720617070726F76616C20737461747573 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x103337B91039B2B633 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x66 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x7BB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x10D2 JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x7C7 DUP6 PUSH2 0xA27 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7D4 DUP6 PUSH2 0xA27 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP6 DUP2 LT ISZERO PUSH2 0x819 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x1117 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP10 DUP6 SUB SWAP1 SSTORE SWAP1 DUP11 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP9 SWAP3 SWAP1 PUSH2 0x858 SWAP1 DUP5 SWAP1 PUSH2 0x1161 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP9 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP12 AND SWAP3 DUP13 DUP3 AND SWAP3 SWAP2 DUP9 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x8B8 DUP5 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0xA72 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x6AD JUMPI PUSH1 0x40 MLOAD PUSH4 0xBC197C81 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xBC197C81 SWAP1 PUSH2 0x907 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x11A2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x942 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x93F SWAP2 DUP2 ADD SWAP1 PUSH2 0x1200 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x9EE JUMPI PUSH2 0x94E PUSH2 0x121D JUMP JUMPDEST DUP1 PUSH4 0x8C379A0 SUB PUSH2 0x987 JUMPI POP PUSH2 0x962 PUSH2 0x1239 JUMP JUMPDEST DUP1 PUSH2 0x96D JUMPI POP PUSH2 0x989 JUMP JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP2 SWAP1 PUSH2 0xC0F JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F206E6F6E2D45524331313535 PUSH1 0x44 DUP3 ADD MSTORE PUSH20 0x2932B1B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x61 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xBC197C81 PUSH1 0xE0 SHL EQ PUSH2 0xA1E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x12C3 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP3 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xA61 JUMPI PUSH2 0xA61 PUSH2 0x108D JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x6AD JUMPI PUSH1 0x40 MLOAD PUSH4 0xF23A6E61 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xF23A6E61 SWAP1 PUSH2 0xAB6 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x130B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xAF1 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xAEE SWAP2 DUP2 ADD SWAP1 PUSH2 0x1200 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xAFD JUMPI PUSH2 0x94E PUSH2 0x121D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xF23A6E61 PUSH1 0xE0 SHL EQ PUSH2 0xA1E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x12C3 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xB44 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB65 DUP4 PUSH2 0xB2D JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xB89 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xBA9 DUP2 PUSH2 0xB73 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBC2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xBEF JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0xBD3 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xBA9 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xBC9 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xC5E JUMPI PUSH2 0xC5E PUSH2 0xC22 JUMP JUMPDEST PUSH1 0x40 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xC7F JUMPI PUSH2 0xC7F PUSH2 0xC22 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xC9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0xCA7 DUP3 PUSH2 0xC65 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCB4 DUP3 DUP3 PUSH2 0xC38 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x5 SWAP4 SWAP1 SWAP4 SHL DUP6 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP2 POP DUP7 DUP5 GT ISZERO PUSH2 0xCD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xCEF JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0xCD8 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xD0B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xD25 JUMPI PUSH2 0xD25 PUSH2 0xC22 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD3C PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 PUSH2 0xC38 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0xD51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xD86 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD8F DUP7 PUSH2 0xB2D JUMP JUMPDEST SWAP5 POP PUSH2 0xD9D PUSH1 0x20 DUP8 ADD PUSH2 0xB2D JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xDBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDC6 DUP10 DUP4 DUP11 ADD PUSH2 0xC89 JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xDDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDE8 DUP10 DUP4 DUP11 ADD PUSH2 0xC89 JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xDFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE0B DUP9 DUP3 DUP10 ADD PUSH2 0xCFA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE2B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xE43 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xE57 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0xE64 DUP3 PUSH2 0xC65 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE71 DUP3 DUP3 PUSH2 0xC38 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x5 SWAP4 SWAP1 SWAP4 SHL DUP6 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP2 POP DUP10 DUP5 GT ISZERO PUSH2 0xE91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0xEB6 JUMPI PUSH2 0xEA7 DUP7 PUSH2 0xB2D JUMP JUMPDEST DUP3 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP1 DUP3 ADD SWAP1 PUSH2 0xE96 JUMP JUMPDEST SWAP7 POP POP DUP7 ADD CALLDATALOAD SWAP3 POP POP DUP1 DUP3 GT ISZERO PUSH2 0xECC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xED9 DUP6 DUP3 DUP7 ADD PUSH2 0xC89 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xF13 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xEF7 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xBA9 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xEE3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF44 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF4D DUP4 PUSH2 0xB2D JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xF62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF89 DUP4 PUSH2 0xB2D JUMP JUMPDEST SWAP2 POP PUSH2 0xF97 PUSH1 0x20 DUP5 ADD PUSH2 0xB2D JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xFB8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xFC1 DUP7 PUSH2 0xB2D JUMP JUMPDEST SWAP5 POP PUSH2 0xFCF PUSH1 0x20 DUP8 ADD PUSH2 0xB2D JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xFF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE0B DUP9 DUP3 DUP10 ADD PUSH2 0xCFA JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1019 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1039 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A2063616C6C6572206973206E6F7420746F6B656E206F776E PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x195C881BDC88185C1C1C9BDD9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x10CB JUMPI PUSH2 0x10CB PUSH2 0x10A3 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F20746865207A65726F206164 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A20696E73756666696369656E742062616C616E636520666F PUSH1 0x40 DUP3 ADD MSTORE PUSH10 0x39103A3930B739B332B9 PUSH1 0xB1 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x221 JUMPI PUSH2 0x221 PUSH2 0x10A3 JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1187 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0xEE3 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1199 DUP2 DUP6 PUSH2 0xEE3 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND DUP4 MSTORE DUP1 DUP8 AND PUSH1 0x20 DUP5 ADD MSTORE POP PUSH1 0xA0 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x11CE PUSH1 0xA0 DUP4 ADD DUP7 PUSH2 0xEE3 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x11E0 DUP2 DUP7 PUSH2 0xEE3 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x11F4 DUP2 DUP6 PUSH2 0xBC9 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1212 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xBA9 DUP2 PUSH2 0xB73 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 RETURNDATASIZE GT ISZERO PUSH2 0x1236 JUMPI PUSH1 0x4 PUSH1 0x0 DUP1 RETURNDATACOPY POP PUSH1 0x0 MLOAD PUSH1 0xE0 SHR JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x44 RETURNDATASIZE LT ISZERO PUSH2 0x1247 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x3 NOT RETURNDATASIZE DUP2 ADD PUSH1 0x4 DUP4 RETURNDATACOPY DUP2 MLOAD RETURNDATASIZE PUSH8 0xFFFFFFFFFFFFFFFF DUP2 PUSH1 0x24 DUP5 ADD GT DUP2 DUP5 GT OR ISZERO PUSH2 0x1277 JUMPI POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP3 DUP6 ADD SWAP2 POP DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x128F JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP5 RETURNDATASIZE DUP8 ADD ADD PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x12A9 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x12B8 PUSH1 0x20 DUP3 DUP7 ADD ADD DUP8 PUSH2 0xC38 JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A204552433131353552656365697665722072656A65637465 PUSH1 0x40 DUP3 ADD MSTORE PUSH8 0x6420746F6B656E73 PUSH1 0xC0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND DUP4 MSTORE DUP1 DUP8 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP5 PUSH1 0x40 DUP4 ADD MSTORE DUP4 PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0xA0 PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x1343 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0xBC9 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SIGNEXTEND 0x5F BLOCKHASH 0xEF SWAP13 JUMP 0xA7 PUSH19 0x4719124204351BF2E356F42AAD83FF6030ACC6 0xD MSTORE 0xE5 0xD8 PUSH5 0x64736F6C63 NUMBER STOP ADDMOD GT STOP CALLER ","sourceMap":"682:17320:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2593:227;;;;;;:::i;:::-;;:::i;:::-;;;620:25:30;;;608:2;593:18;2593:227:7;;;;;;;;1600:349;;;;;;:::i;:::-;;:::i;:::-;;;1207:14:30;;1200:22;1182:41;;1170:2;1155:18;1600:349:7;1042:187:30;2348:103:7;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;4472:426::-;;;;;;:::i;:::-;;:::i;:::-;;2977:508;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3553:153::-;;;;;;:::i;:::-;;:::i;3773:166::-;;;;;;:::i;:::-;-1:-1:-1;;;;;3895:27:7;;;3872:4;3895:27;;;:18;:27;;;;;;;;:37;;;;;;;;;;;;;;;3773:166;4006:394;;;;;;:::i;:::-;;:::i;2593:227::-;2679:7;-1:-1:-1;;;;;2706:21:7;;2698:76;;;;-1:-1:-1;;;2698:76:7;;8232:2:30;2698:76:7;;;8214:21:30;8271:2;8251:18;;;8244:30;8310:34;8290:18;;;8283:62;-1:-1:-1;;;8361:18:30;;;8354:40;8411:19;;2698:76:7;;;;;;;;;-1:-1:-1;2791:13:7;;;;:9;:13;;;;;;;;-1:-1:-1;;;;;2791:22:7;;;;;;;;;;2593:227;;;;;:::o;1600:349::-;1724:4;-1:-1:-1;;;;;;1759:52:7;;-1:-1:-1;;;1759:52:7;;:131;;-1:-1:-1;;;;;;;1827:63:7;;-1:-1:-1;;;1827:63:7;1759:131;:183;;;-1:-1:-1;;;;;;;;;;1168:51:19;;;1906:36:7;1060:166:19;2348:103:7;2408:13;2440:4;2433:11;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2348:103;;;:::o;4472:426::-;-1:-1:-1;;;;;4697:20:7;;929:10:14;4697:20:7;;:60;;-1:-1:-1;4721:36:7;4738:4;929:10:14;3773:166:7;:::i;4721:36::-;4676:153;;;;-1:-1:-1;;;4676:153:7;;;;;;;:::i;:::-;4839:52;4862:4;4868:2;4872:3;4877:7;4886:4;4839:22;:52::i;:::-;4472:426;;;;;:::o;2977:508::-;3128:16;3187:3;:10;3168:8;:15;:29;3160:83;;;;-1:-1:-1;;;3160:83:7;;9443:2:30;3160:83:7;;;9425:21:30;9482:2;9462:18;;;9455:30;9521:34;9501:18;;;9494:62;-1:-1:-1;;;9572:18:30;;;9565:39;9621:19;;3160:83:7;9241:405:30;3160:83:7;3254:30;3301:8;:15;3287:30;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3287:30:7;;3254:63;;3333:9;3328:120;3352:8;:15;3348:1;:19;3328:120;;;3407:30;3417:8;3426:1;3417:11;;;;;;;;:::i;:::-;;;;;;;3430:3;3434:1;3430:6;;;;;;;;:::i;:::-;;;;;;;3407:9;:30::i;:::-;3388:13;3402:1;3388:16;;;;;;;;:::i;:::-;;;;;;;;;;:49;3369:3;;;:::i;:::-;;;3328:120;;;-1:-1:-1;3465:13:7;2977:508;-1:-1:-1;;;2977:508:7:o;3553:153::-;3647:52;929:10:14;3680:8:7;3690;3647:18;:52::i;:::-;3553:153;;:::o;4006:394::-;-1:-1:-1;;;;;4206:20:7;;929:10:14;4206:20:7;;:60;;-1:-1:-1;4230:36:7;4247:4;929:10:14;3773:166:7;:::i;4230:36::-;4185:153;;;;-1:-1:-1;;;4185:153:7;;;;;;;:::i;:::-;4348:45;4366:4;4372:2;4376;4380:6;4388:4;4348:17;:45::i;6641:1115::-;6861:7;:14;6847:3;:10;:28;6839:81;;;;-1:-1:-1;;;6839:81:7;;10257:2:30;6839:81:7;;;10239:21:30;10296:2;10276:18;;;10269:30;10335:34;10315:18;;;10308:62;-1:-1:-1;;;10386:18:30;;;10379:38;10434:19;;6839:81:7;10055:404:30;6839:81:7;-1:-1:-1;;;;;6938:16:7;;6930:66;;;;-1:-1:-1;;;6930:66:7;;;;;;;:::i;:::-;929:10:14;7007:16:7;7120:411;7144:3;:10;7140:1;:14;7120:411;;;7175:10;7188:3;7192:1;7188:6;;;;;;;;:::i;:::-;;;;;;;7175:19;;7208:14;7225:7;7233:1;7225:10;;;;;;;;:::i;:::-;;;;;;;;;;;;7250:19;7272:13;;;:9;:13;;;;;;-1:-1:-1;;;;;7272:19:7;;;;;;;;;;;;7225:10;;-1:-1:-1;7313:21:7;;;;7305:76;;;;-1:-1:-1;;;7305:76:7;;;;;;;:::i;:::-;7423:13;;;;:9;:13;;;;;;;;-1:-1:-1;;;;;7423:19:7;;;;;;;;;;7445:20;;;7423:42;;7493:17;;;;;;;:27;;7445:20;;7423:13;7493:27;;7445:20;;7493:27;:::i;:::-;;;;;;;;7161:370;;;7156:3;;;;:::i;:::-;;;7120:411;;;;7576:2;-1:-1:-1;;;;;7546:47:7;7570:4;-1:-1:-1;;;;;7546:47:7;7560:8;-1:-1:-1;;;;;7546:47:7;;7580:3;7585:7;7546:47;;;;;;;:::i;:::-;;;;;;;;7674:75;7710:8;7720:4;7726:2;7730:3;7735:7;7744:4;7674:35;:75::i;:::-;6829:927;6641:1115;;;;;:::o;13318:323::-;13468:8;-1:-1:-1;;;;;13459:17:7;:5;-1:-1:-1;;;;;13459:17:7;;13451:71;;;;-1:-1:-1;;;13451:71:7;;12083:2:30;13451:71:7;;;12065:21:30;12122:2;12102:18;;;12095:30;12161:34;12141:18;;;12134:62;-1:-1:-1;;;12212:18:30;;;12205:39;12261:19;;13451:71:7;11881:405:30;13451:71:7;-1:-1:-1;;;;;13532:25:7;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;-1:-1:-1;;13532:46:7;;;;;;;;;;13593:41;;1182::30;;;13593::7;;1155:18:30;13593:41:7;;;;;;;13318:323;;;:::o;5348:947::-;-1:-1:-1;;;;;5529:16:7;;5521:66;;;;-1:-1:-1;;;5521:66:7;;;;;;;:::i;:::-;929:10:14;5598:16:7;5662:21;5680:2;5662:17;:21::i;:::-;5639:44;;5693:24;5720:25;5738:6;5720:17;:25::i;:::-;5693:52;;5827:19;5849:13;;;:9;:13;;;;;;;;-1:-1:-1;;;;;5849:19:7;;;;;;;;;;5886:21;;;;5878:76;;;;-1:-1:-1;;;5878:76:7;;;;;;;:::i;:::-;5988:13;;;;:9;:13;;;;;;;;-1:-1:-1;;;;;5988:19:7;;;;;;;;;;6010:20;;;5988:42;;6050:17;;;;;;;:27;;6010:20;;5988:13;6050:27;;6010:20;;6050:27;:::i;:::-;;;;-1:-1:-1;;6093:46:7;;;12465:25:30;;;12521:2;12506:18;;12499:34;;;-1:-1:-1;;;;;6093:46:7;;;;;;;;;;;;;;12438:18:30;6093:46:7;;;;;;;6220:68;6251:8;6261:4;6267:2;6271;6275:6;6283:4;6220:30;:68::i;:::-;5511:784;;;;5348:947;;;;;:::o;16696:814::-;-1:-1:-1;;;;;16928:13:7;;1476:19:13;:23;16924:580:7;;16963:90;;-1:-1:-1;;;16963:90:7;;-1:-1:-1;;;;;16963:54:7;;;;;:90;;17018:8;;17028:4;;17034:3;;17039:7;;17048:4;;16963:90;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;16963:90:7;;;;;;;;-1:-1:-1;;16963:90:7;;;;;;;;;;;;:::i;:::-;;;16959:535;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;17370:6;17363:14;;-1:-1:-1;;;17363:14:7;;;;;;;;:::i;16959:535::-;;;17417:62;;-1:-1:-1;;;17417:62:7;;14715:2:30;17417:62:7;;;14697:21:30;14754:2;14734:18;;;14727:30;14793:34;14773:18;;;14766:62;-1:-1:-1;;;14844:18:30;;;14837:50;14904:19;;17417:62:7;14513:416:30;16959:535:7;-1:-1:-1;;;;;;17132:71:7;;-1:-1:-1;;;17132:71:7;17128:168;;17227:50;;-1:-1:-1;;;17227:50:7;;;;;;;:::i;17128:168::-;17054:256;16696:814;;;;;;:::o;17516:193::-;17635:16;;;17649:1;17635:16;;;;;;;;;17582;;17610:22;;17635:16;;;;;;;;;;;;-1:-1:-1;17635:16:7;17610:41;;17672:7;17661:5;17667:1;17661:8;;;;;;;;:::i;:::-;;;;;;;;;;:18;17697:5;17516:193;-1:-1:-1;;17516:193:7:o;15943:747::-;-1:-1:-1;;;;;16150:13:7;;1476:19:13;:23;16146:538:7;;16185:83;;-1:-1:-1;;;16185:83:7;;-1:-1:-1;;;;;16185:49:7;;;;;:83;;16235:8;;16245:4;;16251:2;;16255:6;;16263:4;;16185:83;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;16185:83:7;;;;;;;;-1:-1:-1;;16185:83:7;;;;;;;;;;;;:::i;:::-;;;16181:493;;;;:::i;:::-;-1:-1:-1;;;;;;16317:66:7;;-1:-1:-1;;;16317:66:7;16313:163;;16407:50;;-1:-1:-1;;;16407:50:7;;;;;;;:::i;14:196:30:-;82:20;;-1:-1:-1;;;;;131:54:30;;121:65;;111:93;;200:1;197;190:12;111:93;14:196;;;:::o;215:254::-;283:6;291;344:2;332:9;323:7;319:23;315:32;312:52;;;360:1;357;350:12;312:52;383:29;402:9;383:29;:::i;:::-;373:39;459:2;444:18;;;;431:32;;-1:-1:-1;;;215:254:30:o;656:131::-;-1:-1:-1;;;;;;730:32:30;;720:43;;710:71;;777:1;774;767:12;710:71;656:131;:::o;792:245::-;850:6;903:2;891:9;882:7;878:23;874:32;871:52;;;919:1;916;909:12;871:52;958:9;945:23;977:30;1001:5;977:30;:::i;:::-;1026:5;792:245;-1:-1:-1;;;792:245:30:o;1234:180::-;1293:6;1346:2;1334:9;1325:7;1321:23;1317:32;1314:52;;;1362:1;1359;1352:12;1314:52;-1:-1:-1;1385:23:30;;1234:180;-1:-1:-1;1234:180:30:o;1419:423::-;1461:3;1499:5;1493:12;1526:6;1521:3;1514:19;1551:1;1561:162;1575:6;1572:1;1569:13;1561:162;;;1637:4;1693:13;;;1689:22;;1683:29;1665:11;;;1661:20;;1654:59;1590:12;1561:162;;;1565:3;1768:1;1761:4;1752:6;1747:3;1743:16;1739:27;1732:38;1831:4;1824:2;1820:7;1815:2;1807:6;1803:15;1799:29;1794:3;1790:39;1786:50;1779:57;;;1419:423;;;;:::o;1847:220::-;1996:2;1985:9;1978:21;1959:4;2016:45;2057:2;2046:9;2042:18;2034:6;2016:45;:::i;2072:127::-;2133:10;2128:3;2124:20;2121:1;2114:31;2164:4;2161:1;2154:15;2188:4;2185:1;2178:15;2204:249;2314:2;2295:13;;-1:-1:-1;;2291:27:30;2279:40;;2349:18;2334:34;;2370:22;;;2331:62;2328:88;;;2396:18;;:::i;:::-;2432:2;2425:22;-1:-1:-1;;2204:249:30:o;2458:183::-;2518:4;2551:18;2543:6;2540:30;2537:56;;;2573:18;;:::i;:::-;-1:-1:-1;2618:1:30;2614:14;2630:4;2610:25;;2458:183::o;2646:724::-;2700:5;2753:3;2746:4;2738:6;2734:17;2730:27;2720:55;;2771:1;2768;2761:12;2720:55;2807:6;2794:20;2833:4;2856:43;2896:2;2856:43;:::i;:::-;2928:2;2922:9;2940:31;2968:2;2960:6;2940:31;:::i;:::-;3006:18;;;3098:1;3094:10;;;;3082:23;;3078:32;;;3040:15;;;;-1:-1:-1;3122:15:30;;;3119:35;;;3150:1;3147;3140:12;3119:35;3186:2;3178:6;3174:15;3198:142;3214:6;3209:3;3206:15;3198:142;;;3280:17;;3268:30;;3318:12;;;;3231;;3198:142;;;-1:-1:-1;3358:6:30;2646:724;-1:-1:-1;;;;;;2646:724:30:o;3375:555::-;3417:5;3470:3;3463:4;3455:6;3451:17;3447:27;3437:55;;3488:1;3485;3478:12;3437:55;3524:6;3511:20;3550:18;3546:2;3543:26;3540:52;;;3572:18;;:::i;:::-;3621:2;3615:9;3633:67;3688:2;3669:13;;-1:-1:-1;;3665:27:30;3694:4;3661:38;3615:9;3633:67;:::i;:::-;3724:2;3716:6;3709:18;3770:3;3763:4;3758:2;3750:6;3746:15;3742:26;3739:35;3736:55;;;3787:1;3784;3777:12;3736:55;3851:2;3844:4;3836:6;3832:17;3825:4;3817:6;3813:17;3800:54;3898:1;3874:15;;;3891:4;3870:26;3863:37;;;;3878:6;3375:555;-1:-1:-1;;;3375:555:30:o;3935:943::-;4089:6;4097;4105;4113;4121;4174:3;4162:9;4153:7;4149:23;4145:33;4142:53;;;4191:1;4188;4181:12;4142:53;4214:29;4233:9;4214:29;:::i;:::-;4204:39;;4262:38;4296:2;4285:9;4281:18;4262:38;:::i;:::-;4252:48;;4351:2;4340:9;4336:18;4323:32;4374:18;4415:2;4407:6;4404:14;4401:34;;;4431:1;4428;4421:12;4401:34;4454:61;4507:7;4498:6;4487:9;4483:22;4454:61;:::i;:::-;4444:71;;4568:2;4557:9;4553:18;4540:32;4524:48;;4597:2;4587:8;4584:16;4581:36;;;4613:1;4610;4603:12;4581:36;4636:63;4691:7;4680:8;4669:9;4665:24;4636:63;:::i;:::-;4626:73;;4752:3;4741:9;4737:19;4724:33;4708:49;;4782:2;4772:8;4769:16;4766:36;;;4798:1;4795;4788:12;4766:36;;4821:51;4864:7;4853:8;4842:9;4838:24;4821:51;:::i;:::-;4811:61;;;3935:943;;;;;;;;:::o;4883:1208::-;5001:6;5009;5062:2;5050:9;5041:7;5037:23;5033:32;5030:52;;;5078:1;5075;5068:12;5030:52;5118:9;5105:23;5147:18;5188:2;5180:6;5177:14;5174:34;;;5204:1;5201;5194:12;5174:34;5242:6;5231:9;5227:22;5217:32;;5287:7;5280:4;5276:2;5272:13;5268:27;5258:55;;5309:1;5306;5299:12;5258:55;5345:2;5332:16;5367:4;5390:43;5430:2;5390:43;:::i;:::-;5462:2;5456:9;5474:31;5502:2;5494:6;5474:31;:::i;:::-;5540:18;;;5628:1;5624:10;;;;5616:19;;5612:28;;;5574:15;;;;-1:-1:-1;5652:19:30;;;5649:39;;;5684:1;5681;5674:12;5649:39;5708:11;;;;5728:148;5744:6;5739:3;5736:15;5728:148;;;5810:23;5829:3;5810:23;:::i;:::-;5798:36;;5761:12;;;;5854;;;;5728:148;;;5895:6;-1:-1:-1;;5939:18:30;;5926:32;;-1:-1:-1;;5970:16:30;;;5967:36;;;5999:1;5996;5989:12;5967:36;;6022:63;6077:7;6066:8;6055:9;6051:24;6022:63;:::i;:::-;6012:73;;;4883:1208;;;;;:::o;6096:435::-;6149:3;6187:5;6181:12;6214:6;6209:3;6202:19;6240:4;6269:2;6264:3;6260:12;6253:19;;6306:2;6299:5;6295:14;6327:1;6337:169;6351:6;6348:1;6345:13;6337:169;;;6412:13;;6400:26;;6446:12;;;;6481:15;;;;6373:1;6366:9;6337:169;;;-1:-1:-1;6522:3:30;;6096:435;-1:-1:-1;;;;;6096:435:30:o;6536:261::-;6715:2;6704:9;6697:21;6678:4;6735:56;6787:2;6776:9;6772:18;6764:6;6735:56;:::i;6802:347::-;6867:6;6875;6928:2;6916:9;6907:7;6903:23;6899:32;6896:52;;;6944:1;6941;6934:12;6896:52;6967:29;6986:9;6967:29;:::i;:::-;6957:39;;7046:2;7035:9;7031:18;7018:32;7093:5;7086:13;7079:21;7072:5;7069:32;7059:60;;7115:1;7112;7105:12;7059:60;7138:5;7128:15;;;6802:347;;;;;:::o;7154:260::-;7222:6;7230;7283:2;7271:9;7262:7;7258:23;7254:32;7251:52;;;7299:1;7296;7289:12;7251:52;7322:29;7341:9;7322:29;:::i;:::-;7312:39;;7370:38;7404:2;7393:9;7389:18;7370:38;:::i;:::-;7360:48;;7154:260;;;;;:::o;7419:606::-;7523:6;7531;7539;7547;7555;7608:3;7596:9;7587:7;7583:23;7579:33;7576:53;;;7625:1;7622;7615:12;7576:53;7648:29;7667:9;7648:29;:::i;:::-;7638:39;;7696:38;7730:2;7719:9;7715:18;7696:38;:::i;:::-;7686:48;;7781:2;7770:9;7766:18;7753:32;7743:42;;7832:2;7821:9;7817:18;7804:32;7794:42;;7887:3;7876:9;7872:19;7859:33;7915:18;7907:6;7904:30;7901:50;;;7947:1;7944;7937:12;7901:50;7970:49;8011:7;8002:6;7991:9;7987:22;7970:49;:::i;8441:380::-;8520:1;8516:12;;;;8563;;;8584:61;;8638:4;8630:6;8626:17;8616:27;;8584:61;8691:2;8683:6;8680:14;8660:18;8657:38;8654:161;;8737:10;8732:3;8728:20;8725:1;8718:31;8772:4;8769:1;8762:15;8800:4;8797:1;8790:15;8654:161;;8441:380;;;:::o;8826:410::-;9028:2;9010:21;;;9067:2;9047:18;;;9040:30;9106:34;9101:2;9086:18;;9079:62;-1:-1:-1;;;9172:2:30;9157:18;;9150:44;9226:3;9211:19;;8826:410::o;9651:127::-;9712:10;9707:3;9703:20;9700:1;9693:31;9743:4;9740:1;9733:15;9767:4;9764:1;9757:15;9783:127;9844:10;9839:3;9835:20;9832:1;9825:31;9875:4;9872:1;9865:15;9899:4;9896:1;9889:15;9915:135;9954:3;9975:17;;;9972:43;;9995:18;;:::i;:::-;-1:-1:-1;10042:1:30;10031:13;;9915:135::o;10464:401::-;10666:2;10648:21;;;10705:2;10685:18;;;10678:30;10744:34;10739:2;10724:18;;10717:62;-1:-1:-1;;;10810:2:30;10795:18;;10788:35;10855:3;10840:19;;10464:401::o;10870:406::-;11072:2;11054:21;;;11111:2;11091:18;;;11084:30;11150:34;11145:2;11130:18;;11123:62;-1:-1:-1;;;11216:2:30;11201:18;;11194:40;11266:3;11251:19;;10870:406::o;11281:125::-;11346:9;;;11367:10;;;11364:36;;;11380:18;;:::i;11411:465::-;11668:2;11657:9;11650:21;11631:4;11694:56;11746:2;11735:9;11731:18;11723:6;11694:56;:::i;:::-;11798:9;11790:6;11786:22;11781:2;11770:9;11766:18;11759:50;11826:44;11863:6;11855;11826:44;:::i;:::-;11818:52;11411:465;-1:-1:-1;;;;;11411:465:30:o;12544:850::-;12866:4;-1:-1:-1;;;;;12976:2:30;12968:6;12964:15;12953:9;12946:34;13028:2;13020:6;13016:15;13011:2;13000:9;12996:18;12989:43;;13068:3;13063:2;13052:9;13048:18;13041:31;13095:57;13147:3;13136:9;13132:19;13124:6;13095:57;:::i;:::-;13200:9;13192:6;13188:22;13183:2;13172:9;13168:18;13161:50;13234:44;13271:6;13263;13234:44;:::i;:::-;13220:58;;13327:9;13319:6;13315:22;13309:3;13298:9;13294:19;13287:51;13355:33;13381:6;13373;13355:33;:::i;:::-;13347:41;12544:850;-1:-1:-1;;;;;;;;12544:850:30:o;13399:249::-;13468:6;13521:2;13509:9;13500:7;13496:23;13492:32;13489:52;;;13537:1;13534;13527:12;13489:52;13569:9;13563:16;13588:30;13612:5;13588:30;:::i;13653:179::-;13688:3;13730:1;13712:16;13709:23;13706:120;;;13776:1;13773;13770;13755:23;-1:-1:-1;13813:1:30;13807:8;13802:3;13798:18;13706:120;13653:179;:::o;13837:671::-;13876:3;13918:4;13900:16;13897:26;13894:39;;;13837:671;:::o;13894:39::-;13960:2;13954:9;-1:-1:-1;;14025:16:30;14021:25;;14018:1;13954:9;13997:50;14076:4;14070:11;14100:16;14135:18;14206:2;14199:4;14191:6;14187:17;14184:25;14179:2;14171:6;14168:14;14165:45;14162:58;;;14213:5;;;;;13837:671;:::o;14162:58::-;14250:6;14244:4;14240:17;14229:28;;14286:3;14280:10;14313:2;14305:6;14302:14;14299:27;;;14319:5;;;;;;13837:671;:::o;14299:27::-;14403:2;14384:16;14378:4;14374:27;14370:36;14363:4;14354:6;14349:3;14345:16;14341:27;14338:69;14335:82;;;14410:5;;;;;;13837:671;:::o;14335:82::-;14426:57;14477:4;14468:6;14460;14456:19;14452:30;14446:4;14426:57;:::i;:::-;-1:-1:-1;14499:3:30;;13837:671;-1:-1:-1;;;;;13837:671:30:o;14934:404::-;15136:2;15118:21;;;15175:2;15155:18;;;15148:30;15214:34;15209:2;15194:18;;15187:62;-1:-1:-1;;;15280:2:30;15265:18;;15258:38;15328:3;15313:19;;14934:404::o;15343:584::-;15565:4;-1:-1:-1;;;;;15675:2:30;15667:6;15663:15;15652:9;15645:34;15727:2;15719:6;15715:15;15710:2;15699:9;15695:18;15688:43;;15767:6;15762:2;15751:9;15747:18;15740:34;15810:6;15805:2;15794:9;15790:18;15783:34;15854:3;15848;15837:9;15833:19;15826:32;15875:46;15916:3;15905:9;15901:19;15893:6;15875:46;:::i;:::-;15867:54;15343:584;-1:-1:-1;;;;;;;15343:584:30:o"},"gasEstimates":{"creation":{"codeDepositCost":"999200","executionCost":"1041","totalCost":"1000241"},"external":{"balanceOf(address,uint256)":"2680","balanceOfBatch(address[],uint256[])":"infinite","isApprovedForAll(address,address)":"infinite","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"infinite","safeTransferFrom(address,address,uint256,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"26705","supportsInterface(bytes4)":"555","uri(uint256)":"infinite"},"internal":{"__ERC1155_init(string memory)":"infinite","__ERC1155_init_unchained(string memory)":"infinite","_afterTokenTransfer(address,address,address,uint256[] memory,uint256[] memory,bytes memory)":"infinite","_asSingletonArray(uint256)":"infinite","_beforeTokenTransfer(address,address,address,uint256[] memory,uint256[] memory,bytes memory)":"infinite","_burn(address,uint256,uint256)":"infinite","_burnBatch(address,uint256[] memory,uint256[] memory)":"infinite","_doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[] memory,uint256[] memory,bytes memory)":"infinite","_doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes memory)":"infinite","_mint(address,uint256,uint256,bytes memory)":"infinite","_mintBatch(address,uint256[] memory,uint256[] memory,bytes memory)":"infinite","_safeBatchTransferFrom(address,address,uint256[] memory,uint256[] memory,bytes memory)":"infinite","_safeTransferFrom(address,address,uint256,uint256,bytes memory)":"infinite","_setApprovalForAll(address,address,bool)":"infinite","_setURI(string memory)":"infinite"}},"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","isApprovedForAll(address,address)":"e985e9c5","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","uri(uint256)":"0e89341c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the basic standard multi-token. See https://eips.ethereum.org/EIPS/eip-1155 Originally based on code by Enjin: https://github.com/enjin/erc-1155 _Available since v3.1._\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":\"ERC1155Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0x6de308cde403f95519bf4b25123cbfe9126f2e0212564bb2ad3c23ac99f1a9cb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":633,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:ERC1155Upgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":636,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:ERC1155Upgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2945,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:ERC1155Upgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":3735,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:ERC1155Upgradeable","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"},{"astId":960,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:ERC1155Upgradeable","label":"_balances","offset":0,"slot":"101","type":"t_mapping(t_uint256,t_mapping(t_address,t_uint256))"},{"astId":966,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:ERC1155Upgradeable","label":"_operatorApprovals","offset":0,"slot":"102","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":968,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:ERC1155Upgradeable","label":"_uri","offset":0,"slot":"103","type":"t_string_storage"},{"astId":2175,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:ERC1155Upgradeable","label":"__gap","offset":0,"slot":"104","type":"t_array(t_uint256)47_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)47_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[47]","numberOfBytes":"1504"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol":{"IERC1155ReceiverUpgradeable":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"_Available since v3.1._","kind":"dev","methods":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"details":"Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81, or its own function selector).","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","ids":"An array containing ids of each token being transferred (order and length must match values array)","operator":"The address which initiated the batch transfer (i.e. msg.sender)","values":"An array containing amounts of each token being transferred (order and length must match ids array)"},"returns":{"_0":"`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed"}},"onERC1155Received(address,address,uint256,uint256,bytes)":{"details":"Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61, or its own function selector).","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","id":"The ID of the token being transferred","operator":"The address which initiated the transfer (i.e. msg.sender)","value":"The amount of tokens being transferred"},"returns":{"_0":"`bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed"}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"_Available since v3.1._\",\"kind\":\"dev\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"ids\":\"An array containing ids of each token being transferred (order and length must match values array)\",\"operator\":\"The address which initiated the batch transfer (i.e. msg.sender)\",\"values\":\"An array containing amounts of each token being transferred (order and length must match ids array)\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"id\":\"The ID of the token being transferred\",\"operator\":\"The address which initiated the transfer (i.e. msg.sender)\",\"value\":\"The amount of tokens being transferred\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":\"IERC1155ReceiverUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol":{"IERC1155Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Required interface of an ERC1155 compliant contract, as defined in the https://eips.ethereum.org/EIPS/eip-1155[EIP]. _Available since v3.1._","events":{"ApprovalForAll(address,address,bool)":{"details":"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."},"TransferBatch(address,address,address,uint256[],uint256[])":{"details":"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."},"TransferSingle(address,address,address,uint256,uint256)":{"details":"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."},"URI(string,uint256)":{"details":"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."}},"kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address."},"balanceOfBatch(address[],uint256[])":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length."},"isApprovedForAll(address,address)":{"details":"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value."},"setApprovalForAll(address,bool)":{"details":"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","isApprovedForAll(address,address)":"e985e9c5","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC1155 compliant contract, as defined in the https://eips.ethereum.org/EIPS/eip-1155[EIP]. _Available since v3.1._\",\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":\"IERC1155Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol":{"ERC1155BurnableUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"burnBatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Extension of {ERC1155} that allows token holders to destroy both their own tokens and those that they have been approved to use. _Available since v3.1._","kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."},"balanceOfBatch(address[],uint256[])":{"details":"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."},"isApprovedForAll(address,address)":{"details":"See {IERC1155-isApprovedForAll}."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"See {IERC1155-safeBatchTransferFrom}."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"See {IERC1155-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC1155-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"uri(uint256)":{"details":"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","burn(address,uint256,uint256)":"f5298aca","burnBatch(address,uint256[],uint256[])":"6b20c454","isApprovedForAll(address,address)":"e985e9c5","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","uri(uint256)":"0e89341c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extension of {ERC1155} that allows token holders to destroy both their own tokens and those that they have been approved to use. _Available since v3.1._\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol\":\"ERC1155BurnableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0x6de308cde403f95519bf4b25123cbfe9126f2e0212564bb2ad3c23ac99f1a9cb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/extensions/ERC1155Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155BurnableUpgradeable is Initializable, ERC1155Upgradeable {\\n    function __ERC1155Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x39aa04a680b648c7628f145de97e52f0c7b4609b38601220d5ee8fc2b7140988\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":633,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:ERC1155BurnableUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":636,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:ERC1155BurnableUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2945,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:ERC1155BurnableUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":3735,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:ERC1155BurnableUpgradeable","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"},{"astId":960,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:ERC1155BurnableUpgradeable","label":"_balances","offset":0,"slot":"101","type":"t_mapping(t_uint256,t_mapping(t_address,t_uint256))"},{"astId":966,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:ERC1155BurnableUpgradeable","label":"_operatorApprovals","offset":0,"slot":"102","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":968,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:ERC1155BurnableUpgradeable","label":"_uri","offset":0,"slot":"103","type":"t_string_storage"},{"astId":2175,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:ERC1155BurnableUpgradeable","label":"__gap","offset":0,"slot":"104","type":"t_array(t_uint256)47_storage"},{"astId":2427,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:ERC1155BurnableUpgradeable","label":"__gap","offset":0,"slot":"151","type":"t_array(t_uint256)50_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)47_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[47]","numberOfBytes":"1504"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol":{"ERC1155SupplyUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"exists","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Extension of ERC1155 that adds tracking of total supply per id. Useful for scenarios where Fungible and Non-fungible tokens have to be clearly identified. Note: While a totalSupply of 1 might mean the corresponding is an NFT, there is no guarantees that no other token with the same id are not going to be minted.","kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."},"balanceOfBatch(address[],uint256[])":{"details":"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."},"exists(uint256)":{"details":"Indicates whether any token exist with a given id, or not."},"isApprovedForAll(address,address)":{"details":"See {IERC1155-isApprovedForAll}."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"See {IERC1155-safeBatchTransferFrom}."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"See {IERC1155-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC1155-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"totalSupply(uint256)":{"details":"Total amount of tokens in with a given id."},"uri(uint256)":{"details":"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","exists(uint256)":"4f558e79","isApprovedForAll(address,address)":"e985e9c5","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","totalSupply(uint256)":"bd85b039","uri(uint256)":"0e89341c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extension of ERC1155 that adds tracking of total supply per id. Useful for scenarios where Fungible and Non-fungible tokens have to be clearly identified. Note: While a totalSupply of 1 might mean the corresponding is an NFT, there is no guarantees that no other token with the same id are not going to be minted.\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\":\"ERC1155SupplyUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0x6de308cde403f95519bf4b25123cbfe9126f2e0212564bb2ad3c23ac99f1a9cb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155SupplyUpgradeable is Initializable, ERC1155Upgradeable {\\n    function __ERC1155Supply_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Supply_init_unchained() internal onlyInitializing {\\n    }\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155SupplyUpgradeable.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                uint256 amount = amounts[i];\\n                uint256 supply = _totalSupply[id];\\n                require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\n                unchecked {\\n                    _totalSupply[id] = supply - amount;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf7bdbcbb9fcf42997f280db8c02070e9c561406e6971ff680c6c43f92065ac9e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":633,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:ERC1155SupplyUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":636,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:ERC1155SupplyUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2945,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:ERC1155SupplyUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":3735,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:ERC1155SupplyUpgradeable","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"},{"astId":960,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:ERC1155SupplyUpgradeable","label":"_balances","offset":0,"slot":"101","type":"t_mapping(t_uint256,t_mapping(t_address,t_uint256))"},{"astId":966,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:ERC1155SupplyUpgradeable","label":"_operatorApprovals","offset":0,"slot":"102","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":968,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:ERC1155SupplyUpgradeable","label":"_uri","offset":0,"slot":"103","type":"t_string_storage"},{"astId":2175,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:ERC1155SupplyUpgradeable","label":"__gap","offset":0,"slot":"104","type":"t_array(t_uint256)47_storage"},{"astId":2453,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:ERC1155SupplyUpgradeable","label":"_totalSupply","offset":0,"slot":"151","type":"t_mapping(t_uint256,t_uint256)"},{"astId":2604,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:ERC1155SupplyUpgradeable","label":"__gap","offset":0,"slot":"152","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)47_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[47]","numberOfBytes":"1504"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol":{"IERC1155MetadataURIUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the optional ERC1155MetadataExtension interface, as defined in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP]. _Available since v3.1._","kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address."},"balanceOfBatch(address[],uint256[])":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length."},"isApprovedForAll(address,address)":{"details":"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value."},"setApprovalForAll(address,bool)":{"details":"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"uri(uint256)":{"details":"Returns the URI for token type `id`. If the `\\{id\\}` substring is present in the URI, it must be replaced by clients with the actual token type ID."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","isApprovedForAll(address,address)":"e985e9c5","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","uri(uint256)":"0e89341c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the optional ERC1155MetadataExtension interface, as defined in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP]. _Available since v3.1._\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"uri(uint256)\":{\"details\":\"Returns the URI for token type `id`. If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by clients with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":\"IERC1155MetadataURIUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"AddressUpgradeable":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220746ba2b4ce93db0f9c9b2e85acd4a3a4ef82c67afce7cb18356f911705aceb9a64736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH21 0x6BA2B4CE93DB0F9C9B2E85ACD4A3A4EF82C67AFCE7 0xCB XOR CALLDATALOAD PUSH16 0x911705ACEB9A64736F6C634300081100 CALLER ","sourceMap":"194:8087:13:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:8087:13;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220746ba2b4ce93db0f9c9b2e85acd4a3a4ef82c67afce7cb18356f911705aceb9a64736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH21 0x6BA2B4CE93DB0F9C9B2E85ACD4A3A4EF82C67AFCE7 0xCB XOR CALLDATALOAD PUSH16 0x911705ACEB9A64736F6C634300081100 CALLER ","sourceMap":"194:8087:13:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ContextUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":633,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":636,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2945,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol":{"StorageSlotUpgradeable":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ``` contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c804f5b1b7e625cfef8989b242d264b676e3260b114c5ab945c4ce66ad3b9e6464736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC8 DIV CREATE2 0xB1 0xB7 0xE6 0x25 0xCF 0xEF DUP10 DUP10 0xB2 TIMESTAMP 0xD2 PUSH5 0xB676E3260B GT 0x4C GAS 0xB9 GASLIMIT 0xC4 0xCE PUSH7 0xAD3B9E6464736F PUSH13 0x63430008110033000000000000 ","sourceMap":"1279:1402:15:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1279:1402:15;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c804f5b1b7e625cfef8989b242d264b676e3260b114c5ab945c4ce66ad3b9e6464736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC8 DIV CREATE2 0xB1 0xB7 0xE6 0x25 0xCF 0xEF DUP10 DUP10 0xB2 TIMESTAMP 0xD2 PUSH5 0xB676E3260B GT 0x4C GAS 0xB9 GASLIMIT 0xC4 0xCE PUSH7 0xAD3B9E6464736F PUSH13 0x63430008110033000000000000 ","sourceMap":"1279:1402:15:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ``` contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":\"StorageSlotUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"StringsUpgradeable":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e8d5462e2618b833557fc73e4299712e6832dc94150e9456d71b8f5166bb0a8364736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE8 0xD5 CHAINID 0x2E 0x26 XOR 0xB8 CALLER SSTORE PUSH32 0xC73E4299712E6832DC94150E9456D71B8F5166BB0A8364736F6C634300081100 CALLER ","sourceMap":"199:2098:16:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;199:2098:16;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e8d5462e2618b833557fc73e4299712e6832dc94150e9456d71b8f5166bb0a8364736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE8 0xD5 CHAINID 0x2E 0x26 XOR 0xB8 CALLER SSTORE PUSH32 0xC73E4299712E6832DC94150E9456D71B8F5166BB0A8364736F6C634300081100 CALLER ","sourceMap":"199:2098:16:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":\"StringsUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol":{"ECDSAUpgradeable":{"abi":[],"devdoc":{"details":"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200f8e8be9fe366393dd8732d9f0816b6366354e84ff13414068fd2f62a4d608d164736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF DUP15 DUP12 0xE9 INVALID CALLDATASIZE PUSH4 0x93DD8732 0xD9 CREATE DUP2 PUSH12 0x6366354E84FF13414068FD2F PUSH3 0xA4D608 0xD1 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"380:8190:17:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;380:8190:17;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200f8e8be9fe366393dd8732d9f0816b6366354e84ff13414068fd2f62a4d608d164736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF DUP15 DUP12 0xE9 INVALID CALLDATASIZE PUSH4 0x93DD8732 0xD9 CREATE DUP2 PUSH12 0x6366354E84FF13414068FD2F PUSH3 0xA4D608 0xD1 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"380:8190:17:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_throwError(enum ECDSAUpgradeable.RecoverError)":"infinite","recover(bytes32,bytes memory)":"infinite","recover(bytes32,bytes32,bytes32)":"infinite","recover(bytes32,uint8,bytes32,bytes32)":"infinite","toEthSignedMessageHash(bytes memory)":"infinite","toEthSignedMessageHash(bytes32)":"infinite","toTypedDataHash(bytes32,bytes32)":"infinite","tryRecover(bytes32,bytes memory)":"infinite","tryRecover(bytes32,bytes32,bytes32)":"infinite","tryRecover(bytes32,uint8,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":\"ECDSAUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x12f297cafe6e2847ae0378502f155654d0764b532a9873c8afe4350950fa7971\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol":{"EIP712Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"custom:storage-size":"52","details":"https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in their contracts using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. _Available since v3.4._","kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:storage-size\":\"52\",\"details\":\"https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in their contracts using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. _Available since v3.4._\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":\"EIP712Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x12f297cafe6e2847ae0378502f155654d0764b532a9873c8afe4350950fa7971\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x3017aded62c4a2b9707f5f06f92934e592c1c9b6f384b91b51340a6d5f841931\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":633,"contract":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":636,"contract":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":3551,"contract":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable","label":"_HASHED_NAME","offset":0,"slot":"1","type":"t_bytes32"},{"astId":3553,"contract":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable","label":"_HASHED_VERSION","offset":0,"slot":"2","type":"t_bytes32"},{"astId":3691,"contract":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable","label":"__gap","offset":0,"slot":"3","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"ERC165Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":\"ERC165Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":633,"contract":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":636,"contract":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":3735,"contract":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol":{"IERC165Upgradeable":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":\"IERC165Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"MathUpgradeable":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f3def1f7b8370c371b514819f18a1d0e9d809daf17f3262211346f42f132a37b64736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURN 0xDE CALL 0xF7 0xB8 CALLDATACOPY 0xC CALLDATACOPY SHL MLOAD BASEFEE NOT CALL DUP11 SAR 0xE SWAP14 DUP1 SWAP14 0xAF OR RETURN 0x26 0x22 GT CALLVALUE PUSH16 0x42F132A37B64736F6C63430008110033 ","sourceMap":"202:12313:21:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:12313:21;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f3def1f7b8370c371b514819f18a1d0e9d809daf17f3262211346f42f132a37b64736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURN 0xDE CALL 0xF7 0xB8 CALLDATACOPY 0xC CALLDATACOPY SHL MLOAD BASEFEE NOT CALL DUP11 SAR 0xE SWAP14 DUP1 SWAP14 0xAF OR RETURN 0x26 0x22 GT CALLVALUE PUSH16 0x42F132A37B64736F6C63430008110033 ","sourceMap":"202:12313:21:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum MathUpgradeable.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum MathUpgradeable.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum MathUpgradeable.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum MathUpgradeable.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum MathUpgradeable.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":\"MathUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"src/ERC1967UUPSProxy.sol":{"ERC1967UUPSProxy":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208e4d8f44ec998584b61bc3f703ea85703a62566e2b07e48acdbe9fe6cfc56cba64736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP15 0x4D DUP16 DIFFICULTY 0xEC SWAP10 DUP6 DUP5 0xB6 SHL 0xC3 0xF7 SUB 0xEA DUP6 PUSH17 0x3A62566E2B07E48ACDBE9FE6CFC56CBA64 PUSH20 0x6F6C634300081100330000000000000000000000 ","sourceMap":"10311:2718:22:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;10311:2718:22;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208e4d8f44ec998584b61bc3f703ea85703a62566e2b07e48acdbe9fe6cfc56cba64736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP15 0x4D DUP16 DIFFICULTY 0xEC SWAP10 DUP6 DUP5 0xB6 SHL 0xC3 0xF7 SUB 0xEA DUP6 PUSH17 0x3A62566E2B07E48ACDBE9FE6CFC56CBA64 PUSH20 0x6F6C634300081100330000000000000000000000 ","sourceMap":"10311:2718:22:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_packArgs(address payable,bytes memory)":"infinite","create(address payable,bytes memory,uint256)":"infinite","create(address,bytes memory)":"infinite","createDeterministic(address payable,bytes memory,bytes32,uint256)":"infinite","createDeterministic(address,bytes memory,bytes32)":"infinite","predictDeterministic(address,bytes memory,bytes32)":"infinite","predictDeterministic(address,bytes memory,bytes32,address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/ERC1967UUPSProxy.sol\":\"ERC1967UUPSProxy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"src/ERC1967UUPSProxy.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.17;\\n\\n/*\\n\\n      /// from https://eips.ethereum.org/EIPS/eip-1967\\n      /// bytes32 implSlot = bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1);\\n      /// implSlot == 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n      /// from runtime code below\\n      /// bytes11 runtime0 = 0x3d3d3d3d363d3d37363d7f;\\n      /// bytes14 runtime1 = 0x545af43d3d93803e603757fd5bf3;\\n\\n      PC | OP | Arg | Mnemonic      | [Stack]                                                                     | {Memory}\\n      ----------------------------------------------------------------------------------------------------------------------\\n      // prepare some of the arguments for runtime RETURN\\n      00 | 60 | 39 | PUSH1          | [runtimeSize]                                                               | {}\\n      02 | 60 | 15 | PUSH1          | [15 runtimeSize]                                                            | {}\\n      04 | 6a | runtime0 | PUSH11   | [runtime0 15 runtimeSize]                                                   | {}\\n      10 | 3d |    | RETURNDATASIZE | [0 runtime0 15 runtimeSize]                                                 | {}\\n      11 | 7f | implSlot | PUSH32   | [implSlot 0 runtime0 15 runtimeSize]                                        | {}\\n\\n      // get the implementation address from code; store it in the ERC1967 slot\\n      32 | 60 | 14 | PUSH1          | [14 implSlot 0 runtime0 15 runtimeSize]                                     | {}\\n      34 | 60 | 79 | PUSH1          | [initCodeEnd 14 implSlot 0 runtime0 15 runtimeSize]                         | {}\\n      36 | 60 | 0c | PUSH1          | [0c initCodeEnd 14 implSlot 0 runtime0 15 runtimeSize]                      | {}\\n      38 | 39 |    | CODECOPY       | [implSlot 0 runtime0 15 runtimeSize]                                        | {impl}\\n      39 | 3d |    | RETURNDATASIZE | [0 implSlot 0 runtime0 15 runtimeSize]                                      | {impl}\\n      3a | 51 |    | MLOAD          | [impl implSlot 0 runtime0 15 runtimeSize]                                   | {impl}\\n      3b | 80 |    | DUP1           | [impl impl implSlot 0 runtime0 15 runtimeSize]                              | {impl}\\n      3c | 82 |    | DUP3           | [implSlot impl impl implSlot 0 runtime0 15 runtimeSize]                     | {impl}\\n      3d | 55 |    | SSTORE         | [impl implSlot 0 runtime0 15 runtimeSize]                                   | {impl}\\n\\n      // prepare the empty returndata space for initializer DELEGATECALL\\n      3e | 3d |    | RETURNDATASIZE | [0 impl implSlot 0 runtime0 15 runtimeSize]                                 | {impl}\\n      3f | 3d |    | RETURNDATASIZE | [0 0 impl implSlot 0 runtime0 15 runtimeSize]                               | {impl}\\n\\n      // copy initializer into memory and prepare calldata space for DELEGATECALL\\n      40 | 60 | 8d | PUSH1          | [initStart 0 0 impl implSlot 0 runtime0 15 runtimeSize]                     | {impl}\\n      42 | 80 |    | DUP1           | [initStart initStart 0 0 impl implSlot 0 runtime0 15 runtimeSize]           | {impl}\\n      43 | 38 |    | CODESIZE       | [codesize initStart initStart 0 0 impl implSlot 0 runtime0 15 runtimeSize]  | {impl}\\n      44 | 03 |    | SUB            | [initSize initStart 0 0 impl implSlot 0 runtime0 15 runtimeSize]            | {impl}\\n      45 | 80 |    | DUP1           | [initSize initSize initStart 0 0 impl implSlot 0 runtime0 15 runtimeSize]   | {impl}\\n      46 | 91 |    | SWAP2          | [initStart initSize initSize 0 0 impl implSlot 0 runtime0 15 runtimeSize]   | {impl}\\n      47 | 3d |    | RETURNDATASIZE | [0 initStart initSize initSize 0 0 impl implSlot 0 runtime0 15 runtimeSize] | {impl}\\n      48 | 39 |    | CODECOPY       | [initSize 0 0 impl implSlot 0 runtime0 15 runtimeSize]                      | {init}\\n      49 | 3d |    | RETURNDATASIZE | [0 initSize 0 0 impl implSlot 0 runtime0 15 runtimeSize]                    | {init}\\n\\n      // do the initializer DELEGATECALL\\n      4a | 84 |    | DUP5           | [impl 0 initSize 0 0 impl implSlot 0 runtime0 15 runtimeSize]               | {init}\\n      4b | 5a |    | GAS            | [gas impl 0 initSize 0 0 impl implSlot 0 runtime0 15 runtimeSize]           | {init}\\n      4c | f4 |    | DELEGATECALL   | [success impl implSlot 0 runtime0 15 runtimeSize]                           | {init}\\n\\n      // check for revert\\n  /-< 4d | 60 | 53 | PUSH1          | [target success impl implSlot 0 runtime0 15 runtimeSize]                    | {init}\\n  |   4f | 57 |    | JUMPI          | [impl implSlot 0 runtime0 15 runtimeSize]                                   | {init}\\n  |   50 | 82 |    | DUP3           | [0 impl implSlot 0 runtime0 15 runtimeSize]                                 | {init}\\n  |   51 | 80 |    | DUP1           | [0 0 impl implSlot 0 runtime0 15 runtimeSize]                               | {init}\\n  |   52 | fd |    | REVERT         | X                                                                           | X\\n  |\\n  |   // check that the implementation exists\\n  \\\\-> 53 | 5b |    | JUMPDEST       | [impl implSlot 0 runtime0 15 runtimeSize]                                   | {init}\\n      54 | 3d |    | RETURNDATASIZE | [rds impl implSlot 0 runtime0 15 runtimeSize]                               | {init}\\n  /-< 55 | 60 | 5f | PUSH1          | [target rds impl implSlot 0 runtime0 15 runtimeSize]                        | {init}\\n  |   57 | 57 |    | JUMPI          | [impl implSLot 0 runtime0 15 runtimeSize]                                   | {init}\\n  |   58 | 3b |    | EXTCODESIZE    | [implSize implSlot 0 runtime0 15 runtimeSize]                               | {init}\\n/-+-< 59 | 60 | 61 | PUSH1          | [target implSize implSlot 0 runtime0 15 runtimeSize]                        | {init}\\n| |   5b | 57 |    | JUMPI          | [implSlot 0 runtime0 15 runtimeSize]                                        | {init}\\n| |\\n| |   // revert if the implementation doesn't exist\\n| |   5c | 50 |    | POP            | [0 runtime0 15 runtimeSize]                                                 | {init}\\n| |   5d | 80 |    | DUP1           | [0 0 runtime0 15 runtimeSize]                                               | {init}\\n| |   5e | fd |    | REVERT         | X\\n| |\\n| |   // return the runtime\\n| \\\\-> 5f | 5b |    | JUMPDEST       | [impl implSlot 0 runtime0 15 runtimeSize]                                   | {init}\\n|     60 | 50 |    | POP            | [implSlot 0 runtime0 15 runtimeSize]                                        | {init}\\n\\\\---> 61 | 5b |    | JUMPDEST       | [implSlot 0 runtime0 15 runtimeSize]                                        | {init}\\n      62 | 6d | runtime1 | PUSH14   | [runtime1 implSlot 0 runtime0 15 runtimeSize]                               | {init}\\n      71 | 60 | 2e | PUSH1          | [2e runtime1 implSlot 0 runtime0 15 runtimeSize]                            | {init}\\n      73 | 52 |    | MSTORE         | [implSlot 0 runtime0 15 runtimeSize]                                        | {.. runtime1}\\n      74 | 60 | 20 | PUSH1          | [20 implSlot 0 runtime0 15 runtimeSize]                                     | {.. runtime1}\\n      76 | 52 |    | MSTORE         | [0 runtime0 15 runtimeSize]                                                 | {.. implSlot runtime1}\\n      77 | 52 |    | MSTORE         | [15 runtimeSize]                                                            | {.. runtime0 implSlot runtime1}\\n      78 | f3 |    | RETURN         | X                                                                           | X\\n      79 | <implementation address>\\n      8d | <initializer ...>\\n\\n===\\n\\n      /// Runtime code adapted from the \\\"The More-Minimal Proxy\\\" (ERC-1167) by 0age\\n      /// https://web.archive.org/web/20200502182542/https://medium.com/coinmonks/the-more-minimal-proxy-5756ae08ee48\\n\\n      PC | OP | Arg | Mnemonic      | [Stack]                      | {Memory}\\n      ---------------------------------------------------------------------------------------------------\\n      // push a bunch of zeroes, ultimately needed for DELEGATECALL, RETURNDATACOPY, and RETURN/REVERT\\n      00 | 3d |    | RETURNDATASIZE | [0]                          | {}\\n      01 | 3d |    | RETURNDATASIZE | [0 0]                        | {}\\n      02 | 3d |    | RETURNDATASIZE | [0 0 0]                      | {}\\n      03 | 3d |    | RETURNDATASIZE | [0 0 0 0]                    | {}\\n\\n      // copy calldata into memory\\n      04 | 36 |    | CALLDATASIZE   | [cds 0 0 0 0]                | {}\\n      05 | 3d |    | RETURNDATASIZE | [0 cds 0 0 0 0]              | {}\\n      06 | 3d |    | RETURNDATASIZE | [0 0 cds 0 0 0 0]            | {}\\n      07 | 37 |    | CALLDATACOPY   | [0 0 0 0]                    | {calldata}\\n      08 | 36 |    | CALLDATASIZE   | [cds 0 0 0 0]                | {calldata}\\n      09 | 3d |    | RETURNDATASIZE | [0 cds 0 0 0 0]              | {calldata}\\n\\n      // load the implementation from the ERC1967 slot\\n      0a | 7f | implSlot | PUSH32   | [implSlot 0 cds 0 0 0 0]     | {calldata}\\n      2b | 54 |    | SLOAD          | [impl 0 cds 0 0 0 0]         | {calldata}\\n\\n      // DELEGATECALL to the implementation\\n      2c | 5a |    | GAS            | [gas impl 0 cds 0 0 0 0]     | {calldata}\\n      2d | f4 |    | DELEGATECALL   | [success 0 0]                | {calldata}\\n\\n      // copy returndata into memory\\n      2e | 3d |    | RETURNDATASIZE | [rds success 0 0]            | {calldata}\\n      2f | 3d |    | RETURNDATASIZE | [rds rds success 0 0]        | {calldata}\\n      30 | 93 |    | SWAP4          | [0 rds success 0 rds]        | {calldata}\\n      31 | 80 |    | DUP1           | [0 0 rds success 0 rds]      | {calldata}\\n      32 | 3e |    | RETURNDATACOPY | [success 0 rds]              | {returnData}\\n\\n      // check if the call reverted, bubble up\\n  /-< 33 | 60 | 37 | PUSH1          | [returnTarget success 0 rds] | {returnData}\\n  |   35 | 57 |    | JUMPI          | [0 rds]                      | {returnData}\\n  |   36 | fd |    | REVERT         | X                            | X\\n  \\\\-> 37 | 5b |    | JUMPDEST       | [0 rds]                      | {returnData}\\n      38 | f3 |    | RETURN         | X                            | X\\n      39\\n\\n*/\\n\\nlibrary ERC1967UUPSProxy {\\n  bytes private constant _INITCODE =\\n    hex\\\"6039_6015_6a3d3d3d3d363d3d37363d7f_3d_7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc_6014_6079_600c_39_3d_51_80_82_55_3d_3d_608d_80_38_03_80_91_3d_39_3d_84_5a_f4_6053_57_82_80_fd_5b_3d_605f_57_3b_6061_57_50_80_fd_5b_50_5b_6d545af43d3d93803e603757fd5bf3_602e_52_6020_52_52_f3\\\";\\n\\n  function _packArgs(address payable implementation, bytes memory initializer)\\n    private\\n    pure\\n    returns (bytes memory)\\n  {\\n    return abi.encodePacked(_INITCODE, implementation, initializer);\\n  }\\n\\n  function create(address implementation, bytes memory initializer)\\n    internal\\n    returns (address)\\n  {\\n    return create(payable(implementation), initializer, 0);\\n  }\\n\\n  function create(\\n    address payable implementation,\\n    bytes memory initializer,\\n    uint256 value\\n  ) internal returns (address result) {\\n    require(address(this).balance >= value, \\\"ERC1967UUPSProxy: insufficient balance\\\");\\n    bytes memory initcode = _packArgs(implementation, initializer);\\n    assembly (\\\"memory-safe\\\") {\\n      result := create(value, add(0x20, initcode), mload(initcode))\\n    }\\n    require(result != address(0), \\\"ERC1967UUPSProxy: create failed\\\");\\n  }\\n\\n  function createDeterministic(\\n    address implementation,\\n    bytes memory initializer,\\n    bytes32 salt\\n  ) internal returns (address) {\\n    return createDeterministic(payable(implementation), initializer, salt, 0);\\n  }\\n\\n  function createDeterministic(\\n    address payable implementation,\\n    bytes memory initializer,\\n    bytes32 salt,\\n    uint256 value\\n  ) internal returns (address result) {\\n    require(address(this).balance >= value, \\\"ERC1967UUPSProxy: insufficient balance\\\");\\n    bytes memory initcode = _packArgs(implementation, initializer);\\n    assembly (\\\"memory-safe\\\") {\\n      result := create2(value, add(0x20, initcode), mload(initcode), salt)\\n    }\\n    require(result != address(0), \\\"ERC1967UUPSProxy: create2 failed\\\");\\n  }\\n\\n  function predictDeterministic(\\n    address implementation,\\n    bytes memory initializer,\\n    bytes32 salt,\\n    address deployer\\n  ) internal pure returns (address result) {\\n    return\\n      address(\\n        uint160(\\n          uint256(\\n            keccak256(\\n              abi.encodePacked(\\n                bytes1(0xff),\\n                deployer,\\n                salt,\\n                keccak256(_packArgs(payable(implementation), initializer))\\n              )\\n            )\\n          )\\n        )\\n      );\\n  }\\n\\n  function predictDeterministic(\\n    address implementation,\\n    bytes memory initializer,\\n    bytes32 salt\\n  ) internal view returns (address result) {\\n    return predictDeterministic(implementation, initializer, salt, address(this));\\n  }\\n}\\n\",\"keccak256\":\"0xf548cf359f2019891f5017cfa0f2e7cbc35736811ea1192cf16ea5bde0d7f2e0\",\"license\":\"CC0-1.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"src/JasmineEAT.sol":{"JasmineEAT":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"Frozen","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"newMinter","type":"address"}],"name":"MinterChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferStarted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"Thawed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"inputs":[],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"burnBatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"exists","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"freeze","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"frozen","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"initialURI","type":"string"},{"internalType":"address","name":"initialMinter","type":"address"},{"internalType":"address","name":"initialOwner","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"mintBatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"minter","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pendingOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newMinter","type":"address"}],"name":"setMinter","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"slash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"slashBatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"thaw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"_newURI","type":"string"}],"name":"updateTokenURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"}],"name":"upgradeTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is upgradeable. You can only append new contracts to the list of bases. You cannot delete bases or reorder them.","kind":"dev","methods":{"acceptOwnership()":{"details":"The new owner accepts the ownership transfer."},"balanceOf(address,uint256)":{"details":"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."},"balanceOfBatch(address[],uint256[])":{"details":"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."},"exists(uint256)":{"details":"Indicates whether any token exist with a given id, or not."},"isApprovedForAll(address,address)":{"details":"See {IERC1155-isApprovedForAll}."},"owner()":{"details":"Returns the address of the current owner."},"pendingOwner()":{"details":"Returns the address of the pending owner."},"proxiableUUID()":{"details":"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"See {IERC1155-safeBatchTransferFrom}."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"See {IERC1155-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC1155-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"totalSupply(uint256)":{"details":"Total amount of tokens in with a given id."},"transferOwnership(address)":{"details":"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."},"updateTokenURI(string)":{"details":"Update the base URI of the contract."},"upgradeTo(address)":{"details":"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."},"upgradeToAndCall(address,bytes)":{"details":"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."},"uri(uint256)":{"details":"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."}},"stateVariables":{"__gap":{"details":"Reserved storage gap. LINK: https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60a06040523060805234801561001457600080fd5b506080516133ca61005a6000396000818161082c0152818161086c015281816109cb01528181610a0b01528181610c5901528181610c990152610d2c01526133ca6000f3fe6080604052600436106101d75760003560e01c8063731133e911610102578063e30c397811610095578063f242432a11610064578063f242432a146105bb578063f2fde38b146105db578063f5298aca146105fb578063fca3b5aa1461061b57600080fd5b8063e30c397814610502578063e77cfaae14610520578063e985e9c514610540578063e9ac04401461058a57600080fd5b806398cd6153116100d157806398cd615314610474578063a22cb46514610494578063bd85b039146104b4578063d7a78db8146104e257600080fd5b8063731133e91461040157806379ba5097146104215780637c8a8970146104365780638da5cb5b1461045657600080fd5b8063463fd1af1161017a57806352d1902d1161014957806352d1902d146103975780636b20c454146103ac57806370f81f6c146103cc578063715018a6146103ec57600080fd5b8063463fd1af146103075780634e1273f4146103275780634f1ef286146103545780634f558e791461036757600080fd5b80630e89341c116101b65780630e89341c146102785780631f7fdffa146102a55780632eb2c2d6146102c75780633659cfe6146102e757600080fd5b8062fdd58e146101dc57806301ffc9a71461020f578063075461721461023f575b600080fd5b3480156101e857600080fd5b506101fc6101f7366004612595565b61063b565b6040519081526020015b60405180910390f35b34801561021b57600080fd5b5061022f61022a3660046125d5565b6106d7565b6040519015158152602001610206565b34801561024b57600080fd5b506101c354610260906001600160a01b031681565b6040516001600160a01b039091168152602001610206565b34801561028457600080fd5b506102986102933660046125f2565b610727565b604051610206919061265b565b3480156102b157600080fd5b506102c56102c03660046127ba565b6107bc565b005b3480156102d357600080fd5b506102c56102e2366004612853565b6107d6565b3480156102f357600080fd5b506102c56103023660046128fd565b610822565b34801561031357600080fd5b506102c5610322366004612918565b610901565b34801561033357600080fd5b50610347610342366004612976565b610b25565b6040516102069190612a7c565b6102c5610362366004612a8f565b610c4f565b34801561037357600080fd5b5061022f6103823660046125f2565b60009081526101916020526040902054151590565b3480156103a357600080fd5b506101fc610d1f565b3480156103b857600080fd5b506102c56103c7366004612ad3565b610dd3565b3480156103d857600080fd5b506102c56103e7366004612b47565b610de3565b3480156103f857600080fd5b506102c5610e6f565b34801561040d57600080fd5b506102c561041c366004612b7a565b610e83565b34801561042d57600080fd5b506102c5610e97565b34801561044257600080fd5b506102c5610451366004612ad3565b610f0e565b34801561046257600080fd5b506033546001600160a01b0316610260565b34801561048057600080fd5b506102c561048f366004612bcf565b611015565b3480156104a057600080fd5b506102c56104af366004612c0c565b611083565b3480156104c057600080fd5b506101fc6104cf3660046125f2565b6000908152610191602052604090205490565b3480156104ee57600080fd5b506102c56104fd3660046125f2565b61108e565b34801561050e57600080fd5b506065546001600160a01b0316610260565b34801561052c57600080fd5b506102c561053b3660046125f2565b6110da565b34801561054c57600080fd5b5061022f61055b366004612c48565b6001600160a01b03918216600090815261012e6020908152604080832093909416825291909152205460ff1690565b34801561059657600080fd5b5061022f6105a53660046125f2565b6101c46020526000908152604090205460ff1681565b3480156105c757600080fd5b506102c56105d6366004612c7b565b611123565b3480156105e757600080fd5b506102c56105f63660046128fd565b611168565b34801561060757600080fd5b506102c5610616366004612b47565b6111d9565b34801561062757600080fd5b506102c56106363660046128fd565b6111e4565b60006001600160a01b0383166106ab5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b50600081815261012d602090815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b148061070857506001600160e01b031982166303a24d0760e21b145b806106d157506301ffc9a760e01b6001600160e01b03198316146106d1565b606061012f805461073790612ce0565b80601f016020809104026020016040519081016040528092919081815260200182805461076390612ce0565b80156107b05780601f10610785576101008083540402835291602001916107b0565b820191906000526020600020905b81548152906001019060200180831161079357829003601f168201915b50505050509050919050565b6107c4611237565b6107d08484848461129e565b50505050565b6001600160a01b0385163314806107f257506107f2853361055b565b61080e5760405162461bcd60e51b81526004016106a290612d1a565b61081b85858585856113fa565b5050505050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361086a5760405162461bcd60e51b81526004016106a290612d68565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166108b360008051602061334e833981519152546001600160a01b031690565b6001600160a01b0316146108d95760405162461bcd60e51b81526004016106a290612db4565b6108e2816115a9565b604080516000808252602082019092526108fe918391906115b1565b50565b600054610100900460ff16158080156109215750600054600160ff909116105b8061093b5750303b15801561093b575060005460ff166001145b61099e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106a2565b6000805460ff1916600117905580156109c1576000805461ff0019166101001790555b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610a095760405162461bcd60e51b81526004016106a290612d68565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610a5260008051602061334e833981519152546001600160a01b031690565b6001600160a01b031614610a785760405162461bcd60e51b81526004016106a290612db4565b610a818261171c565b610a89611735565b610a928461175c565b6101c380546001600160a01b0319166001600160a01b0385169081179091556040517fb6b8f1859c5c352e5ffad07d0f77e384ac725512c015bd3a3ffc885831c8a42590600090a280156107d0576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050565b60608151835114610b8a5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016106a2565b6000835167ffffffffffffffff811115610ba657610ba661266e565b604051908082528060200260200182016040528015610bcf578160200160208202803683370190505b50905060005b8451811015610c4757610c1a858281518110610bf357610bf3612e00565b6020026020010151858381518110610c0d57610c0d612e00565b602002602001015161063b565b828281518110610c2c57610c2c612e00565b6020908102919091010152610c4081612e2c565b9050610bd5565b509392505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610c975760405162461bcd60e51b81526004016106a290612d68565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610ce060008051602061334e833981519152546001600160a01b031690565b6001600160a01b031614610d065760405162461bcd60e51b81526004016106a290612db4565b610d0f826115a9565b610d1b828260016115b1565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610dbf5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016106a2565b5060008051602061334e8339815191525b90565b610dde83838361178c565b505050565b610deb6117cf565b60008281526101c4602052604090205460ff16610e4a5760405162461bcd60e51b815260206004820152601d60248201527f4a61736d696e654541543a20736572696573206e6f742066726f7a656e00000060448201526064016106a2565b6000610e56848461063b565b905081811015610e64578091505b6107d0848484611829565b610e776117cf565b610e81600061171c565b565b610e8b611237565b6107d08484848461194c565b60655433906001600160a01b03168114610f055760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b60648201526084016106a2565b6108fe8161171c565b610f166117cf565b60005b8251811015611009576000838281518110610f3657610f36612e00565b60209081029190910181015160008181526101c490925260409091205490915060ff16610fa55760405162461bcd60e51b815260206004820152601d60248201527f4a61736d696e654541543a20736572696573206e6f742066726f7a656e00000060448201526064016106a2565b6000610fb1868361063b565b9050838381518110610fc557610fc5612e00565b6020026020010151811015610ff45780848481518110610fe757610fe7612e00565b6020026020010181815250505b5050808061100190612e2c565b915050610f19565b50610dde838383611a2f565b61101d6117cf565b805160000361107a5760405162461bcd60e51b8152602060048201526024808201527f4a61736d696e654541543a206e6577205552492063616e6e6f7420626520656d604482015263383a3c9760e11b60648201526084016106a2565b6108fe81611bd0565b610d1b338383611bdd565b6110966117cf565b60008181526101c46020526040808220805460ff191660011790555182917f4d69b51fee53c28bd8b61fe008151577ca65160b5248f6225e74d64fd4cf732891a250565b6110e26117cf565b60008181526101c46020526040808220805460ff191690555182917fd7ea826caa575891b88b771d03fe1da3092d4a65c5adeaccc99be085978cebe891a250565b6001600160a01b03851633148061113f575061113f853361055b565b61115b5760405162461bcd60e51b81526004016106a290612d1a565b61081b8585858585611cbe565b6111706117cf565b606580546001600160a01b0383166001600160a01b031990911681179091556111a16033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b610dde838383611dfc565b6111ec6117cf565b6101c380546001600160a01b0319166001600160a01b0383169081179091556040517fb6b8f1859c5c352e5ffad07d0f77e384ac725512c015bd3a3ffc885831c8a42590600090a250565b6101c3546001600160a01b03163314610e815760405162461bcd60e51b8152602060048201526024808201527f4a61736d696e654541543a2063616c6c6572206973206e6f7420746865206d69604482015263373a32b960e11b60648201526084016106a2565b6001600160a01b0384166112c45760405162461bcd60e51b81526004016106a290612e45565b81518351146112e55760405162461bcd60e51b81526004016106a290612e86565b336112f581600087878787611e3f565b60005b84518110156113925783818151811061131357611313612e00565b602002602001015161012d600087848151811061133257611332612e00565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b03168152602001908152602001600020600082825461137a9190612ece565b9091555081905061138a81612e2c565b9150506112f8565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516113e3929190612ee1565b60405180910390a461081b81600087878787611efe565b815183511461141b5760405162461bcd60e51b81526004016106a290612e86565b6001600160a01b0384166114415760405162461bcd60e51b81526004016106a290612f06565b33611450818787878787611e3f565b60005b845181101561153b57600085828151811061147057611470612e00565b60200260200101519050600085838151811061148e5761148e612e00565b602090810291909101810151600084815261012d835260408082206001600160a01b038e1683529093529190912054909150818110156114e05760405162461bcd60e51b81526004016106a290612f4b565b600083815261012d602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611520908490612ece565b925050819055505050508061153490612e2c565b9050611453565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161158b929190612ee1565b60405180910390a46115a1818787878787611efe565b505050505050565b6108fe6117cf565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156115e457610dde83612059565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561163e575060408051601f3d908101601f1916820190925261163b91810190612f95565b60015b6116a15760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016106a2565b60008051602061334e83398151915281146117105760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016106a2565b50610dde8383836120f5565b606580546001600160a01b03191690556108fe8161211a565b600054610100900460ff16610e815760405162461bcd60e51b81526004016106a290612fae565b600054610100900460ff166117835760405162461bcd60e51b81526004016106a290612fae565b6108fe8161216c565b6001600160a01b0383163314806117a857506117a8833361055b565b6117c45760405162461bcd60e51b81526004016106a290612d1a565b610dde838383611a2f565b6033546001600160a01b03163314610e815760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106a2565b6001600160a01b03831661184f5760405162461bcd60e51b81526004016106a290612ff9565b33600061185b84612193565b9050600061186884612193565b905061188883876000858560405180602001604052806000815250611e3f565b600085815261012d602090815260408083206001600160a01b038a168452909152902054848110156118cc5760405162461bcd60e51b81526004016106a29061303c565b600086815261012d602090815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46040805160208101909152600090525b50505050505050565b6001600160a01b0384166119725760405162461bcd60e51b81526004016106a290612e45565b33600061197e85612193565b9050600061198b85612193565b905061199c83600089858589611e3f565b600086815261012d602090815260408083206001600160a01b038b168452909152812080548792906119cf908490612ece565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611943836000898989896121de565b6001600160a01b038316611a555760405162461bcd60e51b81526004016106a290612ff9565b8051825114611a765760405162461bcd60e51b81526004016106a290612e86565b6000339050611a9981856000868660405180602001604052806000815250611e3f565b60005b8351811015611b63576000848281518110611ab957611ab9612e00565b602002602001015190506000848381518110611ad757611ad7612e00565b602090810291909101810151600084815261012d835260408082206001600160a01b038c168352909352919091205490915081811015611b295760405162461bcd60e51b81526004016106a29061303c565b600092835261012d602090815260408085206001600160a01b038b1686529091529092209103905580611b5b81612e2c565b915050611a9c565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611bb4929190612ee1565b60405180910390a46040805160208101909152600090526107d0565b61012f610d1b82826130c6565b816001600160a01b0316836001600160a01b031603611c505760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016106a2565b6001600160a01b03838116600081815261012e6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038416611ce45760405162461bcd60e51b81526004016106a290612f06565b336000611cf085612193565b90506000611cfd85612193565b9050611d0d838989858589611e3f565b600086815261012d602090815260408083206001600160a01b038c16845290915290205485811015611d515760405162461bcd60e51b81526004016106a290612f4b565b600087815261012d602090815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290611d91908490612ece565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611df1848a8a8a8a8a6121de565b505050505050505050565b6001600160a01b038316331480611e185750611e18833361055b565b611e345760405162461bcd60e51b81526004016106a290612d1a565b610dde838383611829565b6001600160a01b03841615611ef05760005b8351811015611eee576101c46000858381518110611e7157611e71612e00565b60209081029190910181015182528101919091526040016000205460ff1615611edc5760405162461bcd60e51b815260206004820152601960248201527f4a61736d696e654541543a2066726f7a656e207365726965730000000000000060448201526064016106a2565b80611ee681612e2c565b915050611e51565b505b6115a1868686868686612299565b6001600160a01b0384163b156115a15760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611f429089908990889088908890600401613186565b6020604051808303816000875af1925050508015611f7d575060408051601f3d908101601f19168201909252611f7a918101906131e4565b60015b61202957611f89613201565b806308c379a003611fc25750611f9d61321c565b80611fa85750611fc4565b8060405162461bcd60e51b81526004016106a2919061265b565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016106a2565b6001600160e01b0319811663bc197c8160e01b146119435760405162461bcd60e51b81526004016106a2906132a6565b6001600160a01b0381163b6120c65760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016106a2565b60008051602061334e83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6120fe83612415565b60008251118061210b5750805b15610dde576107d08383612455565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1661107a5760405162461bcd60e51b81526004016106a290612fae565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106121cd576121cd612e00565b602090810291909101015292915050565b6001600160a01b0384163b156115a15760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061222290899089908890889088906004016132ee565b6020604051808303816000875af192505050801561225d575060408051601f3d908101601f1916820190925261225a918101906131e4565b60015b61226957611f89613201565b6001600160e01b0319811663f23a6e6160e01b146119435760405162461bcd60e51b81526004016106a2906132a6565b6001600160a01b0385166123215760005b835181101561231f578281815181106122c5576122c5612e00565b602002602001015161019160008684815181106122e4576122e4612e00565b6020026020010151815260200190815260200160002060008282546123099190612ece565b90915550612318905081612e2c565b90506122aa565b505b6001600160a01b0384166115a15760005b835181101561194357600084828151811061234f5761234f612e00565b60200260200101519050600084838151811061236d5761236d612e00565b6020026020010151905060006101916000848152602001908152602001600020549050818110156123f15760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f74604482015267616c537570706c7960c01b60648201526084016106a2565b600092835261019160205260409092209103905561240e81612e2c565b9050612332565b61241e81612059565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6124bd5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016106a2565b600080846001600160a01b0316846040516124d89190613331565b600060405180830381855af49150503d8060008114612513576040519150601f19603f3d011682016040523d82523d6000602084013e612518565b606091505b5091509150612540828260405180606001604052806027815260200161336e60279139612549565b95945050505050565b60608315612558575081612562565b6125628383612569565b9392505050565b815115611fa85781518083602001fd5b80356001600160a01b038116811461259057600080fd5b919050565b600080604083850312156125a857600080fd5b6125b183612579565b946020939093013593505050565b6001600160e01b0319811681146108fe57600080fd5b6000602082840312156125e757600080fd5b8135612562816125bf565b60006020828403121561260457600080fd5b5035919050565b60005b8381101561262657818101518382015260200161260e565b50506000910152565b6000815180845261264781602086016020860161260b565b601f01601f19169290920160200192915050565b602081526000612562602083018461262f565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff811182821017156126aa576126aa61266e565b6040525050565b600067ffffffffffffffff8211156126cb576126cb61266e565b5060051b60200190565b600082601f8301126126e657600080fd5b813560206126f3826126b1565b6040516127008282612684565b83815260059390931b850182019282810191508684111561272057600080fd5b8286015b8481101561273b5780358352918301918301612724565b509695505050505050565b600082601f83011261275757600080fd5b813567ffffffffffffffff8111156127715761277161266e565b604051612788601f8301601f191660200182612684565b81815284602083860101111561279d57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156127d057600080fd5b6127d985612579565b9350602085013567ffffffffffffffff808211156127f657600080fd5b612802888389016126d5565b9450604087013591508082111561281857600080fd5b612824888389016126d5565b9350606087013591508082111561283a57600080fd5b5061284787828801612746565b91505092959194509250565b600080600080600060a0868803121561286b57600080fd5b61287486612579565b945061288260208701612579565b9350604086013567ffffffffffffffff8082111561289f57600080fd5b6128ab89838a016126d5565b945060608801359150808211156128c157600080fd5b6128cd89838a016126d5565b935060808801359150808211156128e357600080fd5b506128f088828901612746565b9150509295509295909350565b60006020828403121561290f57600080fd5b61256282612579565b60008060006060848603121561292d57600080fd5b833567ffffffffffffffff81111561294457600080fd5b61295086828701612746565b93505061295f60208501612579565b915061296d60408501612579565b90509250925092565b6000806040838503121561298957600080fd5b823567ffffffffffffffff808211156129a157600080fd5b818501915085601f8301126129b557600080fd5b813560206129c2826126b1565b6040516129cf8282612684565b83815260059390931b85018201928281019150898411156129ef57600080fd5b948201945b83861015612a1457612a0586612579565b825294820194908201906129f4565b96505086013592505080821115612a2a57600080fd5b50612a37858286016126d5565b9150509250929050565b600081518084526020808501945080840160005b83811015612a7157815187529582019590820190600101612a55565b509495945050505050565b6020815260006125626020830184612a41565b60008060408385031215612aa257600080fd5b612aab83612579565b9150602083013567ffffffffffffffff811115612ac757600080fd5b612a3785828601612746565b600080600060608486031215612ae857600080fd5b612af184612579565b9250602084013567ffffffffffffffff80821115612b0e57600080fd5b612b1a878388016126d5565b93506040860135915080821115612b3057600080fd5b50612b3d868287016126d5565b9150509250925092565b600080600060608486031215612b5c57600080fd5b612b6584612579565b95602085013595506040909401359392505050565b60008060008060808587031215612b9057600080fd5b612b9985612579565b93506020850135925060408501359150606085013567ffffffffffffffff811115612bc357600080fd5b61284787828801612746565b600060208284031215612be157600080fd5b813567ffffffffffffffff811115612bf857600080fd5b612c0484828501612746565b949350505050565b60008060408385031215612c1f57600080fd5b612c2883612579565b915060208301358015158114612c3d57600080fd5b809150509250929050565b60008060408385031215612c5b57600080fd5b612c6483612579565b9150612c7260208401612579565b90509250929050565b600080600080600060a08688031215612c9357600080fd5b612c9c86612579565b9450612caa60208701612579565b93506040860135925060608601359150608086013567ffffffffffffffff811115612cd457600080fd5b6128f088828901612746565b600181811c90821680612cf457607f821691505b602082108103612d1457634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612e3e57612e3e612e16565b5060010190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b808201808211156106d1576106d1612e16565b604081526000612ef46040830185612a41565b82810360208401526125408185612a41565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b600060208284031215612fa757600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b601f821115610dde57600081815260208120601f850160051c810160208610156130a75750805b601f850160051c820191505b818110156115a1578281556001016130b3565b815167ffffffffffffffff8111156130e0576130e061266e565b6130f4816130ee8454612ce0565b84613080565b602080601f83116001811461312957600084156131115750858301515b600019600386901b1c1916600185901b1785556115a1565b600085815260208120601f198616915b8281101561315857888601518255948401946001909101908401613139565b50858210156131765787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006001600160a01b03808816835280871660208401525060a060408301526131b260a0830186612a41565b82810360608401526131c48186612a41565b905082810360808401526131d8818561262f565b98975050505050505050565b6000602082840312156131f657600080fd5b8151612562816125bf565b600060033d1115610dd05760046000803e5060005160e01c90565b600060443d101561322a5790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561325a57505050505090565b82850191508151818111156132725750505050505090565b843d870101602082850101111561328c5750505050505090565b61329b60208286010187612684565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a0608083015261332660a083018461262f565b979650505050505050565b6000825161334381846020870161260b565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212206bbff096e27e1265a2f70e42a7f23df098d680fbac87f640f9952aa7cc63f4bf64736f6c63430008110033","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE ADDRESS PUSH1 0x80 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x80 MLOAD PUSH2 0x33CA PUSH2 0x5A PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x82C ADD MSTORE DUP2 DUP2 PUSH2 0x86C ADD MSTORE DUP2 DUP2 PUSH2 0x9CB ADD MSTORE DUP2 DUP2 PUSH2 0xA0B ADD MSTORE DUP2 DUP2 PUSH2 0xC59 ADD MSTORE DUP2 DUP2 PUSH2 0xC99 ADD MSTORE PUSH2 0xD2C ADD MSTORE PUSH2 0x33CA PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1D7 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x731133E9 GT PUSH2 0x102 JUMPI DUP1 PUSH4 0xE30C3978 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xF242432A GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xF242432A EQ PUSH2 0x5BB JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x5DB JUMPI DUP1 PUSH4 0xF5298ACA EQ PUSH2 0x5FB JUMPI DUP1 PUSH4 0xFCA3B5AA EQ PUSH2 0x61B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xE30C3978 EQ PUSH2 0x502 JUMPI DUP1 PUSH4 0xE77CFAAE EQ PUSH2 0x520 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x540 JUMPI DUP1 PUSH4 0xE9AC0440 EQ PUSH2 0x58A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x98CD6153 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x98CD6153 EQ PUSH2 0x474 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x494 JUMPI DUP1 PUSH4 0xBD85B039 EQ PUSH2 0x4B4 JUMPI DUP1 PUSH4 0xD7A78DB8 EQ PUSH2 0x4E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x731133E9 EQ PUSH2 0x401 JUMPI DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x421 JUMPI DUP1 PUSH4 0x7C8A8970 EQ PUSH2 0x436 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x456 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x463FD1AF GT PUSH2 0x17A JUMPI DUP1 PUSH4 0x52D1902D GT PUSH2 0x149 JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0x397 JUMPI DUP1 PUSH4 0x6B20C454 EQ PUSH2 0x3AC JUMPI DUP1 PUSH4 0x70F81F6C EQ PUSH2 0x3CC JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x3EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x463FD1AF EQ PUSH2 0x307 JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0x327 JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x354 JUMPI DUP1 PUSH4 0x4F558E79 EQ PUSH2 0x367 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xE89341C GT PUSH2 0x1B6 JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0x278 JUMPI DUP1 PUSH4 0x1F7FDFFA EQ PUSH2 0x2A5 JUMPI DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0x2C7 JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x2E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0xFDD58E EQ PUSH2 0x1DC JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x20F JUMPI DUP1 PUSH4 0x7546172 EQ PUSH2 0x23F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x1F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x2595 JUMP JUMPDEST PUSH2 0x63B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x21B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22F PUSH2 0x22A CALLDATASIZE PUSH1 0x4 PUSH2 0x25D5 JUMP JUMPDEST PUSH2 0x6D7 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x206 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1C3 SLOAD PUSH2 0x260 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x206 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x284 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x298 PUSH2 0x293 CALLDATASIZE PUSH1 0x4 PUSH2 0x25F2 JUMP JUMPDEST PUSH2 0x727 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x206 SWAP2 SWAP1 PUSH2 0x265B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C5 PUSH2 0x2C0 CALLDATASIZE PUSH1 0x4 PUSH2 0x27BA JUMP JUMPDEST PUSH2 0x7BC JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C5 PUSH2 0x2E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x2853 JUMP JUMPDEST PUSH2 0x7D6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C5 PUSH2 0x302 CALLDATASIZE PUSH1 0x4 PUSH2 0x28FD JUMP JUMPDEST PUSH2 0x822 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x313 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C5 PUSH2 0x322 CALLDATASIZE PUSH1 0x4 PUSH2 0x2918 JUMP JUMPDEST PUSH2 0x901 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x333 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH2 0x342 CALLDATASIZE PUSH1 0x4 PUSH2 0x2976 JUMP JUMPDEST PUSH2 0xB25 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x206 SWAP2 SWAP1 PUSH2 0x2A7C JUMP JUMPDEST PUSH2 0x2C5 PUSH2 0x362 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A8F JUMP JUMPDEST PUSH2 0xC4F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x373 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22F PUSH2 0x382 CALLDATASIZE PUSH1 0x4 PUSH2 0x25F2 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x191 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO ISZERO SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0xD1F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C5 PUSH2 0x3C7 CALLDATASIZE PUSH1 0x4 PUSH2 0x2AD3 JUMP JUMPDEST PUSH2 0xDD3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C5 PUSH2 0x3E7 CALLDATASIZE PUSH1 0x4 PUSH2 0x2B47 JUMP JUMPDEST PUSH2 0xDE3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C5 PUSH2 0xE6F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x40D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C5 PUSH2 0x41C CALLDATASIZE PUSH1 0x4 PUSH2 0x2B7A JUMP JUMPDEST PUSH2 0xE83 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C5 PUSH2 0xE97 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x442 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C5 PUSH2 0x451 CALLDATASIZE PUSH1 0x4 PUSH2 0x2AD3 JUMP JUMPDEST PUSH2 0xF0E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x462 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x260 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x480 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C5 PUSH2 0x48F CALLDATASIZE PUSH1 0x4 PUSH2 0x2BCF JUMP JUMPDEST PUSH2 0x1015 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C5 PUSH2 0x4AF CALLDATASIZE PUSH1 0x4 PUSH2 0x2C0C JUMP JUMPDEST PUSH2 0x1083 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x4CF CALLDATASIZE PUSH1 0x4 PUSH2 0x25F2 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x191 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C5 PUSH2 0x4FD CALLDATASIZE PUSH1 0x4 PUSH2 0x25F2 JUMP JUMPDEST PUSH2 0x108E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x50E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x260 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x52C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C5 PUSH2 0x53B CALLDATASIZE PUSH1 0x4 PUSH2 0x25F2 JUMP JUMPDEST PUSH2 0x10DA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x54C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22F PUSH2 0x55B CALLDATASIZE PUSH1 0x4 PUSH2 0x2C48 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x12E PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x596 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22F PUSH2 0x5A5 CALLDATASIZE PUSH1 0x4 PUSH2 0x25F2 JUMP JUMPDEST PUSH2 0x1C4 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C5 PUSH2 0x5D6 CALLDATASIZE PUSH1 0x4 PUSH2 0x2C7B JUMP JUMPDEST PUSH2 0x1123 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C5 PUSH2 0x5F6 CALLDATASIZE PUSH1 0x4 PUSH2 0x28FD JUMP JUMPDEST PUSH2 0x1168 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x607 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C5 PUSH2 0x616 CALLDATASIZE PUSH1 0x4 PUSH2 0x2B47 JUMP JUMPDEST PUSH2 0x11D9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x627 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C5 PUSH2 0x636 CALLDATASIZE PUSH1 0x4 PUSH2 0x28FD JUMP JUMPDEST PUSH2 0x11E4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x6AB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2061646472657373207A65726F206973206E6F7420612076 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x30B634B21037BBB732B9 PUSH1 0xB1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x12D PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x6CDB3D13 PUSH1 0xE1 SHL EQ DUP1 PUSH2 0x708 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x3A24D07 PUSH1 0xE2 SHL EQ JUMPDEST DUP1 PUSH2 0x6D1 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x6D1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x12F DUP1 SLOAD PUSH2 0x737 SWAP1 PUSH2 0x2CE0 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x763 SWAP1 PUSH2 0x2CE0 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7B0 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x785 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7B0 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x793 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x7C4 PUSH2 0x1237 JUMP JUMPDEST PUSH2 0x7D0 DUP5 DUP5 DUP5 DUP5 PUSH2 0x129E JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ DUP1 PUSH2 0x7F2 JUMPI POP PUSH2 0x7F2 DUP6 CALLER PUSH2 0x55B JUMP JUMPDEST PUSH2 0x80E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2D1A JUMP JUMPDEST PUSH2 0x81B DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x13FA JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0x86A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2D68 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x8B3 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x334E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x8D9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2DB4 JUMP JUMPDEST PUSH2 0x8E2 DUP2 PUSH2 0x15A9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x8FE SWAP2 DUP4 SWAP2 SWAP1 PUSH2 0x15B1 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x921 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x93B JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x93B JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x99E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6A2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x9C1 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0xA09 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2D68 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xA52 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x334E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xA78 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2DB4 JUMP JUMPDEST PUSH2 0xA81 DUP3 PUSH2 0x171C JUMP JUMPDEST PUSH2 0xA89 PUSH2 0x1735 JUMP JUMPDEST PUSH2 0xA92 DUP5 PUSH2 0x175C JUMP JUMPDEST PUSH2 0x1C3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0xB6B8F1859C5C352E5FFAD07D0F77E384AC725512C015BD3A3FFC885831C8A425 SWAP1 PUSH1 0x0 SWAP1 LOG2 DUP1 ISZERO PUSH2 0x7D0 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0xB8A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206163636F756E747320616E6420696473206C656E677468 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x40DAD2E6DAC2E8C6D PUSH1 0xBB SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6A2 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xBA6 JUMPI PUSH2 0xBA6 PUSH2 0x266E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xBCF JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xC47 JUMPI PUSH2 0xC1A DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xBF3 JUMPI PUSH2 0xBF3 PUSH2 0x2E00 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xC0D JUMPI PUSH2 0xC0D PUSH2 0x2E00 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x63B JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xC2C JUMPI PUSH2 0xC2C PUSH2 0x2E00 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH2 0xC40 DUP2 PUSH2 0x2E2C JUMP JUMPDEST SWAP1 POP PUSH2 0xBD5 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0xC97 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2D68 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xCE0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x334E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xD06 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2DB4 JUMP JUMPDEST PUSH2 0xD0F DUP3 PUSH2 0x15A9 JUMP JUMPDEST PUSH2 0xD1B DUP3 DUP3 PUSH1 0x1 PUSH2 0x15B1 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0xDBF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6A2 JUMP JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x334E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xDDE DUP4 DUP4 DUP4 PUSH2 0x178C JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0xDEB PUSH2 0x17CF JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH2 0x1C4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xE4A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4A61736D696E654541543A20736572696573206E6F742066726F7A656E000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6A2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE56 DUP5 DUP5 PUSH2 0x63B JUMP JUMPDEST SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0xE64 JUMPI DUP1 SWAP2 POP JUMPDEST PUSH2 0x7D0 DUP5 DUP5 DUP5 PUSH2 0x1829 JUMP JUMPDEST PUSH2 0xE77 PUSH2 0x17CF JUMP JUMPDEST PUSH2 0xE81 PUSH1 0x0 PUSH2 0x171C JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xE8B PUSH2 0x1237 JUMP JUMPDEST PUSH2 0x7D0 DUP5 DUP5 DUP5 DUP5 PUSH2 0x194C JUMP JUMPDEST PUSH1 0x65 SLOAD CALLER SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 EQ PUSH2 0xF05 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C6532537465703A2063616C6C6572206973206E6F742074686520 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x3732BB9037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6A2 JUMP JUMPDEST PUSH2 0x8FE DUP2 PUSH2 0x171C JUMP JUMPDEST PUSH2 0xF16 PUSH2 0x17CF JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x1009 JUMPI PUSH1 0x0 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xF36 JUMPI PUSH2 0xF36 PUSH2 0x2E00 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x1C4 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND PUSH2 0xFA5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4A61736D696E654541543A20736572696573206E6F742066726F7A656E000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6A2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFB1 DUP7 DUP4 PUSH2 0x63B JUMP JUMPDEST SWAP1 POP DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xFC5 JUMPI PUSH2 0xFC5 PUSH2 0x2E00 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 LT ISZERO PUSH2 0xFF4 JUMPI DUP1 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xFE7 JUMPI PUSH2 0xFE7 PUSH2 0x2E00 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP POP DUP1 DUP1 PUSH2 0x1001 SWAP1 PUSH2 0x2E2C JUMP JUMPDEST SWAP2 POP POP PUSH2 0xF19 JUMP JUMPDEST POP PUSH2 0xDDE DUP4 DUP4 DUP4 PUSH2 0x1A2F JUMP JUMPDEST PUSH2 0x101D PUSH2 0x17CF JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x107A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4A61736D696E654541543A206E6577205552492063616E6E6F7420626520656D PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x383A3C97 PUSH1 0xE1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6A2 JUMP JUMPDEST PUSH2 0x8FE DUP2 PUSH2 0x1BD0 JUMP JUMPDEST PUSH2 0xD1B CALLER DUP4 DUP4 PUSH2 0x1BDD JUMP JUMPDEST PUSH2 0x1096 PUSH2 0x17CF JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x1C4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD DUP3 SWAP2 PUSH32 0x4D69B51FEE53C28BD8B61FE008151577CA65160B5248F6225E74D64FD4CF7328 SWAP2 LOG2 POP JUMP JUMPDEST PUSH2 0x10E2 PUSH2 0x17CF JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x1C4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD DUP3 SWAP2 PUSH32 0xD7EA826CAA575891B88B771D03FE1DA3092D4A65C5ADEACCC99BE085978CEBE8 SWAP2 LOG2 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ DUP1 PUSH2 0x113F JUMPI POP PUSH2 0x113F DUP6 CALLER PUSH2 0x55B JUMP JUMPDEST PUSH2 0x115B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2D1A JUMP JUMPDEST PUSH2 0x81B DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x1CBE JUMP JUMPDEST PUSH2 0x1170 PUSH2 0x17CF JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH2 0x11A1 PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x38D16B8CAC22D99FC7C124B9CD0DE2D3FA1FAEF420BFE791D8C362D765E22700 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH2 0xDDE DUP4 DUP4 DUP4 PUSH2 0x1DFC JUMP JUMPDEST PUSH2 0x11EC PUSH2 0x17CF JUMP JUMPDEST PUSH2 0x1C3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0xB6B8F1859C5C352E5FFAD07D0F77E384AC725512C015BD3A3FFC885831C8A425 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0x1C3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xE81 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4A61736D696E654541543A2063616C6C6572206973206E6F7420746865206D69 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x373A32B9 PUSH1 0xE1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6A2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x12C4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2E45 JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x12E5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2E86 JUMP JUMPDEST CALLER PUSH2 0x12F5 DUP2 PUSH1 0x0 DUP8 DUP8 DUP8 DUP8 PUSH2 0x1E3F JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x1392 JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x1313 JUMPI PUSH2 0x1313 PUSH2 0x2E00 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x12D PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1332 JUMPI PUSH2 0x1332 PUSH2 0x2E00 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x137A SWAP2 SWAP1 PUSH2 0x2ECE JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP DUP2 SWAP1 POP PUSH2 0x138A DUP2 PUSH2 0x2E2C JUMP JUMPDEST SWAP2 POP POP PUSH2 0x12F8 JUMP JUMPDEST POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x13E3 SWAP3 SWAP2 SWAP1 PUSH2 0x2EE1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x81B DUP2 PUSH1 0x0 DUP8 DUP8 DUP8 DUP8 PUSH2 0x1EFE JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x141B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2E86 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1441 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2F06 JUMP JUMPDEST CALLER PUSH2 0x1450 DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x1E3F JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x153B JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1470 JUMPI PUSH2 0x1470 PUSH2 0x2E00 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x148E JUMPI PUSH2 0x148E PUSH2 0x2E00 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH2 0x12D DUP4 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 AND DUP4 MSTORE SWAP1 SWAP4 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP2 DUP2 LT ISZERO PUSH2 0x14E0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2F4B JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH2 0x12D PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP1 DUP12 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x1520 SWAP1 DUP5 SWAP1 PUSH2 0x2ECE JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP POP DUP1 PUSH2 0x1534 SWAP1 PUSH2 0x2E2C JUMP JUMPDEST SWAP1 POP PUSH2 0x1453 JUMP JUMPDEST POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x158B SWAP3 SWAP2 SWAP1 PUSH2 0x2EE1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x15A1 DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x1EFE JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x8FE PUSH2 0x17CF JUMP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x15E4 JUMPI PUSH2 0xDDE DUP4 PUSH2 0x2059 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x163E JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x163B SWAP2 DUP2 ADD SWAP1 PUSH2 0x2F95 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x16A1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x6F6E206973206E6F742055555053 PUSH1 0x90 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6A2 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x334E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 EQ PUSH2 0x1710 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1A58589B1955555251 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6A2 JUMP JUMPDEST POP PUSH2 0xDDE DUP4 DUP4 DUP4 PUSH2 0x20F5 JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE PUSH2 0x8FE DUP2 PUSH2 0x211A JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xE81 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2FAE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1783 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2FAE JUMP JUMPDEST PUSH2 0x8FE DUP2 PUSH2 0x216C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND CALLER EQ DUP1 PUSH2 0x17A8 JUMPI POP PUSH2 0x17A8 DUP4 CALLER PUSH2 0x55B JUMP JUMPDEST PUSH2 0x17C4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2D1A JUMP JUMPDEST PUSH2 0xDDE DUP4 DUP4 DUP4 PUSH2 0x1A2F JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xE81 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6A2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x184F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2FF9 JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x185B DUP5 PUSH2 0x2193 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1868 DUP5 PUSH2 0x2193 JUMP JUMPDEST SWAP1 POP PUSH2 0x1888 DUP4 DUP8 PUSH1 0x0 DUP6 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1E3F JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH2 0x12D PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP5 DUP2 LT ISZERO PUSH2 0x18CC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x303C JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH2 0x12D PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE DUP3 DUP6 KECCAK256 DUP11 DUP8 SUB SWAP1 SSTORE DUP3 MLOAD DUP12 DUP2 MSTORE SWAP4 DUP5 ADD DUP11 SWAP1 MSTORE SWAP1 SWAP3 SWAP1 DUP9 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 SWAP1 MSTORE JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1972 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2E45 JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x197E DUP6 PUSH2 0x2193 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x198B DUP6 PUSH2 0x2193 JUMP JUMPDEST SWAP1 POP PUSH2 0x199C DUP4 PUSH1 0x0 DUP10 DUP6 DUP6 DUP10 PUSH2 0x1E3F JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH2 0x12D PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP8 SWAP3 SWAP1 PUSH2 0x19CF SWAP1 DUP5 SWAP1 PUSH2 0x2ECE JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP11 AND SWAP3 PUSH1 0x0 SWAP3 SWAP2 DUP8 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1943 DUP4 PUSH1 0x0 DUP10 DUP10 DUP10 DUP10 PUSH2 0x21DE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1A55 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2FF9 JUMP JUMPDEST DUP1 MLOAD DUP3 MLOAD EQ PUSH2 0x1A76 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2E86 JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP PUSH2 0x1A99 DUP2 DUP6 PUSH1 0x0 DUP7 DUP7 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1E3F JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x1B63 JUMPI PUSH1 0x0 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1AB9 JUMPI PUSH2 0x1AB9 PUSH2 0x2E00 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1AD7 JUMPI PUSH2 0x1AD7 PUSH2 0x2E00 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH2 0x12D DUP4 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND DUP4 MSTORE SWAP1 SWAP4 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP2 DUP2 LT ISZERO PUSH2 0x1B29 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x303C JUMP JUMPDEST PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH2 0x12D PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND DUP7 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SWAP3 KECCAK256 SWAP2 SUB SWAP1 SSTORE DUP1 PUSH2 0x1B5B DUP2 PUSH2 0x2E2C JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1A9C JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x1BB4 SWAP3 SWAP2 SWAP1 PUSH2 0x2EE1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 SWAP1 MSTORE PUSH2 0x7D0 JUMP JUMPDEST PUSH2 0x12F PUSH2 0xD1B DUP3 DUP3 PUSH2 0x30C6 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x1C50 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2073657474696E6720617070726F76616C20737461747573 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x103337B91039B2B633 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6A2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x12E PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1CE4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2F06 JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x1CF0 DUP6 PUSH2 0x2193 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1CFD DUP6 PUSH2 0x2193 JUMP JUMPDEST SWAP1 POP PUSH2 0x1D0D DUP4 DUP10 DUP10 DUP6 DUP6 DUP10 PUSH2 0x1E3F JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH2 0x12D PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP6 DUP2 LT ISZERO PUSH2 0x1D51 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2F4B JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH2 0x12D PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP10 DUP6 SUB SWAP1 SSTORE SWAP1 DUP11 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP9 SWAP3 SWAP1 PUSH2 0x1D91 SWAP1 DUP5 SWAP1 PUSH2 0x2ECE JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP9 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP12 AND SWAP3 DUP13 DUP3 AND SWAP3 SWAP2 DUP9 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1DF1 DUP5 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0x21DE JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND CALLER EQ DUP1 PUSH2 0x1E18 JUMPI POP PUSH2 0x1E18 DUP4 CALLER PUSH2 0x55B JUMP JUMPDEST PUSH2 0x1E34 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2D1A JUMP JUMPDEST PUSH2 0xDDE DUP4 DUP4 DUP4 PUSH2 0x1829 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x1EF0 JUMPI PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x1EEE JUMPI PUSH2 0x1C4 PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1E71 JUMPI PUSH2 0x1E71 PUSH2 0x2E00 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1EDC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4A61736D696E654541543A2066726F7A656E2073657269657300000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6A2 JUMP JUMPDEST DUP1 PUSH2 0x1EE6 DUP2 PUSH2 0x2E2C JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1E51 JUMP JUMPDEST POP JUMPDEST PUSH2 0x15A1 DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0x2299 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x15A1 JUMPI PUSH1 0x40 MLOAD PUSH4 0xBC197C81 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xBC197C81 SWAP1 PUSH2 0x1F42 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x3186 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1F7D JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1F7A SWAP2 DUP2 ADD SWAP1 PUSH2 0x31E4 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2029 JUMPI PUSH2 0x1F89 PUSH2 0x3201 JUMP JUMPDEST DUP1 PUSH4 0x8C379A0 SUB PUSH2 0x1FC2 JUMPI POP PUSH2 0x1F9D PUSH2 0x321C JUMP JUMPDEST DUP1 PUSH2 0x1FA8 JUMPI POP PUSH2 0x1FC4 JUMP JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP2 SWAP1 PUSH2 0x265B JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F206E6F6E2D45524331313535 PUSH1 0x44 DUP3 ADD MSTORE PUSH20 0x2932B1B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x61 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6A2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xBC197C81 PUSH1 0xE0 SHL EQ PUSH2 0x1943 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x32A6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND EXTCODESIZE PUSH2 0x20C6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6A2 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x334E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x20FE DUP4 PUSH2 0x2415 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0x210B JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0xDDE JUMPI PUSH2 0x7D0 DUP4 DUP4 PUSH2 0x2455 JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x107A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2FAE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP3 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x21CD JUMPI PUSH2 0x21CD PUSH2 0x2E00 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x15A1 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF23A6E61 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xF23A6E61 SWAP1 PUSH2 0x2222 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x32EE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x225D JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x225A SWAP2 DUP2 ADD SWAP1 PUSH2 0x31E4 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2269 JUMPI PUSH2 0x1F89 PUSH2 0x3201 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xF23A6E61 PUSH1 0xE0 SHL EQ PUSH2 0x1943 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x32A6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x2321 JUMPI PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x231F JUMPI DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x22C5 JUMPI PUSH2 0x22C5 PUSH2 0x2E00 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x191 PUSH1 0x0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x22E4 JUMPI PUSH2 0x22E4 PUSH2 0x2E00 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x2309 SWAP2 SWAP1 PUSH2 0x2ECE JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x2318 SWAP1 POP DUP2 PUSH2 0x2E2C JUMP JUMPDEST SWAP1 POP PUSH2 0x22AA JUMP JUMPDEST POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x15A1 JUMPI PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x1943 JUMPI PUSH1 0x0 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x234F JUMPI PUSH2 0x234F PUSH2 0x2E00 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x236D JUMPI PUSH2 0x236D PUSH2 0x2E00 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 PUSH2 0x191 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x23F1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206275726E20616D6F756E74206578636565647320746F74 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x616C537570706C79 PUSH1 0xC0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6A2 JUMP JUMPDEST PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH2 0x191 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 SWAP3 KECCAK256 SWAP2 SUB SWAP1 SSTORE PUSH2 0x240E DUP2 PUSH2 0x2E2C JUMP JUMPDEST SWAP1 POP PUSH2 0x2332 JUMP JUMPDEST PUSH2 0x241E DUP2 PUSH2 0x2059 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE PUSH2 0x24BD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6A2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x40 MLOAD PUSH2 0x24D8 SWAP2 SWAP1 PUSH2 0x3331 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2513 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2518 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x2540 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x336E PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x2549 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x2558 JUMPI POP DUP2 PUSH2 0x2562 JUMP JUMPDEST PUSH2 0x2562 DUP4 DUP4 PUSH2 0x2569 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x1FA8 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2590 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x25A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x25B1 DUP4 PUSH2 0x2579 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x8FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x25E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2562 DUP2 PUSH2 0x25BF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2604 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2626 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x260E JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x2647 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x260B JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x2562 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x262F JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x26AA JUMPI PUSH2 0x26AA PUSH2 0x266E JUMP JUMPDEST PUSH1 0x40 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x26CB JUMPI PUSH2 0x26CB PUSH2 0x266E JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x26E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x26F3 DUP3 PUSH2 0x26B1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2700 DUP3 DUP3 PUSH2 0x2684 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x5 SWAP4 SWAP1 SWAP4 SHL DUP6 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP2 POP DUP7 DUP5 GT ISZERO PUSH2 0x2720 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x273B JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x2724 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2757 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2771 JUMPI PUSH2 0x2771 PUSH2 0x266E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2788 PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 PUSH2 0x2684 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x279D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x27D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x27D9 DUP6 PUSH2 0x2579 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x27F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2802 DUP9 DUP4 DUP10 ADD PUSH2 0x26D5 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2818 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2824 DUP9 DUP4 DUP10 ADD PUSH2 0x26D5 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x283A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2847 DUP8 DUP3 DUP9 ADD PUSH2 0x2746 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x286B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2874 DUP7 PUSH2 0x2579 JUMP JUMPDEST SWAP5 POP PUSH2 0x2882 PUSH1 0x20 DUP8 ADD PUSH2 0x2579 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x289F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x28AB DUP10 DUP4 DUP11 ADD PUSH2 0x26D5 JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x28C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x28CD DUP10 DUP4 DUP11 ADD PUSH2 0x26D5 JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x28E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28F0 DUP9 DUP3 DUP10 ADD PUSH2 0x2746 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x290F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2562 DUP3 PUSH2 0x2579 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x292D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2944 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2950 DUP7 DUP3 DUP8 ADD PUSH2 0x2746 JUMP JUMPDEST SWAP4 POP POP PUSH2 0x295F PUSH1 0x20 DUP6 ADD PUSH2 0x2579 JUMP JUMPDEST SWAP2 POP PUSH2 0x296D PUSH1 0x40 DUP6 ADD PUSH2 0x2579 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2989 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x29A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x29B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x29C2 DUP3 PUSH2 0x26B1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29CF DUP3 DUP3 PUSH2 0x2684 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x5 SWAP4 SWAP1 SWAP4 SHL DUP6 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP2 POP DUP10 DUP5 GT ISZERO PUSH2 0x29EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x2A14 JUMPI PUSH2 0x2A05 DUP7 PUSH2 0x2579 JUMP JUMPDEST DUP3 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP1 DUP3 ADD SWAP1 PUSH2 0x29F4 JUMP JUMPDEST SWAP7 POP POP DUP7 ADD CALLDATALOAD SWAP3 POP POP DUP1 DUP3 GT ISZERO PUSH2 0x2A2A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A37 DUP6 DUP3 DUP7 ADD PUSH2 0x26D5 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2A71 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2A55 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x2562 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2A41 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2AA2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2AAB DUP4 PUSH2 0x2579 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2AC7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2A37 DUP6 DUP3 DUP7 ADD PUSH2 0x2746 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2AE8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2AF1 DUP5 PUSH2 0x2579 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2B0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2B1A DUP8 DUP4 DUP9 ADD PUSH2 0x26D5 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2B30 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B3D DUP7 DUP3 DUP8 ADD PUSH2 0x26D5 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2B5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2B65 DUP5 PUSH2 0x2579 JUMP JUMPDEST SWAP6 PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 SWAP1 SWAP5 ADD CALLDATALOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2B90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2B99 DUP6 PUSH2 0x2579 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2BC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2847 DUP8 DUP3 DUP9 ADD PUSH2 0x2746 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2BE1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2BF8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2C04 DUP5 DUP3 DUP6 ADD PUSH2 0x2746 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2C1F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2C28 DUP4 PUSH2 0x2579 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2C3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2C5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2C64 DUP4 PUSH2 0x2579 JUMP JUMPDEST SWAP2 POP PUSH2 0x2C72 PUSH1 0x20 DUP5 ADD PUSH2 0x2579 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x2C93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2C9C DUP7 PUSH2 0x2579 JUMP JUMPDEST SWAP5 POP PUSH2 0x2CAA PUSH1 0x20 DUP8 ADD PUSH2 0x2579 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2CD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x28F0 DUP9 DUP3 DUP10 ADD PUSH2 0x2746 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x2CF4 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2D14 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A2063616C6C6572206973206E6F7420746F6B656E206F776E PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x195C881BDC88185C1C1C9BDD9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x19195B1959D85D1958D85B1B PUSH1 0xA2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x6163746976652070726F7879 PUSH1 0xA0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x2E3E JUMPI PUSH2 0x2E3E PUSH2 0x2E16 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x21 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A206D696E7420746F20746865207A65726F20616464726573 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A2069647320616E6420616D6F756E7473206C656E67746820 PUSH1 0x40 DUP3 ADD MSTORE PUSH8 0xDAD2E6DAC2E8C6D PUSH1 0xC3 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x6D1 JUMPI PUSH2 0x6D1 PUSH2 0x2E16 JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x2EF4 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x2A41 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x2540 DUP2 DUP6 PUSH2 0x2A41 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F20746865207A65726F206164 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A20696E73756666696369656E742062616C616E636520666F PUSH1 0x40 DUP3 ADD MSTORE PUSH10 0x39103A3930B739B332B9 PUSH1 0xB1 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2FA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x23 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A206275726E2066726F6D20746865207A65726F2061646472 PUSH1 0x40 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A206275726E20616D6F756E7420657863656564732062616C PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x616E6365 PUSH1 0xE0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0xDDE JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x30A7 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x15A1 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x30B3 JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x30E0 JUMPI PUSH2 0x30E0 PUSH2 0x266E JUMP JUMPDEST PUSH2 0x30F4 DUP2 PUSH2 0x30EE DUP5 SLOAD PUSH2 0x2CE0 JUMP JUMPDEST DUP5 PUSH2 0x3080 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x3129 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x3111 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x15A1 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3158 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x3139 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x3176 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND DUP4 MSTORE DUP1 DUP8 AND PUSH1 0x20 DUP5 ADD MSTORE POP PUSH1 0xA0 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x31B2 PUSH1 0xA0 DUP4 ADD DUP7 PUSH2 0x2A41 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x31C4 DUP2 DUP7 PUSH2 0x2A41 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x31D8 DUP2 DUP6 PUSH2 0x262F JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x31F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x2562 DUP2 PUSH2 0x25BF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 RETURNDATASIZE GT ISZERO PUSH2 0xDD0 JUMPI PUSH1 0x4 PUSH1 0x0 DUP1 RETURNDATACOPY POP PUSH1 0x0 MLOAD PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x44 RETURNDATASIZE LT ISZERO PUSH2 0x322A JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x3 NOT RETURNDATASIZE DUP2 ADD PUSH1 0x4 DUP4 RETURNDATACOPY DUP2 MLOAD RETURNDATASIZE PUSH8 0xFFFFFFFFFFFFFFFF DUP2 PUSH1 0x24 DUP5 ADD GT DUP2 DUP5 GT OR ISZERO PUSH2 0x325A JUMPI POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP3 DUP6 ADD SWAP2 POP DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x3272 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP5 RETURNDATASIZE DUP8 ADD ADD PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x328C JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x329B PUSH1 0x20 DUP3 DUP7 ADD ADD DUP8 PUSH2 0x2684 JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A204552433131353552656365697665722072656A65637465 PUSH1 0x40 DUP3 ADD MSTORE PUSH8 0x6420746F6B656E73 PUSH1 0xC0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND DUP4 MSTORE DUP1 DUP8 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP5 PUSH1 0x40 DUP4 ADD MSTORE DUP4 PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0xA0 PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x3326 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x262F JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x3343 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x260B JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP INVALID CALLDATASIZE ADDMOD SWAP5 LOG1 EXTCODESIZE LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBC416464726573733A206C6F PUSH24 0x2D6C6576656C2064656C65676174652063616C6C20666169 PUSH13 0x6564A26469706673582212206B 0xBF CREATE SWAP7 0xE2 PUSH31 0x1265A2F70E42A7F23DF098D680FBAC87F640F9952AA7CC63F4BF64736F6C63 NUMBER STOP ADDMOD GT STOP CALLER ","sourceMap":"1210:4698:23:-:0;;;1332:4:6;1289:48;;1210:4698:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@__ERC1155_init_981":{"entryPoint":5980,"id":981,"parameterSlots":1,"returnSlots":0},"@__ERC1155_init_unchained_993":{"entryPoint":8556,"id":993,"parameterSlots":1,"returnSlots":0},"@__UUPSUpgradeable_init_813":{"entryPoint":5941,"id":813,"parameterSlots":0,"returnSlots":0},"@_afterTokenTransfer_2014":{"entryPoint":null,"id":2014,"parameterSlots":6,"returnSlots":0},"@_asSingletonArray_2170":{"entryPoint":8595,"id":2170,"parameterSlots":1,"returnSlots":1},"@_authorizeUpgrade_4870":{"entryPoint":5545,"id":4870,"parameterSlots":1,"returnSlots":0},"@_beforeTokenTransfer_1995":{"entryPoint":null,"id":1995,"parameterSlots":6,"returnSlots":0},"@_beforeTokenTransfer_2599":{"entryPoint":8857,"id":2599,"parameterSlots":6,"returnSlots":0},"@_beforeTokenTransfer_4981":{"entryPoint":7743,"id":4981,"parameterSlots":6,"returnSlots":0},"@_burnBatch_1944":{"entryPoint":6703,"id":1944,"parameterSlots":3,"returnSlots":0},"@_burn_1821":{"entryPoint":6185,"id":1821,"parameterSlots":3,"returnSlots":0},"@_checkMinter_4885":{"entryPoint":4663,"id":4885,"parameterSlots":0,"returnSlots":0},"@_checkOwner_174":{"entryPoint":6095,"id":174,"parameterSlots":0,"returnSlots":0},"@_doSafeBatchTransferAcceptanceCheck_2142":{"entryPoint":7934,"id":2142,"parameterSlots":6,"returnSlots":0},"@_doSafeTransferAcceptanceCheck_2077":{"entryPoint":8670,"id":2077,"parameterSlots":6,"returnSlots":0},"@_functionDelegateCall_610":{"entryPoint":9301,"id":610,"parameterSlots":2,"returnSlots":1},"@_getImplementation_294":{"entryPoint":null,"id":294,"parameterSlots":0,"returnSlots":1},"@_mintBatch_1716":{"entryPoint":4766,"id":1716,"parameterSlots":4,"returnSlots":0},"@_mint_1605":{"entryPoint":6476,"id":1605,"parameterSlots":4,"returnSlots":0},"@_msgSender_2931":{"entryPoint":null,"id":2931,"parameterSlots":0,"returnSlots":1},"@_revert_2903":{"entryPoint":9577,"id":2903,"parameterSlots":2,"returnSlots":0},"@_safeBatchTransferFrom_1493":{"entryPoint":5114,"id":1493,"parameterSlots":5,"returnSlots":0},"@_safeTransferFrom_1358":{"entryPoint":7358,"id":1358,"parameterSlots":5,"returnSlots":0},"@_setApprovalForAll_1976":{"entryPoint":7133,"id":1976,"parameterSlots":3,"returnSlots":0},"@_setImplementation_318":{"entryPoint":8281,"id":318,"parameterSlots":1,"returnSlots":0},"@_setURI_1504":{"entryPoint":7120,"id":1504,"parameterSlots":1,"returnSlots":0},"@_transferOwnership_231":{"entryPoint":8474,"id":231,"parameterSlots":1,"returnSlots":0},"@_transferOwnership_77":{"entryPoint":5916,"id":77,"parameterSlots":1,"returnSlots":0},"@_upgradeToAndCallUUPS_414":{"entryPoint":5553,"id":414,"parameterSlots":3,"returnSlots":0},"@_upgradeToAndCall_361":{"entryPoint":8437,"id":361,"parameterSlots":3,"returnSlots":0},"@_upgradeTo_333":{"entryPoint":9237,"id":333,"parameterSlots":1,"returnSlots":0},"@acceptOwnership_99":{"entryPoint":3735,"id":99,"parameterSlots":0,"returnSlots":0},"@balanceOfBatch_1128":{"entryPoint":2853,"id":1128,"parameterSlots":2,"returnSlots":1},"@balanceOf_1064":{"entryPoint":1595,"id":1064,"parameterSlots":2,"returnSlots":1},"@burnBatch_2422":{"entryPoint":6028,"id":2422,"parameterSlots":3,"returnSlots":0},"@burnBatch_5260":{"entryPoint":3539,"id":5260,"parameterSlots":3,"returnSlots":0},"@burn_2390":{"entryPoint":7676,"id":2390,"parameterSlots":3,"returnSlots":0},"@burn_5237":{"entryPoint":4569,"id":5237,"parameterSlots":3,"returnSlots":0},"@exists_2482":{"entryPoint":null,"id":2482,"parameterSlots":1,"returnSlots":1},"@freeze_5085":{"entryPoint":4238,"id":5085,"parameterSlots":1,"returnSlots":0},"@frozen_4918":{"entryPoint":null,"id":4918,"parameterSlots":0,"returnSlots":0},"@getAddressSlot_2972":{"entryPoint":null,"id":2972,"parameterSlots":1,"returnSlots":1},"@getBooleanSlot_2983":{"entryPoint":null,"id":2983,"parameterSlots":1,"returnSlots":1},"@initialize_5014":{"entryPoint":2305,"id":5014,"parameterSlots":3,"returnSlots":0},"@isApprovedForAll_1163":{"entryPoint":null,"id":1163,"parameterSlots":2,"returnSlots":1},"@isContract_2638":{"entryPoint":null,"id":2638,"parameterSlots":1,"returnSlots":1},"@mintBatch_5062":{"entryPoint":1980,"id":5062,"parameterSlots":4,"returnSlots":0},"@mint_5037":{"entryPoint":3715,"id":5037,"parameterSlots":4,"returnSlots":0},"@minter_4873":{"entryPoint":null,"id":4873,"parameterSlots":0,"returnSlots":0},"@owner_160":{"entryPoint":null,"id":160,"parameterSlots":0,"returnSlots":1},"@pendingOwner_40":{"entryPoint":null,"id":40,"parameterSlots":0,"returnSlots":1},"@proxiableUUID_876":{"entryPoint":3359,"id":876,"parameterSlots":0,"returnSlots":1},"@renounceOwnership_188":{"entryPoint":3695,"id":188,"parameterSlots":0,"returnSlots":0},"@safeBatchTransferFrom_1241":{"entryPoint":2006,"id":1241,"parameterSlots":5,"returnSlots":0},"@safeTransferFrom_1201":{"entryPoint":4387,"id":1201,"parameterSlots":5,"returnSlots":0},"@setApprovalForAll_1145":{"entryPoint":4227,"id":1145,"parameterSlots":2,"returnSlots":0},"@setMinter_4913":{"entryPoint":4580,"id":4913,"parameterSlots":1,"returnSlots":0},"@slashBatch_5216":{"entryPoint":3854,"id":5216,"parameterSlots":3,"returnSlots":0},"@slash_5150":{"entryPoint":3555,"id":5150,"parameterSlots":3,"returnSlots":0},"@supportsInterface_1024":{"entryPoint":1751,"id":1024,"parameterSlots":1,"returnSlots":1},"@supportsInterface_3730":{"entryPoint":null,"id":3730,"parameterSlots":1,"returnSlots":1},"@thaw_5108":{"entryPoint":4314,"id":5108,"parameterSlots":1,"returnSlots":0},"@totalSupply_2466":{"entryPoint":null,"id":2466,"parameterSlots":1,"returnSlots":1},"@transferOwnership_60":{"entryPoint":4456,"id":60,"parameterSlots":1,"returnSlots":0},"@updateTokenURI_5284":{"entryPoint":4117,"id":5284,"parameterSlots":1,"returnSlots":0},"@upgradeToAndCall_919":{"entryPoint":3151,"id":919,"parameterSlots":2,"returnSlots":0},"@upgradeTo_898":{"entryPoint":2082,"id":898,"parameterSlots":1,"returnSlots":0},"@uri_1036":{"entryPoint":1831,"id":1036,"parameterSlots":1,"returnSlots":1},"@verifyCallResult_2883":{"entryPoint":9545,"id":2883,"parameterSlots":3,"returnSlots":1},"abi_decode_address":{"entryPoint":9593,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_uint256_dyn":{"entryPoint":9941,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes":{"entryPoint":10054,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":10493,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":11336,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr":{"entryPoint":10323,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr":{"entryPoint":11387,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":10963,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr":{"entryPoint":10170,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":11276,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_bytes_memory_ptr":{"entryPoint":10895,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":9621,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256t_uint256":{"entryPoint":11079,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_uint256t_uint256t_bytes_memory_ptr":{"entryPoint":11130,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":10614,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32_fromMemory":{"entryPoint":12181,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4":{"entryPoint":9685,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":12772,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptr":{"entryPoint":11215,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_addresst_address":{"entryPoint":10520,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_uint256":{"entryPoint":9714,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_array_uint256_dyn":{"entryPoint":10817,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string":{"entryPoint":9775,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":13105,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":12678,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":13038,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":10876,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":12001,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9819,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12966,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_225559eb8402045bea7ff07c35d0ad8c0547830223ac1c21d44fb948d6896ebc__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_294a5de01910e2350ff231c633ae2d453ed6b1b72c75506234b7aace63eae685__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12348,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3309865acede588af16caec4e420328ad7b719a526e615ac76b33915e726cc2f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11624,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11546,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11700,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_58d3bf342e3a24adcc42cd2019e9893394d2d62bfa52bd8547533b9422e1827b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12038,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_81503871d1586f0b01077b4a94a5a619c714a55f197757f1647f429e1ea6170d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_87fd4aee52f5758d127cd9704d5ffef70f36ed1e87eb99b6f40e37a25c79a76a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12281,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12107,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9eb0869d69143813ac9f244871191d8f2e530e71a4599ba9db4501f0f6110ee4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c9f6e1d4764a43e1875de37d341057c450497e88370e2f61aa9c76de108b9daf__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12206,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11910,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11845,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"array_allocation_size_array_uint256_dyn":{"entryPoint":9905,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":11982,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":12416,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":12486,"id":null,"parameterSlots":2,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":9739,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":11488,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"finalize_allocation":{"entryPoint":9860,"id":null,"parameterSlots":2,"returnSlots":0},"increment_t_uint256":{"entryPoint":11820,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":11798,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":11776,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":9838,"id":null,"parameterSlots":0,"returnSlots":0},"return_data_selector":{"entryPoint":12801,"id":null,"parameterSlots":0,"returnSlots":1},"try_decode_error_message":{"entryPoint":12828,"id":null,"parameterSlots":0,"returnSlots":1},"validator_revert_bytes4":{"entryPoint":9663,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:30766:30","statements":[{"nodeType":"YulBlock","src":"6:3:30","statements":[]},{"body":{"nodeType":"YulBlock","src":"63:147:30","statements":[{"nodeType":"YulAssignment","src":"73:29:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"95:6:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"82:12:30"},"nodeType":"YulFunctionCall","src":"82:20:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"73:5:30"}]},{"body":{"nodeType":"YulBlock","src":"188:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"197:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"200:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"190:6:30"},"nodeType":"YulFunctionCall","src":"190:12:30"},"nodeType":"YulExpressionStatement","src":"190:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"124:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"135:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"142:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"131:3:30"},"nodeType":"YulFunctionCall","src":"131:54:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"121:2:30"},"nodeType":"YulFunctionCall","src":"121:65:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"114:6:30"},"nodeType":"YulFunctionCall","src":"114:73:30"},"nodeType":"YulIf","src":"111:93:30"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"42:6:30","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"53:5:30","type":""}],"src":"14:196:30"},{"body":{"nodeType":"YulBlock","src":"302:167:30","statements":[{"body":{"nodeType":"YulBlock","src":"348:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"357:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"360:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"350:6:30"},"nodeType":"YulFunctionCall","src":"350:12:30"},"nodeType":"YulExpressionStatement","src":"350:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"323:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"332:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"319:3:30"},"nodeType":"YulFunctionCall","src":"319:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"344:2:30","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"315:3:30"},"nodeType":"YulFunctionCall","src":"315:32:30"},"nodeType":"YulIf","src":"312:52:30"},{"nodeType":"YulAssignment","src":"373:39:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"402:9:30"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"383:18:30"},"nodeType":"YulFunctionCall","src":"383:29:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"373:6:30"}]},{"nodeType":"YulAssignment","src":"421:42:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"448:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"459:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"444:3:30"},"nodeType":"YulFunctionCall","src":"444:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"431:12:30"},"nodeType":"YulFunctionCall","src":"431:32:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"421:6:30"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"260:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"271:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"283:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"291:6:30","type":""}],"src":"215:254:30"},{"body":{"nodeType":"YulBlock","src":"575:76:30","statements":[{"nodeType":"YulAssignment","src":"585:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"597:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"608:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"593:3:30"},"nodeType":"YulFunctionCall","src":"593:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"585:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"627:9:30"},{"name":"value0","nodeType":"YulIdentifier","src":"638:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"620:6:30"},"nodeType":"YulFunctionCall","src":"620:25:30"},"nodeType":"YulExpressionStatement","src":"620:25:30"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"544:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"555:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"566:4:30","type":""}],"src":"474:177:30"},{"body":{"nodeType":"YulBlock","src":"700:87:30","statements":[{"body":{"nodeType":"YulBlock","src":"765:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"774:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"777:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"767:6:30"},"nodeType":"YulFunctionCall","src":"767:12:30"},"nodeType":"YulExpressionStatement","src":"767:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"723:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"734:5:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"745:3:30","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"750:10:30","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"741:3:30"},"nodeType":"YulFunctionCall","src":"741:20:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"730:3:30"},"nodeType":"YulFunctionCall","src":"730:32:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"720:2:30"},"nodeType":"YulFunctionCall","src":"720:43:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"713:6:30"},"nodeType":"YulFunctionCall","src":"713:51:30"},"nodeType":"YulIf","src":"710:71:30"}]},"name":"validator_revert_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"689:5:30","type":""}],"src":"656:131:30"},{"body":{"nodeType":"YulBlock","src":"861:176:30","statements":[{"body":{"nodeType":"YulBlock","src":"907:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"916:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"919:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"909:6:30"},"nodeType":"YulFunctionCall","src":"909:12:30"},"nodeType":"YulExpressionStatement","src":"909:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"882:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"891:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"878:3:30"},"nodeType":"YulFunctionCall","src":"878:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"903:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"874:3:30"},"nodeType":"YulFunctionCall","src":"874:32:30"},"nodeType":"YulIf","src":"871:52:30"},{"nodeType":"YulVariableDeclaration","src":"932:36:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"958:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"945:12:30"},"nodeType":"YulFunctionCall","src":"945:23:30"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"936:5:30","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1001:5:30"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"977:23:30"},"nodeType":"YulFunctionCall","src":"977:30:30"},"nodeType":"YulExpressionStatement","src":"977:30:30"},{"nodeType":"YulAssignment","src":"1016:15:30","value":{"name":"value","nodeType":"YulIdentifier","src":"1026:5:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1016:6:30"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"827:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"838:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"850:6:30","type":""}],"src":"792:245:30"},{"body":{"nodeType":"YulBlock","src":"1137:92:30","statements":[{"nodeType":"YulAssignment","src":"1147:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1159:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"1170:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1155:3:30"},"nodeType":"YulFunctionCall","src":"1155:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1147:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1189:9:30"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1214:6:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1207:6:30"},"nodeType":"YulFunctionCall","src":"1207:14:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1200:6:30"},"nodeType":"YulFunctionCall","src":"1200:22:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1182:6:30"},"nodeType":"YulFunctionCall","src":"1182:41:30"},"nodeType":"YulExpressionStatement","src":"1182:41:30"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1106:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1117:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1128:4:30","type":""}],"src":"1042:187:30"},{"body":{"nodeType":"YulBlock","src":"1335:125:30","statements":[{"nodeType":"YulAssignment","src":"1345:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1357:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"1368:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1353:3:30"},"nodeType":"YulFunctionCall","src":"1353:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1345:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1387:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1402:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"1410:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1398:3:30"},"nodeType":"YulFunctionCall","src":"1398:55:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1380:6:30"},"nodeType":"YulFunctionCall","src":"1380:74:30"},"nodeType":"YulExpressionStatement","src":"1380:74:30"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1304:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1315:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1326:4:30","type":""}],"src":"1234:226:30"},{"body":{"nodeType":"YulBlock","src":"1535:110:30","statements":[{"body":{"nodeType":"YulBlock","src":"1581:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1590:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1593:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1583:6:30"},"nodeType":"YulFunctionCall","src":"1583:12:30"},"nodeType":"YulExpressionStatement","src":"1583:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1556:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"1565:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1552:3:30"},"nodeType":"YulFunctionCall","src":"1552:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"1577:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1548:3:30"},"nodeType":"YulFunctionCall","src":"1548:32:30"},"nodeType":"YulIf","src":"1545:52:30"},{"nodeType":"YulAssignment","src":"1606:33:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1629:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1616:12:30"},"nodeType":"YulFunctionCall","src":"1616:23:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1606:6:30"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1501:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1512:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1524:6:30","type":""}],"src":"1465:180:30"},{"body":{"nodeType":"YulBlock","src":"1716:184:30","statements":[{"nodeType":"YulVariableDeclaration","src":"1726:10:30","value":{"kind":"number","nodeType":"YulLiteral","src":"1735:1:30","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1730:1:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"1795:63:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1820:3:30"},{"name":"i","nodeType":"YulIdentifier","src":"1825:1:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1816:3:30"},"nodeType":"YulFunctionCall","src":"1816:11:30"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1839:3:30"},{"name":"i","nodeType":"YulIdentifier","src":"1844:1:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1835:3:30"},"nodeType":"YulFunctionCall","src":"1835:11:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1829:5:30"},"nodeType":"YulFunctionCall","src":"1829:18:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1809:6:30"},"nodeType":"YulFunctionCall","src":"1809:39:30"},"nodeType":"YulExpressionStatement","src":"1809:39:30"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1756:1:30"},{"name":"length","nodeType":"YulIdentifier","src":"1759:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1753:2:30"},"nodeType":"YulFunctionCall","src":"1753:13:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1767:19:30","statements":[{"nodeType":"YulAssignment","src":"1769:15:30","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1778:1:30"},{"kind":"number","nodeType":"YulLiteral","src":"1781:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1774:3:30"},"nodeType":"YulFunctionCall","src":"1774:10:30"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1769:1:30"}]}]},"pre":{"nodeType":"YulBlock","src":"1749:3:30","statements":[]},"src":"1745:113:30"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1878:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"1883:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1874:3:30"},"nodeType":"YulFunctionCall","src":"1874:16:30"},{"kind":"number","nodeType":"YulLiteral","src":"1892:1:30","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1867:6:30"},"nodeType":"YulFunctionCall","src":"1867:27:30"},"nodeType":"YulExpressionStatement","src":"1867:27:30"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1694:3:30","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1699:3:30","type":""},{"name":"length","nodeType":"YulTypedName","src":"1704:6:30","type":""}],"src":"1650:250:30"},{"body":{"nodeType":"YulBlock","src":"1955:221:30","statements":[{"nodeType":"YulVariableDeclaration","src":"1965:26:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1985:5:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1979:5:30"},"nodeType":"YulFunctionCall","src":"1979:12:30"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1969:6:30","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2007:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"2012:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2000:6:30"},"nodeType":"YulFunctionCall","src":"2000:19:30"},"nodeType":"YulExpressionStatement","src":"2000:19:30"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2067:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"2074:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2063:3:30"},"nodeType":"YulFunctionCall","src":"2063:16:30"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2085:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"2090:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2081:3:30"},"nodeType":"YulFunctionCall","src":"2081:14:30"},{"name":"length","nodeType":"YulIdentifier","src":"2097:6:30"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"2028:34:30"},"nodeType":"YulFunctionCall","src":"2028:76:30"},"nodeType":"YulExpressionStatement","src":"2028:76:30"},{"nodeType":"YulAssignment","src":"2113:57:30","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2128:3:30"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2141:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"2149:2:30","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2137:3:30"},"nodeType":"YulFunctionCall","src":"2137:15:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2158:2:30","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2154:3:30"},"nodeType":"YulFunctionCall","src":"2154:7:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2133:3:30"},"nodeType":"YulFunctionCall","src":"2133:29:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2124:3:30"},"nodeType":"YulFunctionCall","src":"2124:39:30"},{"kind":"number","nodeType":"YulLiteral","src":"2165:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2120:3:30"},"nodeType":"YulFunctionCall","src":"2120:50:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2113:3:30"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1932:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1939:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"1947:3:30","type":""}],"src":"1905:271:30"},{"body":{"nodeType":"YulBlock","src":"2302:99:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2319:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"2330:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2312:6:30"},"nodeType":"YulFunctionCall","src":"2312:21:30"},"nodeType":"YulExpressionStatement","src":"2312:21:30"},{"nodeType":"YulAssignment","src":"2342:53:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2368:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2380:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"2391:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2376:3:30"},"nodeType":"YulFunctionCall","src":"2376:18:30"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"2350:17:30"},"nodeType":"YulFunctionCall","src":"2350:45:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2342:4:30"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2271:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2282:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2293:4:30","type":""}],"src":"2181:220:30"},{"body":{"nodeType":"YulBlock","src":"2438:95:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2455:1:30","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2462:3:30","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2467:10:30","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2458:3:30"},"nodeType":"YulFunctionCall","src":"2458:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2448:6:30"},"nodeType":"YulFunctionCall","src":"2448:31:30"},"nodeType":"YulExpressionStatement","src":"2448:31:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2495:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2498:4:30","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2488:6:30"},"nodeType":"YulFunctionCall","src":"2488:15:30"},"nodeType":"YulExpressionStatement","src":"2488:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2519:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2522:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2512:6:30"},"nodeType":"YulFunctionCall","src":"2512:15:30"},"nodeType":"YulExpressionStatement","src":"2512:15:30"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"2406:127:30"},{"body":{"nodeType":"YulBlock","src":"2585:202:30","statements":[{"nodeType":"YulVariableDeclaration","src":"2595:58:30","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2617:6:30"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"2633:4:30"},{"kind":"number","nodeType":"YulLiteral","src":"2639:2:30","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2629:3:30"},"nodeType":"YulFunctionCall","src":"2629:13:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2648:2:30","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2644:3:30"},"nodeType":"YulFunctionCall","src":"2644:7:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2625:3:30"},"nodeType":"YulFunctionCall","src":"2625:27:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2613:3:30"},"nodeType":"YulFunctionCall","src":"2613:40:30"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"2599:10:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"2728:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2730:16:30"},"nodeType":"YulFunctionCall","src":"2730:18:30"},"nodeType":"YulExpressionStatement","src":"2730:18:30"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2671:10:30"},{"kind":"number","nodeType":"YulLiteral","src":"2683:18:30","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2668:2:30"},"nodeType":"YulFunctionCall","src":"2668:34:30"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2707:10:30"},{"name":"memPtr","nodeType":"YulIdentifier","src":"2719:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2704:2:30"},"nodeType":"YulFunctionCall","src":"2704:22:30"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2665:2:30"},"nodeType":"YulFunctionCall","src":"2665:62:30"},"nodeType":"YulIf","src":"2662:88:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2766:2:30","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2770:10:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2759:6:30"},"nodeType":"YulFunctionCall","src":"2759:22:30"},"nodeType":"YulExpressionStatement","src":"2759:22:30"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"2567:6:30","type":""},{"name":"size","nodeType":"YulTypedName","src":"2575:4:30","type":""}],"src":"2538:249:30"},{"body":{"nodeType":"YulBlock","src":"2861:114:30","statements":[{"body":{"nodeType":"YulBlock","src":"2905:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2907:16:30"},"nodeType":"YulFunctionCall","src":"2907:18:30"},"nodeType":"YulExpressionStatement","src":"2907:18:30"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2877:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"2885:18:30","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2874:2:30"},"nodeType":"YulFunctionCall","src":"2874:30:30"},"nodeType":"YulIf","src":"2871:56:30"},{"nodeType":"YulAssignment","src":"2936:33:30","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2952:1:30","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"2955:6:30"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2948:3:30"},"nodeType":"YulFunctionCall","src":"2948:14:30"},{"kind":"number","nodeType":"YulLiteral","src":"2964:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2944:3:30"},"nodeType":"YulFunctionCall","src":"2944:25:30"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"2936:4:30"}]}]},"name":"array_allocation_size_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"2841:6:30","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"2852:4:30","type":""}],"src":"2792:183:30"},{"body":{"nodeType":"YulBlock","src":"3044:660:30","statements":[{"body":{"nodeType":"YulBlock","src":"3093:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3102:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3105:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3095:6:30"},"nodeType":"YulFunctionCall","src":"3095:12:30"},"nodeType":"YulExpressionStatement","src":"3095:12:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3072:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"3080:4:30","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3068:3:30"},"nodeType":"YulFunctionCall","src":"3068:17:30"},{"name":"end","nodeType":"YulIdentifier","src":"3087:3:30"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3064:3:30"},"nodeType":"YulFunctionCall","src":"3064:27:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3057:6:30"},"nodeType":"YulFunctionCall","src":"3057:35:30"},"nodeType":"YulIf","src":"3054:55:30"},{"nodeType":"YulVariableDeclaration","src":"3118:30:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3141:6:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3128:12:30"},"nodeType":"YulFunctionCall","src":"3128:20:30"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3122:2:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3157:14:30","value":{"kind":"number","nodeType":"YulLiteral","src":"3167:4:30","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"3161:2:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3180:53:30","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3230:2:30"}],"functionName":{"name":"array_allocation_size_array_uint256_dyn","nodeType":"YulIdentifier","src":"3190:39:30"},"nodeType":"YulFunctionCall","src":"3190:43:30"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"3184:2:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3242:23:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3262:2:30","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3256:5:30"},"nodeType":"YulFunctionCall","src":"3256:9:30"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"3246:6:30","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3294:6:30"},{"name":"_3","nodeType":"YulIdentifier","src":"3302:2:30"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"3274:19:30"},"nodeType":"YulFunctionCall","src":"3274:31:30"},"nodeType":"YulExpressionStatement","src":"3274:31:30"},{"nodeType":"YulVariableDeclaration","src":"3314:17:30","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"3325:6:30"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"3318:3:30","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3347:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"3355:2:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3340:6:30"},"nodeType":"YulFunctionCall","src":"3340:18:30"},"nodeType":"YulExpressionStatement","src":"3340:18:30"},{"nodeType":"YulAssignment","src":"3367:22:30","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3378:6:30"},{"name":"_2","nodeType":"YulIdentifier","src":"3386:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3374:3:30"},"nodeType":"YulFunctionCall","src":"3374:15:30"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3367:3:30"}]},{"nodeType":"YulVariableDeclaration","src":"3398:46:30","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3420:6:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3432:1:30","type":"","value":"5"},{"name":"_1","nodeType":"YulIdentifier","src":"3435:2:30"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3428:3:30"},"nodeType":"YulFunctionCall","src":"3428:10:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3416:3:30"},"nodeType":"YulFunctionCall","src":"3416:23:30"},{"name":"_2","nodeType":"YulIdentifier","src":"3441:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3412:3:30"},"nodeType":"YulFunctionCall","src":"3412:32:30"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"3402:6:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"3472:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3481:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3484:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3474:6:30"},"nodeType":"YulFunctionCall","src":"3474:12:30"},"nodeType":"YulExpressionStatement","src":"3474:12:30"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"3459:6:30"},{"name":"end","nodeType":"YulIdentifier","src":"3467:3:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3456:2:30"},"nodeType":"YulFunctionCall","src":"3456:15:30"},"nodeType":"YulIf","src":"3453:35:30"},{"nodeType":"YulVariableDeclaration","src":"3497:26:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3512:6:30"},{"name":"_2","nodeType":"YulIdentifier","src":"3520:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3508:3:30"},"nodeType":"YulFunctionCall","src":"3508:15:30"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"3501:3:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"3588:86:30","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3609:3:30"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3627:3:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3614:12:30"},"nodeType":"YulFunctionCall","src":"3614:17:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3602:6:30"},"nodeType":"YulFunctionCall","src":"3602:30:30"},"nodeType":"YulExpressionStatement","src":"3602:30:30"},{"nodeType":"YulAssignment","src":"3645:19:30","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3656:3:30"},{"name":"_2","nodeType":"YulIdentifier","src":"3661:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3652:3:30"},"nodeType":"YulFunctionCall","src":"3652:12:30"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3645:3:30"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3543:3:30"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"3548:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3540:2:30"},"nodeType":"YulFunctionCall","src":"3540:15:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3556:23:30","statements":[{"nodeType":"YulAssignment","src":"3558:19:30","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3569:3:30"},{"name":"_2","nodeType":"YulIdentifier","src":"3574:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3565:3:30"},"nodeType":"YulFunctionCall","src":"3565:12:30"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"3558:3:30"}]}]},"pre":{"nodeType":"YulBlock","src":"3536:3:30","statements":[]},"src":"3532:142:30"},{"nodeType":"YulAssignment","src":"3683:15:30","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"3692:6:30"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3683:5:30"}]}]},"name":"abi_decode_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3018:6:30","type":""},{"name":"end","nodeType":"YulTypedName","src":"3026:3:30","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3034:5:30","type":""}],"src":"2980:724:30"},{"body":{"nodeType":"YulBlock","src":"3761:503:30","statements":[{"body":{"nodeType":"YulBlock","src":"3810:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3819:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3822:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3812:6:30"},"nodeType":"YulFunctionCall","src":"3812:12:30"},"nodeType":"YulExpressionStatement","src":"3812:12:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3789:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"3797:4:30","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3785:3:30"},"nodeType":"YulFunctionCall","src":"3785:17:30"},{"name":"end","nodeType":"YulIdentifier","src":"3804:3:30"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3781:3:30"},"nodeType":"YulFunctionCall","src":"3781:27:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3774:6:30"},"nodeType":"YulFunctionCall","src":"3774:35:30"},"nodeType":"YulIf","src":"3771:55:30"},{"nodeType":"YulVariableDeclaration","src":"3835:30:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3858:6:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3845:12:30"},"nodeType":"YulFunctionCall","src":"3845:20:30"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3839:2:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"3904:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3906:16:30"},"nodeType":"YulFunctionCall","src":"3906:18:30"},"nodeType":"YulExpressionStatement","src":"3906:18:30"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3880:2:30"},{"kind":"number","nodeType":"YulLiteral","src":"3884:18:30","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3877:2:30"},"nodeType":"YulFunctionCall","src":"3877:26:30"},"nodeType":"YulIf","src":"3874:52:30"},{"nodeType":"YulVariableDeclaration","src":"3935:23:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3955:2:30","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3949:5:30"},"nodeType":"YulFunctionCall","src":"3949:9:30"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"3939:6:30","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3987:6:30"},{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"4007:2:30"},{"kind":"number","nodeType":"YulLiteral","src":"4011:4:30","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4003:3:30"},"nodeType":"YulFunctionCall","src":"4003:13:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4022:2:30","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4018:3:30"},"nodeType":"YulFunctionCall","src":"4018:7:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3999:3:30"},"nodeType":"YulFunctionCall","src":"3999:27:30"},{"kind":"number","nodeType":"YulLiteral","src":"4028:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3995:3:30"},"nodeType":"YulFunctionCall","src":"3995:38:30"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"3967:19:30"},"nodeType":"YulFunctionCall","src":"3967:67:30"},"nodeType":"YulExpressionStatement","src":"3967:67:30"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4050:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"4058:2:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4043:6:30"},"nodeType":"YulFunctionCall","src":"4043:18:30"},"nodeType":"YulExpressionStatement","src":"4043:18:30"},{"body":{"nodeType":"YulBlock","src":"4109:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4118:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4121:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4111:6:30"},"nodeType":"YulFunctionCall","src":"4111:12:30"},"nodeType":"YulExpressionStatement","src":"4111:12:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4084:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"4092:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4080:3:30"},"nodeType":"YulFunctionCall","src":"4080:15:30"},{"kind":"number","nodeType":"YulLiteral","src":"4097:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4076:3:30"},"nodeType":"YulFunctionCall","src":"4076:26:30"},{"name":"end","nodeType":"YulIdentifier","src":"4104:3:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4073:2:30"},"nodeType":"YulFunctionCall","src":"4073:35:30"},"nodeType":"YulIf","src":"4070:55:30"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4151:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"4159:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4147:3:30"},"nodeType":"YulFunctionCall","src":"4147:17:30"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4170:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"4178:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4166:3:30"},"nodeType":"YulFunctionCall","src":"4166:17:30"},{"name":"_1","nodeType":"YulIdentifier","src":"4185:2:30"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"4134:12:30"},"nodeType":"YulFunctionCall","src":"4134:54:30"},"nodeType":"YulExpressionStatement","src":"4134:54:30"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4212:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"4220:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4208:3:30"},"nodeType":"YulFunctionCall","src":"4208:15:30"},{"kind":"number","nodeType":"YulLiteral","src":"4225:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4204:3:30"},"nodeType":"YulFunctionCall","src":"4204:26:30"},{"kind":"number","nodeType":"YulLiteral","src":"4232:1:30","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4197:6:30"},"nodeType":"YulFunctionCall","src":"4197:37:30"},"nodeType":"YulExpressionStatement","src":"4197:37:30"},{"nodeType":"YulAssignment","src":"4243:15:30","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"4252:6:30"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"4243:5:30"}]}]},"name":"abi_decode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3735:6:30","type":""},{"name":"end","nodeType":"YulTypedName","src":"3743:3:30","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3751:5:30","type":""}],"src":"3709:555:30"},{"body":{"nodeType":"YulBlock","src":"4449:688:30","statements":[{"body":{"nodeType":"YulBlock","src":"4496:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4505:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4508:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4498:6:30"},"nodeType":"YulFunctionCall","src":"4498:12:30"},"nodeType":"YulExpressionStatement","src":"4498:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4470:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"4479:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4466:3:30"},"nodeType":"YulFunctionCall","src":"4466:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"4491:3:30","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4462:3:30"},"nodeType":"YulFunctionCall","src":"4462:33:30"},"nodeType":"YulIf","src":"4459:53:30"},{"nodeType":"YulAssignment","src":"4521:39:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4550:9:30"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4531:18:30"},"nodeType":"YulFunctionCall","src":"4531:29:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4521:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"4569:46:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4600:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"4611:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4596:3:30"},"nodeType":"YulFunctionCall","src":"4596:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4583:12:30"},"nodeType":"YulFunctionCall","src":"4583:32:30"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4573:6:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4624:28:30","value":{"kind":"number","nodeType":"YulLiteral","src":"4634:18:30","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4628:2:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"4679:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4688:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4691:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4681:6:30"},"nodeType":"YulFunctionCall","src":"4681:12:30"},"nodeType":"YulExpressionStatement","src":"4681:12:30"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4667:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"4675:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4664:2:30"},"nodeType":"YulFunctionCall","src":"4664:14:30"},"nodeType":"YulIf","src":"4661:34:30"},{"nodeType":"YulAssignment","src":"4704:71:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4747:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"4758:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4743:3:30"},"nodeType":"YulFunctionCall","src":"4743:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4767:7:30"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"4714:28:30"},"nodeType":"YulFunctionCall","src":"4714:61:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4704:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"4784:48:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4817:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"4828:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4813:3:30"},"nodeType":"YulFunctionCall","src":"4813:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4800:12:30"},"nodeType":"YulFunctionCall","src":"4800:32:30"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"4788:8:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"4861:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4870:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4873:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4863:6:30"},"nodeType":"YulFunctionCall","src":"4863:12:30"},"nodeType":"YulExpressionStatement","src":"4863:12:30"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"4847:8:30"},{"name":"_1","nodeType":"YulIdentifier","src":"4857:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4844:2:30"},"nodeType":"YulFunctionCall","src":"4844:16:30"},"nodeType":"YulIf","src":"4841:36:30"},{"nodeType":"YulAssignment","src":"4886:73:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4929:9:30"},{"name":"offset_1","nodeType":"YulIdentifier","src":"4940:8:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4925:3:30"},"nodeType":"YulFunctionCall","src":"4925:24:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4951:7:30"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"4896:28:30"},"nodeType":"YulFunctionCall","src":"4896:63:30"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4886:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"4968:48:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5001:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"5012:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4997:3:30"},"nodeType":"YulFunctionCall","src":"4997:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4984:12:30"},"nodeType":"YulFunctionCall","src":"4984:32:30"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"4972:8:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"5045:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5054:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5057:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5047:6:30"},"nodeType":"YulFunctionCall","src":"5047:12:30"},"nodeType":"YulExpressionStatement","src":"5047:12:30"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"5031:8:30"},{"name":"_1","nodeType":"YulIdentifier","src":"5041:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5028:2:30"},"nodeType":"YulFunctionCall","src":"5028:16:30"},"nodeType":"YulIf","src":"5025:36:30"},{"nodeType":"YulAssignment","src":"5070:61:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5101:9:30"},{"name":"offset_2","nodeType":"YulIdentifier","src":"5112:8:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5097:3:30"},"nodeType":"YulFunctionCall","src":"5097:24:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5123:7:30"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"5080:16:30"},"nodeType":"YulFunctionCall","src":"5080:51:30"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"5070:6:30"}]}]},"name":"abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4391:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4402:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4414:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4422:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4430:6:30","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4438:6:30","type":""}],"src":"4269:868:30"},{"body":{"nodeType":"YulBlock","src":"5339:746:30","statements":[{"body":{"nodeType":"YulBlock","src":"5386:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5395:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5398:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5388:6:30"},"nodeType":"YulFunctionCall","src":"5388:12:30"},"nodeType":"YulExpressionStatement","src":"5388:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5360:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"5369:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5356:3:30"},"nodeType":"YulFunctionCall","src":"5356:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"5381:3:30","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5352:3:30"},"nodeType":"YulFunctionCall","src":"5352:33:30"},"nodeType":"YulIf","src":"5349:53:30"},{"nodeType":"YulAssignment","src":"5411:39:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5440:9:30"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"5421:18:30"},"nodeType":"YulFunctionCall","src":"5421:29:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5411:6:30"}]},{"nodeType":"YulAssignment","src":"5459:48:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5492:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"5503:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5488:3:30"},"nodeType":"YulFunctionCall","src":"5488:18:30"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"5469:18:30"},"nodeType":"YulFunctionCall","src":"5469:38:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5459:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"5516:46:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5547:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"5558:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5543:3:30"},"nodeType":"YulFunctionCall","src":"5543:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5530:12:30"},"nodeType":"YulFunctionCall","src":"5530:32:30"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5520:6:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5571:28:30","value":{"kind":"number","nodeType":"YulLiteral","src":"5581:18:30","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5575:2:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"5626:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5635:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5638:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5628:6:30"},"nodeType":"YulFunctionCall","src":"5628:12:30"},"nodeType":"YulExpressionStatement","src":"5628:12:30"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5614:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"5622:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5611:2:30"},"nodeType":"YulFunctionCall","src":"5611:14:30"},"nodeType":"YulIf","src":"5608:34:30"},{"nodeType":"YulAssignment","src":"5651:71:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5694:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"5705:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5690:3:30"},"nodeType":"YulFunctionCall","src":"5690:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5714:7:30"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"5661:28:30"},"nodeType":"YulFunctionCall","src":"5661:61:30"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"5651:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"5731:48:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5764:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"5775:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5760:3:30"},"nodeType":"YulFunctionCall","src":"5760:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5747:12:30"},"nodeType":"YulFunctionCall","src":"5747:32:30"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"5735:8:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"5808:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5817:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5820:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5810:6:30"},"nodeType":"YulFunctionCall","src":"5810:12:30"},"nodeType":"YulExpressionStatement","src":"5810:12:30"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"5794:8:30"},{"name":"_1","nodeType":"YulIdentifier","src":"5804:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5791:2:30"},"nodeType":"YulFunctionCall","src":"5791:16:30"},"nodeType":"YulIf","src":"5788:36:30"},{"nodeType":"YulAssignment","src":"5833:73:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5876:9:30"},{"name":"offset_1","nodeType":"YulIdentifier","src":"5887:8:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5872:3:30"},"nodeType":"YulFunctionCall","src":"5872:24:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5898:7:30"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"5843:28:30"},"nodeType":"YulFunctionCall","src":"5843:63:30"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"5833:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"5915:49:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5948:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"5959:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5944:3:30"},"nodeType":"YulFunctionCall","src":"5944:19:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5931:12:30"},"nodeType":"YulFunctionCall","src":"5931:33:30"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"5919:8:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"5993:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6002:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6005:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5995:6:30"},"nodeType":"YulFunctionCall","src":"5995:12:30"},"nodeType":"YulExpressionStatement","src":"5995:12:30"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"5979:8:30"},{"name":"_1","nodeType":"YulIdentifier","src":"5989:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5976:2:30"},"nodeType":"YulFunctionCall","src":"5976:16:30"},"nodeType":"YulIf","src":"5973:36:30"},{"nodeType":"YulAssignment","src":"6018:61:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6049:9:30"},{"name":"offset_2","nodeType":"YulIdentifier","src":"6060:8:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6045:3:30"},"nodeType":"YulFunctionCall","src":"6045:24:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6071:7:30"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"6028:16:30"},"nodeType":"YulFunctionCall","src":"6028:51:30"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"6018:6:30"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5273:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5284:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5296:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5304:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5312:6:30","type":""},{"name":"value3","nodeType":"YulTypedName","src":"5320:6:30","type":""},{"name":"value4","nodeType":"YulTypedName","src":"5328:6:30","type":""}],"src":"5142:943:30"},{"body":{"nodeType":"YulBlock","src":"6160:116:30","statements":[{"body":{"nodeType":"YulBlock","src":"6206:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6215:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6218:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6208:6:30"},"nodeType":"YulFunctionCall","src":"6208:12:30"},"nodeType":"YulExpressionStatement","src":"6208:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6181:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"6190:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6177:3:30"},"nodeType":"YulFunctionCall","src":"6177:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"6202:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6173:3:30"},"nodeType":"YulFunctionCall","src":"6173:32:30"},"nodeType":"YulIf","src":"6170:52:30"},{"nodeType":"YulAssignment","src":"6231:39:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6260:9:30"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"6241:18:30"},"nodeType":"YulFunctionCall","src":"6241:29:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6231:6:30"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6126:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6137:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6149:6:30","type":""}],"src":"6090:186:30"},{"body":{"nodeType":"YulBlock","src":"6395:355:30","statements":[{"body":{"nodeType":"YulBlock","src":"6441:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6450:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6453:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6443:6:30"},"nodeType":"YulFunctionCall","src":"6443:12:30"},"nodeType":"YulExpressionStatement","src":"6443:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6416:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"6425:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6412:3:30"},"nodeType":"YulFunctionCall","src":"6412:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"6437:2:30","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6408:3:30"},"nodeType":"YulFunctionCall","src":"6408:32:30"},"nodeType":"YulIf","src":"6405:52:30"},{"nodeType":"YulVariableDeclaration","src":"6466:37:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6493:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6480:12:30"},"nodeType":"YulFunctionCall","src":"6480:23:30"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6470:6:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"6546:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6555:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6558:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6548:6:30"},"nodeType":"YulFunctionCall","src":"6548:12:30"},"nodeType":"YulExpressionStatement","src":"6548:12:30"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6518:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"6526:18:30","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6515:2:30"},"nodeType":"YulFunctionCall","src":"6515:30:30"},"nodeType":"YulIf","src":"6512:50:30"},{"nodeType":"YulAssignment","src":"6571:59:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6602:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"6613:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6598:3:30"},"nodeType":"YulFunctionCall","src":"6598:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6622:7:30"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"6581:16:30"},"nodeType":"YulFunctionCall","src":"6581:49:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6571:6:30"}]},{"nodeType":"YulAssignment","src":"6639:48:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6672:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"6683:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6668:3:30"},"nodeType":"YulFunctionCall","src":"6668:18:30"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"6649:18:30"},"nodeType":"YulFunctionCall","src":"6649:38:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6639:6:30"}]},{"nodeType":"YulAssignment","src":"6696:48:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6729:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"6740:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6725:3:30"},"nodeType":"YulFunctionCall","src":"6725:18:30"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"6706:18:30"},"nodeType":"YulFunctionCall","src":"6706:38:30"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"6696:6:30"}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6345:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6356:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6368:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6376:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6384:6:30","type":""}],"src":"6281:469:30"},{"body":{"nodeType":"YulBlock","src":"6892:1071:30","statements":[{"body":{"nodeType":"YulBlock","src":"6938:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6947:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6950:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6940:6:30"},"nodeType":"YulFunctionCall","src":"6940:12:30"},"nodeType":"YulExpressionStatement","src":"6940:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6913:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"6922:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6909:3:30"},"nodeType":"YulFunctionCall","src":"6909:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"6934:2:30","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6905:3:30"},"nodeType":"YulFunctionCall","src":"6905:32:30"},"nodeType":"YulIf","src":"6902:52:30"},{"nodeType":"YulVariableDeclaration","src":"6963:37:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6990:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6977:12:30"},"nodeType":"YulFunctionCall","src":"6977:23:30"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6967:6:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7009:28:30","value":{"kind":"number","nodeType":"YulLiteral","src":"7019:18:30","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"7013:2:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"7064:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7073:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7076:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7066:6:30"},"nodeType":"YulFunctionCall","src":"7066:12:30"},"nodeType":"YulExpressionStatement","src":"7066:12:30"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7052:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"7060:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7049:2:30"},"nodeType":"YulFunctionCall","src":"7049:14:30"},"nodeType":"YulIf","src":"7046:34:30"},{"nodeType":"YulVariableDeclaration","src":"7089:32:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7103:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"7114:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7099:3:30"},"nodeType":"YulFunctionCall","src":"7099:22:30"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"7093:2:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"7169:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7178:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7181:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7171:6:30"},"nodeType":"YulFunctionCall","src":"7171:12:30"},"nodeType":"YulExpressionStatement","src":"7171:12:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"7148:2:30"},{"kind":"number","nodeType":"YulLiteral","src":"7152:4:30","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7144:3:30"},"nodeType":"YulFunctionCall","src":"7144:13:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7159:7:30"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7140:3:30"},"nodeType":"YulFunctionCall","src":"7140:27:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7133:6:30"},"nodeType":"YulFunctionCall","src":"7133:35:30"},"nodeType":"YulIf","src":"7130:55:30"},{"nodeType":"YulVariableDeclaration","src":"7194:26:30","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"7217:2:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7204:12:30"},"nodeType":"YulFunctionCall","src":"7204:16:30"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"7198:2:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7229:14:30","value":{"kind":"number","nodeType":"YulLiteral","src":"7239:4:30","type":"","value":"0x20"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"7233:2:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7252:53:30","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"7302:2:30"}],"functionName":{"name":"array_allocation_size_array_uint256_dyn","nodeType":"YulIdentifier","src":"7262:39:30"},"nodeType":"YulFunctionCall","src":"7262:43:30"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"7256:2:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7314:23:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7334:2:30","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7328:5:30"},"nodeType":"YulFunctionCall","src":"7328:9:30"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"7318:6:30","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7366:6:30"},{"name":"_5","nodeType":"YulIdentifier","src":"7374:2:30"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"7346:19:30"},"nodeType":"YulFunctionCall","src":"7346:31:30"},"nodeType":"YulExpressionStatement","src":"7346:31:30"},{"nodeType":"YulVariableDeclaration","src":"7386:17:30","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"7397:6:30"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"7390:3:30","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7419:6:30"},{"name":"_3","nodeType":"YulIdentifier","src":"7427:2:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7412:6:30"},"nodeType":"YulFunctionCall","src":"7412:18:30"},"nodeType":"YulExpressionStatement","src":"7412:18:30"},{"nodeType":"YulAssignment","src":"7439:22:30","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7450:6:30"},{"name":"_4","nodeType":"YulIdentifier","src":"7458:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7446:3:30"},"nodeType":"YulFunctionCall","src":"7446:15:30"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"7439:3:30"}]},{"nodeType":"YulVariableDeclaration","src":"7470:42:30","value":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"7492:2:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7500:1:30","type":"","value":"5"},{"name":"_3","nodeType":"YulIdentifier","src":"7503:2:30"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7496:3:30"},"nodeType":"YulFunctionCall","src":"7496:10:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7488:3:30"},"nodeType":"YulFunctionCall","src":"7488:19:30"},{"name":"_4","nodeType":"YulIdentifier","src":"7509:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7484:3:30"},"nodeType":"YulFunctionCall","src":"7484:28:30"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"7474:6:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"7544:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7553:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7556:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7546:6:30"},"nodeType":"YulFunctionCall","src":"7546:12:30"},"nodeType":"YulExpressionStatement","src":"7546:12:30"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"7527:6:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7535:7:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7524:2:30"},"nodeType":"YulFunctionCall","src":"7524:19:30"},"nodeType":"YulIf","src":"7521:39:30"},{"nodeType":"YulVariableDeclaration","src":"7569:22:30","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"7584:2:30"},{"name":"_4","nodeType":"YulIdentifier","src":"7588:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7580:3:30"},"nodeType":"YulFunctionCall","src":"7580:11:30"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"7573:3:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"7656:92:30","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"7677:3:30"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7701:3:30"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"7682:18:30"},"nodeType":"YulFunctionCall","src":"7682:23:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7670:6:30"},"nodeType":"YulFunctionCall","src":"7670:36:30"},"nodeType":"YulExpressionStatement","src":"7670:36:30"},{"nodeType":"YulAssignment","src":"7719:19:30","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"7730:3:30"},{"name":"_4","nodeType":"YulIdentifier","src":"7735:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7726:3:30"},"nodeType":"YulFunctionCall","src":"7726:12:30"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"7719:3:30"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7611:3:30"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"7616:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7608:2:30"},"nodeType":"YulFunctionCall","src":"7608:15:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"7624:23:30","statements":[{"nodeType":"YulAssignment","src":"7626:19:30","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7637:3:30"},{"name":"_4","nodeType":"YulIdentifier","src":"7642:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7633:3:30"},"nodeType":"YulFunctionCall","src":"7633:12:30"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"7626:3:30"}]}]},"pre":{"nodeType":"YulBlock","src":"7604:3:30","statements":[]},"src":"7600:148:30"},{"nodeType":"YulAssignment","src":"7757:16:30","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"7767:6:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7757:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"7782:48:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7815:9:30"},{"name":"_4","nodeType":"YulIdentifier","src":"7826:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7811:3:30"},"nodeType":"YulFunctionCall","src":"7811:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7798:12:30"},"nodeType":"YulFunctionCall","src":"7798:32:30"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"7786:8:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"7859:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7868:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7871:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7861:6:30"},"nodeType":"YulFunctionCall","src":"7861:12:30"},"nodeType":"YulExpressionStatement","src":"7861:12:30"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"7845:8:30"},{"name":"_1","nodeType":"YulIdentifier","src":"7855:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7842:2:30"},"nodeType":"YulFunctionCall","src":"7842:16:30"},"nodeType":"YulIf","src":"7839:36:30"},{"nodeType":"YulAssignment","src":"7884:73:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7927:9:30"},{"name":"offset_1","nodeType":"YulIdentifier","src":"7938:8:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7923:3:30"},"nodeType":"YulFunctionCall","src":"7923:24:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7949:7:30"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"7894:28:30"},"nodeType":"YulFunctionCall","src":"7894:63:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7884:6:30"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6850:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6861:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6873:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6881:6:30","type":""}],"src":"6755:1208:30"},{"body":{"nodeType":"YulBlock","src":"8029:374:30","statements":[{"nodeType":"YulVariableDeclaration","src":"8039:26:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8059:5:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8053:5:30"},"nodeType":"YulFunctionCall","src":"8053:12:30"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"8043:6:30","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8081:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"8086:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8074:6:30"},"nodeType":"YulFunctionCall","src":"8074:19:30"},"nodeType":"YulExpressionStatement","src":"8074:19:30"},{"nodeType":"YulVariableDeclaration","src":"8102:14:30","value":{"kind":"number","nodeType":"YulLiteral","src":"8112:4:30","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"8106:2:30","type":""}]},{"nodeType":"YulAssignment","src":"8125:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8136:3:30"},{"name":"_1","nodeType":"YulIdentifier","src":"8141:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8132:3:30"},"nodeType":"YulFunctionCall","src":"8132:12:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8125:3:30"}]},{"nodeType":"YulVariableDeclaration","src":"8153:28:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8171:5:30"},{"name":"_1","nodeType":"YulIdentifier","src":"8178:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8167:3:30"},"nodeType":"YulFunctionCall","src":"8167:14:30"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"8157:6:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8190:10:30","value":{"kind":"number","nodeType":"YulLiteral","src":"8199:1:30","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"8194:1:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"8258:120:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8279:3:30"},{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"8290:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8284:5:30"},"nodeType":"YulFunctionCall","src":"8284:13:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8272:6:30"},"nodeType":"YulFunctionCall","src":"8272:26:30"},"nodeType":"YulExpressionStatement","src":"8272:26:30"},{"nodeType":"YulAssignment","src":"8311:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8322:3:30"},{"name":"_1","nodeType":"YulIdentifier","src":"8327:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8318:3:30"},"nodeType":"YulFunctionCall","src":"8318:12:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8311:3:30"}]},{"nodeType":"YulAssignment","src":"8343:25:30","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"8357:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"8365:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8353:3:30"},"nodeType":"YulFunctionCall","src":"8353:15:30"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"8343:6:30"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8220:1:30"},{"name":"length","nodeType":"YulIdentifier","src":"8223:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8217:2:30"},"nodeType":"YulFunctionCall","src":"8217:13:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"8231:18:30","statements":[{"nodeType":"YulAssignment","src":"8233:14:30","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8242:1:30"},{"kind":"number","nodeType":"YulLiteral","src":"8245:1:30","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8238:3:30"},"nodeType":"YulFunctionCall","src":"8238:9:30"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"8233:1:30"}]}]},"pre":{"nodeType":"YulBlock","src":"8213:3:30","statements":[]},"src":"8209:169:30"},{"nodeType":"YulAssignment","src":"8387:10:30","value":{"name":"pos","nodeType":"YulIdentifier","src":"8394:3:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8387:3:30"}]}]},"name":"abi_encode_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8006:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"8013:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8021:3:30","type":""}],"src":"7968:435:30"},{"body":{"nodeType":"YulBlock","src":"8559:110:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8576:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"8587:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8569:6:30"},"nodeType":"YulFunctionCall","src":"8569:21:30"},"nodeType":"YulExpressionStatement","src":"8569:21:30"},{"nodeType":"YulAssignment","src":"8599:64:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8636:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8648:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"8659:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8644:3:30"},"nodeType":"YulFunctionCall","src":"8644:18:30"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"8607:28:30"},"nodeType":"YulFunctionCall","src":"8607:56:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8599:4:30"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8528:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8539:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8550:4:30","type":""}],"src":"8408:261:30"},{"body":{"nodeType":"YulBlock","src":"8770:298:30","statements":[{"body":{"nodeType":"YulBlock","src":"8816:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8825:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8828:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8818:6:30"},"nodeType":"YulFunctionCall","src":"8818:12:30"},"nodeType":"YulExpressionStatement","src":"8818:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8791:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"8800:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8787:3:30"},"nodeType":"YulFunctionCall","src":"8787:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"8812:2:30","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8783:3:30"},"nodeType":"YulFunctionCall","src":"8783:32:30"},"nodeType":"YulIf","src":"8780:52:30"},{"nodeType":"YulAssignment","src":"8841:39:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8870:9:30"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"8851:18:30"},"nodeType":"YulFunctionCall","src":"8851:29:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8841:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"8889:46:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8920:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"8931:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8916:3:30"},"nodeType":"YulFunctionCall","src":"8916:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8903:12:30"},"nodeType":"YulFunctionCall","src":"8903:32:30"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8893:6:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"8978:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8987:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8990:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8980:6:30"},"nodeType":"YulFunctionCall","src":"8980:12:30"},"nodeType":"YulExpressionStatement","src":"8980:12:30"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8950:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"8958:18:30","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8947:2:30"},"nodeType":"YulFunctionCall","src":"8947:30:30"},"nodeType":"YulIf","src":"8944:50:30"},{"nodeType":"YulAssignment","src":"9003:59:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9034:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"9045:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9030:3:30"},"nodeType":"YulFunctionCall","src":"9030:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9054:7:30"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"9013:16:30"},"nodeType":"YulFunctionCall","src":"9013:49:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9003:6:30"}]}]},"name":"abi_decode_tuple_t_addresst_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8728:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8739:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8751:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8759:6:30","type":""}],"src":"8674:394:30"},{"body":{"nodeType":"YulBlock","src":"9174:76:30","statements":[{"nodeType":"YulAssignment","src":"9184:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9196:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9207:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9192:3:30"},"nodeType":"YulFunctionCall","src":"9192:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9184:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9226:9:30"},{"name":"value0","nodeType":"YulIdentifier","src":"9237:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9219:6:30"},"nodeType":"YulFunctionCall","src":"9219:25:30"},"nodeType":"YulExpressionStatement","src":"9219:25:30"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9143:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9154:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9165:4:30","type":""}],"src":"9073:177:30"},{"body":{"nodeType":"YulBlock","src":"9409:515:30","statements":[{"body":{"nodeType":"YulBlock","src":"9455:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9464:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9467:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9457:6:30"},"nodeType":"YulFunctionCall","src":"9457:12:30"},"nodeType":"YulExpressionStatement","src":"9457:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9430:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"9439:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9426:3:30"},"nodeType":"YulFunctionCall","src":"9426:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"9451:2:30","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9422:3:30"},"nodeType":"YulFunctionCall","src":"9422:32:30"},"nodeType":"YulIf","src":"9419:52:30"},{"nodeType":"YulAssignment","src":"9480:39:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9509:9:30"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"9490:18:30"},"nodeType":"YulFunctionCall","src":"9490:29:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9480:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"9528:46:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9559:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9570:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9555:3:30"},"nodeType":"YulFunctionCall","src":"9555:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9542:12:30"},"nodeType":"YulFunctionCall","src":"9542:32:30"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9532:6:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9583:28:30","value":{"kind":"number","nodeType":"YulLiteral","src":"9593:18:30","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"9587:2:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"9638:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9647:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9650:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9640:6:30"},"nodeType":"YulFunctionCall","src":"9640:12:30"},"nodeType":"YulExpressionStatement","src":"9640:12:30"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9626:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"9634:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9623:2:30"},"nodeType":"YulFunctionCall","src":"9623:14:30"},"nodeType":"YulIf","src":"9620:34:30"},{"nodeType":"YulAssignment","src":"9663:71:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9706:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"9717:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9702:3:30"},"nodeType":"YulFunctionCall","src":"9702:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9726:7:30"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"9673:28:30"},"nodeType":"YulFunctionCall","src":"9673:61:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9663:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"9743:48:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9776:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9787:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9772:3:30"},"nodeType":"YulFunctionCall","src":"9772:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9759:12:30"},"nodeType":"YulFunctionCall","src":"9759:32:30"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"9747:8:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"9820:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9829:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9832:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9822:6:30"},"nodeType":"YulFunctionCall","src":"9822:12:30"},"nodeType":"YulExpressionStatement","src":"9822:12:30"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"9806:8:30"},{"name":"_1","nodeType":"YulIdentifier","src":"9816:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9803:2:30"},"nodeType":"YulFunctionCall","src":"9803:16:30"},"nodeType":"YulIf","src":"9800:36:30"},{"nodeType":"YulAssignment","src":"9845:73:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9888:9:30"},{"name":"offset_1","nodeType":"YulIdentifier","src":"9899:8:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9884:3:30"},"nodeType":"YulFunctionCall","src":"9884:24:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9910:7:30"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"9855:28:30"},"nodeType":"YulFunctionCall","src":"9855:63:30"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"9845:6:30"}]}]},"name":"abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9359:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9370:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9382:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9390:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9398:6:30","type":""}],"src":"9255:669:30"},{"body":{"nodeType":"YulBlock","src":"10033:218:30","statements":[{"body":{"nodeType":"YulBlock","src":"10079:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10088:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10091:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10081:6:30"},"nodeType":"YulFunctionCall","src":"10081:12:30"},"nodeType":"YulExpressionStatement","src":"10081:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10054:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"10063:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10050:3:30"},"nodeType":"YulFunctionCall","src":"10050:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"10075:2:30","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10046:3:30"},"nodeType":"YulFunctionCall","src":"10046:32:30"},"nodeType":"YulIf","src":"10043:52:30"},{"nodeType":"YulAssignment","src":"10104:39:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10133:9:30"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"10114:18:30"},"nodeType":"YulFunctionCall","src":"10114:29:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10104:6:30"}]},{"nodeType":"YulAssignment","src":"10152:42:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10179:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10190:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10175:3:30"},"nodeType":"YulFunctionCall","src":"10175:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10162:12:30"},"nodeType":"YulFunctionCall","src":"10162:32:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"10152:6:30"}]},{"nodeType":"YulAssignment","src":"10203:42:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10230:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10241:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10226:3:30"},"nodeType":"YulFunctionCall","src":"10226:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10213:12:30"},"nodeType":"YulFunctionCall","src":"10213:32:30"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"10203:6:30"}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9983:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9994:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10006:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10014:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"10022:6:30","type":""}],"src":"9929:322:30"},{"body":{"nodeType":"YulBlock","src":"10386:401:30","statements":[{"body":{"nodeType":"YulBlock","src":"10433:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10442:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10445:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10435:6:30"},"nodeType":"YulFunctionCall","src":"10435:12:30"},"nodeType":"YulExpressionStatement","src":"10435:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10407:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"10416:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10403:3:30"},"nodeType":"YulFunctionCall","src":"10403:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"10428:3:30","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10399:3:30"},"nodeType":"YulFunctionCall","src":"10399:33:30"},"nodeType":"YulIf","src":"10396:53:30"},{"nodeType":"YulAssignment","src":"10458:39:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10487:9:30"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"10468:18:30"},"nodeType":"YulFunctionCall","src":"10468:29:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10458:6:30"}]},{"nodeType":"YulAssignment","src":"10506:42:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10533:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10544:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10529:3:30"},"nodeType":"YulFunctionCall","src":"10529:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10516:12:30"},"nodeType":"YulFunctionCall","src":"10516:32:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"10506:6:30"}]},{"nodeType":"YulAssignment","src":"10557:42:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10584:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10595:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10580:3:30"},"nodeType":"YulFunctionCall","src":"10580:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10567:12:30"},"nodeType":"YulFunctionCall","src":"10567:32:30"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"10557:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"10608:46:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10639:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10650:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10635:3:30"},"nodeType":"YulFunctionCall","src":"10635:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10622:12:30"},"nodeType":"YulFunctionCall","src":"10622:32:30"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10612:6:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"10697:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10706:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10709:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10699:6:30"},"nodeType":"YulFunctionCall","src":"10699:12:30"},"nodeType":"YulExpressionStatement","src":"10699:12:30"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10669:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"10677:18:30","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10666:2:30"},"nodeType":"YulFunctionCall","src":"10666:30:30"},"nodeType":"YulIf","src":"10663:50:30"},{"nodeType":"YulAssignment","src":"10722:59:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10753:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"10764:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10749:3:30"},"nodeType":"YulFunctionCall","src":"10749:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10773:7:30"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"10732:16:30"},"nodeType":"YulFunctionCall","src":"10732:49:30"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"10722:6:30"}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10328:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10339:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10351:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10359:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"10367:6:30","type":""},{"name":"value3","nodeType":"YulTypedName","src":"10375:6:30","type":""}],"src":"10256:531:30"},{"body":{"nodeType":"YulBlock","src":"10872:241:30","statements":[{"body":{"nodeType":"YulBlock","src":"10918:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10927:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10930:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10920:6:30"},"nodeType":"YulFunctionCall","src":"10920:12:30"},"nodeType":"YulExpressionStatement","src":"10920:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10893:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"10902:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10889:3:30"},"nodeType":"YulFunctionCall","src":"10889:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"10914:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10885:3:30"},"nodeType":"YulFunctionCall","src":"10885:32:30"},"nodeType":"YulIf","src":"10882:52:30"},{"nodeType":"YulVariableDeclaration","src":"10943:37:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10970:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10957:12:30"},"nodeType":"YulFunctionCall","src":"10957:23:30"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10947:6:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"11023:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11032:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11035:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11025:6:30"},"nodeType":"YulFunctionCall","src":"11025:12:30"},"nodeType":"YulExpressionStatement","src":"11025:12:30"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10995:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"11003:18:30","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10992:2:30"},"nodeType":"YulFunctionCall","src":"10992:30:30"},"nodeType":"YulIf","src":"10989:50:30"},{"nodeType":"YulAssignment","src":"11048:59:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11079:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"11090:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11075:3:30"},"nodeType":"YulFunctionCall","src":"11075:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11099:7:30"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"11058:16:30"},"nodeType":"YulFunctionCall","src":"11058:49:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11048:6:30"}]}]},"name":"abi_decode_tuple_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10838:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10849:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10861:6:30","type":""}],"src":"10792:321:30"},{"body":{"nodeType":"YulBlock","src":"11202:263:30","statements":[{"body":{"nodeType":"YulBlock","src":"11248:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11257:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11260:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11250:6:30"},"nodeType":"YulFunctionCall","src":"11250:12:30"},"nodeType":"YulExpressionStatement","src":"11250:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11223:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"11232:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11219:3:30"},"nodeType":"YulFunctionCall","src":"11219:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"11244:2:30","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11215:3:30"},"nodeType":"YulFunctionCall","src":"11215:32:30"},"nodeType":"YulIf","src":"11212:52:30"},{"nodeType":"YulAssignment","src":"11273:39:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11302:9:30"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"11283:18:30"},"nodeType":"YulFunctionCall","src":"11283:29:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11273:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"11321:45:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11351:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"11362:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11347:3:30"},"nodeType":"YulFunctionCall","src":"11347:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11334:12:30"},"nodeType":"YulFunctionCall","src":"11334:32:30"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"11325:5:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"11419:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11428:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11431:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11421:6:30"},"nodeType":"YulFunctionCall","src":"11421:12:30"},"nodeType":"YulExpressionStatement","src":"11421:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11388:5:30"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11409:5:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"11402:6:30"},"nodeType":"YulFunctionCall","src":"11402:13:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"11395:6:30"},"nodeType":"YulFunctionCall","src":"11395:21:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"11385:2:30"},"nodeType":"YulFunctionCall","src":"11385:32:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"11378:6:30"},"nodeType":"YulFunctionCall","src":"11378:40:30"},"nodeType":"YulIf","src":"11375:60:30"},{"nodeType":"YulAssignment","src":"11444:15:30","value":{"name":"value","nodeType":"YulIdentifier","src":"11454:5:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"11444:6:30"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11160:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11171:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11183:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11191:6:30","type":""}],"src":"11118:347:30"},{"body":{"nodeType":"YulBlock","src":"11557:173:30","statements":[{"body":{"nodeType":"YulBlock","src":"11603:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11612:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11615:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11605:6:30"},"nodeType":"YulFunctionCall","src":"11605:12:30"},"nodeType":"YulExpressionStatement","src":"11605:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11578:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"11587:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11574:3:30"},"nodeType":"YulFunctionCall","src":"11574:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"11599:2:30","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11570:3:30"},"nodeType":"YulFunctionCall","src":"11570:32:30"},"nodeType":"YulIf","src":"11567:52:30"},{"nodeType":"YulAssignment","src":"11628:39:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11657:9:30"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"11638:18:30"},"nodeType":"YulFunctionCall","src":"11638:29:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11628:6:30"}]},{"nodeType":"YulAssignment","src":"11676:48:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11709:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"11720:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11705:3:30"},"nodeType":"YulFunctionCall","src":"11705:18:30"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"11686:18:30"},"nodeType":"YulFunctionCall","src":"11686:38:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"11676:6:30"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11515:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11526:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11538:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11546:6:30","type":""}],"src":"11470:260:30"},{"body":{"nodeType":"YulBlock","src":"11882:459:30","statements":[{"body":{"nodeType":"YulBlock","src":"11929:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11938:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11941:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11931:6:30"},"nodeType":"YulFunctionCall","src":"11931:12:30"},"nodeType":"YulExpressionStatement","src":"11931:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11903:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"11912:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11899:3:30"},"nodeType":"YulFunctionCall","src":"11899:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"11924:3:30","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11895:3:30"},"nodeType":"YulFunctionCall","src":"11895:33:30"},"nodeType":"YulIf","src":"11892:53:30"},{"nodeType":"YulAssignment","src":"11954:39:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11983:9:30"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"11964:18:30"},"nodeType":"YulFunctionCall","src":"11964:29:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11954:6:30"}]},{"nodeType":"YulAssignment","src":"12002:48:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12035:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12046:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12031:3:30"},"nodeType":"YulFunctionCall","src":"12031:18:30"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"12012:18:30"},"nodeType":"YulFunctionCall","src":"12012:38:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"12002:6:30"}]},{"nodeType":"YulAssignment","src":"12059:42:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12086:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12097:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12082:3:30"},"nodeType":"YulFunctionCall","src":"12082:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12069:12:30"},"nodeType":"YulFunctionCall","src":"12069:32:30"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"12059:6:30"}]},{"nodeType":"YulAssignment","src":"12110:42:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12137:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12148:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12133:3:30"},"nodeType":"YulFunctionCall","src":"12133:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12120:12:30"},"nodeType":"YulFunctionCall","src":"12120:32:30"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"12110:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"12161:47:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12192:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12203:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12188:3:30"},"nodeType":"YulFunctionCall","src":"12188:19:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12175:12:30"},"nodeType":"YulFunctionCall","src":"12175:33:30"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12165:6:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"12251:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12260:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12263:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12253:6:30"},"nodeType":"YulFunctionCall","src":"12253:12:30"},"nodeType":"YulExpressionStatement","src":"12253:12:30"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"12223:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"12231:18:30","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12220:2:30"},"nodeType":"YulFunctionCall","src":"12220:30:30"},"nodeType":"YulIf","src":"12217:50:30"},{"nodeType":"YulAssignment","src":"12276:59:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12307:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"12318:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12303:3:30"},"nodeType":"YulFunctionCall","src":"12303:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12327:7:30"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"12286:16:30"},"nodeType":"YulFunctionCall","src":"12286:49:30"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"12276:6:30"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11816:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11827:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11839:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11847:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"11855:6:30","type":""},{"name":"value3","nodeType":"YulTypedName","src":"11863:6:30","type":""},{"name":"value4","nodeType":"YulTypedName","src":"11871:6:30","type":""}],"src":"11735:606:30"},{"body":{"nodeType":"YulBlock","src":"12520:232:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12537:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12548:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12530:6:30"},"nodeType":"YulFunctionCall","src":"12530:21:30"},"nodeType":"YulExpressionStatement","src":"12530:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12571:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12582:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12567:3:30"},"nodeType":"YulFunctionCall","src":"12567:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"12587:2:30","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12560:6:30"},"nodeType":"YulFunctionCall","src":"12560:30:30"},"nodeType":"YulExpressionStatement","src":"12560:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12610:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12621:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12606:3:30"},"nodeType":"YulFunctionCall","src":"12606:18:30"},{"hexValue":"455243313135353a2061646472657373207a65726f206973206e6f7420612076","kind":"string","nodeType":"YulLiteral","src":"12626:34:30","type":"","value":"ERC1155: address zero is not a v"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12599:6:30"},"nodeType":"YulFunctionCall","src":"12599:62:30"},"nodeType":"YulExpressionStatement","src":"12599:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12681:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12692:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12677:3:30"},"nodeType":"YulFunctionCall","src":"12677:18:30"},{"hexValue":"616c6964206f776e6572","kind":"string","nodeType":"YulLiteral","src":"12697:12:30","type":"","value":"alid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12670:6:30"},"nodeType":"YulFunctionCall","src":"12670:40:30"},"nodeType":"YulExpressionStatement","src":"12670:40:30"},{"nodeType":"YulAssignment","src":"12719:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12731:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12742:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12727:3:30"},"nodeType":"YulFunctionCall","src":"12727:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12719:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12497:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12511:4:30","type":""}],"src":"12346:406:30"},{"body":{"nodeType":"YulBlock","src":"12812:325:30","statements":[{"nodeType":"YulAssignment","src":"12822:22:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12836:1:30","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"12839:4:30"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"12832:3:30"},"nodeType":"YulFunctionCall","src":"12832:12:30"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"12822:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"12853:38:30","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"12883:4:30"},{"kind":"number","nodeType":"YulLiteral","src":"12889:1:30","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12879:3:30"},"nodeType":"YulFunctionCall","src":"12879:12:30"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"12857:18:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"12930:31:30","statements":[{"nodeType":"YulAssignment","src":"12932:27:30","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"12946:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"12954:4:30","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12942:3:30"},"nodeType":"YulFunctionCall","src":"12942:17:30"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"12932:6:30"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"12910:18:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12903:6:30"},"nodeType":"YulFunctionCall","src":"12903:26:30"},"nodeType":"YulIf","src":"12900:61:30"},{"body":{"nodeType":"YulBlock","src":"13020:111:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13041:1:30","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13048:3:30","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"13053:10:30","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"13044:3:30"},"nodeType":"YulFunctionCall","src":"13044:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13034:6:30"},"nodeType":"YulFunctionCall","src":"13034:31:30"},"nodeType":"YulExpressionStatement","src":"13034:31:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13085:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"13088:4:30","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13078:6:30"},"nodeType":"YulFunctionCall","src":"13078:15:30"},"nodeType":"YulExpressionStatement","src":"13078:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13113:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13116:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13106:6:30"},"nodeType":"YulFunctionCall","src":"13106:15:30"},"nodeType":"YulExpressionStatement","src":"13106:15:30"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"12976:18:30"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"12999:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"13007:2:30","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"12996:2:30"},"nodeType":"YulFunctionCall","src":"12996:14:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"12973:2:30"},"nodeType":"YulFunctionCall","src":"12973:38:30"},"nodeType":"YulIf","src":"12970:161:30"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"12792:4:30","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"12801:6:30","type":""}],"src":"12757:380:30"},{"body":{"nodeType":"YulBlock","src":"13316:236:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13333:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13344:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13326:6:30"},"nodeType":"YulFunctionCall","src":"13326:21:30"},"nodeType":"YulExpressionStatement","src":"13326:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13367:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13378:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13363:3:30"},"nodeType":"YulFunctionCall","src":"13363:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"13383:2:30","type":"","value":"46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13356:6:30"},"nodeType":"YulFunctionCall","src":"13356:30:30"},"nodeType":"YulExpressionStatement","src":"13356:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13406:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13417:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13402:3:30"},"nodeType":"YulFunctionCall","src":"13402:18:30"},{"hexValue":"455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e","kind":"string","nodeType":"YulLiteral","src":"13422:34:30","type":"","value":"ERC1155: caller is not token own"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13395:6:30"},"nodeType":"YulFunctionCall","src":"13395:62:30"},"nodeType":"YulExpressionStatement","src":"13395:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13477:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13488:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13473:3:30"},"nodeType":"YulFunctionCall","src":"13473:18:30"},{"hexValue":"6572206f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"13493:16:30","type":"","value":"er or approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13466:6:30"},"nodeType":"YulFunctionCall","src":"13466:44:30"},"nodeType":"YulExpressionStatement","src":"13466:44:30"},{"nodeType":"YulAssignment","src":"13519:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13531:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13542:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13527:3:30"},"nodeType":"YulFunctionCall","src":"13527:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13519:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13293:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13307:4:30","type":""}],"src":"13142:410:30"},{"body":{"nodeType":"YulBlock","src":"13731:234:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13748:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13759:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13741:6:30"},"nodeType":"YulFunctionCall","src":"13741:21:30"},"nodeType":"YulExpressionStatement","src":"13741:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13782:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13793:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13778:3:30"},"nodeType":"YulFunctionCall","src":"13778:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"13798:2:30","type":"","value":"44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13771:6:30"},"nodeType":"YulFunctionCall","src":"13771:30:30"},"nodeType":"YulExpressionStatement","src":"13771:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13821:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13832:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13817:3:30"},"nodeType":"YulFunctionCall","src":"13817:18:30"},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820","kind":"string","nodeType":"YulLiteral","src":"13837:34:30","type":"","value":"Function must be called through "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13810:6:30"},"nodeType":"YulFunctionCall","src":"13810:62:30"},"nodeType":"YulExpressionStatement","src":"13810:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13892:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13903:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13888:3:30"},"nodeType":"YulFunctionCall","src":"13888:18:30"},{"hexValue":"64656c656761746563616c6c","kind":"string","nodeType":"YulLiteral","src":"13908:14:30","type":"","value":"delegatecall"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13881:6:30"},"nodeType":"YulFunctionCall","src":"13881:42:30"},"nodeType":"YulExpressionStatement","src":"13881:42:30"},{"nodeType":"YulAssignment","src":"13932:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13944:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13955:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13940:3:30"},"nodeType":"YulFunctionCall","src":"13940:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13932:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13708:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13722:4:30","type":""}],"src":"13557:408:30"},{"body":{"nodeType":"YulBlock","src":"14144:234:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14161:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14172:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14154:6:30"},"nodeType":"YulFunctionCall","src":"14154:21:30"},"nodeType":"YulExpressionStatement","src":"14154:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14195:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14206:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14191:3:30"},"nodeType":"YulFunctionCall","src":"14191:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"14211:2:30","type":"","value":"44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14184:6:30"},"nodeType":"YulFunctionCall","src":"14184:30:30"},"nodeType":"YulExpressionStatement","src":"14184:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14234:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14245:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14230:3:30"},"nodeType":"YulFunctionCall","src":"14230:18:30"},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820","kind":"string","nodeType":"YulLiteral","src":"14250:34:30","type":"","value":"Function must be called through "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14223:6:30"},"nodeType":"YulFunctionCall","src":"14223:62:30"},"nodeType":"YulExpressionStatement","src":"14223:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14305:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14316:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14301:3:30"},"nodeType":"YulFunctionCall","src":"14301:18:30"},{"hexValue":"6163746976652070726f7879","kind":"string","nodeType":"YulLiteral","src":"14321:14:30","type":"","value":"active proxy"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14294:6:30"},"nodeType":"YulFunctionCall","src":"14294:42:30"},"nodeType":"YulExpressionStatement","src":"14294:42:30"},{"nodeType":"YulAssignment","src":"14345:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14357:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14368:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14353:3:30"},"nodeType":"YulFunctionCall","src":"14353:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14345:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14121:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14135:4:30","type":""}],"src":"13970:408:30"},{"body":{"nodeType":"YulBlock","src":"14557:236:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14574:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14585:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14567:6:30"},"nodeType":"YulFunctionCall","src":"14567:21:30"},"nodeType":"YulExpressionStatement","src":"14567:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14608:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14619:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14604:3:30"},"nodeType":"YulFunctionCall","src":"14604:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"14624:2:30","type":"","value":"46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14597:6:30"},"nodeType":"YulFunctionCall","src":"14597:30:30"},"nodeType":"YulExpressionStatement","src":"14597:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14647:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14658:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14643:3:30"},"nodeType":"YulFunctionCall","src":"14643:18:30"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561","kind":"string","nodeType":"YulLiteral","src":"14663:34:30","type":"","value":"Initializable: contract is alrea"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14636:6:30"},"nodeType":"YulFunctionCall","src":"14636:62:30"},"nodeType":"YulExpressionStatement","src":"14636:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14718:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14729:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14714:3:30"},"nodeType":"YulFunctionCall","src":"14714:18:30"},{"hexValue":"647920696e697469616c697a6564","kind":"string","nodeType":"YulLiteral","src":"14734:16:30","type":"","value":"dy initialized"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14707:6:30"},"nodeType":"YulFunctionCall","src":"14707:44:30"},"nodeType":"YulExpressionStatement","src":"14707:44:30"},{"nodeType":"YulAssignment","src":"14760:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14772:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14783:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14768:3:30"},"nodeType":"YulFunctionCall","src":"14768:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14760:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14534:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14548:4:30","type":""}],"src":"14383:410:30"},{"body":{"nodeType":"YulBlock","src":"14905:87:30","statements":[{"nodeType":"YulAssignment","src":"14915:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14927:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14938:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14923:3:30"},"nodeType":"YulFunctionCall","src":"14923:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14915:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14957:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14972:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"14980:4:30","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14968:3:30"},"nodeType":"YulFunctionCall","src":"14968:17:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14950:6:30"},"nodeType":"YulFunctionCall","src":"14950:36:30"},"nodeType":"YulExpressionStatement","src":"14950:36:30"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14874:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14885:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14896:4:30","type":""}],"src":"14798:194:30"},{"body":{"nodeType":"YulBlock","src":"15171:231:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15188:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15199:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15181:6:30"},"nodeType":"YulFunctionCall","src":"15181:21:30"},"nodeType":"YulExpressionStatement","src":"15181:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15222:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15233:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15218:3:30"},"nodeType":"YulFunctionCall","src":"15218:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"15238:2:30","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15211:6:30"},"nodeType":"YulFunctionCall","src":"15211:30:30"},"nodeType":"YulExpressionStatement","src":"15211:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15261:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15272:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15257:3:30"},"nodeType":"YulFunctionCall","src":"15257:18:30"},{"hexValue":"455243313135353a206163636f756e747320616e6420696473206c656e677468","kind":"string","nodeType":"YulLiteral","src":"15277:34:30","type":"","value":"ERC1155: accounts and ids length"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15250:6:30"},"nodeType":"YulFunctionCall","src":"15250:62:30"},"nodeType":"YulExpressionStatement","src":"15250:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15332:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15343:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15328:3:30"},"nodeType":"YulFunctionCall","src":"15328:18:30"},{"hexValue":"206d69736d61746368","kind":"string","nodeType":"YulLiteral","src":"15348:11:30","type":"","value":" mismatch"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15321:6:30"},"nodeType":"YulFunctionCall","src":"15321:39:30"},"nodeType":"YulExpressionStatement","src":"15321:39:30"},{"nodeType":"YulAssignment","src":"15369:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15381:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15392:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15377:3:30"},"nodeType":"YulFunctionCall","src":"15377:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15369:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15148:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15162:4:30","type":""}],"src":"14997:405:30"},{"body":{"nodeType":"YulBlock","src":"15439:95:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15456:1:30","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15463:3:30","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"15468:10:30","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"15459:3:30"},"nodeType":"YulFunctionCall","src":"15459:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15449:6:30"},"nodeType":"YulFunctionCall","src":"15449:31:30"},"nodeType":"YulExpressionStatement","src":"15449:31:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15496:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"15499:4:30","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15489:6:30"},"nodeType":"YulFunctionCall","src":"15489:15:30"},"nodeType":"YulExpressionStatement","src":"15489:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15520:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15523:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15513:6:30"},"nodeType":"YulFunctionCall","src":"15513:15:30"},"nodeType":"YulExpressionStatement","src":"15513:15:30"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"15407:127:30"},{"body":{"nodeType":"YulBlock","src":"15571:95:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15588:1:30","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15595:3:30","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"15600:10:30","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"15591:3:30"},"nodeType":"YulFunctionCall","src":"15591:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15581:6:30"},"nodeType":"YulFunctionCall","src":"15581:31:30"},"nodeType":"YulExpressionStatement","src":"15581:31:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15628:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"15631:4:30","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15621:6:30"},"nodeType":"YulFunctionCall","src":"15621:15:30"},"nodeType":"YulExpressionStatement","src":"15621:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15652:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15655:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15645:6:30"},"nodeType":"YulFunctionCall","src":"15645:15:30"},"nodeType":"YulExpressionStatement","src":"15645:15:30"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"15539:127:30"},{"body":{"nodeType":"YulBlock","src":"15718:88:30","statements":[{"body":{"nodeType":"YulBlock","src":"15749:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"15751:16:30"},"nodeType":"YulFunctionCall","src":"15751:18:30"},"nodeType":"YulExpressionStatement","src":"15751:18:30"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15734:5:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15745:1:30","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"15741:3:30"},"nodeType":"YulFunctionCall","src":"15741:6:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"15731:2:30"},"nodeType":"YulFunctionCall","src":"15731:17:30"},"nodeType":"YulIf","src":"15728:43:30"},{"nodeType":"YulAssignment","src":"15780:20:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15791:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"15798:1:30","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15787:3:30"},"nodeType":"YulFunctionCall","src":"15787:13:30"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"15780:3:30"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15700:5:30","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"15710:3:30","type":""}],"src":"15671:135:30"},{"body":{"nodeType":"YulBlock","src":"15985:246:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16002:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16013:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15995:6:30"},"nodeType":"YulFunctionCall","src":"15995:21:30"},"nodeType":"YulExpressionStatement","src":"15995:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16036:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16047:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16032:3:30"},"nodeType":"YulFunctionCall","src":"16032:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"16052:2:30","type":"","value":"56"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16025:6:30"},"nodeType":"YulFunctionCall","src":"16025:30:30"},"nodeType":"YulExpressionStatement","src":"16025:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16075:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16086:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16071:3:30"},"nodeType":"YulFunctionCall","src":"16071:18:30"},{"hexValue":"555550535570677261646561626c653a206d757374206e6f742062652063616c","kind":"string","nodeType":"YulLiteral","src":"16091:34:30","type":"","value":"UUPSUpgradeable: must not be cal"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16064:6:30"},"nodeType":"YulFunctionCall","src":"16064:62:30"},"nodeType":"YulExpressionStatement","src":"16064:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16146:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16157:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16142:3:30"},"nodeType":"YulFunctionCall","src":"16142:18:30"},{"hexValue":"6c6564207468726f7567682064656c656761746563616c6c","kind":"string","nodeType":"YulLiteral","src":"16162:26:30","type":"","value":"led through delegatecall"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16135:6:30"},"nodeType":"YulFunctionCall","src":"16135:54:30"},"nodeType":"YulExpressionStatement","src":"16135:54:30"},{"nodeType":"YulAssignment","src":"16198:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16210:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16221:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16206:3:30"},"nodeType":"YulFunctionCall","src":"16206:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16198:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15962:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15976:4:30","type":""}],"src":"15811:420:30"},{"body":{"nodeType":"YulBlock","src":"16410:179:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16427:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16438:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16420:6:30"},"nodeType":"YulFunctionCall","src":"16420:21:30"},"nodeType":"YulExpressionStatement","src":"16420:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16461:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16472:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16457:3:30"},"nodeType":"YulFunctionCall","src":"16457:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"16477:2:30","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16450:6:30"},"nodeType":"YulFunctionCall","src":"16450:30:30"},"nodeType":"YulExpressionStatement","src":"16450:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16500:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16511:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16496:3:30"},"nodeType":"YulFunctionCall","src":"16496:18:30"},{"hexValue":"4a61736d696e654541543a20736572696573206e6f742066726f7a656e","kind":"string","nodeType":"YulLiteral","src":"16516:31:30","type":"","value":"JasmineEAT: series not frozen"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16489:6:30"},"nodeType":"YulFunctionCall","src":"16489:59:30"},"nodeType":"YulExpressionStatement","src":"16489:59:30"},{"nodeType":"YulAssignment","src":"16557:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16569:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16580:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16565:3:30"},"nodeType":"YulFunctionCall","src":"16565:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16557:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_81503871d1586f0b01077b4a94a5a619c714a55f197757f1647f429e1ea6170d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16387:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16401:4:30","type":""}],"src":"16236:353:30"},{"body":{"nodeType":"YulBlock","src":"16768:231:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16785:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16796:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16778:6:30"},"nodeType":"YulFunctionCall","src":"16778:21:30"},"nodeType":"YulExpressionStatement","src":"16778:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16819:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16830:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16815:3:30"},"nodeType":"YulFunctionCall","src":"16815:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"16835:2:30","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16808:6:30"},"nodeType":"YulFunctionCall","src":"16808:30:30"},"nodeType":"YulExpressionStatement","src":"16808:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16858:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16869:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16854:3:30"},"nodeType":"YulFunctionCall","src":"16854:18:30"},{"hexValue":"4f776e61626c6532537465703a2063616c6c6572206973206e6f742074686520","kind":"string","nodeType":"YulLiteral","src":"16874:34:30","type":"","value":"Ownable2Step: caller is not the "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16847:6:30"},"nodeType":"YulFunctionCall","src":"16847:62:30"},"nodeType":"YulExpressionStatement","src":"16847:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16929:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16940:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16925:3:30"},"nodeType":"YulFunctionCall","src":"16925:18:30"},{"hexValue":"6e6577206f776e6572","kind":"string","nodeType":"YulLiteral","src":"16945:11:30","type":"","value":"new owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16918:6:30"},"nodeType":"YulFunctionCall","src":"16918:39:30"},"nodeType":"YulExpressionStatement","src":"16918:39:30"},{"nodeType":"YulAssignment","src":"16966:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16978:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16989:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16974:3:30"},"nodeType":"YulFunctionCall","src":"16974:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16966:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_225559eb8402045bea7ff07c35d0ad8c0547830223ac1c21d44fb948d6896ebc__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16745:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16759:4:30","type":""}],"src":"16594:405:30"},{"body":{"nodeType":"YulBlock","src":"17178:226:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17195:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"17206:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17188:6:30"},"nodeType":"YulFunctionCall","src":"17188:21:30"},"nodeType":"YulExpressionStatement","src":"17188:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17229:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"17240:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17225:3:30"},"nodeType":"YulFunctionCall","src":"17225:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"17245:2:30","type":"","value":"36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17218:6:30"},"nodeType":"YulFunctionCall","src":"17218:30:30"},"nodeType":"YulExpressionStatement","src":"17218:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17268:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"17279:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17264:3:30"},"nodeType":"YulFunctionCall","src":"17264:18:30"},{"hexValue":"4a61736d696e654541543a206e6577205552492063616e6e6f7420626520656d","kind":"string","nodeType":"YulLiteral","src":"17284:34:30","type":"","value":"JasmineEAT: new URI cannot be em"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17257:6:30"},"nodeType":"YulFunctionCall","src":"17257:62:30"},"nodeType":"YulExpressionStatement","src":"17257:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17339:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"17350:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17335:3:30"},"nodeType":"YulFunctionCall","src":"17335:18:30"},{"hexValue":"7074792e","kind":"string","nodeType":"YulLiteral","src":"17355:6:30","type":"","value":"pty."}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17328:6:30"},"nodeType":"YulFunctionCall","src":"17328:34:30"},"nodeType":"YulExpressionStatement","src":"17328:34:30"},{"nodeType":"YulAssignment","src":"17371:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17383:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"17394:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17379:3:30"},"nodeType":"YulFunctionCall","src":"17379:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17371:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_c9f6e1d4764a43e1875de37d341057c450497e88370e2f61aa9c76de108b9daf__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17155:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17169:4:30","type":""}],"src":"17004:400:30"},{"body":{"nodeType":"YulBlock","src":"17583:226:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17600:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"17611:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17593:6:30"},"nodeType":"YulFunctionCall","src":"17593:21:30"},"nodeType":"YulExpressionStatement","src":"17593:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17634:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"17645:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17630:3:30"},"nodeType":"YulFunctionCall","src":"17630:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"17650:2:30","type":"","value":"36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17623:6:30"},"nodeType":"YulFunctionCall","src":"17623:30:30"},"nodeType":"YulExpressionStatement","src":"17623:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17673:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"17684:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17669:3:30"},"nodeType":"YulFunctionCall","src":"17669:18:30"},{"hexValue":"4a61736d696e654541543a2063616c6c6572206973206e6f7420746865206d69","kind":"string","nodeType":"YulLiteral","src":"17689:34:30","type":"","value":"JasmineEAT: caller is not the mi"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17662:6:30"},"nodeType":"YulFunctionCall","src":"17662:62:30"},"nodeType":"YulExpressionStatement","src":"17662:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17744:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"17755:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17740:3:30"},"nodeType":"YulFunctionCall","src":"17740:18:30"},{"hexValue":"6e746572","kind":"string","nodeType":"YulLiteral","src":"17760:6:30","type":"","value":"nter"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17733:6:30"},"nodeType":"YulFunctionCall","src":"17733:34:30"},"nodeType":"YulExpressionStatement","src":"17733:34:30"},{"nodeType":"YulAssignment","src":"17776:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17788:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"17799:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17784:3:30"},"nodeType":"YulFunctionCall","src":"17784:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17776:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_3309865acede588af16caec4e420328ad7b719a526e615ac76b33915e726cc2f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17560:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17574:4:30","type":""}],"src":"17409:400:30"},{"body":{"nodeType":"YulBlock","src":"17988:223:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18005:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18016:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17998:6:30"},"nodeType":"YulFunctionCall","src":"17998:21:30"},"nodeType":"YulExpressionStatement","src":"17998:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18039:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18050:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18035:3:30"},"nodeType":"YulFunctionCall","src":"18035:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"18055:2:30","type":"","value":"33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18028:6:30"},"nodeType":"YulFunctionCall","src":"18028:30:30"},"nodeType":"YulExpressionStatement","src":"18028:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18078:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18089:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18074:3:30"},"nodeType":"YulFunctionCall","src":"18074:18:30"},{"hexValue":"455243313135353a206d696e7420746f20746865207a65726f20616464726573","kind":"string","nodeType":"YulLiteral","src":"18094:34:30","type":"","value":"ERC1155: mint to the zero addres"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18067:6:30"},"nodeType":"YulFunctionCall","src":"18067:62:30"},"nodeType":"YulExpressionStatement","src":"18067:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18149:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18160:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18145:3:30"},"nodeType":"YulFunctionCall","src":"18145:18:30"},{"hexValue":"73","kind":"string","nodeType":"YulLiteral","src":"18165:3:30","type":"","value":"s"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18138:6:30"},"nodeType":"YulFunctionCall","src":"18138:31:30"},"nodeType":"YulExpressionStatement","src":"18138:31:30"},{"nodeType":"YulAssignment","src":"18178:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18190:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18201:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18186:3:30"},"nodeType":"YulFunctionCall","src":"18186:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18178:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17965:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17979:4:30","type":""}],"src":"17814:397:30"},{"body":{"nodeType":"YulBlock","src":"18390:230:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18407:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18418:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18400:6:30"},"nodeType":"YulFunctionCall","src":"18400:21:30"},"nodeType":"YulExpressionStatement","src":"18400:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18441:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18452:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18437:3:30"},"nodeType":"YulFunctionCall","src":"18437:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"18457:2:30","type":"","value":"40"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18430:6:30"},"nodeType":"YulFunctionCall","src":"18430:30:30"},"nodeType":"YulExpressionStatement","src":"18430:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18480:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18491:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18476:3:30"},"nodeType":"YulFunctionCall","src":"18476:18:30"},{"hexValue":"455243313135353a2069647320616e6420616d6f756e7473206c656e67746820","kind":"string","nodeType":"YulLiteral","src":"18496:34:30","type":"","value":"ERC1155: ids and amounts length "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18469:6:30"},"nodeType":"YulFunctionCall","src":"18469:62:30"},"nodeType":"YulExpressionStatement","src":"18469:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18551:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18562:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18547:3:30"},"nodeType":"YulFunctionCall","src":"18547:18:30"},{"hexValue":"6d69736d61746368","kind":"string","nodeType":"YulLiteral","src":"18567:10:30","type":"","value":"mismatch"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18540:6:30"},"nodeType":"YulFunctionCall","src":"18540:38:30"},"nodeType":"YulExpressionStatement","src":"18540:38:30"},{"nodeType":"YulAssignment","src":"18587:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18599:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18610:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18595:3:30"},"nodeType":"YulFunctionCall","src":"18595:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18587:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18367:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18381:4:30","type":""}],"src":"18216:404:30"},{"body":{"nodeType":"YulBlock","src":"18673:77:30","statements":[{"nodeType":"YulAssignment","src":"18683:16:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"18694:1:30"},{"name":"y","nodeType":"YulIdentifier","src":"18697:1:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18690:3:30"},"nodeType":"YulFunctionCall","src":"18690:9:30"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"18683:3:30"}]},{"body":{"nodeType":"YulBlock","src":"18722:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"18724:16:30"},"nodeType":"YulFunctionCall","src":"18724:18:30"},"nodeType":"YulExpressionStatement","src":"18724:18:30"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"18714:1:30"},{"name":"sum","nodeType":"YulIdentifier","src":"18717:3:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"18711:2:30"},"nodeType":"YulFunctionCall","src":"18711:10:30"},"nodeType":"YulIf","src":"18708:36:30"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"18656:1:30","type":""},{"name":"y","nodeType":"YulTypedName","src":"18659:1:30","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"18665:3:30","type":""}],"src":"18625:125:30"},{"body":{"nodeType":"YulBlock","src":"18984:236:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19001:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"19012:2:30","type":"","value":"64"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18994:6:30"},"nodeType":"YulFunctionCall","src":"18994:21:30"},"nodeType":"YulExpressionStatement","src":"18994:21:30"},{"nodeType":"YulVariableDeclaration","src":"19024:70:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"19067:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19079:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"19090:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19075:3:30"},"nodeType":"YulFunctionCall","src":"19075:18:30"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"19038:28:30"},"nodeType":"YulFunctionCall","src":"19038:56:30"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"19028:6:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19114:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"19125:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19110:3:30"},"nodeType":"YulFunctionCall","src":"19110:18:30"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"19134:6:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"19142:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19130:3:30"},"nodeType":"YulFunctionCall","src":"19130:22:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19103:6:30"},"nodeType":"YulFunctionCall","src":"19103:50:30"},"nodeType":"YulExpressionStatement","src":"19103:50:30"},{"nodeType":"YulAssignment","src":"19162:52:30","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"19199:6:30"},{"name":"tail_1","nodeType":"YulIdentifier","src":"19207:6:30"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"19170:28:30"},"nodeType":"YulFunctionCall","src":"19170:44:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19162:4:30"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18945:9:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"18956:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"18964:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18975:4:30","type":""}],"src":"18755:465:30"},{"body":{"nodeType":"YulBlock","src":"19399:227:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19416:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"19427:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19409:6:30"},"nodeType":"YulFunctionCall","src":"19409:21:30"},"nodeType":"YulExpressionStatement","src":"19409:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19450:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"19461:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19446:3:30"},"nodeType":"YulFunctionCall","src":"19446:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"19466:2:30","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19439:6:30"},"nodeType":"YulFunctionCall","src":"19439:30:30"},"nodeType":"YulExpressionStatement","src":"19439:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19489:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"19500:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19485:3:30"},"nodeType":"YulFunctionCall","src":"19485:18:30"},{"hexValue":"455243313135353a207472616e7366657220746f20746865207a65726f206164","kind":"string","nodeType":"YulLiteral","src":"19505:34:30","type":"","value":"ERC1155: transfer to the zero ad"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19478:6:30"},"nodeType":"YulFunctionCall","src":"19478:62:30"},"nodeType":"YulExpressionStatement","src":"19478:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19560:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"19571:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19556:3:30"},"nodeType":"YulFunctionCall","src":"19556:18:30"},{"hexValue":"6472657373","kind":"string","nodeType":"YulLiteral","src":"19576:7:30","type":"","value":"dress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19549:6:30"},"nodeType":"YulFunctionCall","src":"19549:35:30"},"nodeType":"YulExpressionStatement","src":"19549:35:30"},{"nodeType":"YulAssignment","src":"19593:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19605:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"19616:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19601:3:30"},"nodeType":"YulFunctionCall","src":"19601:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19593:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19376:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19390:4:30","type":""}],"src":"19225:401:30"},{"body":{"nodeType":"YulBlock","src":"19805:232:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19822:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"19833:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19815:6:30"},"nodeType":"YulFunctionCall","src":"19815:21:30"},"nodeType":"YulExpressionStatement","src":"19815:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19856:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"19867:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19852:3:30"},"nodeType":"YulFunctionCall","src":"19852:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"19872:2:30","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19845:6:30"},"nodeType":"YulFunctionCall","src":"19845:30:30"},"nodeType":"YulExpressionStatement","src":"19845:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19895:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"19906:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19891:3:30"},"nodeType":"YulFunctionCall","src":"19891:18:30"},{"hexValue":"455243313135353a20696e73756666696369656e742062616c616e636520666f","kind":"string","nodeType":"YulLiteral","src":"19911:34:30","type":"","value":"ERC1155: insufficient balance fo"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19884:6:30"},"nodeType":"YulFunctionCall","src":"19884:62:30"},"nodeType":"YulExpressionStatement","src":"19884:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19966:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"19977:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19962:3:30"},"nodeType":"YulFunctionCall","src":"19962:18:30"},{"hexValue":"72207472616e73666572","kind":"string","nodeType":"YulLiteral","src":"19982:12:30","type":"","value":"r transfer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19955:6:30"},"nodeType":"YulFunctionCall","src":"19955:40:30"},"nodeType":"YulExpressionStatement","src":"19955:40:30"},{"nodeType":"YulAssignment","src":"20004:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20016:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"20027:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20012:3:30"},"nodeType":"YulFunctionCall","src":"20012:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20004:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19782:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19796:4:30","type":""}],"src":"19631:406:30"},{"body":{"nodeType":"YulBlock","src":"20123:103:30","statements":[{"body":{"nodeType":"YulBlock","src":"20169:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20178:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20181:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"20171:6:30"},"nodeType":"YulFunctionCall","src":"20171:12:30"},"nodeType":"YulExpressionStatement","src":"20171:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"20144:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"20153:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20140:3:30"},"nodeType":"YulFunctionCall","src":"20140:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"20165:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"20136:3:30"},"nodeType":"YulFunctionCall","src":"20136:32:30"},"nodeType":"YulIf","src":"20133:52:30"},{"nodeType":"YulAssignment","src":"20194:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20210:9:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"20204:5:30"},"nodeType":"YulFunctionCall","src":"20204:16:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"20194:6:30"}]}]},"name":"abi_decode_tuple_t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20089:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"20100:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"20112:6:30","type":""}],"src":"20042:184:30"},{"body":{"nodeType":"YulBlock","src":"20405:236:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20422:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"20433:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20415:6:30"},"nodeType":"YulFunctionCall","src":"20415:21:30"},"nodeType":"YulExpressionStatement","src":"20415:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20456:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"20467:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20452:3:30"},"nodeType":"YulFunctionCall","src":"20452:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"20472:2:30","type":"","value":"46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20445:6:30"},"nodeType":"YulFunctionCall","src":"20445:30:30"},"nodeType":"YulExpressionStatement","src":"20445:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20495:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"20506:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20491:3:30"},"nodeType":"YulFunctionCall","src":"20491:18:30"},{"hexValue":"45524331393637557067726164653a206e657720696d706c656d656e74617469","kind":"string","nodeType":"YulLiteral","src":"20511:34:30","type":"","value":"ERC1967Upgrade: new implementati"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20484:6:30"},"nodeType":"YulFunctionCall","src":"20484:62:30"},"nodeType":"YulExpressionStatement","src":"20484:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20566:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"20577:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20562:3:30"},"nodeType":"YulFunctionCall","src":"20562:18:30"},{"hexValue":"6f6e206973206e6f742055555053","kind":"string","nodeType":"YulLiteral","src":"20582:16:30","type":"","value":"on is not UUPS"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20555:6:30"},"nodeType":"YulFunctionCall","src":"20555:44:30"},"nodeType":"YulExpressionStatement","src":"20555:44:30"},{"nodeType":"YulAssignment","src":"20608:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20620:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"20631:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20616:3:30"},"nodeType":"YulFunctionCall","src":"20616:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20608:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20382:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20396:4:30","type":""}],"src":"20231:410:30"},{"body":{"nodeType":"YulBlock","src":"20820:231:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20837:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"20848:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20830:6:30"},"nodeType":"YulFunctionCall","src":"20830:21:30"},"nodeType":"YulExpressionStatement","src":"20830:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20871:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"20882:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20867:3:30"},"nodeType":"YulFunctionCall","src":"20867:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"20887:2:30","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20860:6:30"},"nodeType":"YulFunctionCall","src":"20860:30:30"},"nodeType":"YulExpressionStatement","src":"20860:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20910:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"20921:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20906:3:30"},"nodeType":"YulFunctionCall","src":"20906:18:30"},{"hexValue":"45524331393637557067726164653a20756e737570706f727465642070726f78","kind":"string","nodeType":"YulLiteral","src":"20926:34:30","type":"","value":"ERC1967Upgrade: unsupported prox"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20899:6:30"},"nodeType":"YulFunctionCall","src":"20899:62:30"},"nodeType":"YulExpressionStatement","src":"20899:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20981:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"20992:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20977:3:30"},"nodeType":"YulFunctionCall","src":"20977:18:30"},{"hexValue":"6961626c6555554944","kind":"string","nodeType":"YulLiteral","src":"20997:11:30","type":"","value":"iableUUID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20970:6:30"},"nodeType":"YulFunctionCall","src":"20970:39:30"},"nodeType":"YulExpressionStatement","src":"20970:39:30"},{"nodeType":"YulAssignment","src":"21018:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21030:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"21041:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21026:3:30"},"nodeType":"YulFunctionCall","src":"21026:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21018:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20797:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20811:4:30","type":""}],"src":"20646:405:30"},{"body":{"nodeType":"YulBlock","src":"21230:233:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21247:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"21258:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21240:6:30"},"nodeType":"YulFunctionCall","src":"21240:21:30"},"nodeType":"YulExpressionStatement","src":"21240:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21281:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"21292:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21277:3:30"},"nodeType":"YulFunctionCall","src":"21277:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"21297:2:30","type":"","value":"43"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21270:6:30"},"nodeType":"YulFunctionCall","src":"21270:30:30"},"nodeType":"YulExpressionStatement","src":"21270:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21320:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"21331:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21316:3:30"},"nodeType":"YulFunctionCall","src":"21316:18:30"},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069","kind":"string","nodeType":"YulLiteral","src":"21336:34:30","type":"","value":"Initializable: contract is not i"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21309:6:30"},"nodeType":"YulFunctionCall","src":"21309:62:30"},"nodeType":"YulExpressionStatement","src":"21309:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21391:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"21402:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21387:3:30"},"nodeType":"YulFunctionCall","src":"21387:18:30"},{"hexValue":"6e697469616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"21407:13:30","type":"","value":"nitializing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21380:6:30"},"nodeType":"YulFunctionCall","src":"21380:41:30"},"nodeType":"YulExpressionStatement","src":"21380:41:30"},{"nodeType":"YulAssignment","src":"21430:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21442:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"21453:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21438:3:30"},"nodeType":"YulFunctionCall","src":"21438:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21430:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21207:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21221:4:30","type":""}],"src":"21056:407:30"},{"body":{"nodeType":"YulBlock","src":"21642:182:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21659:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"21670:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21652:6:30"},"nodeType":"YulFunctionCall","src":"21652:21:30"},"nodeType":"YulExpressionStatement","src":"21652:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21693:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"21704:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21689:3:30"},"nodeType":"YulFunctionCall","src":"21689:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"21709:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21682:6:30"},"nodeType":"YulFunctionCall","src":"21682:30:30"},"nodeType":"YulExpressionStatement","src":"21682:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21732:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"21743:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21728:3:30"},"nodeType":"YulFunctionCall","src":"21728:18:30"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"21748:34:30","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21721:6:30"},"nodeType":"YulFunctionCall","src":"21721:62:30"},"nodeType":"YulExpressionStatement","src":"21721:62:30"},{"nodeType":"YulAssignment","src":"21792:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21804:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"21815:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21800:3:30"},"nodeType":"YulFunctionCall","src":"21800:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21792:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21619:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21633:4:30","type":""}],"src":"21468:356:30"},{"body":{"nodeType":"YulBlock","src":"22003:225:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22020:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"22031:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22013:6:30"},"nodeType":"YulFunctionCall","src":"22013:21:30"},"nodeType":"YulExpressionStatement","src":"22013:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22054:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"22065:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22050:3:30"},"nodeType":"YulFunctionCall","src":"22050:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"22070:2:30","type":"","value":"35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22043:6:30"},"nodeType":"YulFunctionCall","src":"22043:30:30"},"nodeType":"YulExpressionStatement","src":"22043:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22093:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"22104:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22089:3:30"},"nodeType":"YulFunctionCall","src":"22089:18:30"},{"hexValue":"455243313135353a206275726e2066726f6d20746865207a65726f2061646472","kind":"string","nodeType":"YulLiteral","src":"22109:34:30","type":"","value":"ERC1155: burn from the zero addr"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22082:6:30"},"nodeType":"YulFunctionCall","src":"22082:62:30"},"nodeType":"YulExpressionStatement","src":"22082:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22164:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"22175:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22160:3:30"},"nodeType":"YulFunctionCall","src":"22160:18:30"},{"hexValue":"657373","kind":"string","nodeType":"YulLiteral","src":"22180:5:30","type":"","value":"ess"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22153:6:30"},"nodeType":"YulFunctionCall","src":"22153:33:30"},"nodeType":"YulExpressionStatement","src":"22153:33:30"},{"nodeType":"YulAssignment","src":"22195:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22207:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"22218:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22203:3:30"},"nodeType":"YulFunctionCall","src":"22203:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22195:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_87fd4aee52f5758d127cd9704d5ffef70f36ed1e87eb99b6f40e37a25c79a76a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21980:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21994:4:30","type":""}],"src":"21829:399:30"},{"body":{"nodeType":"YulBlock","src":"22407:226:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22424:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"22435:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22417:6:30"},"nodeType":"YulFunctionCall","src":"22417:21:30"},"nodeType":"YulExpressionStatement","src":"22417:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22458:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"22469:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22454:3:30"},"nodeType":"YulFunctionCall","src":"22454:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"22474:2:30","type":"","value":"36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22447:6:30"},"nodeType":"YulFunctionCall","src":"22447:30:30"},"nodeType":"YulExpressionStatement","src":"22447:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22497:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"22508:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22493:3:30"},"nodeType":"YulFunctionCall","src":"22493:18:30"},{"hexValue":"455243313135353a206275726e20616d6f756e7420657863656564732062616c","kind":"string","nodeType":"YulLiteral","src":"22513:34:30","type":"","value":"ERC1155: burn amount exceeds bal"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22486:6:30"},"nodeType":"YulFunctionCall","src":"22486:62:30"},"nodeType":"YulExpressionStatement","src":"22486:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22568:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"22579:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22564:3:30"},"nodeType":"YulFunctionCall","src":"22564:18:30"},{"hexValue":"616e6365","kind":"string","nodeType":"YulLiteral","src":"22584:6:30","type":"","value":"ance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22557:6:30"},"nodeType":"YulFunctionCall","src":"22557:34:30"},"nodeType":"YulExpressionStatement","src":"22557:34:30"},{"nodeType":"YulAssignment","src":"22600:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22612:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"22623:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22608:3:30"},"nodeType":"YulFunctionCall","src":"22608:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22600:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_294a5de01910e2350ff231c633ae2d453ed6b1b72c75506234b7aace63eae685__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22384:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22398:4:30","type":""}],"src":"22233:400:30"},{"body":{"nodeType":"YulBlock","src":"22767:119:30","statements":[{"nodeType":"YulAssignment","src":"22777:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22789:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"22800:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22785:3:30"},"nodeType":"YulFunctionCall","src":"22785:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22777:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22819:9:30"},{"name":"value0","nodeType":"YulIdentifier","src":"22830:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22812:6:30"},"nodeType":"YulFunctionCall","src":"22812:25:30"},"nodeType":"YulExpressionStatement","src":"22812:25:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22857:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"22868:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22853:3:30"},"nodeType":"YulFunctionCall","src":"22853:18:30"},{"name":"value1","nodeType":"YulIdentifier","src":"22873:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22846:6:30"},"nodeType":"YulFunctionCall","src":"22846:34:30"},"nodeType":"YulExpressionStatement","src":"22846:34:30"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22728:9:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"22739:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"22747:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22758:4:30","type":""}],"src":"22638:248:30"},{"body":{"nodeType":"YulBlock","src":"22947:65:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22964:1:30","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"22967:3:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22957:6:30"},"nodeType":"YulFunctionCall","src":"22957:14:30"},"nodeType":"YulExpressionStatement","src":"22957:14:30"},{"nodeType":"YulAssignment","src":"22980:26:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22998:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"23001:4:30","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"22988:9:30"},"nodeType":"YulFunctionCall","src":"22988:18:30"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"22980:4:30"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"22930:3:30","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"22938:4:30","type":""}],"src":"22891:121:30"},{"body":{"nodeType":"YulBlock","src":"23098:464:30","statements":[{"body":{"nodeType":"YulBlock","src":"23131:425:30","statements":[{"nodeType":"YulVariableDeclaration","src":"23145:11:30","value":{"kind":"number","nodeType":"YulLiteral","src":"23155:1:30","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"23149:2:30","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"23176:2:30"},{"name":"array","nodeType":"YulIdentifier","src":"23180:5:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23169:6:30"},"nodeType":"YulFunctionCall","src":"23169:17:30"},"nodeType":"YulExpressionStatement","src":"23169:17:30"},{"nodeType":"YulVariableDeclaration","src":"23199:31:30","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"23221:2:30"},{"kind":"number","nodeType":"YulLiteral","src":"23225:4:30","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"23211:9:30"},"nodeType":"YulFunctionCall","src":"23211:19:30"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"23203:4:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"23243:57:30","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"23266:4:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23276:1:30","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"23283:10:30"},{"kind":"number","nodeType":"YulLiteral","src":"23295:2:30","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23279:3:30"},"nodeType":"YulFunctionCall","src":"23279:19:30"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"23272:3:30"},"nodeType":"YulFunctionCall","src":"23272:27:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23262:3:30"},"nodeType":"YulFunctionCall","src":"23262:38:30"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"23247:11:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"23337:23:30","statements":[{"nodeType":"YulAssignment","src":"23339:19:30","value":{"name":"data","nodeType":"YulIdentifier","src":"23354:4:30"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"23339:11:30"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"23319:10:30"},{"kind":"number","nodeType":"YulLiteral","src":"23331:4:30","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"23316:2:30"},"nodeType":"YulFunctionCall","src":"23316:20:30"},"nodeType":"YulIf","src":"23313:47:30"},{"nodeType":"YulVariableDeclaration","src":"23373:41:30","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"23387:4:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23397:1:30","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"23404:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"23409:2:30","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23400:3:30"},"nodeType":"YulFunctionCall","src":"23400:12:30"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"23393:3:30"},"nodeType":"YulFunctionCall","src":"23393:20:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23383:3:30"},"nodeType":"YulFunctionCall","src":"23383:31:30"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"23377:2:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"23427:24:30","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"23440:11:30"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"23431:5:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"23525:21:30","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"23534:5:30"},{"name":"_1","nodeType":"YulIdentifier","src":"23541:2:30"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"23527:6:30"},"nodeType":"YulFunctionCall","src":"23527:17:30"},"nodeType":"YulExpressionStatement","src":"23527:17:30"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"23475:5:30"},{"name":"_2","nodeType":"YulIdentifier","src":"23482:2:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"23472:2:30"},"nodeType":"YulFunctionCall","src":"23472:13:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"23486:26:30","statements":[{"nodeType":"YulAssignment","src":"23488:22:30","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"23501:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"23508:1:30","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23497:3:30"},"nodeType":"YulFunctionCall","src":"23497:13:30"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"23488:5:30"}]}]},"pre":{"nodeType":"YulBlock","src":"23468:3:30","statements":[]},"src":"23464:82:30"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"23114:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"23119:2:30","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"23111:2:30"},"nodeType":"YulFunctionCall","src":"23111:11:30"},"nodeType":"YulIf","src":"23108:448:30"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"23070:5:30","type":""},{"name":"len","nodeType":"YulTypedName","src":"23077:3:30","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"23082:10:30","type":""}],"src":"23017:545:30"},{"body":{"nodeType":"YulBlock","src":"23652:81:30","statements":[{"nodeType":"YulAssignment","src":"23662:65:30","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"23677:4:30"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23695:1:30","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"23698:3:30"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"23691:3:30"},"nodeType":"YulFunctionCall","src":"23691:11:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23708:1:30","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"23704:3:30"},"nodeType":"YulFunctionCall","src":"23704:6:30"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"23687:3:30"},"nodeType":"YulFunctionCall","src":"23687:24:30"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"23683:3:30"},"nodeType":"YulFunctionCall","src":"23683:29:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"23673:3:30"},"nodeType":"YulFunctionCall","src":"23673:40:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23719:1:30","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"23722:3:30"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"23715:3:30"},"nodeType":"YulFunctionCall","src":"23715:11:30"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"23670:2:30"},"nodeType":"YulFunctionCall","src":"23670:57:30"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"23662:4:30"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"23629:4:30","type":""},{"name":"len","nodeType":"YulTypedName","src":"23635:3:30","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"23643:4:30","type":""}],"src":"23567:166:30"},{"body":{"nodeType":"YulBlock","src":"23834:1256:30","statements":[{"nodeType":"YulVariableDeclaration","src":"23844:24:30","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"23864:3:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23858:5:30"},"nodeType":"YulFunctionCall","src":"23858:10:30"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"23848:6:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"23911:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"23913:16:30"},"nodeType":"YulFunctionCall","src":"23913:18:30"},"nodeType":"YulExpressionStatement","src":"23913:18:30"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"23883:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"23891:18:30","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"23880:2:30"},"nodeType":"YulFunctionCall","src":"23880:30:30"},"nodeType":"YulIf","src":"23877:56:30"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"23986:4:30"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"24024:4:30"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"24018:5:30"},"nodeType":"YulFunctionCall","src":"24018:11:30"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"23992:25:30"},"nodeType":"YulFunctionCall","src":"23992:38:30"},{"name":"newLen","nodeType":"YulIdentifier","src":"24032:6:30"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"23942:43:30"},"nodeType":"YulFunctionCall","src":"23942:97:30"},"nodeType":"YulExpressionStatement","src":"23942:97:30"},{"nodeType":"YulVariableDeclaration","src":"24048:18:30","value":{"kind":"number","nodeType":"YulLiteral","src":"24065:1:30","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"24052:9:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"24075:23:30","value":{"kind":"number","nodeType":"YulLiteral","src":"24094:4:30","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"24079:11:30","type":""}]},{"nodeType":"YulAssignment","src":"24107:24:30","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"24120:11:30"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"24107:9:30"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"24177:656:30","statements":[{"nodeType":"YulVariableDeclaration","src":"24191:35:30","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"24210:6:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24222:2:30","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"24218:3:30"},"nodeType":"YulFunctionCall","src":"24218:7:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"24206:3:30"},"nodeType":"YulFunctionCall","src":"24206:20:30"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"24195:7:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"24239:49:30","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"24283:4:30"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"24253:29:30"},"nodeType":"YulFunctionCall","src":"24253:35:30"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"24243:6:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"24301:10:30","value":{"kind":"number","nodeType":"YulLiteral","src":"24310:1:30","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"24305:1:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"24388:172:30","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"24413:6:30"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"24431:3:30"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"24436:9:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24427:3:30"},"nodeType":"YulFunctionCall","src":"24427:19:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"24421:5:30"},"nodeType":"YulFunctionCall","src":"24421:26:30"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"24406:6:30"},"nodeType":"YulFunctionCall","src":"24406:42:30"},"nodeType":"YulExpressionStatement","src":"24406:42:30"},{"nodeType":"YulAssignment","src":"24465:24:30","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"24479:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"24487:1:30","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24475:3:30"},"nodeType":"YulFunctionCall","src":"24475:14:30"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"24465:6:30"}]},{"nodeType":"YulAssignment","src":"24506:40:30","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"24523:9:30"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"24534:11:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24519:3:30"},"nodeType":"YulFunctionCall","src":"24519:27:30"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"24506:9:30"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"24335:1:30"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"24338:7:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"24332:2:30"},"nodeType":"YulFunctionCall","src":"24332:14:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"24347:28:30","statements":[{"nodeType":"YulAssignment","src":"24349:24:30","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"24358:1:30"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"24361:11:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24354:3:30"},"nodeType":"YulFunctionCall","src":"24354:19:30"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"24349:1:30"}]}]},"pre":{"nodeType":"YulBlock","src":"24328:3:30","statements":[]},"src":"24324:236:30"},{"body":{"nodeType":"YulBlock","src":"24608:166:30","statements":[{"nodeType":"YulVariableDeclaration","src":"24626:43:30","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"24653:3:30"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"24658:9:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24649:3:30"},"nodeType":"YulFunctionCall","src":"24649:19:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"24643:5:30"},"nodeType":"YulFunctionCall","src":"24643:26:30"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"24630:9:30","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"24693:6:30"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"24705:9:30"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24732:1:30","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"24735:6:30"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"24728:3:30"},"nodeType":"YulFunctionCall","src":"24728:14:30"},{"kind":"number","nodeType":"YulLiteral","src":"24744:3:30","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"24724:3:30"},"nodeType":"YulFunctionCall","src":"24724:24:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24754:1:30","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"24750:3:30"},"nodeType":"YulFunctionCall","src":"24750:6:30"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"24720:3:30"},"nodeType":"YulFunctionCall","src":"24720:37:30"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"24716:3:30"},"nodeType":"YulFunctionCall","src":"24716:42:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"24701:3:30"},"nodeType":"YulFunctionCall","src":"24701:58:30"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"24686:6:30"},"nodeType":"YulFunctionCall","src":"24686:74:30"},"nodeType":"YulExpressionStatement","src":"24686:74:30"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"24579:7:30"},{"name":"newLen","nodeType":"YulIdentifier","src":"24588:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"24576:2:30"},"nodeType":"YulFunctionCall","src":"24576:19:30"},"nodeType":"YulIf","src":"24573:201:30"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"24794:4:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24808:1:30","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"24811:6:30"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"24804:3:30"},"nodeType":"YulFunctionCall","src":"24804:14:30"},{"kind":"number","nodeType":"YulLiteral","src":"24820:1:30","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24800:3:30"},"nodeType":"YulFunctionCall","src":"24800:22:30"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"24787:6:30"},"nodeType":"YulFunctionCall","src":"24787:36:30"},"nodeType":"YulExpressionStatement","src":"24787:36:30"}]},"nodeType":"YulCase","src":"24170:663:30","value":{"kind":"number","nodeType":"YulLiteral","src":"24175:1:30","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"24850:234:30","statements":[{"nodeType":"YulVariableDeclaration","src":"24864:14:30","value":{"kind":"number","nodeType":"YulLiteral","src":"24877:1:30","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"24868:5:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"24913:67:30","statements":[{"nodeType":"YulAssignment","src":"24931:35:30","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"24950:3:30"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"24955:9:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24946:3:30"},"nodeType":"YulFunctionCall","src":"24946:19:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"24940:5:30"},"nodeType":"YulFunctionCall","src":"24940:26:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"24931:5:30"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"24894:6:30"},"nodeType":"YulIf","src":"24891:89:30"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"25000:4:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25059:5:30"},{"name":"newLen","nodeType":"YulIdentifier","src":"25066:6:30"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"25006:52:30"},"nodeType":"YulFunctionCall","src":"25006:67:30"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"24993:6:30"},"nodeType":"YulFunctionCall","src":"24993:81:30"},"nodeType":"YulExpressionStatement","src":"24993:81:30"}]},"nodeType":"YulCase","src":"24842:242:30","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"24150:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"24158:2:30","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"24147:2:30"},"nodeType":"YulFunctionCall","src":"24147:14:30"},"nodeType":"YulSwitch","src":"24140:944:30"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"23819:4:30","type":""},{"name":"src","nodeType":"YulTypedName","src":"23825:3:30","type":""}],"src":"23738:1352:30"},{"body":{"nodeType":"YulBlock","src":"25269:231:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25286:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"25297:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25279:6:30"},"nodeType":"YulFunctionCall","src":"25279:21:30"},"nodeType":"YulExpressionStatement","src":"25279:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25320:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"25331:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25316:3:30"},"nodeType":"YulFunctionCall","src":"25316:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"25336:2:30","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25309:6:30"},"nodeType":"YulFunctionCall","src":"25309:30:30"},"nodeType":"YulExpressionStatement","src":"25309:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25359:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"25370:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25355:3:30"},"nodeType":"YulFunctionCall","src":"25355:18:30"},{"hexValue":"455243313135353a2073657474696e6720617070726f76616c20737461747573","kind":"string","nodeType":"YulLiteral","src":"25375:34:30","type":"","value":"ERC1155: setting approval status"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25348:6:30"},"nodeType":"YulFunctionCall","src":"25348:62:30"},"nodeType":"YulExpressionStatement","src":"25348:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25430:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"25441:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25426:3:30"},"nodeType":"YulFunctionCall","src":"25426:18:30"},{"hexValue":"20666f722073656c66","kind":"string","nodeType":"YulLiteral","src":"25446:11:30","type":"","value":" for self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25419:6:30"},"nodeType":"YulFunctionCall","src":"25419:39:30"},"nodeType":"YulExpressionStatement","src":"25419:39:30"},{"nodeType":"YulAssignment","src":"25467:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25479:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"25490:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25475:3:30"},"nodeType":"YulFunctionCall","src":"25475:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25467:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25246:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25260:4:30","type":""}],"src":"25095:405:30"},{"body":{"nodeType":"YulBlock","src":"25679:175:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25696:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"25707:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25689:6:30"},"nodeType":"YulFunctionCall","src":"25689:21:30"},"nodeType":"YulExpressionStatement","src":"25689:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25730:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"25741:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25726:3:30"},"nodeType":"YulFunctionCall","src":"25726:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"25746:2:30","type":"","value":"25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25719:6:30"},"nodeType":"YulFunctionCall","src":"25719:30:30"},"nodeType":"YulExpressionStatement","src":"25719:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25769:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"25780:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25765:3:30"},"nodeType":"YulFunctionCall","src":"25765:18:30"},{"hexValue":"4a61736d696e654541543a2066726f7a656e20736572696573","kind":"string","nodeType":"YulLiteral","src":"25785:27:30","type":"","value":"JasmineEAT: frozen series"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25758:6:30"},"nodeType":"YulFunctionCall","src":"25758:55:30"},"nodeType":"YulExpressionStatement","src":"25758:55:30"},{"nodeType":"YulAssignment","src":"25822:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25834:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"25845:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25830:3:30"},"nodeType":"YulFunctionCall","src":"25830:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25822:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_58d3bf342e3a24adcc42cd2019e9893394d2d62bfa52bd8547533b9422e1827b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25656:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25670:4:30","type":""}],"src":"25505:349:30"},{"body":{"nodeType":"YulBlock","src":"26190:519:30","statements":[{"nodeType":"YulVariableDeclaration","src":"26200:52:30","value":{"kind":"number","nodeType":"YulLiteral","src":"26210:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"26204:2:30","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26268:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"26283:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"26291:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"26279:3:30"},"nodeType":"YulFunctionCall","src":"26279:15:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26261:6:30"},"nodeType":"YulFunctionCall","src":"26261:34:30"},"nodeType":"YulExpressionStatement","src":"26261:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26315:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"26326:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26311:3:30"},"nodeType":"YulFunctionCall","src":"26311:18:30"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"26335:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"26343:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"26331:3:30"},"nodeType":"YulFunctionCall","src":"26331:15:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26304:6:30"},"nodeType":"YulFunctionCall","src":"26304:43:30"},"nodeType":"YulExpressionStatement","src":"26304:43:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26367:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"26378:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26363:3:30"},"nodeType":"YulFunctionCall","src":"26363:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"26383:3:30","type":"","value":"160"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26356:6:30"},"nodeType":"YulFunctionCall","src":"26356:31:30"},"nodeType":"YulExpressionStatement","src":"26356:31:30"},{"nodeType":"YulVariableDeclaration","src":"26396:71:30","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"26439:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26451:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"26462:3:30","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26447:3:30"},"nodeType":"YulFunctionCall","src":"26447:19:30"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"26410:28:30"},"nodeType":"YulFunctionCall","src":"26410:57:30"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"26400:6:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26487:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"26498:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26483:3:30"},"nodeType":"YulFunctionCall","src":"26483:18:30"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"26507:6:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"26515:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"26503:3:30"},"nodeType":"YulFunctionCall","src":"26503:22:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26476:6:30"},"nodeType":"YulFunctionCall","src":"26476:50:30"},"nodeType":"YulExpressionStatement","src":"26476:50:30"},{"nodeType":"YulVariableDeclaration","src":"26535:58:30","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"26578:6:30"},{"name":"tail_1","nodeType":"YulIdentifier","src":"26586:6:30"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"26549:28:30"},"nodeType":"YulFunctionCall","src":"26549:44:30"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"26539:6:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26613:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"26624:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26609:3:30"},"nodeType":"YulFunctionCall","src":"26609:19:30"},{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"26634:6:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"26642:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"26630:3:30"},"nodeType":"YulFunctionCall","src":"26630:22:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26602:6:30"},"nodeType":"YulFunctionCall","src":"26602:51:30"},"nodeType":"YulExpressionStatement","src":"26602:51:30"},{"nodeType":"YulAssignment","src":"26662:41:30","value":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"26688:6:30"},{"name":"tail_2","nodeType":"YulIdentifier","src":"26696:6:30"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"26670:17:30"},"nodeType":"YulFunctionCall","src":"26670:33:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26662:4:30"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26127:9:30","type":""},{"name":"value4","nodeType":"YulTypedName","src":"26138:6:30","type":""},{"name":"value3","nodeType":"YulTypedName","src":"26146:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"26154:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"26162:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"26170:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26181:4:30","type":""}],"src":"25859:850:30"},{"body":{"nodeType":"YulBlock","src":"26794:169:30","statements":[{"body":{"nodeType":"YulBlock","src":"26840:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"26849:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"26852:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"26842:6:30"},"nodeType":"YulFunctionCall","src":"26842:12:30"},"nodeType":"YulExpressionStatement","src":"26842:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"26815:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"26824:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"26811:3:30"},"nodeType":"YulFunctionCall","src":"26811:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"26836:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"26807:3:30"},"nodeType":"YulFunctionCall","src":"26807:32:30"},"nodeType":"YulIf","src":"26804:52:30"},{"nodeType":"YulVariableDeclaration","src":"26865:29:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26884:9:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"26878:5:30"},"nodeType":"YulFunctionCall","src":"26878:16:30"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"26869:5:30","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26927:5:30"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"26903:23:30"},"nodeType":"YulFunctionCall","src":"26903:30:30"},"nodeType":"YulExpressionStatement","src":"26903:30:30"},{"nodeType":"YulAssignment","src":"26942:15:30","value":{"name":"value","nodeType":"YulIdentifier","src":"26952:5:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"26942:6:30"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26760:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"26771:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"26783:6:30","type":""}],"src":"26714:249:30"},{"body":{"nodeType":"YulBlock","src":"27011:136:30","statements":[{"body":{"nodeType":"YulBlock","src":"27056:85:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27085:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"27088:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"27091:1:30","type":"","value":"4"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"27070:14:30"},"nodeType":"YulFunctionCall","src":"27070:23:30"},"nodeType":"YulExpressionStatement","src":"27070:23:30"},{"nodeType":"YulAssignment","src":"27106:25:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27117:3:30","type":"","value":"224"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27128:1:30","type":"","value":"0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"27122:5:30"},"nodeType":"YulFunctionCall","src":"27122:8:30"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"27113:3:30"},"nodeType":"YulFunctionCall","src":"27113:18:30"},"variableNames":[{"name":"sig","nodeType":"YulIdentifier","src":"27106:3:30"}]}]},"condition":{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"27027:14:30"},"nodeType":"YulFunctionCall","src":"27027:16:30"},{"kind":"number","nodeType":"YulLiteral","src":"27045:1:30","type":"","value":"3"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"27024:2:30"},"nodeType":"YulFunctionCall","src":"27024:23:30"},"nodeType":"YulIf","src":"27021:120:30"}]},"name":"return_data_selector","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"sig","nodeType":"YulTypedName","src":"27003:3:30","type":""}],"src":"26968:179:30"},{"body":{"nodeType":"YulBlock","src":"27199:624:30","statements":[{"body":{"nodeType":"YulBlock","src":"27239:9:30","statements":[{"nodeType":"YulLeave","src":"27241:5:30"}]},"condition":{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"27215:14:30"},"nodeType":"YulFunctionCall","src":"27215:16:30"},{"kind":"number","nodeType":"YulLiteral","src":"27233:4:30","type":"","value":"0x44"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"27212:2:30"},"nodeType":"YulFunctionCall","src":"27212:26:30"},"nodeType":"YulIf","src":"27209:39:30"},{"nodeType":"YulVariableDeclaration","src":"27257:21:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27275:2:30","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"27269:5:30"},"nodeType":"YulFunctionCall","src":"27269:9:30"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"27261:4:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"27287:16:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27301:1:30","type":"","value":"3"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"27297:3:30"},"nodeType":"YulFunctionCall","src":"27297:6:30"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"27291:2:30","type":""}]},{"expression":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"27327:4:30"},{"kind":"number","nodeType":"YulLiteral","src":"27333:1:30","type":"","value":"4"},{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"27340:14:30"},"nodeType":"YulFunctionCall","src":"27340:16:30"},{"name":"_1","nodeType":"YulIdentifier","src":"27358:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27336:3:30"},"nodeType":"YulFunctionCall","src":"27336:25:30"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"27312:14:30"},"nodeType":"YulFunctionCall","src":"27312:50:30"},"nodeType":"YulExpressionStatement","src":"27312:50:30"},{"nodeType":"YulVariableDeclaration","src":"27371:25:30","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"27391:4:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"27385:5:30"},"nodeType":"YulFunctionCall","src":"27385:11:30"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"27375:6:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"27405:26:30","value":{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"27415:14:30"},"nodeType":"YulFunctionCall","src":"27415:16:30"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"27409:2:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"27440:28:30","value":{"kind":"number","nodeType":"YulLiteral","src":"27450:18:30","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"27444:2:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"27526:9:30","statements":[{"nodeType":"YulLeave","src":"27528:5:30"}]},"condition":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"27486:6:30"},{"name":"_3","nodeType":"YulIdentifier","src":"27494:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"27483:2:30"},"nodeType":"YulFunctionCall","src":"27483:14:30"},{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"27506:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"27514:4:30","type":"","value":"0x24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27502:3:30"},"nodeType":"YulFunctionCall","src":"27502:17:30"},{"name":"_2","nodeType":"YulIdentifier","src":"27521:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"27499:2:30"},"nodeType":"YulFunctionCall","src":"27499:25:30"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"27480:2:30"},"nodeType":"YulFunctionCall","src":"27480:45:30"},"nodeType":"YulIf","src":"27477:58:30"},{"nodeType":"YulVariableDeclaration","src":"27544:28:30","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"27559:4:30"},{"name":"offset","nodeType":"YulIdentifier","src":"27565:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27555:3:30"},"nodeType":"YulFunctionCall","src":"27555:17:30"},"variables":[{"name":"msg","nodeType":"YulTypedName","src":"27548:3:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"27581:24:30","value":{"arguments":[{"name":"msg","nodeType":"YulIdentifier","src":"27601:3:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"27595:5:30"},"nodeType":"YulFunctionCall","src":"27595:10:30"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"27585:6:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"27632:9:30","statements":[{"nodeType":"YulLeave","src":"27634:5:30"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"27620:6:30"},{"name":"_3","nodeType":"YulIdentifier","src":"27628:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"27617:2:30"},"nodeType":"YulFunctionCall","src":"27617:14:30"},"nodeType":"YulIf","src":"27614:27:30"},{"body":{"nodeType":"YulBlock","src":"27723:9:30","statements":[{"nodeType":"YulLeave","src":"27725:5:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"msg","nodeType":"YulIdentifier","src":"27664:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"27669:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27660:3:30"},"nodeType":"YulFunctionCall","src":"27660:16:30"},{"kind":"number","nodeType":"YulLiteral","src":"27678:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27656:3:30"},"nodeType":"YulFunctionCall","src":"27656:27:30"},{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"27693:4:30"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"27699:14:30"},"nodeType":"YulFunctionCall","src":"27699:16:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27689:3:30"},"nodeType":"YulFunctionCall","src":"27689:27:30"},{"name":"_1","nodeType":"YulIdentifier","src":"27718:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27685:3:30"},"nodeType":"YulFunctionCall","src":"27685:36:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"27653:2:30"},"nodeType":"YulFunctionCall","src":"27653:69:30"},"nodeType":"YulIf","src":"27650:82:30"},{"expression":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"27761:4:30"},{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"27775:6:30"},{"name":"length","nodeType":"YulIdentifier","src":"27783:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27771:3:30"},"nodeType":"YulFunctionCall","src":"27771:19:30"},{"kind":"number","nodeType":"YulLiteral","src":"27792:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27767:3:30"},"nodeType":"YulFunctionCall","src":"27767:30:30"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"27741:19:30"},"nodeType":"YulFunctionCall","src":"27741:57:30"},"nodeType":"YulExpressionStatement","src":"27741:57:30"},{"nodeType":"YulAssignment","src":"27807:10:30","value":{"name":"msg","nodeType":"YulIdentifier","src":"27814:3:30"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"27807:3:30"}]}]},"name":"try_decode_error_message","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"27191:3:30","type":""}],"src":"27152:671:30"},{"body":{"nodeType":"YulBlock","src":"28002:242:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28019:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"28030:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28012:6:30"},"nodeType":"YulFunctionCall","src":"28012:21:30"},"nodeType":"YulExpressionStatement","src":"28012:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28053:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"28064:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28049:3:30"},"nodeType":"YulFunctionCall","src":"28049:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"28069:2:30","type":"","value":"52"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28042:6:30"},"nodeType":"YulFunctionCall","src":"28042:30:30"},"nodeType":"YulExpressionStatement","src":"28042:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28092:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"28103:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28088:3:30"},"nodeType":"YulFunctionCall","src":"28088:18:30"},{"hexValue":"455243313135353a207472616e7366657220746f206e6f6e2d45524331313535","kind":"string","nodeType":"YulLiteral","src":"28108:34:30","type":"","value":"ERC1155: transfer to non-ERC1155"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28081:6:30"},"nodeType":"YulFunctionCall","src":"28081:62:30"},"nodeType":"YulExpressionStatement","src":"28081:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28163:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"28174:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28159:3:30"},"nodeType":"YulFunctionCall","src":"28159:18:30"},{"hexValue":"526563656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"28179:22:30","type":"","value":"Receiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28152:6:30"},"nodeType":"YulFunctionCall","src":"28152:50:30"},"nodeType":"YulExpressionStatement","src":"28152:50:30"},{"nodeType":"YulAssignment","src":"28211:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28223:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"28234:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28219:3:30"},"nodeType":"YulFunctionCall","src":"28219:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28211:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27979:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27993:4:30","type":""}],"src":"27828:416:30"},{"body":{"nodeType":"YulBlock","src":"28423:230:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28440:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"28451:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28433:6:30"},"nodeType":"YulFunctionCall","src":"28433:21:30"},"nodeType":"YulExpressionStatement","src":"28433:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28474:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"28485:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28470:3:30"},"nodeType":"YulFunctionCall","src":"28470:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"28490:2:30","type":"","value":"40"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28463:6:30"},"nodeType":"YulFunctionCall","src":"28463:30:30"},"nodeType":"YulExpressionStatement","src":"28463:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28513:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"28524:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28509:3:30"},"nodeType":"YulFunctionCall","src":"28509:18:30"},{"hexValue":"455243313135353a204552433131353552656365697665722072656a65637465","kind":"string","nodeType":"YulLiteral","src":"28529:34:30","type":"","value":"ERC1155: ERC1155Receiver rejecte"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28502:6:30"},"nodeType":"YulFunctionCall","src":"28502:62:30"},"nodeType":"YulExpressionStatement","src":"28502:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28584:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"28595:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28580:3:30"},"nodeType":"YulFunctionCall","src":"28580:18:30"},{"hexValue":"6420746f6b656e73","kind":"string","nodeType":"YulLiteral","src":"28600:10:30","type":"","value":"d tokens"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28573:6:30"},"nodeType":"YulFunctionCall","src":"28573:38:30"},"nodeType":"YulExpressionStatement","src":"28573:38:30"},{"nodeType":"YulAssignment","src":"28620:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28632:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"28643:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28628:3:30"},"nodeType":"YulFunctionCall","src":"28628:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28620:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"28400:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"28414:4:30","type":""}],"src":"28249:404:30"},{"body":{"nodeType":"YulBlock","src":"28832:235:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28849:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"28860:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28842:6:30"},"nodeType":"YulFunctionCall","src":"28842:21:30"},"nodeType":"YulExpressionStatement","src":"28842:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28883:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"28894:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28879:3:30"},"nodeType":"YulFunctionCall","src":"28879:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"28899:2:30","type":"","value":"45"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28872:6:30"},"nodeType":"YulFunctionCall","src":"28872:30:30"},"nodeType":"YulExpressionStatement","src":"28872:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28922:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"28933:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28918:3:30"},"nodeType":"YulFunctionCall","src":"28918:18:30"},{"hexValue":"455243313936373a206e657720696d706c656d656e746174696f6e206973206e","kind":"string","nodeType":"YulLiteral","src":"28938:34:30","type":"","value":"ERC1967: new implementation is n"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28911:6:30"},"nodeType":"YulFunctionCall","src":"28911:62:30"},"nodeType":"YulExpressionStatement","src":"28911:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28993:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"29004:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28989:3:30"},"nodeType":"YulFunctionCall","src":"28989:18:30"},{"hexValue":"6f74206120636f6e7472616374","kind":"string","nodeType":"YulLiteral","src":"29009:15:30","type":"","value":"ot a contract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28982:6:30"},"nodeType":"YulFunctionCall","src":"28982:43:30"},"nodeType":"YulExpressionStatement","src":"28982:43:30"},{"nodeType":"YulAssignment","src":"29034:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29046:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"29057:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29042:3:30"},"nodeType":"YulFunctionCall","src":"29042:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29034:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"28809:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"28823:4:30","type":""}],"src":"28658:409:30"},{"body":{"nodeType":"YulBlock","src":"29303:353:30","statements":[{"nodeType":"YulVariableDeclaration","src":"29313:52:30","value":{"kind":"number","nodeType":"YulLiteral","src":"29323:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"29317:2:30","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29381:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"29396:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"29404:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"29392:3:30"},"nodeType":"YulFunctionCall","src":"29392:15:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29374:6:30"},"nodeType":"YulFunctionCall","src":"29374:34:30"},"nodeType":"YulExpressionStatement","src":"29374:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29428:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"29439:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29424:3:30"},"nodeType":"YulFunctionCall","src":"29424:18:30"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"29448:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"29456:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"29444:3:30"},"nodeType":"YulFunctionCall","src":"29444:15:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29417:6:30"},"nodeType":"YulFunctionCall","src":"29417:43:30"},"nodeType":"YulExpressionStatement","src":"29417:43:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29480:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"29491:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29476:3:30"},"nodeType":"YulFunctionCall","src":"29476:18:30"},{"name":"value2","nodeType":"YulIdentifier","src":"29496:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29469:6:30"},"nodeType":"YulFunctionCall","src":"29469:34:30"},"nodeType":"YulExpressionStatement","src":"29469:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29523:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"29534:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29519:3:30"},"nodeType":"YulFunctionCall","src":"29519:18:30"},{"name":"value3","nodeType":"YulIdentifier","src":"29539:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29512:6:30"},"nodeType":"YulFunctionCall","src":"29512:34:30"},"nodeType":"YulExpressionStatement","src":"29512:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29566:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"29577:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29562:3:30"},"nodeType":"YulFunctionCall","src":"29562:19:30"},{"kind":"number","nodeType":"YulLiteral","src":"29583:3:30","type":"","value":"160"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29555:6:30"},"nodeType":"YulFunctionCall","src":"29555:32:30"},"nodeType":"YulExpressionStatement","src":"29555:32:30"},{"nodeType":"YulAssignment","src":"29596:54:30","value":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"29622:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29634:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"29645:3:30","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29630:3:30"},"nodeType":"YulFunctionCall","src":"29630:19:30"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"29604:17:30"},"nodeType":"YulFunctionCall","src":"29604:46:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29596:4:30"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"29240:9:30","type":""},{"name":"value4","nodeType":"YulTypedName","src":"29251:6:30","type":""},{"name":"value3","nodeType":"YulTypedName","src":"29259:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"29267:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"29275:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"29283:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"29294:4:30","type":""}],"src":"29072:584:30"},{"body":{"nodeType":"YulBlock","src":"29835:230:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29852:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"29863:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29845:6:30"},"nodeType":"YulFunctionCall","src":"29845:21:30"},"nodeType":"YulExpressionStatement","src":"29845:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29886:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"29897:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29882:3:30"},"nodeType":"YulFunctionCall","src":"29882:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"29902:2:30","type":"","value":"40"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29875:6:30"},"nodeType":"YulFunctionCall","src":"29875:30:30"},"nodeType":"YulExpressionStatement","src":"29875:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29925:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"29936:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29921:3:30"},"nodeType":"YulFunctionCall","src":"29921:18:30"},{"hexValue":"455243313135353a206275726e20616d6f756e74206578636565647320746f74","kind":"string","nodeType":"YulLiteral","src":"29941:34:30","type":"","value":"ERC1155: burn amount exceeds tot"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29914:6:30"},"nodeType":"YulFunctionCall","src":"29914:62:30"},"nodeType":"YulExpressionStatement","src":"29914:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29996:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"30007:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29992:3:30"},"nodeType":"YulFunctionCall","src":"29992:18:30"},{"hexValue":"616c537570706c79","kind":"string","nodeType":"YulLiteral","src":"30012:10:30","type":"","value":"alSupply"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29985:6:30"},"nodeType":"YulFunctionCall","src":"29985:38:30"},"nodeType":"YulExpressionStatement","src":"29985:38:30"},{"nodeType":"YulAssignment","src":"30032:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30044:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"30055:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30040:3:30"},"nodeType":"YulFunctionCall","src":"30040:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30032:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_9eb0869d69143813ac9f244871191d8f2e530e71a4599ba9db4501f0f6110ee4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"29812:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"29826:4:30","type":""}],"src":"29661:404:30"},{"body":{"nodeType":"YulBlock","src":"30244:228:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30261:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"30272:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30254:6:30"},"nodeType":"YulFunctionCall","src":"30254:21:30"},"nodeType":"YulExpressionStatement","src":"30254:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30295:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"30306:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30291:3:30"},"nodeType":"YulFunctionCall","src":"30291:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"30311:2:30","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30284:6:30"},"nodeType":"YulFunctionCall","src":"30284:30:30"},"nodeType":"YulExpressionStatement","src":"30284:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30334:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"30345:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30330:3:30"},"nodeType":"YulFunctionCall","src":"30330:18:30"},{"hexValue":"416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f","kind":"string","nodeType":"YulLiteral","src":"30350:34:30","type":"","value":"Address: delegate call to non-co"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30323:6:30"},"nodeType":"YulFunctionCall","src":"30323:62:30"},"nodeType":"YulExpressionStatement","src":"30323:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30405:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"30416:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30401:3:30"},"nodeType":"YulFunctionCall","src":"30401:18:30"},{"hexValue":"6e7472616374","kind":"string","nodeType":"YulLiteral","src":"30421:8:30","type":"","value":"ntract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30394:6:30"},"nodeType":"YulFunctionCall","src":"30394:36:30"},"nodeType":"YulExpressionStatement","src":"30394:36:30"},{"nodeType":"YulAssignment","src":"30439:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30451:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"30462:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30447:3:30"},"nodeType":"YulFunctionCall","src":"30447:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30439:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"30221:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"30235:4:30","type":""}],"src":"30070:402:30"},{"body":{"nodeType":"YulBlock","src":"30614:150:30","statements":[{"nodeType":"YulVariableDeclaration","src":"30624:27:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"30644:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"30638:5:30"},"nodeType":"YulFunctionCall","src":"30638:13:30"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"30628:6:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"30699:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"30707:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30695:3:30"},"nodeType":"YulFunctionCall","src":"30695:17:30"},{"name":"pos","nodeType":"YulIdentifier","src":"30714:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"30719:6:30"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"30660:34:30"},"nodeType":"YulFunctionCall","src":"30660:66:30"},"nodeType":"YulExpressionStatement","src":"30660:66:30"},{"nodeType":"YulAssignment","src":"30735:23:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30746:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"30751:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30742:3:30"},"nodeType":"YulFunctionCall","src":"30742:16:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"30735:3:30"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"30590:3:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"30595:6:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"30606:3:30","type":""}],"src":"30477:287:30"}]},"contents":"{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function finalize_allocation(memPtr, size)\n    {\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_array_uint256_dyn(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(shl(5, length), 0x20)\n    }\n    function abi_decode_array_uint256_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let _3 := array_allocation_size_array_uint256_dyn(_1)\n        let memPtr := mload(64)\n        finalize_allocation(memPtr, _3)\n        let dst := memPtr\n        mstore(memPtr, _1)\n        dst := add(memPtr, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _2)\n        }\n        array := memPtr\n    }\n    function abi_decode_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        if gt(_1, 0xffffffffffffffff) { panic_error_0x41() }\n        let memPtr := mload(64)\n        finalize_allocation(memPtr, add(and(add(_1, 0x1f), not(31)), 0x20))\n        mstore(memPtr, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(memPtr, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(memPtr, _1), 0x20), 0)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value1 := abi_decode_array_uint256_dyn(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 64))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value2 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n        let offset_2 := calldataload(add(headStart, 96))\n        if gt(offset_2, _1) { revert(0, 0) }\n        value3 := abi_decode_bytes(add(headStart, offset_2), dataEnd)\n    }\n    function abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value2 := abi_decode_array_uint256_dyn(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value3 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n        let offset_2 := calldataload(add(headStart, 128))\n        if gt(offset_2, _1) { revert(0, 0) }\n        value4 := abi_decode_bytes(add(headStart, offset_2), dataEnd)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_addresst_address(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value0 := abi_decode_bytes(add(headStart, offset), dataEnd)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := abi_decode_address(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        let _4 := 0x20\n        let _5 := array_allocation_size_array_uint256_dyn(_3)\n        let memPtr := mload(64)\n        finalize_allocation(memPtr, _5)\n        let dst := memPtr\n        mstore(memPtr, _3)\n        dst := add(memPtr, _4)\n        let srcEnd := add(add(_2, shl(5, _3)), _4)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_2, _4)\n        for { } lt(src, srcEnd) { src := add(src, _4) }\n        {\n            mstore(dst, abi_decode_address(src))\n            dst := add(dst, _4)\n        }\n        value0 := memPtr\n        let offset_1 := calldataload(add(headStart, _4))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n    }\n    function abi_encode_array_uint256_dyn(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let _1 := 0x20\n        pos := add(pos, _1)\n        let srcPtr := add(value, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_array_uint256_dyn(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_bytes_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value1 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value1 := abi_decode_array_uint256_dyn(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 64))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value2 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n    }\n    function abi_decode_tuple_t_addresst_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_addresst_uint256t_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value3 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_string_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value0 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let offset := calldataload(add(headStart, 128))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value4 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"ERC1155: address zero is not a v\")\n        mstore(add(headStart, 96), \"alid owner\")\n        tail := add(headStart, 128)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"ERC1155: caller is not token own\")\n        mstore(add(headStart, 96), \"er or approved\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"Function must be called through \")\n        mstore(add(headStart, 96), \"delegatecall\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"Function must be called through \")\n        mstore(add(headStart, 96), \"active proxy\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_encode_tuple_t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1155: accounts and ids length\")\n        mstore(add(headStart, 96), \" mismatch\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 56)\n        mstore(add(headStart, 64), \"UUPSUpgradeable: must not be cal\")\n        mstore(add(headStart, 96), \"led through delegatecall\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_81503871d1586f0b01077b4a94a5a619c714a55f197757f1647f429e1ea6170d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"JasmineEAT: series not frozen\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_225559eb8402045bea7ff07c35d0ad8c0547830223ac1c21d44fb948d6896ebc__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"Ownable2Step: caller is not the \")\n        mstore(add(headStart, 96), \"new owner\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c9f6e1d4764a43e1875de37d341057c450497e88370e2f61aa9c76de108b9daf__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"JasmineEAT: new URI cannot be em\")\n        mstore(add(headStart, 96), \"pty.\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3309865acede588af16caec4e420328ad7b719a526e615ac76b33915e726cc2f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"JasmineEAT: caller is not the mi\")\n        mstore(add(headStart, 96), \"nter\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC1155: mint to the zero addres\")\n        mstore(add(headStart, 96), \"s\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"ERC1155: ids and amounts length \")\n        mstore(add(headStart, 96), \"mismatch\")\n        tail := add(headStart, 128)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let tail_1 := abi_encode_array_uint256_dyn(value0, add(headStart, 64))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        tail := abi_encode_array_uint256_dyn(value1, tail_1)\n    }\n    function abi_encode_tuple_t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC1155: transfer to the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"ERC1155: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r transfer\")\n        tail := add(headStart, 128)\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"ERC1967Upgrade: new implementati\")\n        mstore(add(headStart, 96), \"on is not UUPS\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1967Upgrade: unsupported prox\")\n        mstore(add(headStart, 96), \"iableUUID\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"Initializable: contract is not i\")\n        mstore(add(headStart, 96), \"nitializing\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_87fd4aee52f5758d127cd9704d5ffef70f36ed1e87eb99b6f40e37a25c79a76a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC1155: burn from the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_294a5de01910e2350ff231c633ae2d453ed6b1b72c75506234b7aace63eae685__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC1155: burn amount exceeds bal\")\n        mstore(add(headStart, 96), \"ance\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1155: setting approval status\")\n        mstore(add(headStart, 96), \" for self\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_58d3bf342e3a24adcc42cd2019e9893394d2d62bfa52bd8547533b9422e1827b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"JasmineEAT: frozen series\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), 160)\n        let tail_1 := abi_encode_array_uint256_dyn(value2, add(headStart, 160))\n        mstore(add(headStart, 96), sub(tail_1, headStart))\n        let tail_2 := abi_encode_array_uint256_dyn(value3, tail_1)\n        mstore(add(headStart, 128), sub(tail_2, headStart))\n        tail := abi_encode_string(value4, tail_2)\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function return_data_selector() -> sig\n    {\n        if gt(returndatasize(), 3)\n        {\n            returndatacopy(0, 0, 4)\n            sig := shr(224, mload(0))\n        }\n    }\n    function try_decode_error_message() -> ret\n    {\n        if lt(returndatasize(), 0x44) { leave }\n        let data := mload(64)\n        let _1 := not(3)\n        returndatacopy(data, 4, add(returndatasize(), _1))\n        let offset := mload(data)\n        let _2 := returndatasize()\n        let _3 := 0xffffffffffffffff\n        if or(gt(offset, _3), gt(add(offset, 0x24), _2)) { leave }\n        let msg := add(data, offset)\n        let length := mload(msg)\n        if gt(length, _3) { leave }\n        if gt(add(add(msg, length), 0x20), add(add(data, returndatasize()), _1)) { leave }\n        finalize_allocation(data, add(add(offset, length), 0x20))\n        ret := msg\n    }\n    function abi_encode_tuple_t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 52)\n        mstore(add(headStart, 64), \"ERC1155: transfer to non-ERC1155\")\n        mstore(add(headStart, 96), \"Receiver implementer\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"ERC1155: ERC1155Receiver rejecte\")\n        mstore(add(headStart, 96), \"d tokens\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 45)\n        mstore(add(headStart, 64), \"ERC1967: new implementation is n\")\n        mstore(add(headStart, 96), \"ot a contract\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), 160)\n        tail := abi_encode_string(value4, add(headStart, 160))\n    }\n    function abi_encode_tuple_t_stringliteral_9eb0869d69143813ac9f244871191d8f2e530e71a4599ba9db4501f0f6110ee4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"ERC1155: burn amount exceeds tot\")\n        mstore(add(headStart, 96), \"alSupply\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: delegate call to non-co\")\n        mstore(add(headStart, 96), \"ntract\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n}","id":30,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"826":[{"length":32,"start":2092},{"length":32,"start":2156},{"length":32,"start":2507},{"length":32,"start":2571},{"length":32,"start":3161},{"length":32,"start":3225},{"length":32,"start":3372}]},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1D7 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x731133E9 GT PUSH2 0x102 JUMPI DUP1 PUSH4 0xE30C3978 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xF242432A GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xF242432A EQ PUSH2 0x5BB JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x5DB JUMPI DUP1 PUSH4 0xF5298ACA EQ PUSH2 0x5FB JUMPI DUP1 PUSH4 0xFCA3B5AA EQ PUSH2 0x61B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xE30C3978 EQ PUSH2 0x502 JUMPI DUP1 PUSH4 0xE77CFAAE EQ PUSH2 0x520 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x540 JUMPI DUP1 PUSH4 0xE9AC0440 EQ PUSH2 0x58A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x98CD6153 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x98CD6153 EQ PUSH2 0x474 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x494 JUMPI DUP1 PUSH4 0xBD85B039 EQ PUSH2 0x4B4 JUMPI DUP1 PUSH4 0xD7A78DB8 EQ PUSH2 0x4E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x731133E9 EQ PUSH2 0x401 JUMPI DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x421 JUMPI DUP1 PUSH4 0x7C8A8970 EQ PUSH2 0x436 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x456 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x463FD1AF GT PUSH2 0x17A JUMPI DUP1 PUSH4 0x52D1902D GT PUSH2 0x149 JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0x397 JUMPI DUP1 PUSH4 0x6B20C454 EQ PUSH2 0x3AC JUMPI DUP1 PUSH4 0x70F81F6C EQ PUSH2 0x3CC JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x3EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x463FD1AF EQ PUSH2 0x307 JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0x327 JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x354 JUMPI DUP1 PUSH4 0x4F558E79 EQ PUSH2 0x367 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xE89341C GT PUSH2 0x1B6 JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0x278 JUMPI DUP1 PUSH4 0x1F7FDFFA EQ PUSH2 0x2A5 JUMPI DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0x2C7 JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x2E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0xFDD58E EQ PUSH2 0x1DC JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x20F JUMPI DUP1 PUSH4 0x7546172 EQ PUSH2 0x23F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x1F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x2595 JUMP JUMPDEST PUSH2 0x63B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x21B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22F PUSH2 0x22A CALLDATASIZE PUSH1 0x4 PUSH2 0x25D5 JUMP JUMPDEST PUSH2 0x6D7 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x206 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1C3 SLOAD PUSH2 0x260 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x206 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x284 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x298 PUSH2 0x293 CALLDATASIZE PUSH1 0x4 PUSH2 0x25F2 JUMP JUMPDEST PUSH2 0x727 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x206 SWAP2 SWAP1 PUSH2 0x265B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C5 PUSH2 0x2C0 CALLDATASIZE PUSH1 0x4 PUSH2 0x27BA JUMP JUMPDEST PUSH2 0x7BC JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C5 PUSH2 0x2E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x2853 JUMP JUMPDEST PUSH2 0x7D6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C5 PUSH2 0x302 CALLDATASIZE PUSH1 0x4 PUSH2 0x28FD JUMP JUMPDEST PUSH2 0x822 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x313 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C5 PUSH2 0x322 CALLDATASIZE PUSH1 0x4 PUSH2 0x2918 JUMP JUMPDEST PUSH2 0x901 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x333 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH2 0x342 CALLDATASIZE PUSH1 0x4 PUSH2 0x2976 JUMP JUMPDEST PUSH2 0xB25 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x206 SWAP2 SWAP1 PUSH2 0x2A7C JUMP JUMPDEST PUSH2 0x2C5 PUSH2 0x362 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A8F JUMP JUMPDEST PUSH2 0xC4F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x373 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22F PUSH2 0x382 CALLDATASIZE PUSH1 0x4 PUSH2 0x25F2 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x191 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO ISZERO SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0xD1F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C5 PUSH2 0x3C7 CALLDATASIZE PUSH1 0x4 PUSH2 0x2AD3 JUMP JUMPDEST PUSH2 0xDD3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C5 PUSH2 0x3E7 CALLDATASIZE PUSH1 0x4 PUSH2 0x2B47 JUMP JUMPDEST PUSH2 0xDE3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C5 PUSH2 0xE6F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x40D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C5 PUSH2 0x41C CALLDATASIZE PUSH1 0x4 PUSH2 0x2B7A JUMP JUMPDEST PUSH2 0xE83 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C5 PUSH2 0xE97 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x442 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C5 PUSH2 0x451 CALLDATASIZE PUSH1 0x4 PUSH2 0x2AD3 JUMP JUMPDEST PUSH2 0xF0E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x462 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x260 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x480 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C5 PUSH2 0x48F CALLDATASIZE PUSH1 0x4 PUSH2 0x2BCF JUMP JUMPDEST PUSH2 0x1015 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C5 PUSH2 0x4AF CALLDATASIZE PUSH1 0x4 PUSH2 0x2C0C JUMP JUMPDEST PUSH2 0x1083 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x4CF CALLDATASIZE PUSH1 0x4 PUSH2 0x25F2 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x191 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C5 PUSH2 0x4FD CALLDATASIZE PUSH1 0x4 PUSH2 0x25F2 JUMP JUMPDEST PUSH2 0x108E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x50E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x260 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x52C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C5 PUSH2 0x53B CALLDATASIZE PUSH1 0x4 PUSH2 0x25F2 JUMP JUMPDEST PUSH2 0x10DA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x54C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22F PUSH2 0x55B CALLDATASIZE PUSH1 0x4 PUSH2 0x2C48 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x12E PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x596 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22F PUSH2 0x5A5 CALLDATASIZE PUSH1 0x4 PUSH2 0x25F2 JUMP JUMPDEST PUSH2 0x1C4 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C5 PUSH2 0x5D6 CALLDATASIZE PUSH1 0x4 PUSH2 0x2C7B JUMP JUMPDEST PUSH2 0x1123 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C5 PUSH2 0x5F6 CALLDATASIZE PUSH1 0x4 PUSH2 0x28FD JUMP JUMPDEST PUSH2 0x1168 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x607 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C5 PUSH2 0x616 CALLDATASIZE PUSH1 0x4 PUSH2 0x2B47 JUMP JUMPDEST PUSH2 0x11D9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x627 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C5 PUSH2 0x636 CALLDATASIZE PUSH1 0x4 PUSH2 0x28FD JUMP JUMPDEST PUSH2 0x11E4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x6AB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2061646472657373207A65726F206973206E6F7420612076 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x30B634B21037BBB732B9 PUSH1 0xB1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x12D PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x6CDB3D13 PUSH1 0xE1 SHL EQ DUP1 PUSH2 0x708 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x3A24D07 PUSH1 0xE2 SHL EQ JUMPDEST DUP1 PUSH2 0x6D1 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x6D1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x12F DUP1 SLOAD PUSH2 0x737 SWAP1 PUSH2 0x2CE0 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x763 SWAP1 PUSH2 0x2CE0 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7B0 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x785 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7B0 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x793 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x7C4 PUSH2 0x1237 JUMP JUMPDEST PUSH2 0x7D0 DUP5 DUP5 DUP5 DUP5 PUSH2 0x129E JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ DUP1 PUSH2 0x7F2 JUMPI POP PUSH2 0x7F2 DUP6 CALLER PUSH2 0x55B JUMP JUMPDEST PUSH2 0x80E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2D1A JUMP JUMPDEST PUSH2 0x81B DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x13FA JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0x86A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2D68 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x8B3 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x334E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x8D9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2DB4 JUMP JUMPDEST PUSH2 0x8E2 DUP2 PUSH2 0x15A9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x8FE SWAP2 DUP4 SWAP2 SWAP1 PUSH2 0x15B1 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x921 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x93B JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x93B JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x99E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6A2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x9C1 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0xA09 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2D68 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xA52 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x334E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xA78 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2DB4 JUMP JUMPDEST PUSH2 0xA81 DUP3 PUSH2 0x171C JUMP JUMPDEST PUSH2 0xA89 PUSH2 0x1735 JUMP JUMPDEST PUSH2 0xA92 DUP5 PUSH2 0x175C JUMP JUMPDEST PUSH2 0x1C3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0xB6B8F1859C5C352E5FFAD07D0F77E384AC725512C015BD3A3FFC885831C8A425 SWAP1 PUSH1 0x0 SWAP1 LOG2 DUP1 ISZERO PUSH2 0x7D0 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0xB8A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206163636F756E747320616E6420696473206C656E677468 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x40DAD2E6DAC2E8C6D PUSH1 0xBB SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6A2 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xBA6 JUMPI PUSH2 0xBA6 PUSH2 0x266E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xBCF JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xC47 JUMPI PUSH2 0xC1A DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xBF3 JUMPI PUSH2 0xBF3 PUSH2 0x2E00 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xC0D JUMPI PUSH2 0xC0D PUSH2 0x2E00 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x63B JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xC2C JUMPI PUSH2 0xC2C PUSH2 0x2E00 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH2 0xC40 DUP2 PUSH2 0x2E2C JUMP JUMPDEST SWAP1 POP PUSH2 0xBD5 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0xC97 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2D68 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xCE0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x334E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xD06 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2DB4 JUMP JUMPDEST PUSH2 0xD0F DUP3 PUSH2 0x15A9 JUMP JUMPDEST PUSH2 0xD1B DUP3 DUP3 PUSH1 0x1 PUSH2 0x15B1 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0xDBF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6A2 JUMP JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x334E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xDDE DUP4 DUP4 DUP4 PUSH2 0x178C JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0xDEB PUSH2 0x17CF JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH2 0x1C4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xE4A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4A61736D696E654541543A20736572696573206E6F742066726F7A656E000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6A2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE56 DUP5 DUP5 PUSH2 0x63B JUMP JUMPDEST SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0xE64 JUMPI DUP1 SWAP2 POP JUMPDEST PUSH2 0x7D0 DUP5 DUP5 DUP5 PUSH2 0x1829 JUMP JUMPDEST PUSH2 0xE77 PUSH2 0x17CF JUMP JUMPDEST PUSH2 0xE81 PUSH1 0x0 PUSH2 0x171C JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xE8B PUSH2 0x1237 JUMP JUMPDEST PUSH2 0x7D0 DUP5 DUP5 DUP5 DUP5 PUSH2 0x194C JUMP JUMPDEST PUSH1 0x65 SLOAD CALLER SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 EQ PUSH2 0xF05 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C6532537465703A2063616C6C6572206973206E6F742074686520 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x3732BB9037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6A2 JUMP JUMPDEST PUSH2 0x8FE DUP2 PUSH2 0x171C JUMP JUMPDEST PUSH2 0xF16 PUSH2 0x17CF JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x1009 JUMPI PUSH1 0x0 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xF36 JUMPI PUSH2 0xF36 PUSH2 0x2E00 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x1C4 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND PUSH2 0xFA5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4A61736D696E654541543A20736572696573206E6F742066726F7A656E000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6A2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFB1 DUP7 DUP4 PUSH2 0x63B JUMP JUMPDEST SWAP1 POP DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xFC5 JUMPI PUSH2 0xFC5 PUSH2 0x2E00 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 LT ISZERO PUSH2 0xFF4 JUMPI DUP1 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xFE7 JUMPI PUSH2 0xFE7 PUSH2 0x2E00 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP POP DUP1 DUP1 PUSH2 0x1001 SWAP1 PUSH2 0x2E2C JUMP JUMPDEST SWAP2 POP POP PUSH2 0xF19 JUMP JUMPDEST POP PUSH2 0xDDE DUP4 DUP4 DUP4 PUSH2 0x1A2F JUMP JUMPDEST PUSH2 0x101D PUSH2 0x17CF JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x107A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4A61736D696E654541543A206E6577205552492063616E6E6F7420626520656D PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x383A3C97 PUSH1 0xE1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6A2 JUMP JUMPDEST PUSH2 0x8FE DUP2 PUSH2 0x1BD0 JUMP JUMPDEST PUSH2 0xD1B CALLER DUP4 DUP4 PUSH2 0x1BDD JUMP JUMPDEST PUSH2 0x1096 PUSH2 0x17CF JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x1C4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD DUP3 SWAP2 PUSH32 0x4D69B51FEE53C28BD8B61FE008151577CA65160B5248F6225E74D64FD4CF7328 SWAP2 LOG2 POP JUMP JUMPDEST PUSH2 0x10E2 PUSH2 0x17CF JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x1C4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD DUP3 SWAP2 PUSH32 0xD7EA826CAA575891B88B771D03FE1DA3092D4A65C5ADEACCC99BE085978CEBE8 SWAP2 LOG2 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ DUP1 PUSH2 0x113F JUMPI POP PUSH2 0x113F DUP6 CALLER PUSH2 0x55B JUMP JUMPDEST PUSH2 0x115B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2D1A JUMP JUMPDEST PUSH2 0x81B DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x1CBE JUMP JUMPDEST PUSH2 0x1170 PUSH2 0x17CF JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH2 0x11A1 PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x38D16B8CAC22D99FC7C124B9CD0DE2D3FA1FAEF420BFE791D8C362D765E22700 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH2 0xDDE DUP4 DUP4 DUP4 PUSH2 0x1DFC JUMP JUMPDEST PUSH2 0x11EC PUSH2 0x17CF JUMP JUMPDEST PUSH2 0x1C3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0xB6B8F1859C5C352E5FFAD07D0F77E384AC725512C015BD3A3FFC885831C8A425 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0x1C3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xE81 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4A61736D696E654541543A2063616C6C6572206973206E6F7420746865206D69 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x373A32B9 PUSH1 0xE1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6A2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x12C4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2E45 JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x12E5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2E86 JUMP JUMPDEST CALLER PUSH2 0x12F5 DUP2 PUSH1 0x0 DUP8 DUP8 DUP8 DUP8 PUSH2 0x1E3F JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x1392 JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x1313 JUMPI PUSH2 0x1313 PUSH2 0x2E00 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x12D PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1332 JUMPI PUSH2 0x1332 PUSH2 0x2E00 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x137A SWAP2 SWAP1 PUSH2 0x2ECE JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP DUP2 SWAP1 POP PUSH2 0x138A DUP2 PUSH2 0x2E2C JUMP JUMPDEST SWAP2 POP POP PUSH2 0x12F8 JUMP JUMPDEST POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x13E3 SWAP3 SWAP2 SWAP1 PUSH2 0x2EE1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x81B DUP2 PUSH1 0x0 DUP8 DUP8 DUP8 DUP8 PUSH2 0x1EFE JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x141B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2E86 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1441 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2F06 JUMP JUMPDEST CALLER PUSH2 0x1450 DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x1E3F JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x153B JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1470 JUMPI PUSH2 0x1470 PUSH2 0x2E00 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x148E JUMPI PUSH2 0x148E PUSH2 0x2E00 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH2 0x12D DUP4 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 AND DUP4 MSTORE SWAP1 SWAP4 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP2 DUP2 LT ISZERO PUSH2 0x14E0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2F4B JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH2 0x12D PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP1 DUP12 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x1520 SWAP1 DUP5 SWAP1 PUSH2 0x2ECE JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP POP DUP1 PUSH2 0x1534 SWAP1 PUSH2 0x2E2C JUMP JUMPDEST SWAP1 POP PUSH2 0x1453 JUMP JUMPDEST POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x158B SWAP3 SWAP2 SWAP1 PUSH2 0x2EE1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x15A1 DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x1EFE JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x8FE PUSH2 0x17CF JUMP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x15E4 JUMPI PUSH2 0xDDE DUP4 PUSH2 0x2059 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x163E JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x163B SWAP2 DUP2 ADD SWAP1 PUSH2 0x2F95 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x16A1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x6F6E206973206E6F742055555053 PUSH1 0x90 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6A2 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x334E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 EQ PUSH2 0x1710 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1A58589B1955555251 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6A2 JUMP JUMPDEST POP PUSH2 0xDDE DUP4 DUP4 DUP4 PUSH2 0x20F5 JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE PUSH2 0x8FE DUP2 PUSH2 0x211A JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xE81 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2FAE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1783 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2FAE JUMP JUMPDEST PUSH2 0x8FE DUP2 PUSH2 0x216C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND CALLER EQ DUP1 PUSH2 0x17A8 JUMPI POP PUSH2 0x17A8 DUP4 CALLER PUSH2 0x55B JUMP JUMPDEST PUSH2 0x17C4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2D1A JUMP JUMPDEST PUSH2 0xDDE DUP4 DUP4 DUP4 PUSH2 0x1A2F JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xE81 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6A2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x184F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2FF9 JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x185B DUP5 PUSH2 0x2193 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1868 DUP5 PUSH2 0x2193 JUMP JUMPDEST SWAP1 POP PUSH2 0x1888 DUP4 DUP8 PUSH1 0x0 DUP6 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1E3F JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH2 0x12D PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP5 DUP2 LT ISZERO PUSH2 0x18CC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x303C JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH2 0x12D PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE DUP3 DUP6 KECCAK256 DUP11 DUP8 SUB SWAP1 SSTORE DUP3 MLOAD DUP12 DUP2 MSTORE SWAP4 DUP5 ADD DUP11 SWAP1 MSTORE SWAP1 SWAP3 SWAP1 DUP9 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 SWAP1 MSTORE JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1972 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2E45 JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x197E DUP6 PUSH2 0x2193 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x198B DUP6 PUSH2 0x2193 JUMP JUMPDEST SWAP1 POP PUSH2 0x199C DUP4 PUSH1 0x0 DUP10 DUP6 DUP6 DUP10 PUSH2 0x1E3F JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH2 0x12D PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP8 SWAP3 SWAP1 PUSH2 0x19CF SWAP1 DUP5 SWAP1 PUSH2 0x2ECE JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP11 AND SWAP3 PUSH1 0x0 SWAP3 SWAP2 DUP8 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1943 DUP4 PUSH1 0x0 DUP10 DUP10 DUP10 DUP10 PUSH2 0x21DE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1A55 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2FF9 JUMP JUMPDEST DUP1 MLOAD DUP3 MLOAD EQ PUSH2 0x1A76 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2E86 JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP PUSH2 0x1A99 DUP2 DUP6 PUSH1 0x0 DUP7 DUP7 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1E3F JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x1B63 JUMPI PUSH1 0x0 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1AB9 JUMPI PUSH2 0x1AB9 PUSH2 0x2E00 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1AD7 JUMPI PUSH2 0x1AD7 PUSH2 0x2E00 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH2 0x12D DUP4 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND DUP4 MSTORE SWAP1 SWAP4 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP2 DUP2 LT ISZERO PUSH2 0x1B29 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x303C JUMP JUMPDEST PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH2 0x12D PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND DUP7 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SWAP3 KECCAK256 SWAP2 SUB SWAP1 SSTORE DUP1 PUSH2 0x1B5B DUP2 PUSH2 0x2E2C JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1A9C JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x1BB4 SWAP3 SWAP2 SWAP1 PUSH2 0x2EE1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 SWAP1 MSTORE PUSH2 0x7D0 JUMP JUMPDEST PUSH2 0x12F PUSH2 0xD1B DUP3 DUP3 PUSH2 0x30C6 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x1C50 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2073657474696E6720617070726F76616C20737461747573 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x103337B91039B2B633 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6A2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x12E PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1CE4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2F06 JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x1CF0 DUP6 PUSH2 0x2193 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1CFD DUP6 PUSH2 0x2193 JUMP JUMPDEST SWAP1 POP PUSH2 0x1D0D DUP4 DUP10 DUP10 DUP6 DUP6 DUP10 PUSH2 0x1E3F JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH2 0x12D PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP6 DUP2 LT ISZERO PUSH2 0x1D51 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2F4B JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH2 0x12D PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP10 DUP6 SUB SWAP1 SSTORE SWAP1 DUP11 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP9 SWAP3 SWAP1 PUSH2 0x1D91 SWAP1 DUP5 SWAP1 PUSH2 0x2ECE JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP9 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP12 AND SWAP3 DUP13 DUP3 AND SWAP3 SWAP2 DUP9 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1DF1 DUP5 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0x21DE JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND CALLER EQ DUP1 PUSH2 0x1E18 JUMPI POP PUSH2 0x1E18 DUP4 CALLER PUSH2 0x55B JUMP JUMPDEST PUSH2 0x1E34 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2D1A JUMP JUMPDEST PUSH2 0xDDE DUP4 DUP4 DUP4 PUSH2 0x1829 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x1EF0 JUMPI PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x1EEE JUMPI PUSH2 0x1C4 PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1E71 JUMPI PUSH2 0x1E71 PUSH2 0x2E00 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1EDC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4A61736D696E654541543A2066726F7A656E2073657269657300000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6A2 JUMP JUMPDEST DUP1 PUSH2 0x1EE6 DUP2 PUSH2 0x2E2C JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1E51 JUMP JUMPDEST POP JUMPDEST PUSH2 0x15A1 DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0x2299 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x15A1 JUMPI PUSH1 0x40 MLOAD PUSH4 0xBC197C81 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xBC197C81 SWAP1 PUSH2 0x1F42 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x3186 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1F7D JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1F7A SWAP2 DUP2 ADD SWAP1 PUSH2 0x31E4 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2029 JUMPI PUSH2 0x1F89 PUSH2 0x3201 JUMP JUMPDEST DUP1 PUSH4 0x8C379A0 SUB PUSH2 0x1FC2 JUMPI POP PUSH2 0x1F9D PUSH2 0x321C JUMP JUMPDEST DUP1 PUSH2 0x1FA8 JUMPI POP PUSH2 0x1FC4 JUMP JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP2 SWAP1 PUSH2 0x265B JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F206E6F6E2D45524331313535 PUSH1 0x44 DUP3 ADD MSTORE PUSH20 0x2932B1B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x61 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6A2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xBC197C81 PUSH1 0xE0 SHL EQ PUSH2 0x1943 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x32A6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND EXTCODESIZE PUSH2 0x20C6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6A2 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x334E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x20FE DUP4 PUSH2 0x2415 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0x210B JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0xDDE JUMPI PUSH2 0x7D0 DUP4 DUP4 PUSH2 0x2455 JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x107A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x2FAE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP3 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x21CD JUMPI PUSH2 0x21CD PUSH2 0x2E00 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x15A1 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF23A6E61 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xF23A6E61 SWAP1 PUSH2 0x2222 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x32EE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x225D JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x225A SWAP2 DUP2 ADD SWAP1 PUSH2 0x31E4 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2269 JUMPI PUSH2 0x1F89 PUSH2 0x3201 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xF23A6E61 PUSH1 0xE0 SHL EQ PUSH2 0x1943 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x32A6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x2321 JUMPI PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x231F JUMPI DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x22C5 JUMPI PUSH2 0x22C5 PUSH2 0x2E00 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x191 PUSH1 0x0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x22E4 JUMPI PUSH2 0x22E4 PUSH2 0x2E00 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x2309 SWAP2 SWAP1 PUSH2 0x2ECE JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x2318 SWAP1 POP DUP2 PUSH2 0x2E2C JUMP JUMPDEST SWAP1 POP PUSH2 0x22AA JUMP JUMPDEST POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x15A1 JUMPI PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x1943 JUMPI PUSH1 0x0 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x234F JUMPI PUSH2 0x234F PUSH2 0x2E00 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x236D JUMPI PUSH2 0x236D PUSH2 0x2E00 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 PUSH2 0x191 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x23F1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206275726E20616D6F756E74206578636565647320746F74 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x616C537570706C79 PUSH1 0xC0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6A2 JUMP JUMPDEST PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH2 0x191 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 SWAP3 KECCAK256 SWAP2 SUB SWAP1 SSTORE PUSH2 0x240E DUP2 PUSH2 0x2E2C JUMP JUMPDEST SWAP1 POP PUSH2 0x2332 JUMP JUMPDEST PUSH2 0x241E DUP2 PUSH2 0x2059 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE PUSH2 0x24BD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6A2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x40 MLOAD PUSH2 0x24D8 SWAP2 SWAP1 PUSH2 0x3331 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2513 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2518 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x2540 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x336E PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x2549 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x2558 JUMPI POP DUP2 PUSH2 0x2562 JUMP JUMPDEST PUSH2 0x2562 DUP4 DUP4 PUSH2 0x2569 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x1FA8 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2590 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x25A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x25B1 DUP4 PUSH2 0x2579 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x8FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x25E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2562 DUP2 PUSH2 0x25BF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2604 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2626 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x260E JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x2647 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x260B JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x2562 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x262F JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x26AA JUMPI PUSH2 0x26AA PUSH2 0x266E JUMP JUMPDEST PUSH1 0x40 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x26CB JUMPI PUSH2 0x26CB PUSH2 0x266E JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x26E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x26F3 DUP3 PUSH2 0x26B1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2700 DUP3 DUP3 PUSH2 0x2684 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x5 SWAP4 SWAP1 SWAP4 SHL DUP6 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP2 POP DUP7 DUP5 GT ISZERO PUSH2 0x2720 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x273B JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x2724 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2757 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2771 JUMPI PUSH2 0x2771 PUSH2 0x266E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2788 PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 PUSH2 0x2684 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x279D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x27D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x27D9 DUP6 PUSH2 0x2579 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x27F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2802 DUP9 DUP4 DUP10 ADD PUSH2 0x26D5 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2818 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2824 DUP9 DUP4 DUP10 ADD PUSH2 0x26D5 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x283A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2847 DUP8 DUP3 DUP9 ADD PUSH2 0x2746 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x286B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2874 DUP7 PUSH2 0x2579 JUMP JUMPDEST SWAP5 POP PUSH2 0x2882 PUSH1 0x20 DUP8 ADD PUSH2 0x2579 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x289F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x28AB DUP10 DUP4 DUP11 ADD PUSH2 0x26D5 JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x28C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x28CD DUP10 DUP4 DUP11 ADD PUSH2 0x26D5 JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x28E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28F0 DUP9 DUP3 DUP10 ADD PUSH2 0x2746 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x290F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2562 DUP3 PUSH2 0x2579 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x292D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2944 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2950 DUP7 DUP3 DUP8 ADD PUSH2 0x2746 JUMP JUMPDEST SWAP4 POP POP PUSH2 0x295F PUSH1 0x20 DUP6 ADD PUSH2 0x2579 JUMP JUMPDEST SWAP2 POP PUSH2 0x296D PUSH1 0x40 DUP6 ADD PUSH2 0x2579 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2989 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x29A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x29B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x29C2 DUP3 PUSH2 0x26B1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29CF DUP3 DUP3 PUSH2 0x2684 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x5 SWAP4 SWAP1 SWAP4 SHL DUP6 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP2 POP DUP10 DUP5 GT ISZERO PUSH2 0x29EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x2A14 JUMPI PUSH2 0x2A05 DUP7 PUSH2 0x2579 JUMP JUMPDEST DUP3 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP1 DUP3 ADD SWAP1 PUSH2 0x29F4 JUMP JUMPDEST SWAP7 POP POP DUP7 ADD CALLDATALOAD SWAP3 POP POP DUP1 DUP3 GT ISZERO PUSH2 0x2A2A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A37 DUP6 DUP3 DUP7 ADD PUSH2 0x26D5 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2A71 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2A55 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x2562 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2A41 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2AA2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2AAB DUP4 PUSH2 0x2579 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2AC7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2A37 DUP6 DUP3 DUP7 ADD PUSH2 0x2746 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2AE8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2AF1 DUP5 PUSH2 0x2579 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2B0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2B1A DUP8 DUP4 DUP9 ADD PUSH2 0x26D5 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2B30 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B3D DUP7 DUP3 DUP8 ADD PUSH2 0x26D5 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2B5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2B65 DUP5 PUSH2 0x2579 JUMP JUMPDEST SWAP6 PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 SWAP1 SWAP5 ADD CALLDATALOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2B90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2B99 DUP6 PUSH2 0x2579 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2BC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2847 DUP8 DUP3 DUP9 ADD PUSH2 0x2746 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2BE1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2BF8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2C04 DUP5 DUP3 DUP6 ADD PUSH2 0x2746 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2C1F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2C28 DUP4 PUSH2 0x2579 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2C3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2C5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2C64 DUP4 PUSH2 0x2579 JUMP JUMPDEST SWAP2 POP PUSH2 0x2C72 PUSH1 0x20 DUP5 ADD PUSH2 0x2579 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x2C93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2C9C DUP7 PUSH2 0x2579 JUMP JUMPDEST SWAP5 POP PUSH2 0x2CAA PUSH1 0x20 DUP8 ADD PUSH2 0x2579 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2CD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x28F0 DUP9 DUP3 DUP10 ADD PUSH2 0x2746 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x2CF4 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2D14 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A2063616C6C6572206973206E6F7420746F6B656E206F776E PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x195C881BDC88185C1C1C9BDD9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x19195B1959D85D1958D85B1B PUSH1 0xA2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x6163746976652070726F7879 PUSH1 0xA0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x2E3E JUMPI PUSH2 0x2E3E PUSH2 0x2E16 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x21 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A206D696E7420746F20746865207A65726F20616464726573 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A2069647320616E6420616D6F756E7473206C656E67746820 PUSH1 0x40 DUP3 ADD MSTORE PUSH8 0xDAD2E6DAC2E8C6D PUSH1 0xC3 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x6D1 JUMPI PUSH2 0x6D1 PUSH2 0x2E16 JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x2EF4 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x2A41 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x2540 DUP2 DUP6 PUSH2 0x2A41 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F20746865207A65726F206164 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A20696E73756666696369656E742062616C616E636520666F PUSH1 0x40 DUP3 ADD MSTORE PUSH10 0x39103A3930B739B332B9 PUSH1 0xB1 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2FA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x23 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A206275726E2066726F6D20746865207A65726F2061646472 PUSH1 0x40 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A206275726E20616D6F756E7420657863656564732062616C PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x616E6365 PUSH1 0xE0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0xDDE JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x30A7 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x15A1 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x30B3 JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x30E0 JUMPI PUSH2 0x30E0 PUSH2 0x266E JUMP JUMPDEST PUSH2 0x30F4 DUP2 PUSH2 0x30EE DUP5 SLOAD PUSH2 0x2CE0 JUMP JUMPDEST DUP5 PUSH2 0x3080 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x3129 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x3111 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x15A1 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3158 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x3139 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x3176 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND DUP4 MSTORE DUP1 DUP8 AND PUSH1 0x20 DUP5 ADD MSTORE POP PUSH1 0xA0 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x31B2 PUSH1 0xA0 DUP4 ADD DUP7 PUSH2 0x2A41 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x31C4 DUP2 DUP7 PUSH2 0x2A41 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x31D8 DUP2 DUP6 PUSH2 0x262F JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x31F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x2562 DUP2 PUSH2 0x25BF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 RETURNDATASIZE GT ISZERO PUSH2 0xDD0 JUMPI PUSH1 0x4 PUSH1 0x0 DUP1 RETURNDATACOPY POP PUSH1 0x0 MLOAD PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x44 RETURNDATASIZE LT ISZERO PUSH2 0x322A JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x3 NOT RETURNDATASIZE DUP2 ADD PUSH1 0x4 DUP4 RETURNDATACOPY DUP2 MLOAD RETURNDATASIZE PUSH8 0xFFFFFFFFFFFFFFFF DUP2 PUSH1 0x24 DUP5 ADD GT DUP2 DUP5 GT OR ISZERO PUSH2 0x325A JUMPI POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP3 DUP6 ADD SWAP2 POP DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x3272 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP5 RETURNDATASIZE DUP8 ADD ADD PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x328C JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x329B PUSH1 0x20 DUP3 DUP7 ADD ADD DUP8 PUSH2 0x2684 JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A204552433131353552656365697665722072656A65637465 PUSH1 0x40 DUP3 ADD MSTORE PUSH8 0x6420746F6B656E73 PUSH1 0xC0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND DUP4 MSTORE DUP1 DUP8 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP5 PUSH1 0x40 DUP4 ADD MSTORE DUP4 PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0xA0 PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x3326 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x262F JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x3343 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x260B JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP INVALID CALLDATASIZE ADDMOD SWAP5 LOG1 EXTCODESIZE LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBC416464726573733A206C6F PUSH24 0x2D6C6576656C2064656C65676174652063616C6C20666169 PUSH13 0x6564A26469706673582212206B 0xBF CREATE SWAP7 0xE2 PUSH31 0x1265A2F70E42A7F23DF098D680FBAC87F640F9952AA7CC63F4BF64736F6C63 NUMBER STOP ADDMOD GT STOP CALLER ","sourceMap":"1210:4698:23:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2593:227:7;;;;;;;;;;-1:-1:-1;2593:227:7;;;;;:::i;:::-;;:::i;:::-;;;620:25:30;;;608:2;593:18;2593:227:7;;;;;;;;1600:349;;;;;;;;;;-1:-1:-1;1600:349:7;;;;;:::i;:::-;;:::i;:::-;;;1207:14:30;;1200:22;1182:41;;1170:2;1155:18;1600:349:7;1042:187:30;1698:21:23;;;;;;;;;;-1:-1:-1;1698:21:23;;;;-1:-1:-1;;;;;1698:21:23;;;;;;-1:-1:-1;;;;;1398:55:30;;;1380:74;;1368:2;1353:18;1698:21:23;1234:226:30;2348:103:7;;;;;;;;;;-1:-1:-1;2348:103:7;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3505:192:23:-;;;;;;;;;;-1:-1:-1;3505:192:23;;;;;:::i;:::-;;:::i;:::-;;4472:426:7;;;;;;;;;;-1:-1:-1;4472:426:7;;;;;:::i;:::-;;:::i;3317:197:6:-;;;;;;;;;;-1:-1:-1;3317:197:6;;;;;:::i;:::-;;:::i;2813:334:23:-;;;;;;;;;;-1:-1:-1;2813:334:23;;;;;:::i;:::-;;:::i;2977:508:7:-;;;;;;;;;;-1:-1:-1;2977:508:7;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3763:222:6:-;;;;;;:::i;:::-;;:::i;1149:131:11:-;;;;;;;;;;-1:-1:-1;1149:131:11;;;;;:::i;:::-;1206:4;1033:16;;;:12;:16;;;;;;-1:-1:-1;;;1149:131:11;3006::6;;;;;;;;;;;;;:::i;5339:203:23:-;;;;;;;;;;-1:-1:-1;5339:203:23;;;;;:::i;:::-;;:::i;4264:285::-;;;;;;;;;;-1:-1:-1;4264:285:23;;;;;:::i;:::-;;:::i;2071:101:1:-;;;;;;;;;;;;;:::i;3246:160:23:-;;;;;;;;;;-1:-1:-1;3246:160:23;;;;;:::i;:::-;;:::i;2010:206:0:-;;;;;;;;;;;;;:::i;4674:411:23:-;;;;;;;;;;-1:-1:-1;4674:411:23;;;;;:::i;:::-;;:::i;1441:85:1:-;;;;;;;;;;-1:-1:-1;1513:6:1;;-1:-1:-1;;;;;1513:6:1;1441:85;;5594:174:23;;;;;;;;;;-1:-1:-1;5594:174:23;;;;;:::i;:::-;;:::i;3553:153:7:-;;;;;;;;;;-1:-1:-1;3553:153:7;;;;;:::i;:::-;;:::i;945:111:11:-;;;;;;;;;;-1:-1:-1;945:111:11;;;;;:::i;:::-;1007:7;1033:16;;;:12;:16;;;;;;;945:111;3857:96:23;;;;;;;;;;-1:-1:-1;3857:96:23;;;;;:::i;:::-;;:::i;1123:99:0:-;;;;;;;;;;-1:-1:-1;1202:13:0;;-1:-1:-1;;;;;1202:13:0;1123:99;;4044:95:23;;;;;;;;;;-1:-1:-1;4044:95:23;;;;;:::i;:::-;;:::i;3773:166:7:-;;;;;;;;;;-1:-1:-1;3773:166:7;;;;;:::i;:::-;-1:-1:-1;;;;;3895:27:7;;;3872:4;3895:27;;;:18;:27;;;;;;;;:37;;;;;;;;;;;;;;;3773:166;2207:47:23;;;;;;;;;;-1:-1:-1;2207:47:23;;;;;:::i;:::-;;;;;;;;;;;;;;;;4006:394:7;;;;;;;;;;-1:-1:-1;4006:394:7;;;;;:::i;:::-;;:::i;1415:178:0:-;;;;;;;;;;-1:-1:-1;1415:178:0;;;;;:::i;:::-;;:::i;5164:171:23:-;;;;;;;;;;-1:-1:-1;5164:171:23;;;;;:::i;:::-;;:::i;2082:121::-;;;;;;;;;;-1:-1:-1;2082:121:23;;;;;:::i;:::-;;:::i;2593:227:7:-;2679:7;-1:-1:-1;;;;;2706:21:7;;2698:76;;;;-1:-1:-1;;;2698:76:7;;12548:2:30;2698:76:7;;;12530:21:30;12587:2;12567:18;;;12560:30;12626:34;12606:18;;;12599:62;-1:-1:-1;;;12677:18:30;;;12670:40;12727:19;;2698:76:7;;;;;;;;;-1:-1:-1;2791:13:7;;;;:9;:13;;;;;;;;-1:-1:-1;;;;;2791:22:7;;;;;;;;;;2593:227;;;;;:::o;1600:349::-;1724:4;-1:-1:-1;;;;;;1759:52:7;;-1:-1:-1;;;1759:52:7;;:131;;-1:-1:-1;;;;;;;1827:63:7;;-1:-1:-1;;;1827:63:7;1759:131;:183;;;-1:-1:-1;;;;;;;;;;1168:51:19;;;1906:36:7;1060:166:19;2348:103:7;2408:13;2440:4;2433:11;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2348:103;;;:::o;3505:192:23:-;1876:14;:12;:14::i;:::-;3658:34:::1;3669:2;3673:3;3678:7;3687:4;3658:10;:34::i;:::-;3505:192:::0;;;;:::o;4472:426:7:-;-1:-1:-1;;;;;4697:20:7;;929:10:14;4697:20:7;;:60;;-1:-1:-1;4721:36:7;4738:4;929:10:14;3773:166:7;:::i;4721:36::-;4676:153;;;;-1:-1:-1;;;4676:153:7;;;;;;;:::i;:::-;4839:52;4862:4;4868:2;4872:3;4877:7;4886:4;4839:22;:52::i;:::-;4472:426;;;;;:::o;3317:197:6:-;-1:-1:-1;;;;;1898:6:6;1881:23;1889:4;1881:23;1873:80;;;;-1:-1:-1;;;1873:80:6;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:6;:20;-1:-1:-1;;;;;;;;;;;1642:65:3;-1:-1:-1;;;;;1642:65:3;;1563:151;1971:20:6;-1:-1:-1;;;;;1971:30:6;;1963:87;;;;-1:-1:-1;;;1963:87:6;;;;;;;:::i;:::-;3400:36:::1;3418:17;3400;:36::i;:::-;3487:12;::::0;;3497:1:::1;3487:12:::0;;;::::1;::::0;::::1;::::0;;;3446:61:::1;::::0;3468:17;;3487:12;3446:21:::1;:61::i;:::-;3317:197:::0;:::o;2813:334:23:-;3268:19:5;3291:13;;;;;;3290:14;;3336:34;;;;-1:-1:-1;3354:12:5;;3369:1;3354:12;;;;:16;3336:34;3335:108;;;-1:-1:-1;3415:4:5;1476:19:13;:23;;;3376:66:5;;-1:-1:-1;3425:12:5;;;;;:17;3376:66;3314:201;;;;-1:-1:-1;;;3314:201:5;;14585:2:30;3314:201:5;;;14567:21:30;14624:2;14604:18;;;14597:30;14663:34;14643:18;;;14636:62;-1:-1:-1;;;14714:18:30;;;14707:44;14768:19;;3314:201:5;14383:410:30;3314:201:5;3525:12;:16;;-1:-1:-1;;3525:16:5;3540:1;3525:16;;;3551:65;;;;3585:13;:20;;-1:-1:-1;;3585:20:5;;;;;3551:65;-1:-1:-1;;;;;1898:6:6::1;1881:23;1889:4;1881:23:::0;1873:80:::1;;;;-1:-1:-1::0;;;1873:80:6::1;;;;;;;:::i;:::-;1995:6;-1:-1:-1::0;;;;;1971:30:6::1;:20;-1:-1:-1::0;;;;;;;;;;;1642:65:3;-1:-1:-1;;;;;1642:65:3;;1563:151;1971:20:6::1;-1:-1:-1::0;;;;;1971:30:6::1;;1963:87;;;;-1:-1:-1::0;;;1963:87:6::1;;;;;;;:::i;:::-;2955:32:23::2;2974:12;2955:18;:32::i;:::-;3019:24;:22;:24::i;:::-;3049:26;3064:10;3049:14;:26::i;:::-;3081:6;:22:::0;;-1:-1:-1;;;;;;3081:22:23::2;-1:-1:-1::0;;;;;3081:22:23;::::2;::::0;;::::2;::::0;;;3114:28:::2;::::0;::::2;::::0;-1:-1:-1;;3114:28:23::2;3640:14:5::0;3636:99;;;3686:5;3670:21;;-1:-1:-1;;3670:21:5;;;3710:14;;-1:-1:-1;14950:36:30;;3710:14:5;;14938:2:30;14923:18;3710:14:5;;;;;;;3258:483;2813:334:23;;;:::o;2977:508:7:-;3128:16;3187:3;:10;3168:8;:15;:29;3160:83;;;;-1:-1:-1;;;3160:83:7;;15199:2:30;3160:83:7;;;15181:21:30;15238:2;15218:18;;;15211:30;15277:34;15257:18;;;15250:62;-1:-1:-1;;;15328:18:30;;;15321:39;15377:19;;3160:83:7;14997:405:30;3160:83:7;3254:30;3301:8;:15;3287:30;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3287:30:7;;3254:63;;3333:9;3328:120;3352:8;:15;3348:1;:19;3328:120;;;3407:30;3417:8;3426:1;3417:11;;;;;;;;:::i;:::-;;;;;;;3430:3;3434:1;3430:6;;;;;;;;:::i;:::-;;;;;;;3407:9;:30::i;:::-;3388:13;3402:1;3388:16;;;;;;;;:::i;:::-;;;;;;;;;;:49;3369:3;;;:::i;:::-;;;3328:120;;;-1:-1:-1;3465:13:7;2977:508;-1:-1:-1;;;2977:508:7:o;3763:222:6:-;-1:-1:-1;;;;;1898:6:6;1881:23;1889:4;1881:23;1873:80;;;;-1:-1:-1;;;1873:80:6;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:6;:20;-1:-1:-1;;;;;;;;;;;1642:65:3;-1:-1:-1;;;;;1642:65:3;;1563:151;1971:20:6;-1:-1:-1;;;;;1971:30:6;;1963:87;;;;-1:-1:-1;;;1963:87:6;;;;;;;:::i;:::-;3880:36:::1;3898:17;3880;:36::i;:::-;3926:52;3948:17;3967:4;3973;3926:21;:52::i;:::-;3763:222:::0;;:::o;3006:131::-;3084:7;2324:4;-1:-1:-1;;;;;2333:6:6;2316:23;;2308:92;;;;-1:-1:-1;;;2308:92:6;;16013:2:30;2308:92:6;;;15995:21:30;16052:2;16032:18;;;16025:30;16091:34;16071:18;;;16064:62;16162:26;16142:18;;;16135:54;16206:19;;2308:92:6;15811:420:30;2308:92:6;-1:-1:-1;;;;;;;;;;;;2410:1:6::1;3006:131:::0;:::o;5339:203:23:-;5503:34;5519:4;5525:3;5530:6;5503:15;:34::i;:::-;5339:203;;;:::o;4264:285::-;1334:13:1;:11;:13::i;:::-;4370:10:23::1;::::0;;;:6:::1;:10;::::0;;;;;::::1;;4362:52;;;::::0;-1:-1:-1;;;4362:52:23;;16438:2:30;4362:52:23::1;::::0;::::1;16420:21:30::0;16477:2;16457:18;;;16450:30;16516:31;16496:18;;;16489:59;16565:18;;4362:52:23::1;16236:353:30::0;4362:52:23::1;4420:15;4438:19;4448:4;4454:2;4438:9;:19::i;:::-;4420:37;;4477:6;4467:7;:16;4463:53;;;4502:7;4493:16;;4463:53;4521:23;4527:4;4533:2;4537:6;4521:5;:23::i;2071:101:1:-:0;1334:13;:11;:13::i;:::-;2135:30:::1;2162:1;2135:18;:30::i;:::-;2071:101::o:0;3246:160:23:-;1876:14;:12;:14::i;:::-;3374:27:::1;3380:2;3384;3388:6;3396:4;3374:5;:27::i;2010:206:0:-:0;1202:13;;929:10:14;;-1:-1:-1;;;;;1202:13:0;2103:24;;2095:78;;;;-1:-1:-1;;;2095:78:0;;16796:2:30;2095:78:0;;;16778:21:30;16835:2;16815:18;;;16808:30;16874:34;16854:18;;;16847:62;-1:-1:-1;;;16925:18:30;;;16918:39;16974:19;;2095:78:0;16594:405:30;2095:78:0;2183:26;2202:6;2183:18;:26::i;4674:411:23:-;1334:13:1;:11;:13::i;:::-;4802:9:23::1;4797:248;4817:3;:10;4813:1;:14;4797:248;;;4842:10;4855:3;4859:1;4855:6;;;;;;;;:::i;:::-;;::::0;;::::1;::::0;;;;;;;4877:10:::1;::::0;;;:6:::1;:10:::0;;;;;;;;4855:6;;-1:-1:-1;4877:10:23::1;;4869:52;;;::::0;-1:-1:-1;;;4869:52:23;;16438:2:30;4869:52:23::1;::::0;::::1;16420:21:30::0;16477:2;16457:18;;;16450:30;16516:31;16496:18;;;16489:59;16565:18;;4869:52:23::1;16236:353:30::0;4869:52:23::1;4929:15;4947:19;4957:4;4963:2;4947:9;:19::i;:::-;4929:37;;4988:7;4996:1;4988:10;;;;;;;;:::i;:::-;;;;;;;4978:7;:20;4974:65;;;5023:7;5010;5018:1;5010:10;;;;;;;;:::i;:::-;;;;;;:20;;;::::0;::::1;4974:65;4834:211;;4829:3;;;;;:::i;:::-;;;;4797:248;;;;5050:30;5061:4;5067:3;5072:7;5050:10;:30::i;5594:174::-:0;1334:13:1;:11;:13::i;:::-;5680:7:23::1;5674:21;5699:1;5674:26:::0;5666:75:::1;;;::::0;-1:-1:-1;;;5666:75:23;;17206:2:30;5666:75:23::1;::::0;::::1;17188:21:30::0;17245:2;17225:18;;;17218:30;17284:34;17264:18;;;17257:62;-1:-1:-1;;;17335:18:30;;;17328:34;17379:19;;5666:75:23::1;17004:400:30::0;5666:75:23::1;5747:16;5755:7;5747;:16::i;3553:153:7:-:0;3647:52;929:10:14;3680:8:7;3690;3647:18;:52::i;3857:96:23:-;1334:13:1;:11;:13::i;:::-;3910:10:23::1;::::0;;;:6:::1;:10;::::0;;;;;:17;;-1:-1:-1;;3910:17:23::1;3923:4;3910:17;::::0;;3938:10;3917:2;;3938:10:::1;::::0;::::1;3857:96:::0;:::o;4044:95::-;1334:13:1;:11;:13::i;:::-;4108:5:23::1;4095:10:::0;;;:6:::1;:10;::::0;;;;;:18;;-1:-1:-1;;4095:18:23::1;::::0;;4124:10;4102:2;;4124:10:::1;::::0;::::1;4044:95:::0;:::o;4006:394:7:-;-1:-1:-1;;;;;4206:20:7;;929:10:14;4206:20:7;;:60;;-1:-1:-1;4230:36:7;4247:4;929:10:14;3773:166:7;:::i;4230:36::-;4185:153;;;;-1:-1:-1;;;4185:153:7;;;;;;;:::i;:::-;4348:45;4366:4;4372:2;4376;4380:6;4388:4;4348:17;:45::i;1415:178:0:-;1334:13:1;:11;:13::i;:::-;1504::0::1;:24:::0;;-1:-1:-1;;;;;1504:24:0;::::1;-1:-1:-1::0;;;;;;1504:24:0;;::::1;::::0;::::1;::::0;;;1568:7:::1;1513:6:1::0;;-1:-1:-1;;;;;1513:6:1;;1441:85;1568:7:0::1;-1:-1:-1::0;;;;;1543:43:0::1;;;;;;;;;;;1415:178:::0;:::o;5164:171:23:-;5303:27;5314:4;5320:2;5324:5;5303:10;:27::i;2082:121::-;1334:13:1;:11;:13::i;:::-;2145:6:23::1;:18:::0;;-1:-1:-1;;;;;;2145:18:23::1;-1:-1:-1::0;;;;;2145:18:23;::::1;::::0;;::::1;::::0;;;2174:24:::1;::::0;::::1;::::0;-1:-1:-1;;2174:24:23::1;2082:121:::0;:::o;1724:120::-;1776:6;;-1:-1:-1;;;;;1776:6:23;929:10:14;1776:22:23;1768:71;;;;-1:-1:-1;;;1768:71:23;;17611:2:30;1768:71:23;;;17593:21:30;17650:2;17630:18;;;17623:30;17689:34;17669:18;;;17662:62;-1:-1:-1;;;17740:18:30;;;17733:34;17784:19;;1768:71:23;17409:400:30;10137:791:7;-1:-1:-1;;;;;10309:16:7;;10301:62;;;;-1:-1:-1;;;10301:62:7;;;;;;;:::i;:::-;10395:7;:14;10381:3;:10;:28;10373:81;;;;-1:-1:-1;;;10373:81:7;;;;;;;:::i;:::-;929:10:14;10507:66:7;929:10:14;10465:16:7;10550:2;10554:3;10559:7;10568:4;10507:20;:66::i;:::-;10589:9;10584:101;10608:3;:10;10604:1;:14;10584:101;;;10664:7;10672:1;10664:10;;;;;;;;:::i;:::-;;;;;;;10639:9;:17;10649:3;10653:1;10649:6;;;;;;;;:::i;:::-;;;;;;;10639:17;;;;;;;;;;;:21;10657:2;-1:-1:-1;;;;;10639:21:7;-1:-1:-1;;;;;10639:21:7;;;;;;;;;;;;;:35;;;;;;;:::i;:::-;;;;-1:-1:-1;10620:3:7;;-1:-1:-1;10620:3:7;;;:::i;:::-;;;;10584:101;;;;10736:2;-1:-1:-1;;;;;10700:53:7;10732:1;-1:-1:-1;;;;;10700:53:7;10714:8;-1:-1:-1;;;;;10700:53:7;;10740:3;10745:7;10700:53;;;;;;;:::i;:::-;;;;;;;;10840:81;10876:8;10894:1;10898:2;10902:3;10907:7;10916:4;10840:35;:81::i;6641:1115::-;6861:7;:14;6847:3;:10;:28;6839:81;;;;-1:-1:-1;;;6839:81:7;;;;;;;:::i;:::-;-1:-1:-1;;;;;6938:16:7;;6930:66;;;;-1:-1:-1;;;6930:66:7;;;;;;;:::i;:::-;929:10:14;7049:60:7;929:10:14;7080:4:7;7086:2;7090:3;7095:7;7104:4;7049:20;:60::i;:::-;7125:9;7120:411;7144:3;:10;7140:1;:14;7120:411;;;7175:10;7188:3;7192:1;7188:6;;;;;;;;:::i;:::-;;;;;;;7175:19;;7208:14;7225:7;7233:1;7225:10;;;;;;;;:::i;:::-;;;;;;;;;;;;7250:19;7272:13;;;:9;:13;;;;;;-1:-1:-1;;;;;7272:19:7;;;;;;;;;;;;7225:10;;-1:-1:-1;7313:21:7;;;;7305:76;;;;-1:-1:-1;;;7305:76:7;;;;;;;:::i;:::-;7423:13;;;;:9;:13;;;;;;;;-1:-1:-1;;;;;7423:19:7;;;;;;;;;;7445:20;;;7423:42;;7493:17;;;;;;;:27;;7445:20;;7423:13;7493:27;;7445:20;;7493:27;:::i;:::-;;;;;;;;7161:370;;;7156:3;;;;:::i;:::-;;;7120:411;;;;7576:2;-1:-1:-1;;;;;7546:47:7;7570:4;-1:-1:-1;;;;;7546:47:7;7560:8;-1:-1:-1;;;;;7546:47:7;;7580:3;7585:7;7546:47;;;;;;;:::i;:::-;;;;;;;;7674:75;7710:8;7720:4;7726:2;7730:3;7735:7;7744:4;7674:35;:75::i;:::-;6829:927;6641:1115;;;;;:::o;1526:66:23:-;1334:13:1;:11;:13::i;2938:974:3:-;951:66;3384:59;;;3380:526;;;3459:37;3478:17;3459:18;:37::i;3380:526::-;3560:17;-1:-1:-1;;;;;3531:61:3;;:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3531:63:3;;;;;;;;-1:-1:-1;;3531:63:3;;;;;;;;;;;;:::i;:::-;;;3527:302;;3758:56;;-1:-1:-1;;;3758:56:3;;20433:2:30;3758:56:3;;;20415:21:30;20472:2;20452:18;;;20445:30;20511:34;20491:18;;;20484:62;-1:-1:-1;;;20562:18:30;;;20555:44;20616:19;;3758:56:3;20231:410:30;3527:302:3;-1:-1:-1;;;;;;;;;;;3644:28:3;;3636:82;;;;-1:-1:-1;;;3636:82:3;;20848:2:30;3636:82:3;;;20830:21:30;20887:2;20867:18;;;20860:30;20926:34;20906:18;;;20899:62;-1:-1:-1;;;20977:18:30;;;20970:39;21026:19;;3636:82:3;20646:405:30;3636:82:3;3595:138;3842:53;3860:17;3879:4;3885:9;3842:17;:53::i;1777:153:0:-;1866:13;1859:20;;-1:-1:-1;;;;;;1859:20:0;;;1889:34;1914:8;1889:24;:34::i;1042:67:6:-;5363:13:5;;;;;;;5355:69;;;;-1:-1:-1;;;5355:69:5;;;;;;;:::i;1300:117:7:-;5363:13:5;;;;;;;5355:69;;;;-1:-1:-1;;;5355:69:5;;;;;;;:::i;:::-;1380:30:7::1;1405:4;1380:24;:30::i;981:347:10:-:0;-1:-1:-1;;;;;1140:23:10;;929:10:14;1140:23:10;;:66;;-1:-1:-1;1167:39:10;1184:7;929:10:14;3773:166:7;:::i;1167:39:10:-;1119:159;;;;-1:-1:-1;;;1119:159:10;;;;;;;:::i;:::-;1289:32;1300:7;1309:3;1314:6;1289:10;:32::i;1599:130:1:-;1513:6;;-1:-1:-1;;;;;1513:6:1;929:10:14;1662:23:1;1654:68;;;;-1:-1:-1;;;1654:68:1;;21670:2:30;1654:68:1;;;21652:21:30;;;21689:18;;;21682:30;21748:34;21728:18;;;21721:62;21800:18;;1654:68:1;21468:356:30;11214:786:7;-1:-1:-1;;;;;11336:18:7;;11328:66;;;;-1:-1:-1;;;11328:66:7;;;;;;;:::i;:::-;929:10:14;11405:16:7;11469:21;11487:2;11469:17;:21::i;:::-;11446:44;;11500:24;11527:25;11545:6;11527:17;:25::i;:::-;11500:52;;11563:66;11584:8;11594:4;11608:1;11612:3;11617:7;11563:66;;;;;;;;;;;;:20;:66::i;:::-;11640:19;11662:13;;;:9;:13;;;;;;;;-1:-1:-1;;;;;11662:19:7;;;;;;;;;;11699:21;;;;11691:70;;;;-1:-1:-1;;;11691:70:7;;;;;;;:::i;:::-;11795:13;;;;:9;:13;;;;;;;;-1:-1:-1;;;;;11795:19:7;;;;;;;;;;;;11817:20;;;11795:42;;11863:54;;22812:25:30;;;22853:18;;;22846:34;;;11795:19:7;;11863:54;;;;;;22785:18:30;11863:54:7;;;;;;;11928:65;;;;;;;;;11972:1;11928:65;;;11318:682;;;;11214:786;;;:::o;9038:709::-;-1:-1:-1;;;;;9185:16:7;;9177:62;;;;-1:-1:-1;;;9177:62:7;;;;;;;:::i;:::-;929:10:14;9250:16:7;9314:21;9332:2;9314:17;:21::i;:::-;9291:44;;9345:24;9372:25;9390:6;9372:17;:25::i;:::-;9345:52;;9408:66;9429:8;9447:1;9451:2;9455:3;9460:7;9469:4;9408:20;:66::i;:::-;9485:13;;;;:9;:13;;;;;;;;-1:-1:-1;;;;;9485:17:7;;;;;;;;;:27;;9506:6;;9485:13;:27;;9506:6;;9485:27;:::i;:::-;;;;-1:-1:-1;;9527:52:7;;;22812:25:30;;;22868:2;22853:18;;22846:34;;;-1:-1:-1;;;;;9527:52:7;;;;9560:1;;9527:52;;;;;;22785:18:30;9527:52:7;;;;;;;9666:74;9697:8;9715:1;9719:2;9723;9727:6;9735:4;9666:30;:74::i;12239:943::-;-1:-1:-1;;;;;12386:18:7;;12378:66;;;;-1:-1:-1;;;12378:66:7;;;;;;;:::i;:::-;12476:7;:14;12462:3;:10;:28;12454:81;;;;-1:-1:-1;;;12454:81:7;;;;;;;:::i;:::-;12546:16;929:10:14;12546:31:7;;12588:66;12609:8;12619:4;12633:1;12637:3;12642:7;12588:66;;;;;;;;;;;;:20;:66::i;:::-;12670:9;12665:364;12689:3;:10;12685:1;:14;12665:364;;;12720:10;12733:3;12737:1;12733:6;;;;;;;;:::i;:::-;;;;;;;12720:19;;12753:14;12770:7;12778:1;12770:10;;;;;;;;:::i;:::-;;;;;;;;;;;;12795:19;12817:13;;;:9;:13;;;;;;-1:-1:-1;;;;;12817:19:7;;;;;;;;;;;;12770:10;;-1:-1:-1;12858:21:7;;;;12850:70;;;;-1:-1:-1;;;12850:70:7;;;;;;;:::i;:::-;12962:13;;;;:9;:13;;;;;;;;-1:-1:-1;;;;;12962:19:7;;;;;;;;;;12984:20;;12962:42;;12701:3;;;;:::i;:::-;;;;12665:364;;;;13082:1;-1:-1:-1;;;;;13044:55:7;13068:4;-1:-1:-1;;;;;13044:55:7;13058:8;-1:-1:-1;;;;;13044:55:7;;13086:3;13091:7;13044:55;;;;;;;:::i;:::-;;;;;;;;13110:65;;;;;;;;;13154:1;13110:65;;;6641:1115;8579:86;8645:4;:13;8652:6;8645:4;:13;:::i;13318:323::-;13468:8;-1:-1:-1;;;;;13459:17:7;:5;-1:-1:-1;;;;;13459:17:7;;13451:71;;;;-1:-1:-1;;;13451:71:7;;25297:2:30;13451:71:7;;;25279:21:30;25336:2;25316:18;;;25309:30;25375:34;25355:18;;;25348:62;-1:-1:-1;;;25426:18:30;;;25419:39;25475:19;;13451:71:7;25095:405:30;13451:71:7;-1:-1:-1;;;;;13532:25:7;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;-1:-1:-1;;13532:46:7;;;;;;;;;;13593:41;;1182::30;;;13593::7;;1155:18:30;13593:41:7;;;;;;;13318:323;;;:::o;5348:947::-;-1:-1:-1;;;;;5529:16:7;;5521:66;;;;-1:-1:-1;;;5521:66:7;;;;;;;:::i;:::-;929:10:14;5598:16:7;5662:21;5680:2;5662:17;:21::i;:::-;5639:44;;5693:24;5720:25;5738:6;5720:17;:25::i;:::-;5693:52;;5756:60;5777:8;5787:4;5793:2;5797:3;5802:7;5811:4;5756:20;:60::i;:::-;5827:19;5849:13;;;:9;:13;;;;;;;;-1:-1:-1;;;;;5849:19:7;;;;;;;;;;5886:21;;;;5878:76;;;;-1:-1:-1;;;5878:76:7;;;;;;;:::i;:::-;5988:13;;;;:9;:13;;;;;;;;-1:-1:-1;;;;;5988:19:7;;;;;;;;;;6010:20;;;5988:42;;6050:17;;;;;;;:27;;6010:20;;5988:13;6050:27;;6010:20;;6050:27;:::i;:::-;;;;-1:-1:-1;;6093:46:7;;;22812:25:30;;;22868:2;22853:18;;22846:34;;;-1:-1:-1;;;;;6093:46:7;;;;;;;;;;;;;;22785:18:30;6093:46:7;;;;;;;6220:68;6251:8;6261:4;6267:2;6271;6275:6;6283:4;6220:30;:68::i;:::-;5511:784;;;;5348:947;;;;;:::o;660:315:10:-;-1:-1:-1;;;;;794:23:10;;929:10:14;794:23:10;;:66;;-1:-1:-1;821:39:10;838:7;929:10:14;3773:166:7;:::i;821:39:10:-;773:159;;;;-1:-1:-1;;;773:159:10;;;;;;;:::i;:::-;943:25;949:7;958:2;962:5;943;:25::i;2349:460:23:-;-1:-1:-1;;;;;2592:16:23;;;2588:145;;2623:9;2618:109;2638:3;:10;2634:1;:14;2618:109;;;2674:6;:14;2681:3;2685:1;2681:6;;;;;;;;:::i;:::-;;;;;;;;;;;;2674:14;;;;;;;;;;-1:-1:-1;2674:14:23;;;;2673:15;2665:53;;;;-1:-1:-1;;;2665:53:23;;25707:2:30;2665:53:23;;;25689:21:30;25746:2;25726:18;;;25719:30;25785:27;25765:18;;;25758:55;25830:18;;2665:53:23;25505:349:30;2665:53:23;2650:3;;;;:::i;:::-;;;;2618:109;;;;2588:145;2738:66;2765:8;2775:4;2781:2;2785:3;2790:7;2799:4;2738:26;:66::i;16696:814:7:-;-1:-1:-1;;;;;16928:13:7;;1476:19:13;:23;16924:580:7;;16963:90;;-1:-1:-1;;;16963:90:7;;-1:-1:-1;;;;;16963:54:7;;;;;:90;;17018:8;;17028:4;;17034:3;;17039:7;;17048:4;;16963:90;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;16963:90:7;;;;;;;;-1:-1:-1;;16963:90:7;;;;;;;;;;;;:::i;:::-;;;16959:535;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;17370:6;17363:14;;-1:-1:-1;;;17363:14:7;;;;;;;;:::i;16959:535::-;;;17417:62;;-1:-1:-1;;;17417:62:7;;28030:2:30;17417:62:7;;;28012:21:30;28069:2;28049:18;;;28042:30;28108:34;28088:18;;;28081:62;-1:-1:-1;;;28159:18:30;;;28152:50;28219:19;;17417:62:7;27828:416:30;16959:535:7;-1:-1:-1;;;;;;17132:71:7;;-1:-1:-1;;;17132:71:7;17128:168;;17227:50;;-1:-1:-1;;;17227:50:7;;;;;;;:::i;1805:281:3:-;-1:-1:-1;;;;;1476:19:13;;;1878:106:3;;;;-1:-1:-1;;;1878:106:3;;28860:2:30;1878:106:3;;;28842:21:30;28899:2;28879:18;;;28872:30;28938:34;28918:18;;;28911:62;-1:-1:-1;;;28989:18:30;;;28982:43;29042:19;;1878:106:3;28658:409:30;1878:106:3;-1:-1:-1;;;;;;;;;;;1994:85:3;;-1:-1:-1;;;;;;1994:85:3;-1:-1:-1;;;;;1994:85:3;;;;;;;;;;1805:281::o;2478:288::-;2616:29;2627:17;2616:10;:29::i;:::-;2673:1;2659:4;:11;:15;:28;;;;2678:9;2659:28;2655:105;;;2703:46;2725:17;2744:4;2703:21;:46::i;2673:187:1:-;2765:6;;;-1:-1:-1;;;;;2781:17:1;;;-1:-1:-1;;;;;;2781:17:1;;;;;;;2813:40;;2765:6;;;2781:17;2765:6;;2813:40;;2746:16;;2813:40;2736:124;2673:187;:::o;1423:110:7:-;5363:13:5;;;;;;;5355:69;;;;-1:-1:-1;;;5355:69:5;;;;;;;:::i;17516:193:7:-;17635:16;;;17649:1;17635:16;;;;;;;;;17582;;17610:22;;17635:16;;;;;;;;;;;;-1:-1:-1;17635:16:7;17610:41;;17672:7;17661:5;17667:1;17661:8;;;;;;;;:::i;:::-;;;;;;;;;;:18;17697:5;17516:193;-1:-1:-1;;17516:193:7:o;15943:747::-;-1:-1:-1;;;;;16150:13:7;;1476:19:13;:23;16146:538:7;;16185:83;;-1:-1:-1;;;16185:83:7;;-1:-1:-1;;;;;16185:49:7;;;;;:83;;16235:8;;16245:4;;16251:2;;16255:6;;16263:4;;16185:83;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;16185:83:7;;;;;;;;-1:-1:-1;;16185:83:7;;;;;;;;;;;;:::i;:::-;;;16181:493;;;;:::i;:::-;-1:-1:-1;;;;;;16317:66:7;;-1:-1:-1;;;16317:66:7;16313:163;;16407:50;;-1:-1:-1;;;16407:50:7;;;;;;;:::i;1350:904:11:-;-1:-1:-1;;;;;1662:18:11;;1658:156;;1701:9;1696:108;1720:3;:10;1716:1;:14;1696:108;;;1779:7;1787:1;1779:10;;;;;;;;:::i;:::-;;;;;;;1755:12;:20;1768:3;1772:1;1768:6;;;;;;;;:::i;:::-;;;;;;;1755:20;;;;;;;;;;;;:34;;;;;;;:::i;:::-;;;;-1:-1:-1;1732:3:11;;-1:-1:-1;1732:3:11;;:::i;:::-;;;1696:108;;;;1658:156;-1:-1:-1;;;;;1828:16:11;;1824:424;;1865:9;1860:378;1884:3;:10;1880:1;:14;1860:378;;;1919:10;1932:3;1936:1;1932:6;;;;;;;;:::i;:::-;;;;;;;1919:19;;1956:14;1973:7;1981:1;1973:10;;;;;;;;:::i;:::-;;;;;;;1956:27;;2001:14;2018:12;:16;2031:2;2018:16;;;;;;;;;;;;2001:33;;2070:6;2060;:16;;2052:69;;;;-1:-1:-1;;;2052:69:11;;29863:2:30;2052:69:11;;;29845:21:30;29902:2;29882:18;;;29875:30;29941:34;29921:18;;;29914:62;-1:-1:-1;;;29992:18:30;;;29985:38;30040:19;;2052:69:11;29661:404:30;2052:69:11;2171:16;;;;:12;:16;;;;;;2190:15;;2171:34;;1896:3;;;:::i;:::-;;;1860:378;;2192:152:3;2258:37;2277:17;2258:18;:37::i;:::-;2310:27;;-1:-1:-1;;;;;2310:27:3;;;;;;;;2192:152;:::o;7088:455::-;7171:12;-1:-1:-1;;;;;1476:19:13;;;7195:88:3;;;;-1:-1:-1;;;7195:88:3;;30272:2:30;7195:88:3;;;30254:21:30;30311:2;30291:18;;;30284:30;30350:34;30330:18;;;30323:62;-1:-1:-1;;;30401:18:30;;;30394:36;30447:19;;7195:88:3;30070:402:30;7195:88:3;7354:12;7368:23;7395:6;-1:-1:-1;;;;;7395:19:3;7415:4;7395:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7353:67;;;;7437:99;7473:7;7482:10;7437:99;;;;;;;;;;;;;;;;;:35;:99::i;:::-;7430:106;7088:455;-1:-1:-1;;;;;7088:455:3:o;7438:295:13:-;7584:12;7612:7;7608:119;;;-1:-1:-1;7642:10:13;7635:17;;7608:119;7683:33;7691:10;7703:12;7683:7;:33::i;:::-;7438:295;;;;;:::o;7739:540::-;7898:17;;:21;7894:379;;8126:10;8120:17;8182:15;8169:10;8165:2;8161:19;8154:44;14:196:30;82:20;;-1:-1:-1;;;;;131:54:30;;121:65;;111:93;;200:1;197;190:12;111:93;14:196;;;:::o;215:254::-;283:6;291;344:2;332:9;323:7;319:23;315:32;312:52;;;360:1;357;350:12;312:52;383:29;402:9;383:29;:::i;:::-;373:39;459:2;444:18;;;;431:32;;-1:-1:-1;;;215:254:30:o;656:131::-;-1:-1:-1;;;;;;730:32:30;;720:43;;710:71;;777:1;774;767:12;792:245;850:6;903:2;891:9;882:7;878:23;874:32;871:52;;;919:1;916;909:12;871:52;958:9;945:23;977:30;1001:5;977:30;:::i;1465:180::-;1524:6;1577:2;1565:9;1556:7;1552:23;1548:32;1545:52;;;1593:1;1590;1583:12;1545:52;-1:-1:-1;1616:23:30;;1465:180;-1:-1:-1;1465:180:30:o;1650:250::-;1735:1;1745:113;1759:6;1756:1;1753:13;1745:113;;;1835:11;;;1829:18;1816:11;;;1809:39;1781:2;1774:10;1745:113;;;-1:-1:-1;;1892:1:30;1874:16;;1867:27;1650:250::o;1905:271::-;1947:3;1985:5;1979:12;2012:6;2007:3;2000:19;2028:76;2097:6;2090:4;2085:3;2081:14;2074:4;2067:5;2063:16;2028:76;:::i;:::-;2158:2;2137:15;-1:-1:-1;;2133:29:30;2124:39;;;;2165:4;2120:50;;1905:271;-1:-1:-1;;1905:271:30:o;2181:220::-;2330:2;2319:9;2312:21;2293:4;2350:45;2391:2;2380:9;2376:18;2368:6;2350:45;:::i;2406:127::-;2467:10;2462:3;2458:20;2455:1;2448:31;2498:4;2495:1;2488:15;2522:4;2519:1;2512:15;2538:249;2648:2;2629:13;;-1:-1:-1;;2625:27:30;2613:40;;2683:18;2668:34;;2704:22;;;2665:62;2662:88;;;2730:18;;:::i;:::-;2766:2;2759:22;-1:-1:-1;;2538:249:30:o;2792:183::-;2852:4;2885:18;2877:6;2874:30;2871:56;;;2907:18;;:::i;:::-;-1:-1:-1;2952:1:30;2948:14;2964:4;2944:25;;2792:183::o;2980:724::-;3034:5;3087:3;3080:4;3072:6;3068:17;3064:27;3054:55;;3105:1;3102;3095:12;3054:55;3141:6;3128:20;3167:4;3190:43;3230:2;3190:43;:::i;:::-;3262:2;3256:9;3274:31;3302:2;3294:6;3274:31;:::i;:::-;3340:18;;;3432:1;3428:10;;;;3416:23;;3412:32;;;3374:15;;;;-1:-1:-1;3456:15:30;;;3453:35;;;3484:1;3481;3474:12;3453:35;3520:2;3512:6;3508:15;3532:142;3548:6;3543:3;3540:15;3532:142;;;3614:17;;3602:30;;3652:12;;;;3565;;3532:142;;;-1:-1:-1;3692:6:30;2980:724;-1:-1:-1;;;;;;2980:724:30:o;3709:555::-;3751:5;3804:3;3797:4;3789:6;3785:17;3781:27;3771:55;;3822:1;3819;3812:12;3771:55;3858:6;3845:20;3884:18;3880:2;3877:26;3874:52;;;3906:18;;:::i;:::-;3955:2;3949:9;3967:67;4022:2;4003:13;;-1:-1:-1;;3999:27:30;4028:4;3995:38;3949:9;3967:67;:::i;:::-;4058:2;4050:6;4043:18;4104:3;4097:4;4092:2;4084:6;4080:15;4076:26;4073:35;4070:55;;;4121:1;4118;4111:12;4070:55;4185:2;4178:4;4170:6;4166:17;4159:4;4151:6;4147:17;4134:54;4232:1;4208:15;;;4225:4;4204:26;4197:37;;;;4212:6;3709:555;-1:-1:-1;;;3709:555:30:o;4269:868::-;4414:6;4422;4430;4438;4491:3;4479:9;4470:7;4466:23;4462:33;4459:53;;;4508:1;4505;4498:12;4459:53;4531:29;4550:9;4531:29;:::i;:::-;4521:39;;4611:2;4600:9;4596:18;4583:32;4634:18;4675:2;4667:6;4664:14;4661:34;;;4691:1;4688;4681:12;4661:34;4714:61;4767:7;4758:6;4747:9;4743:22;4714:61;:::i;:::-;4704:71;;4828:2;4817:9;4813:18;4800:32;4784:48;;4857:2;4847:8;4844:16;4841:36;;;4873:1;4870;4863:12;4841:36;4896:63;4951:7;4940:8;4929:9;4925:24;4896:63;:::i;:::-;4886:73;;5012:2;5001:9;4997:18;4984:32;4968:48;;5041:2;5031:8;5028:16;5025:36;;;5057:1;5054;5047:12;5025:36;;5080:51;5123:7;5112:8;5101:9;5097:24;5080:51;:::i;:::-;5070:61;;;4269:868;;;;;;;:::o;5142:943::-;5296:6;5304;5312;5320;5328;5381:3;5369:9;5360:7;5356:23;5352:33;5349:53;;;5398:1;5395;5388:12;5349:53;5421:29;5440:9;5421:29;:::i;:::-;5411:39;;5469:38;5503:2;5492:9;5488:18;5469:38;:::i;:::-;5459:48;;5558:2;5547:9;5543:18;5530:32;5581:18;5622:2;5614:6;5611:14;5608:34;;;5638:1;5635;5628:12;5608:34;5661:61;5714:7;5705:6;5694:9;5690:22;5661:61;:::i;:::-;5651:71;;5775:2;5764:9;5760:18;5747:32;5731:48;;5804:2;5794:8;5791:16;5788:36;;;5820:1;5817;5810:12;5788:36;5843:63;5898:7;5887:8;5876:9;5872:24;5843:63;:::i;:::-;5833:73;;5959:3;5948:9;5944:19;5931:33;5915:49;;5989:2;5979:8;5976:16;5973:36;;;6005:1;6002;5995:12;5973:36;;6028:51;6071:7;6060:8;6049:9;6045:24;6028:51;:::i;:::-;6018:61;;;5142:943;;;;;;;;:::o;6090:186::-;6149:6;6202:2;6190:9;6181:7;6177:23;6173:32;6170:52;;;6218:1;6215;6208:12;6170:52;6241:29;6260:9;6241:29;:::i;6281:469::-;6368:6;6376;6384;6437:2;6425:9;6416:7;6412:23;6408:32;6405:52;;;6453:1;6450;6443:12;6405:52;6493:9;6480:23;6526:18;6518:6;6515:30;6512:50;;;6558:1;6555;6548:12;6512:50;6581:49;6622:7;6613:6;6602:9;6598:22;6581:49;:::i;:::-;6571:59;;;6649:38;6683:2;6672:9;6668:18;6649:38;:::i;:::-;6639:48;;6706:38;6740:2;6729:9;6725:18;6706:38;:::i;:::-;6696:48;;6281:469;;;;;:::o;6755:1208::-;6873:6;6881;6934:2;6922:9;6913:7;6909:23;6905:32;6902:52;;;6950:1;6947;6940:12;6902:52;6990:9;6977:23;7019:18;7060:2;7052:6;7049:14;7046:34;;;7076:1;7073;7066:12;7046:34;7114:6;7103:9;7099:22;7089:32;;7159:7;7152:4;7148:2;7144:13;7140:27;7130:55;;7181:1;7178;7171:12;7130:55;7217:2;7204:16;7239:4;7262:43;7302:2;7262:43;:::i;:::-;7334:2;7328:9;7346:31;7374:2;7366:6;7346:31;:::i;:::-;7412:18;;;7500:1;7496:10;;;;7488:19;;7484:28;;;7446:15;;;;-1:-1:-1;7524:19:30;;;7521:39;;;7556:1;7553;7546:12;7521:39;7580:11;;;;7600:148;7616:6;7611:3;7608:15;7600:148;;;7682:23;7701:3;7682:23;:::i;:::-;7670:36;;7633:12;;;;7726;;;;7600:148;;;7767:6;-1:-1:-1;;7811:18:30;;7798:32;;-1:-1:-1;;7842:16:30;;;7839:36;;;7871:1;7868;7861:12;7839:36;;7894:63;7949:7;7938:8;7927:9;7923:24;7894:63;:::i;:::-;7884:73;;;6755:1208;;;;;:::o;7968:435::-;8021:3;8059:5;8053:12;8086:6;8081:3;8074:19;8112:4;8141:2;8136:3;8132:12;8125:19;;8178:2;8171:5;8167:14;8199:1;8209:169;8223:6;8220:1;8217:13;8209:169;;;8284:13;;8272:26;;8318:12;;;;8353:15;;;;8245:1;8238:9;8209:169;;;-1:-1:-1;8394:3:30;;7968:435;-1:-1:-1;;;;;7968:435:30:o;8408:261::-;8587:2;8576:9;8569:21;8550:4;8607:56;8659:2;8648:9;8644:18;8636:6;8607:56;:::i;8674:394::-;8751:6;8759;8812:2;8800:9;8791:7;8787:23;8783:32;8780:52;;;8828:1;8825;8818:12;8780:52;8851:29;8870:9;8851:29;:::i;:::-;8841:39;;8931:2;8920:9;8916:18;8903:32;8958:18;8950:6;8947:30;8944:50;;;8990:1;8987;8980:12;8944:50;9013:49;9054:7;9045:6;9034:9;9030:22;9013:49;:::i;9255:669::-;9382:6;9390;9398;9451:2;9439:9;9430:7;9426:23;9422:32;9419:52;;;9467:1;9464;9457:12;9419:52;9490:29;9509:9;9490:29;:::i;:::-;9480:39;;9570:2;9559:9;9555:18;9542:32;9593:18;9634:2;9626:6;9623:14;9620:34;;;9650:1;9647;9640:12;9620:34;9673:61;9726:7;9717:6;9706:9;9702:22;9673:61;:::i;:::-;9663:71;;9787:2;9776:9;9772:18;9759:32;9743:48;;9816:2;9806:8;9803:16;9800:36;;;9832:1;9829;9822:12;9800:36;;9855:63;9910:7;9899:8;9888:9;9884:24;9855:63;:::i;:::-;9845:73;;;9255:669;;;;;:::o;9929:322::-;10006:6;10014;10022;10075:2;10063:9;10054:7;10050:23;10046:32;10043:52;;;10091:1;10088;10081:12;10043:52;10114:29;10133:9;10114:29;:::i;:::-;10104:39;10190:2;10175:18;;10162:32;;-1:-1:-1;10241:2:30;10226:18;;;10213:32;;9929:322;-1:-1:-1;;;9929:322:30:o;10256:531::-;10351:6;10359;10367;10375;10428:3;10416:9;10407:7;10403:23;10399:33;10396:53;;;10445:1;10442;10435:12;10396:53;10468:29;10487:9;10468:29;:::i;:::-;10458:39;;10544:2;10533:9;10529:18;10516:32;10506:42;;10595:2;10584:9;10580:18;10567:32;10557:42;;10650:2;10639:9;10635:18;10622:32;10677:18;10669:6;10666:30;10663:50;;;10709:1;10706;10699:12;10663:50;10732:49;10773:7;10764:6;10753:9;10749:22;10732:49;:::i;10792:321::-;10861:6;10914:2;10902:9;10893:7;10889:23;10885:32;10882:52;;;10930:1;10927;10920:12;10882:52;10970:9;10957:23;11003:18;10995:6;10992:30;10989:50;;;11035:1;11032;11025:12;10989:50;11058:49;11099:7;11090:6;11079:9;11075:22;11058:49;:::i;:::-;11048:59;10792:321;-1:-1:-1;;;;10792:321:30:o;11118:347::-;11183:6;11191;11244:2;11232:9;11223:7;11219:23;11215:32;11212:52;;;11260:1;11257;11250:12;11212:52;11283:29;11302:9;11283:29;:::i;:::-;11273:39;;11362:2;11351:9;11347:18;11334:32;11409:5;11402:13;11395:21;11388:5;11385:32;11375:60;;11431:1;11428;11421:12;11375:60;11454:5;11444:15;;;11118:347;;;;;:::o;11470:260::-;11538:6;11546;11599:2;11587:9;11578:7;11574:23;11570:32;11567:52;;;11615:1;11612;11605:12;11567:52;11638:29;11657:9;11638:29;:::i;:::-;11628:39;;11686:38;11720:2;11709:9;11705:18;11686:38;:::i;:::-;11676:48;;11470:260;;;;;:::o;11735:606::-;11839:6;11847;11855;11863;11871;11924:3;11912:9;11903:7;11899:23;11895:33;11892:53;;;11941:1;11938;11931:12;11892:53;11964:29;11983:9;11964:29;:::i;:::-;11954:39;;12012:38;12046:2;12035:9;12031:18;12012:38;:::i;:::-;12002:48;;12097:2;12086:9;12082:18;12069:32;12059:42;;12148:2;12137:9;12133:18;12120:32;12110:42;;12203:3;12192:9;12188:19;12175:33;12231:18;12223:6;12220:30;12217:50;;;12263:1;12260;12253:12;12217:50;12286:49;12327:7;12318:6;12307:9;12303:22;12286:49;:::i;12757:380::-;12836:1;12832:12;;;;12879;;;12900:61;;12954:4;12946:6;12942:17;12932:27;;12900:61;13007:2;12999:6;12996:14;12976:18;12973:38;12970:161;;13053:10;13048:3;13044:20;13041:1;13034:31;13088:4;13085:1;13078:15;13116:4;13113:1;13106:15;12970:161;;12757:380;;;:::o;13142:410::-;13344:2;13326:21;;;13383:2;13363:18;;;13356:30;13422:34;13417:2;13402:18;;13395:62;-1:-1:-1;;;13488:2:30;13473:18;;13466:44;13542:3;13527:19;;13142:410::o;13557:408::-;13759:2;13741:21;;;13798:2;13778:18;;;13771:30;13837:34;13832:2;13817:18;;13810:62;-1:-1:-1;;;13903:2:30;13888:18;;13881:42;13955:3;13940:19;;13557:408::o;13970:::-;14172:2;14154:21;;;14211:2;14191:18;;;14184:30;14250:34;14245:2;14230:18;;14223:62;-1:-1:-1;;;14316:2:30;14301:18;;14294:42;14368:3;14353:19;;13970:408::o;15407:127::-;15468:10;15463:3;15459:20;15456:1;15449:31;15499:4;15496:1;15489:15;15523:4;15520:1;15513:15;15539:127;15600:10;15595:3;15591:20;15588:1;15581:31;15631:4;15628:1;15621:15;15655:4;15652:1;15645:15;15671:135;15710:3;15731:17;;;15728:43;;15751:18;;:::i;:::-;-1:-1:-1;15798:1:30;15787:13;;15671:135::o;17814:397::-;18016:2;17998:21;;;18055:2;18035:18;;;18028:30;18094:34;18089:2;18074:18;;18067:62;-1:-1:-1;;;18160:2:30;18145:18;;18138:31;18201:3;18186:19;;17814:397::o;18216:404::-;18418:2;18400:21;;;18457:2;18437:18;;;18430:30;18496:34;18491:2;18476:18;;18469:62;-1:-1:-1;;;18562:2:30;18547:18;;18540:38;18610:3;18595:19;;18216:404::o;18625:125::-;18690:9;;;18711:10;;;18708:36;;;18724:18;;:::i;18755:465::-;19012:2;19001:9;18994:21;18975:4;19038:56;19090:2;19079:9;19075:18;19067:6;19038:56;:::i;:::-;19142:9;19134:6;19130:22;19125:2;19114:9;19110:18;19103:50;19170:44;19207:6;19199;19170:44;:::i;19225:401::-;19427:2;19409:21;;;19466:2;19446:18;;;19439:30;19505:34;19500:2;19485:18;;19478:62;-1:-1:-1;;;19571:2:30;19556:18;;19549:35;19616:3;19601:19;;19225:401::o;19631:406::-;19833:2;19815:21;;;19872:2;19852:18;;;19845:30;19911:34;19906:2;19891:18;;19884:62;-1:-1:-1;;;19977:2:30;19962:18;;19955:40;20027:3;20012:19;;19631:406::o;20042:184::-;20112:6;20165:2;20153:9;20144:7;20140:23;20136:32;20133:52;;;20181:1;20178;20171:12;20133:52;-1:-1:-1;20204:16:30;;20042:184;-1:-1:-1;20042:184:30:o;21056:407::-;21258:2;21240:21;;;21297:2;21277:18;;;21270:30;21336:34;21331:2;21316:18;;21309:62;-1:-1:-1;;;21402:2:30;21387:18;;21380:41;21453:3;21438:19;;21056:407::o;21829:399::-;22031:2;22013:21;;;22070:2;22050:18;;;22043:30;22109:34;22104:2;22089:18;;22082:62;-1:-1:-1;;;22175:2:30;22160:18;;22153:33;22218:3;22203:19;;21829:399::o;22233:400::-;22435:2;22417:21;;;22474:2;22454:18;;;22447:30;22513:34;22508:2;22493:18;;22486:62;-1:-1:-1;;;22579:2:30;22564:18;;22557:34;22623:3;22608:19;;22233:400::o;23017:545::-;23119:2;23114:3;23111:11;23108:448;;;23155:1;23180:5;23176:2;23169:17;23225:4;23221:2;23211:19;23295:2;23283:10;23279:19;23276:1;23272:27;23266:4;23262:38;23331:4;23319:10;23316:20;23313:47;;;-1:-1:-1;23354:4:30;23313:47;23409:2;23404:3;23400:12;23397:1;23393:20;23387:4;23383:31;23373:41;;23464:82;23482:2;23475:5;23472:13;23464:82;;;23527:17;;;23508:1;23497:13;23464:82;;23738:1352;23864:3;23858:10;23891:18;23883:6;23880:30;23877:56;;;23913:18;;:::i;:::-;23942:97;24032:6;23992:38;24024:4;24018:11;23992:38;:::i;:::-;23986:4;23942:97;:::i;:::-;24094:4;;24158:2;24147:14;;24175:1;24170:663;;;;24877:1;24894:6;24891:89;;;-1:-1:-1;24946:19:30;;;24940:26;24891:89;-1:-1:-1;;23695:1:30;23691:11;;;23687:24;23683:29;23673:40;23719:1;23715:11;;;23670:57;24993:81;;24140:944;;24170:663;22964:1;22957:14;;;23001:4;22988:18;;-1:-1:-1;;24206:20:30;;;24324:236;24338:7;24335:1;24332:14;24324:236;;;24427:19;;;24421:26;24406:42;;24519:27;;;;24487:1;24475:14;;;;24354:19;;24324:236;;;24328:3;24588:6;24579:7;24576:19;24573:201;;;24649:19;;;24643:26;-1:-1:-1;;24732:1:30;24728:14;;;24744:3;24724:24;24720:37;24716:42;24701:58;24686:74;;24573:201;-1:-1:-1;;;;;24820:1:30;24804:14;;;24800:22;24787:36;;-1:-1:-1;23738:1352:30:o;25859:850::-;26181:4;-1:-1:-1;;;;;26291:2:30;26283:6;26279:15;26268:9;26261:34;26343:2;26335:6;26331:15;26326:2;26315:9;26311:18;26304:43;;26383:3;26378:2;26367:9;26363:18;26356:31;26410:57;26462:3;26451:9;26447:19;26439:6;26410:57;:::i;:::-;26515:9;26507:6;26503:22;26498:2;26487:9;26483:18;26476:50;26549:44;26586:6;26578;26549:44;:::i;:::-;26535:58;;26642:9;26634:6;26630:22;26624:3;26613:9;26609:19;26602:51;26670:33;26696:6;26688;26670:33;:::i;:::-;26662:41;25859:850;-1:-1:-1;;;;;;;;25859:850:30:o;26714:249::-;26783:6;26836:2;26824:9;26815:7;26811:23;26807:32;26804:52;;;26852:1;26849;26842:12;26804:52;26884:9;26878:16;26903:30;26927:5;26903:30;:::i;26968:179::-;27003:3;27045:1;27027:16;27024:23;27021:120;;;27091:1;27088;27085;27070:23;-1:-1:-1;27128:1:30;27122:8;27117:3;27113:18;26968:179;:::o;27152:671::-;27191:3;27233:4;27215:16;27212:26;27209:39;;;27152:671;:::o;27209:39::-;27275:2;27269:9;-1:-1:-1;;27340:16:30;27336:25;;27333:1;27269:9;27312:50;27391:4;27385:11;27415:16;27450:18;27521:2;27514:4;27506:6;27502:17;27499:25;27494:2;27486:6;27483:14;27480:45;27477:58;;;27528:5;;;;;27152:671;:::o;27477:58::-;27565:6;27559:4;27555:17;27544:28;;27601:3;27595:10;27628:2;27620:6;27617:14;27614:27;;;27634:5;;;;;;27152:671;:::o;27614:27::-;27718:2;27699:16;27693:4;27689:27;27685:36;27678:4;27669:6;27664:3;27660:16;27656:27;27653:69;27650:82;;;27725:5;;;;;;27152:671;:::o;27650:82::-;27741:57;27792:4;27783:6;27775;27771:19;27767:30;27761:4;27741:57;:::i;:::-;-1:-1:-1;27814:3:30;;27152:671;-1:-1:-1;;;;;27152:671:30:o;28249:404::-;28451:2;28433:21;;;28490:2;28470:18;;;28463:30;28529:34;28524:2;28509:18;;28502:62;-1:-1:-1;;;28595:2:30;28580:18;;28573:38;28643:3;28628:19;;28249:404::o;29072:584::-;29294:4;-1:-1:-1;;;;;29404:2:30;29396:6;29392:15;29381:9;29374:34;29456:2;29448:6;29444:15;29439:2;29428:9;29424:18;29417:43;;29496:6;29491:2;29480:9;29476:18;29469:34;29539:6;29534:2;29523:9;29519:18;29512:34;29583:3;29577;29566:9;29562:19;29555:32;29604:46;29645:3;29634:9;29630:19;29622:6;29604:46;:::i;:::-;29596:54;29072:584;-1:-1:-1;;;;;;;29072:584:30:o;30477:287::-;30606:3;30644:6;30638:13;30660:66;30719:6;30714:3;30707:4;30699:6;30695:17;30660:66;:::i;:::-;30742:16;;;;;30477:287;-1:-1:-1;;30477:287:30:o"},"gasEstimates":{"creation":{"codeDepositCost":"2651600","executionCost":"infinite","totalCost":"infinite"},"external":{"acceptOwnership()":"infinite","balanceOf(address,uint256)":"2726","balanceOfBatch(address[],uint256[])":"infinite","burn(address,uint256,uint256)":"infinite","burnBatch(address,uint256[],uint256[])":"infinite","exists(uint256)":"2562","freeze(uint256)":"27931","frozen(uint256)":"2561","initialize(string,address,address)":"infinite","isApprovedForAll(address,address)":"infinite","mint(address,uint256,uint256,bytes)":"infinite","mintBatch(address,uint256[],uint256[],bytes)":"infinite","minter()":"2428","owner()":"2443","pendingOwner()":"2376","proxiableUUID()":"infinite","renounceOwnership()":"infinite","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"infinite","safeTransferFrom(address,address,uint256,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"26750","setMinter(address)":"27984","slash(address,uint256,uint256)":"infinite","slashBatch(address,uint256[],uint256[])":"infinite","supportsInterface(bytes4)":"601","thaw(uint256)":"27881","totalSupply(uint256)":"2516","transferOwnership(address)":"30481","updateTokenURI(string)":"infinite","upgradeTo(address)":"infinite","upgradeToAndCall(address,bytes)":"infinite","uri(uint256)":"infinite"},"internal":{"_authorizeUpgrade(address)":"infinite","_beforeTokenTransfer(address,address,address,uint256[] memory,uint256[] memory,bytes memory)":"infinite","_checkMinter()":"infinite"}},"methodIdentifiers":{"acceptOwnership()":"79ba5097","balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","burn(address,uint256,uint256)":"f5298aca","burnBatch(address,uint256[],uint256[])":"6b20c454","exists(uint256)":"4f558e79","freeze(uint256)":"d7a78db8","frozen(uint256)":"e9ac0440","initialize(string,address,address)":"463fd1af","isApprovedForAll(address,address)":"e985e9c5","mint(address,uint256,uint256,bytes)":"731133e9","mintBatch(address,uint256[],uint256[],bytes)":"1f7fdffa","minter()":"07546172","owner()":"8da5cb5b","pendingOwner()":"e30c3978","proxiableUUID()":"52d1902d","renounceOwnership()":"715018a6","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","setMinter(address)":"fca3b5aa","slash(address,uint256,uint256)":"70f81f6c","slashBatch(address,uint256[],uint256[])":"7c8a8970","supportsInterface(bytes4)":"01ffc9a7","thaw(uint256)":"e77cfaae","totalSupply(uint256)":"bd85b039","transferOwnership(address)":"f2fde38b","updateTokenURI(string)":"98cd6153","upgradeTo(address)":"3659cfe6","upgradeToAndCall(address,bytes)":"4f1ef286","uri(uint256)":"0e89341c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Frozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"MinterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Thawed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"frozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"initialURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"initialMinter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"slash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"slashBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"thaw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newURI\",\"type\":\"string\"}],\"name\":\"updateTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is upgradeable. You can only append new contracts to the list of bases. You cannot delete bases or reorder them.\",\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"updateTokenURI(string)\":{\"details\":\"Update the base URI of the contract.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"Reserved storage gap. LINK: https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"freeze(uint256)\":{\"notice\":\"If there is an error in an EAC or in the issuance of the EAT, the EAT series may be frozen by the owner.\"},\"mint(address,uint256,uint256,bytes)\":{\"notice\":\"Create new EATs when EACs are received by the bridge. Only callable by `minter`.\"},\"mintBatch(address,uint256[],uint256[],bytes)\":{\"notice\":\"Create new EATs when EACs are received by the bridge. Only callable by `minter`.\"},\"minter()\":{\"notice\":\"This address is the mint authorization checker. The minter is controlled by the bridge.\"},\"setMinter(address)\":{\"notice\":\"In the event of a minter migration (not just an upgrade), the owner has the ability to set the minter address.\"},\"slash(address,uint256,uint256)\":{\"notice\":\"If the owner determines that there is no resolution to an erroneous EAT series, the EATs may be destroyed.\"},\"slashBatch(address,uint256[],uint256[])\":{\"notice\":\"If the owner determines that there is no resolution to an erroneous EAT series, the EATs may be destroyed.\"},\"thaw(uint256)\":{\"notice\":\"This un-does the effects of freeze.\"}},\"notice\":\"The tokens produced by this contract represent EACs held by the Jasmine bridge.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/JasmineEAT.sol\":\"JasmineEAT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() external {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd712fb45b3ea0ab49679164e3895037adc26ce12879d5184feb040e01c1c07a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0x6de308cde403f95519bf4b25123cbfe9126f2e0212564bb2ad3c23ac99f1a9cb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/extensions/ERC1155Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155BurnableUpgradeable is Initializable, ERC1155Upgradeable {\\n    function __ERC1155Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x39aa04a680b648c7628f145de97e52f0c7b4609b38601220d5ee8fc2b7140988\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155SupplyUpgradeable is Initializable, ERC1155Upgradeable {\\n    function __ERC1155Supply_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Supply_init_unchained() internal onlyInitializing {\\n    }\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155SupplyUpgradeable.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                uint256 amount = amounts[i];\\n                uint256 supply = _totalSupply[id];\\n                require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\n                unchecked {\\n                    _totalSupply[id] = supply - amount;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf7bdbcbb9fcf42997f280db8c02070e9c561406e6971ff680c6c43f92065ac9e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"src/JasmineEAT.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport {\\n  Ownable2StepUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\nimport {\\n  UUPSUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {\\n  ERC1155BurnableUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol\\\";\\nimport {\\n  ERC1155SupplyUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\\\";\\nimport {IERC1155Burnable} from \\\"./interfaces/IERC1155Burnable.sol\\\";\\nimport {IERC1155Mintable} from \\\"./interfaces/IERC1155Mintable.sol\\\";\\nimport {IJasmineEATExtensions} from \\\"./interfaces/IJasmineEATExtensions.sol\\\";\\n\\n// We only import this so that we can mention it in our overrides to appease the\\n// compiler.\\nimport {\\n  ERC1155Upgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\n\\n/// @dev This contract is upgradeable. You can only append new contracts to the list of bases. You cannot delete bases or reorder them.\\n/// @notice The tokens produced by this contract represent EACs held by the Jasmine bridge.\\ncontract JasmineEAT is\\n  Ownable2StepUpgradeable,\\n  UUPSUpgradeable,\\n  ERC1155BurnableUpgradeable,\\n  ERC1155SupplyUpgradeable,\\n  IERC1155Burnable,\\n  IERC1155Mintable,\\n  IJasmineEATExtensions\\n{\\n  /// @dev We use the Ownable owner for upgrades, not the ERC1967 admin. The ERC1967 admin is not used by this contract.\\n  function _authorizeUpgrade(address) internal override onlyOwner {}\\n\\n  /// @notice This address is the mint authorization checker. The minter is controlled by the bridge.\\n  address public minter;\\n\\n  function _checkMinter() internal view {\\n    require(minter == _msgSender(), \\\"JasmineEAT: caller is not the minter\\\");\\n  }\\n\\n  modifier onlyMinter() {\\n    _checkMinter();\\n    _;\\n  }\\n\\n  event MinterChanged(address indexed newMinter);\\n\\n  /// @notice In the event of a minter migration (not just an upgrade), the owner has the ability to set the minter address.\\n  function setMinter(address newMinter) external onlyOwner {\\n    minter = newMinter;\\n    emit MinterChanged(newMinter);\\n  }\\n\\n  mapping(uint256 => bool) public override frozen;\\n\\n  /// @dev EAT series that are frozen cannot be transferred. They can be burned, however.\\n  function _beforeTokenTransfer(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) internal override(ERC1155Upgradeable, ERC1155SupplyUpgradeable) {\\n    if (to != address(0)) {\\n      for (uint256 i; i < ids.length; i++) {\\n        require(!frozen[ids[i]], \\\"JasmineEAT: frozen series\\\");\\n      }\\n    }\\n    super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n  }\\n\\n  function initialize(string memory initialURI, address initialMinter, address initialOwner)\\n    external\\n    initializer\\n    onlyProxy\\n  {\\n    _transferOwnership(initialOwner); // __Ownable2Step_init();\\n    __UUPSUpgradeable_init();\\n    __ERC1155_init(initialURI);\\n    minter = initialMinter;\\n    emit MinterChanged(initialMinter);\\n  }\\n\\n  /// @notice Create new EATs when EACs are received by the bridge. Only callable by `minter`.\\n  function mint(\\n    address to,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory data\\n  ) external override onlyMinter {\\n    _mint(to, id, amount, data);\\n  }\\n\\n  /// @notice Create new EATs when EACs are received by the bridge. Only callable by `minter`.\\n  function mintBatch(\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) external override onlyMinter {\\n    _mintBatch(to, ids, amounts, data);\\n  }\\n\\n  event Frozen(uint256 indexed id);\\n\\n  /// @notice If there is an error in an EAC or in the issuance of the EAT, the EAT series may be frozen by the owner.\\n  function freeze(uint256 id) external onlyOwner {\\n    frozen[id] = true;\\n    emit Frozen(id);\\n  }\\n\\n  event Thawed(uint256 indexed id);\\n\\n  /// @notice This un-does the effects of freeze.\\n  function thaw(uint256 id) external onlyOwner {\\n    frozen[id] = false;\\n    emit Thawed(id);\\n  }\\n\\n  /// @notice If the owner determines that there is no resolution to an erroneous EAT series, the EATs may be destroyed.\\n  function slash(\\n    address from,\\n    uint256 id,\\n    uint256 amount\\n  ) external onlyOwner {\\n    require(frozen[id], \\\"JasmineEAT: series not frozen\\\");\\n    uint256 balance = balanceOf(from, id);\\n    if (balance < amount) {\\n      amount = balance;\\n    }\\n    _burn(from, id, amount);\\n  }\\n\\n  /// @notice If the owner determines that there is no resolution to an erroneous EAT series, the EATs may be destroyed.\\n  function slashBatch(\\n    address from,\\n    uint256[] memory ids,\\n    uint256[] memory amounts\\n  ) external onlyOwner {\\n    for (uint256 i; i < ids.length; i++) {\\n      uint256 id = ids[i];\\n      require(frozen[id], \\\"JasmineEAT: series not frozen\\\");\\n      uint256 balance = balanceOf(from, id);\\n      if (balance < amounts[i]) {\\n        amounts[i] = balance;\\n      }\\n    }\\n    _burnBatch(from, ids, amounts);\\n  }\\n\\n  // These are only here to appease Solidity's horrible inheritance logic.\\n  function burn(\\n    address from,\\n    uint256 id,\\n    uint256 value\\n  ) public override(ERC1155BurnableUpgradeable, IERC1155Burnable) {\\n    super.burn(from, id, value);\\n  }\\n\\n  function burnBatch(\\n    address from,\\n    uint256[] memory ids,\\n    uint256[] memory values\\n  ) public override(ERC1155BurnableUpgradeable, IERC1155Burnable) {\\n    super.burnBatch(from, ids, values);\\n  }\\n\\n  /// @dev Update the base URI of the contract.\\n  function updateTokenURI(string memory _newURI) external onlyOwner {\\n    require(bytes(_newURI).length != 0, \\\"JasmineEAT: new URI cannot be empty.\\\");\\n    _setURI(_newURI);\\n  }\\n\\n  /// @dev Reserved storage gap. LINK: https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n  uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x86bef36f8047e572c467f30683e8f00a3fa15bb2217937af63660556215b94e3\",\"license\":\"BUSL-1.1\"},\"src/interfaces/IERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\ninterface IERC1155Burnable {\\n  function burn(\\n    address account,\\n    uint256 id,\\n    uint256 value\\n  ) external;\\n\\n  function burnBatch(\\n    address account,\\n    uint256[] memory ids,\\n    uint256[] memory values\\n  ) external;\\n}\\n\",\"keccak256\":\"0x4abeec733217ccdd0b97c7b175bc504219e87b76cd8d16bbf45b2e07a170ef81\",\"license\":\"BUSL-1.1\"},\"src/interfaces/IERC1155Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\ninterface IERC1155Mintable {\\n  function mint(\\n    address to,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory data\\n  ) external;\\n\\n  function mintBatch(\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) external;\\n}\\n\",\"keccak256\":\"0xc10e0624828b4a87707b79e828a6c20bbfa918080e8e3d81654f8600289c8d1a\",\"license\":\"BUSL-1.1\"},\"src/interfaces/IJasmineEATExtensions.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\ninterface IJasmineEATExtensions {\\n  function frozen(uint256) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x997989399c52edffdd87ef845ec2a370c060ce7eca7170d1b2123be047d9d8a8\",\"license\":\"BUSL-1.1\"}},\"version\":1}","storageLayout":{"storage":[{"astId":633,"contract":"src/JasmineEAT.sol:JasmineEAT","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":636,"contract":"src/JasmineEAT.sol:JasmineEAT","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2945,"contract":"src/JasmineEAT.sol:JasmineEAT","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":116,"contract":"src/JasmineEAT.sol:JasmineEAT","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":236,"contract":"src/JasmineEAT.sol:JasmineEAT","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":25,"contract":"src/JasmineEAT.sol:JasmineEAT","label":"_pendingOwner","offset":0,"slot":"101","type":"t_address"},{"astId":104,"contract":"src/JasmineEAT.sol:JasmineEAT","label":"__gap","offset":0,"slot":"102","type":"t_array(t_uint256)49_storage"},{"astId":615,"contract":"src/JasmineEAT.sol:JasmineEAT","label":"__gap","offset":0,"slot":"151","type":"t_array(t_uint256)50_storage"},{"astId":930,"contract":"src/JasmineEAT.sol:JasmineEAT","label":"__gap","offset":0,"slot":"201","type":"t_array(t_uint256)50_storage"},{"astId":3735,"contract":"src/JasmineEAT.sol:JasmineEAT","label":"__gap","offset":0,"slot":"251","type":"t_array(t_uint256)50_storage"},{"astId":960,"contract":"src/JasmineEAT.sol:JasmineEAT","label":"_balances","offset":0,"slot":"301","type":"t_mapping(t_uint256,t_mapping(t_address,t_uint256))"},{"astId":966,"contract":"src/JasmineEAT.sol:JasmineEAT","label":"_operatorApprovals","offset":0,"slot":"302","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":968,"contract":"src/JasmineEAT.sol:JasmineEAT","label":"_uri","offset":0,"slot":"303","type":"t_string_storage"},{"astId":2175,"contract":"src/JasmineEAT.sol:JasmineEAT","label":"__gap","offset":0,"slot":"304","type":"t_array(t_uint256)47_storage"},{"astId":2427,"contract":"src/JasmineEAT.sol:JasmineEAT","label":"__gap","offset":0,"slot":"351","type":"t_array(t_uint256)50_storage"},{"astId":2453,"contract":"src/JasmineEAT.sol:JasmineEAT","label":"_totalSupply","offset":0,"slot":"401","type":"t_mapping(t_uint256,t_uint256)"},{"astId":2604,"contract":"src/JasmineEAT.sol:JasmineEAT","label":"__gap","offset":0,"slot":"402","type":"t_array(t_uint256)49_storage"},{"astId":4873,"contract":"src/JasmineEAT.sol:JasmineEAT","label":"minter","offset":0,"slot":"451","type":"t_address"},{"astId":4918,"contract":"src/JasmineEAT.sol:JasmineEAT","label":"frozen","offset":0,"slot":"452","type":"t_mapping(t_uint256,t_bool)"},{"astId":5289,"contract":"src/JasmineEAT.sol:JasmineEAT","label":"__gap","offset":0,"slot":"453","type":"t_array(t_uint256)50_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)47_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[47]","numberOfBytes":"1504"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_bool)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint256,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{"freeze(uint256)":{"notice":"If there is an error in an EAC or in the issuance of the EAT, the EAT series may be frozen by the owner."},"mint(address,uint256,uint256,bytes)":{"notice":"Create new EATs when EACs are received by the bridge. Only callable by `minter`."},"mintBatch(address,uint256[],uint256[],bytes)":{"notice":"Create new EATs when EACs are received by the bridge. Only callable by `minter`."},"minter()":{"notice":"This address is the mint authorization checker. The minter is controlled by the bridge."},"setMinter(address)":{"notice":"In the event of a minter migration (not just an upgrade), the owner has the ability to set the minter address."},"slash(address,uint256,uint256)":{"notice":"If the owner determines that there is no resolution to an erroneous EAT series, the EATs may be destroyed."},"slashBatch(address,uint256[],uint256[])":{"notice":"If the owner determines that there is no resolution to an erroneous EAT series, the EATs may be destroyed."},"thaw(uint256)":{"notice":"This un-does the effects of freeze."}},"notice":"The tokens produced by this contract represent EACs held by the Jasmine bridge.","version":1}}},"src/JasmineMinter.sol":{"JasmineMinter":{"abi":[{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"address","name":"_oracle","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"newBridge","type":"address"}],"name":"BridgeChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"indexed":false,"internalType":"bytes","name":"metadata","type":"bytes"}],"name":"BurnedBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"metadata","type":"bytes"}],"name":"BurnedSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"nonce","type":"bytes32"}],"name":"NonceConsumed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferStarted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"inputs":[],"name":"CONSUMENONCE_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINTBATCH_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINT_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"bridge","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"metadata","type":"bytes"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"metadata","type":"bytes"}],"name":"burnBatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"nonce","type":"bytes32"},{"internalType":"bytes","name":"sig","type":"bytes"}],"name":"consumeNonce","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"consumedNonces","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"initialName","type":"string"},{"internalType":"string","name":"initialVersion","type":"string"},{"internalType":"address","name":"initialBridge","type":"address"},{"internalType":"address","name":"initialOwner","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"transferData","type":"bytes"},{"internalType":"bytes","name":"oracleData","type":"bytes"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"bytes32","name":"nonce","type":"bytes32"},{"internalType":"bytes","name":"sig","type":"bytes"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"transferData","type":"bytes"},{"internalType":"bytes[]","name":"oracleDatas","type":"bytes[]"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"bytes32","name":"nonce","type":"bytes32"},{"internalType":"bytes","name":"sig","type":"bytes"}],"name":"mintBatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"oracle","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pendingOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newBridge","type":"address"}],"name":"setBridge","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"token","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"}],"name":"upgradeTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is upgradeable. You can only append new contracts to the list of bases. You cannot delete bases or reorder them.","kind":"dev","methods":{"acceptOwnership()":{"details":"The new owner accepts the ownership transfer."},"burn(uint256,uint256,bytes)":{"details":"JasmineMinter must be approved to spend the caller's EATs for the operation to succeed. JasmineMinter indirectly authenticates that the caller owns the specified amount of the specified EATs.","params":{"amount":"The amount of EAT of the specified series to be redeemed/bridged-off.","id":"The series of EAT to be redeemed/bridged-off.","metadata":"Message to the bridge specifying whether to redeem or bridge-off. If the operation is a bridge-off, also specifies the destination of the EAC. JasmineMinter imposes no authentication or structure on the metadata. Malformed or otherwise invalid metadata is an unrecoverable error."}},"burnBatch(uint256[],uint256[],bytes)":{"details":"JasmineMinter must be approved to spend the caller's EATs for the operation to succeed. JasmineMinter indirectly authenticates that the caller owns the specified amount of the specified EATs.","params":{"amounts":"The amounts of EATs of the specified series to be redeemed/bridged-off.","ids":"The series of EATs to be redeemed/bridged-off.","metadata":"Message to the bridge specifying whether to redeem or bridge-off. If the operation is a bridge-off, also specifies the destination of the EAC. JasmineMinter imposes no authentication or structure on the metadata. Malformed or otherwise invalid metadata is an unrecoverable error."}},"mint(address,uint256,uint256,bytes,bytes,uint256,bytes32,bytes)":{"params":{"amount":"The quantity of EATs to mint. The amount is part of the EIP712 minting authorization.","deadline":"The latest timestamp at which the mint authorization remains valid. After this time, attempts to mint will revert. The deadline is part of the EIP712 minting authorization.","id":"The identifier of the EAT series to mint. See JasmineOracle for the constraints on this value. The id is part of the EIP712 minting authorization.","nonce":"Used to prevent signature replay. The nonce is part of the EIP712 minting authorization. If consumedNonces(nonce), the minting authorization is invalid.","oracleData":"Authenticated EAT metadata passed to the oracle. Oracle updates are idempotent. The oracleData is part of the EIP712 minting authorization.","receiver":"The initial owner of the newly-minted EATs. If this is a contract, it must support IERC1155Receiver.onERC1155Received. Failure of the receiver callback does not invalidate the nonce. The receiver is NOT part of the EIP712 minting authorization.","sig":"Encoded ECDSA signature by `bridge` over the EIP712 minting authorization. Formed as the 65-byte concatenation of r, s, and v in that order. s must be in the lower half of the curve. v must be 27 or 28.","transferData":"Additional argument to be passed to `receiver`'s callback. Ignored if `receiver` is not a contract. The transferData is NOT part of the EIP712 minting authorization."}},"mintBatch(address,uint256[],uint256[],bytes,bytes[],uint256,bytes32,bytes)":{"params":{"amounts":"The quantities of EATs to mint. The amounts are part of the EIP712 minting authorization.","deadline":"The latest timestamp at which the mint authorization remains valid. After this time, attempts to mint will revert. The deadline is part of the EIP712 minting authorization.","ids":"The identifiers of the EAT series to mint. See JasmineOracle for the constraints on this value. The ids are part of the EIP712 minting authorization.","nonce":"Used to prevent signature replay. The nonce is part of the EIP712 minting authorization. If consumedNonces(nonce), the minting authorization is invalid.","oracleDatas":"Authenticated EAT metadatas passed to the oracle. Oracle updates are idempotent. The oracleData is part of the EIP712 minting authorization.","receiver":"The initial owner of the newly-minted EATs. If this is a contract, it must support IERC1155Receiver.onERC1155Received. Failure of the receiver callback does not invalidate the nonce. The receiver is NOT part of the EIP712 minting authorization.","sig":"Encoded ECDSA signature by `bridge` over the EIP712 minting authorization. Formed as the 65-byte concatenation of r, s, and v in that order. s must be in the lower half of the curve. v must be 27 or 28.","transferData":"Additional argument to be passed to `receiver`'s callback. Ignored if `receiver` is not a contract. The transferData is NOT part of the EIP712 minting authorization."}},"owner()":{"details":"Returns the address of the current owner."},"pendingOwner()":{"details":"Returns the address of the pending owner."},"proxiableUUID()":{"details":"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."},"upgradeTo(address)":{"details":"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."},"upgradeToAndCall(address,bytes)":{"details":"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."}},"stateVariables":{"__gap":{"details":"Reserved storage gap. LINK: https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"bridge":{"details":"This is the wallet/EOA address that authorizes minting new EATs. This is a separate authority from the right to upgrade protocol contracts."},"consumedNonces":{"details":"This contract uses non-sequential nonces so that multiple mint authorizations can be issued concurrently. The downside to this approach is that it is slightly more involved to invalidate a nonce that has not yet been consumed."},"name":{"details":"This is the EIP712 domain name. It is exposed here for ease of introspection."},"version":{"details":"This is the EIP712 domain version. It is exposed here for ease of introspection."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_5345":{"entryPoint":null,"id":5345,"parameterSlots":2,"returnSlots":0},"abi_decode_address_fromMemory":{"entryPoint":80,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_addresst_address_fromMemory":{"entryPoint":109,"id":null,"parameterSlots":2,"returnSlots":2}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:491:30","statements":[{"nodeType":"YulBlock","src":"6:3:30","statements":[]},{"body":{"nodeType":"YulBlock","src":"74:117:30","statements":[{"nodeType":"YulAssignment","src":"84:22:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"99:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"93:5:30"},"nodeType":"YulFunctionCall","src":"93:13:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"84:5:30"}]},{"body":{"nodeType":"YulBlock","src":"169:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"178:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"181:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"171:6:30"},"nodeType":"YulFunctionCall","src":"171:12:30"},"nodeType":"YulExpressionStatement","src":"171:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"128:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"139:5:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"154:3:30","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"159:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"150:3:30"},"nodeType":"YulFunctionCall","src":"150:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"163:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"146:3:30"},"nodeType":"YulFunctionCall","src":"146:19:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"135:3:30"},"nodeType":"YulFunctionCall","src":"135:31:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"125:2:30"},"nodeType":"YulFunctionCall","src":"125:42:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"118:6:30"},"nodeType":"YulFunctionCall","src":"118:50:30"},"nodeType":"YulIf","src":"115:70:30"}]},"name":"abi_decode_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"53:6:30","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"64:5:30","type":""}],"src":"14:177:30"},{"body":{"nodeType":"YulBlock","src":"294:195:30","statements":[{"body":{"nodeType":"YulBlock","src":"340:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"349:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"352:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"342:6:30"},"nodeType":"YulFunctionCall","src":"342:12:30"},"nodeType":"YulExpressionStatement","src":"342:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"315:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"324:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"311:3:30"},"nodeType":"YulFunctionCall","src":"311:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"336:2:30","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"307:3:30"},"nodeType":"YulFunctionCall","src":"307:32:30"},"nodeType":"YulIf","src":"304:52:30"},{"nodeType":"YulAssignment","src":"365:50:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"405:9:30"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"375:29:30"},"nodeType":"YulFunctionCall","src":"375:40:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"365:6:30"}]},{"nodeType":"YulAssignment","src":"424:59:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"468:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"479:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"464:3:30"},"nodeType":"YulFunctionCall","src":"464:18:30"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"434:29:30"},"nodeType":"YulFunctionCall","src":"434:49:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"424:6:30"}]}]},"name":"abi_decode_tuple_t_addresst_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"252:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"263:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"275:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"283:6:30","type":""}],"src":"196:293:30"}]},"contents":"{\n    { }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address_fromMemory(headStart)\n        value1 := abi_decode_address_fromMemory(add(headStart, 32))\n    }\n}","id":30,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60e0604052306080523480156200001557600080fd5b5060405162002cd638038062002cd683398101604081905262000038916200006d565b6001600160a01b0391821660a0521660c052620000a5565b80516001600160a01b03811681146200006857600080fd5b919050565b600080604083850312156200008157600080fd5b6200008c8362000050565b91506200009c6020840162000050565b90509250929050565b60805160a05160c051612b8362000153600039600081816102d5015281816108930152610c680152600081816104da0152818161095601528181610ce90152818161102e01528181611156015281816114ed01526116470152600081816109e801528181610a2801528181610d6b01528181610dab01528181610e2701528181610f8201528181610fc2015281816112dd0152818161131d0152818161144901526114890152612b836000f3fe6080604052600436106101665760003560e01c806380a5a371116100d1578063e090fa3c1161008a578063e922ba7911610064578063e922ba7914610454578063f2fde38b14610474578063f76fc35e14610494578063fc0c546a146104c857600080fd5b8063e090fa3c146103f5578063e30c397814610415578063e78cea921461043357600080fd5b806380a5a3711461030f5780638da5cb5b1461032f5780638dd148021461034d5780638f15b4141461036d578063b3c9ed591461038d578063ce89a040146103c157600080fd5b80634f1ef286116101235780634f1ef2861461025c57806352d1902d1461026f57806354fd4d5014610284578063715018a61461029957806379ba5097146102ae5780637dc0d1d0146102c357600080fd5b806306fdde031461016b57806310dbebce14610196578063163c50ac146101d75780633644e515146101f95780633659cfe61461021c57806336b092271461023c575b600080fd5b34801561017757600080fd5b506101806104fc565b60405161018d9190612125565b60405180910390f35b3480156101a257600080fd5b506101c76101b1366004612138565b6101326020526000908152604090205460ff1681565b604051901515815260200161018d565b3480156101e357600080fd5b506101f76101f2366004612333565b61058b565b005b34801561020557600080fd5b5061020e6109cf565b60405190815260200161018d565b34801561022857600080fd5b506101f7610237366004612429565b6109de565b34801561024857600080fd5b506101f7610257366004612444565b610aa6565b6101f761026a3660046124c3565b610d61565b34801561027b57600080fd5b5061020e610e1a565b34801561029057600080fd5b50610180610edf565b3480156102a557600080fd5b506101f7610eed565b3480156102ba57600080fd5b506101f7610f01565b3480156102cf57600080fd5b506102f77f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161018d565b34801561031b57600080fd5b506101f761032a366004612511565b610f78565b34801561033b57600080fd5b506033546001600160a01b03166102f7565b34801561035957600080fd5b506101f7610368366004612429565b6111c0565b34801561037957600080fd5b506101f7610388366004612561565b611213565b34801561039957600080fd5b5061020e7f47b77ff24f11d889436314cd63fdefeb0b0f9531da691f5627f546c47e5f002c81565b3480156103cd57600080fd5b5061020e7fb0426304b718d58e27f05888d480cc1c9c956afaab3ba8d45afcce29f30d644881565b34801561040157600080fd5b506101f76104103660046125e6565b61143f565b34801561042157600080fd5b506065546001600160a01b03166102f7565b34801561043f57600080fd5b5061012f546102f7906001600160a01b031681565b34801561046057600080fd5b506101f761046f366004612664565b611688565b34801561048057600080fd5b506101f761048f366004612429565b6117b7565b3480156104a057600080fd5b5061020e7f7ed266a150d7268b399e18c9036ad7ff35a4bf8f1ddf162234a3684916e16dc881565b3480156104d457600080fd5b506102f77f000000000000000000000000000000000000000000000000000000000000000081565b610130805461050a90612695565b80601f016020809104026020016040519081016040528092919081815260200182805461053690612695565b80156105835780601f1061055857610100808354040283529160200191610583565b820191906000526020600020905b81548152906001019060200180831161056657829003601f168201915b505050505081565b83518751146105fc5760405162461bcd60e51b815260206004820152603260248201527f4a61736d696e654d696e7465723a2069647320616e64206f7261636c654461746044820152710c2e640d8cadccee8d040dad2e6dac2e8c6d60731b60648201526084015b60405180910390fd5b824211156106455760405162461bcd60e51b815260206004820152601660248201527512985cdb5a5b99535a5b9d195c8e88195e1c1a5c995960521b60448201526064016105f3565b6000845167ffffffffffffffff8111156106615761066161216d565b60405190808252806020026020018201604052801561068a578160200160208202803683370190505b50905060005b85518110156106ec578581815181106106ab576106ab6126cf565b60200260200101518051906020012060001c8282815181106106cf576106cf6126cf565b6020908102919091010152806106e4816126e5565b915050610690565b508751600590811b6020808b01919091208951831b8a830120845190931b84830120604080517f47b77ff24f11d889436314cd63fdefeb0b0f9531da691f5627f546c47e5f002c8186015233818301526060810193909352608083019490945260a082015260c0810187905260e080820187905283518083039091018152610100909101909252815191012061012f546001600160a01b031661079761079183611828565b8561187c565b6001600160a01b0316146107bd5760405162461bcd60e51b81526004016105f39061270c565b6000848152610132602052604090205460ff161561081d5760405162461bcd60e51b815260206004820152601b60248201527f4a61736d696e654d696e7465723a206e6f6e6365207265706c6179000000000060448201526064016105f3565b60008481526101326020526040808220805460ff191660011790555185917f70cd0c14252edef0440009634a4e86036a1747c9fbe7e4c2c05b8b62f9c410e291a260005b865181101561093e57600087828151811061087e5761087e6126cf565b60200260200101519050805160001461092b577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166307e3810c8c84815181106108d2576108d26126cf565b6020026020010151836040518363ffffffff1660e01b81526004016108f8929190612755565b600060405180830381600087803b15801561091257600080fd5b505af1158015610926573d6000803e3d6000fd5b505050505b5080610936816126e5565b915050610861565b50604051630fbfeffd60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631f7fdffa90610991908d908d908d908d906004016127b1565b600060405180830381600087803b1580156109ab57600080fd5b505af11580156109bf573d6000803e3d6000fd5b5050505050505050505050505050565b60006109d96118a0565b905090565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610a265760405162461bcd60e51b81526004016105f390612804565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610a586118d7565b6001600160a01b031614610a7e5760405162461bcd60e51b81526004016105f390612850565b610a8781611905565b60408051600080825260208201909252610aa39183919061190d565b50565b82421115610aef5760405162461bcd60e51b815260206004820152601660248201527512985cdb5a5b99535a5b9d195c8e88195e1c1a5c995960521b60448201526064016105f3565b8351602080860191909120604080517f7ed266a150d7268b399e18c9036ad7ff35a4bf8f1ddf162234a3684916e16dc8818501523381830152606081018b9052608081018a905260a081019290925260c0820186905260e0808301869052815180840390910181526101009092019052805191012061012f546001600160a01b0316610b83610b7d83611828565b8461187c565b6001600160a01b031614610ba95760405162461bcd60e51b81526004016105f39061270c565b6000838152610132602052604090205460ff1615610c095760405162461bcd60e51b815260206004820152601b60248201527f4a61736d696e654d696e7465723a206e6f6e6365207265706c6179000000000060448201526064016105f3565b60008381526101326020526040808220805460ff191660011790555184917f70cd0c14252edef0440009634a4e86036a1747c9fbe7e4c2c05b8b62f9c410e291a2845115610cd2576040516301f8e04360e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906307e3810c90610c9f908b908990600401612755565b600060405180830381600087803b158015610cb957600080fd5b505af1158015610ccd573d6000803e3d6000fd5b505050505b60405163731133e960e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063731133e990610d24908c908c908c908c9060040161289c565b600060405180830381600087803b158015610d3e57600080fd5b505af1158015610d52573d6000803e3d6000fd5b50505050505050505050505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610da95760405162461bcd60e51b81526004016105f390612804565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610ddb6118d7565b6001600160a01b031614610e015760405162461bcd60e51b81526004016105f390612850565b610e0a82611905565b610e168282600161190d565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610eba5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016105f3565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b610131805461050a90612695565b610ef5611a8f565b610eff6000611ae9565b565b60655433906001600160a01b03168114610f6f5760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b60648201526084016105f3565b610aa381611ae9565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610fc05760405162461bcd60e51b81526004016105f390612804565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610ff26118d7565b6001600160a01b0316146110185760405162461bcd60e51b81526004016105f390612850565b6040516303a6b01160e61b8152600481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e9ac044090602401602060405180830381865afa15801561107d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a191906128d4565b156110ee5760405162461bcd60e51b815260206004820152601c60248201527f4a61736d696e654d696e7465723a2066726f7a656e207365726965730000000060448201526064016105f3565b336001600160a01b03167f422475c8264e559fa982d4f66450a9bd1d5bee42cf8a98f6e032d1715b85955284848460405161112b939291906128f6565b60405180910390a2604051637a94c56560e11b815233600482015260248101849052604481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f5298aca906064015b600060405180830381600087803b1580156111a357600080fd5b505af11580156111b7573d6000803e3d6000fd5b50505050505050565b6111c8611a8f565b61012f80546001600160a01b0319166001600160a01b0383169081179091556040517f9775531310b2880b61484ed85cbb0b491c8fde3a07f289c63b9255178279449790600090a250565b600054610100900460ff16158080156112335750600054600160ff909116105b8061124d5750303b15801561124d575060005460ff166001145b6112b05760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105f3565b6000805460ff1916600117905580156112d3576000805461ff0019166101001790555b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361131b5760405162461bcd60e51b81526004016105f390612804565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661134d6118d7565b6001600160a01b0316146113735760405162461bcd60e51b81526004016105f390612850565b61137c82611ae9565b611384611b02565b61138e8585611b29565b61013061139b8682612963565b506101316113a98582612963565b5061012f80546001600160a01b0319166001600160a01b0385169081179091556040517f9775531310b2880b61484ed85cbb0b491c8fde3a07f289c63b9255178279449790600090a28015611438576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036114875760405162461bcd60e51b81526004016105f390612804565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166114b96118d7565b6001600160a01b0316146114df5760405162461bcd60e51b81526004016105f390612850565b60005b83518110156115f2577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e9ac044085838151811061152c5761152c6126cf565b60200260200101516040518263ffffffff1660e01b815260040161155291815260200190565b602060405180830381865afa15801561156f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159391906128d4565b156115e05760405162461bcd60e51b815260206004820152601c60248201527f4a61736d696e654d696e7465723a2066726f7a656e207365726965730000000060448201526064016105f3565b806115ea816126e5565b9150506114e2565b50336001600160a01b03167ff989b967ab06cb95ffa87edfc41b030132a3a687e55e92faf63512234d18e28f84848460405161163093929190612a23565b60405180910390a2604051631ac8311560e21b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636b20c4549061118990339087908790600401612a5c565b604080517fb0426304b718d58e27f05888d480cc1c9c956afaab3ba8d45afcce29f30d64486020808301919091528183018590528251808303840181526060909201909252805191012061012f546001600160a01b03166116eb610b7d83611828565b6001600160a01b0316146117115760405162461bcd60e51b81526004016105f39061270c565b6000838152610132602052604090205460ff16156117715760405162461bcd60e51b815260206004820152601b60248201527f4a61736d696e654d696e7465723a206e6f6e6365207265706c6179000000000060448201526064016105f3565b60008381526101326020526040808220805460ff191660011790555184917f70cd0c14252edef0440009634a4e86036a1747c9fbe7e4c2c05b8b62f9c410e291a2505050565b6117bf611a8f565b606580546001600160a01b0383166001600160a01b031990911681179091556117f06033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b60006118766118356118a0565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b92915050565b600080600061188b8585611b5a565b9150915061189881611b9f565b509392505050565b60006109d97f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6118cf60fb5490565b60fc54611ce9565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b610aa3611a8f565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156119455761194083611d33565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561199f575060408051601f3d908101601f1916820190925261199c91810190612a90565b60015b611a025760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016105f3565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114611a835760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016105f3565b50611940838383611de1565b6033546001600160a01b03163314610eff5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105f3565b606580546001600160a01b0319169055610aa381611e0c565b600054610100900460ff16610eff5760405162461bcd60e51b81526004016105f390612aa9565b600054610100900460ff16611b505760405162461bcd60e51b81526004016105f390612aa9565b610e168282611e5e565b6000808251604103611b905760208301516040840151606085015160001a611b8487828585611e9f565b94509450505050611b98565b506000905060025b9250929050565b6000816004811115611bb357611bb3612af4565b03611bbb5750565b6001816004811115611bcf57611bcf612af4565b03611c1c5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016105f3565b6002816004811115611c3057611c30612af4565b03611c7d5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016105f3565b6003816004811115611c9157611c91612af4565b03610aa35760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016105f3565b6040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090505b9392505050565b6001600160a01b0381163b611da05760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016105f3565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b611dea83611f63565b600082511180611df75750805b1561194057611e068383611fa3565b50505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16611e855760405162461bcd60e51b81526004016105f390612aa9565b81516020928301208151919092012060fb9190915560fc55565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611ed65750600090506003611f5a565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611f2a573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611f5357600060019250925050611f5a565b9150600090505b94509492505050565b611f6c81611d33565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b61200b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016105f3565b600080846001600160a01b0316846040516120269190612b0a565b600060405180830381855af49150503d8060008114612061576040519150601f19603f3d011682016040523d82523d6000602084013e612066565b606091505b509150915061208e8282604051806060016040528060278152602001612b2760279139612097565b95945050505050565b606083156120a6575081611d2c565b611d2c83838151156120bb5781518083602001fd5b8060405162461bcd60e51b81526004016105f39190612125565b60005b838110156120f05781810151838201526020016120d8565b50506000910152565b600081518084526121118160208601602086016120d5565b601f01601f19169290920160200192915050565b602081526000611d2c60208301846120f9565b60006020828403121561214a57600080fd5b5035919050565b80356001600160a01b038116811461216857600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156121ac576121ac61216d565b604052919050565b600067ffffffffffffffff8211156121ce576121ce61216d565b5060051b60200190565b600082601f8301126121e957600080fd5b813560206121fe6121f9836121b4565b612183565b82815260059290921b8401810191818101908684111561221d57600080fd5b8286015b848110156122385780358352918301918301612221565b509695505050505050565b600082601f83011261225457600080fd5b813567ffffffffffffffff81111561226e5761226e61216d565b612281601f8201601f1916602001612183565b81815284602083860101111561229657600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f8301126122c457600080fd5b813560206122d46121f9836121b4565b82815260059290921b840181019181810190868411156122f357600080fd5b8286015b8481101561223857803567ffffffffffffffff8111156123175760008081fd5b6123258986838b0101612243565b8452509183019183016122f7565b600080600080600080600080610100898b03121561235057600080fd5b61235989612151565b9750602089013567ffffffffffffffff8082111561237657600080fd5b6123828c838d016121d8565b985060408b013591508082111561239857600080fd5b6123a48c838d016121d8565b975060608b01359150808211156123ba57600080fd5b6123c68c838d01612243565b965060808b01359150808211156123dc57600080fd5b6123e88c838d016122b3565b955060a08b0135945060c08b0135935060e08b013591508082111561240c57600080fd5b506124198b828c01612243565b9150509295985092959890939650565b60006020828403121561243b57600080fd5b611d2c82612151565b600080600080600080600080610100898b03121561246157600080fd5b61246a89612151565b97506020890135965060408901359550606089013567ffffffffffffffff8082111561249557600080fd5b6124a18c838d01612243565b965060808b01359150808211156124b757600080fd5b6123e88c838d01612243565b600080604083850312156124d657600080fd5b6124df83612151565b9150602083013567ffffffffffffffff8111156124fb57600080fd5b61250785828601612243565b9150509250929050565b60008060006060848603121561252657600080fd5b8335925060208401359150604084013567ffffffffffffffff81111561254b57600080fd5b61255786828701612243565b9150509250925092565b6000806000806080858703121561257757600080fd5b843567ffffffffffffffff8082111561258f57600080fd5b61259b88838901612243565b955060208701359150808211156125b157600080fd5b506125be87828801612243565b9350506125cd60408601612151565b91506125db60608601612151565b905092959194509250565b6000806000606084860312156125fb57600080fd5b833567ffffffffffffffff8082111561261357600080fd5b61261f878388016121d8565b9450602086013591508082111561263557600080fd5b612641878388016121d8565b9350604086013591508082111561265757600080fd5b5061255786828701612243565b6000806040838503121561267757600080fd5b82359150602083013567ffffffffffffffff8111156124fb57600080fd5b600181811c908216806126a957607f821691505b6020821081036126c957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b60006001820161270557634e487b7160e01b600052601160045260246000fd5b5060010190565b60208082526029908201527f4a61736d696e654d696e7465723a20626164207369676e61747572652f77726f60408201526837339039b4b3b732b960b91b606082015260800190565b82815260406020820152600061276e60408301846120f9565b949350505050565b600081518084526020808501945080840160005b838110156127a65781518752958201959082019060010161278a565b509495945050505050565b6001600160a01b03851681526080602082015260006127d36080830186612776565b82810360408401526127e58186612776565b905082810360608401526127f981856120f9565b979650505050505050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6001600160a01b03851681528360208201528260408201526080606082015260006128ca60808301846120f9565b9695505050505050565b6000602082840312156128e657600080fd5b81518015158114611d2c57600080fd5b83815282602082015260606040820152600061208e60608301846120f9565b601f82111561194057600081815260208120601f850160051c8101602086101561293c5750805b601f850160051c820191505b8181101561295b57828155600101612948565b505050505050565b815167ffffffffffffffff81111561297d5761297d61216d565b6129918161298b8454612695565b84612915565b602080601f8311600181146129c657600084156129ae5750858301515b600019600386901b1c1916600185901b17855561295b565b600085815260208120601f198616915b828110156129f5578886015182559484019460019091019084016129d6565b5085821015612a135787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b606081526000612a366060830186612776565b8281036020840152612a488186612776565b905082810360408401526128ca81856120f9565b6001600160a01b0384168152606060208201526000612a7e6060830185612776565b82810360408401526128ca8185612776565b600060208284031215612aa257600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052602160045260246000fd5b60008251612b1c8184602087016120d5565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212205b160dce73b8e2ec7b229bdee149d3865784095768bca0aa43ed6e8cc42d222464736f6c63430008110033","opcodes":"PUSH1 0xE0 PUSH1 0x40 MSTORE ADDRESS PUSH1 0x80 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2CD6 CODESIZE SUB DUP1 PUSH3 0x2CD6 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x38 SWAP2 PUSH3 0x6D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0xA0 MSTORE AND PUSH1 0xC0 MSTORE PUSH3 0xA5 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x8C DUP4 PUSH3 0x50 JUMP JUMPDEST SWAP2 POP PUSH3 0x9C PUSH1 0x20 DUP5 ADD PUSH3 0x50 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH2 0x2B83 PUSH3 0x153 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x2D5 ADD MSTORE DUP2 DUP2 PUSH2 0x893 ADD MSTORE PUSH2 0xC68 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x4DA ADD MSTORE DUP2 DUP2 PUSH2 0x956 ADD MSTORE DUP2 DUP2 PUSH2 0xCE9 ADD MSTORE DUP2 DUP2 PUSH2 0x102E ADD MSTORE DUP2 DUP2 PUSH2 0x1156 ADD MSTORE DUP2 DUP2 PUSH2 0x14ED ADD MSTORE PUSH2 0x1647 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x9E8 ADD MSTORE DUP2 DUP2 PUSH2 0xA28 ADD MSTORE DUP2 DUP2 PUSH2 0xD6B ADD MSTORE DUP2 DUP2 PUSH2 0xDAB ADD MSTORE DUP2 DUP2 PUSH2 0xE27 ADD MSTORE DUP2 DUP2 PUSH2 0xF82 ADD MSTORE DUP2 DUP2 PUSH2 0xFC2 ADD MSTORE DUP2 DUP2 PUSH2 0x12DD ADD MSTORE DUP2 DUP2 PUSH2 0x131D ADD MSTORE DUP2 DUP2 PUSH2 0x1449 ADD MSTORE PUSH2 0x1489 ADD MSTORE PUSH2 0x2B83 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x166 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x80A5A371 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0xE090FA3C GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xE922BA79 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xE922BA79 EQ PUSH2 0x454 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x474 JUMPI DUP1 PUSH4 0xF76FC35E EQ PUSH2 0x494 JUMPI DUP1 PUSH4 0xFC0C546A EQ PUSH2 0x4C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xE090FA3C EQ PUSH2 0x3F5 JUMPI DUP1 PUSH4 0xE30C3978 EQ PUSH2 0x415 JUMPI DUP1 PUSH4 0xE78CEA92 EQ PUSH2 0x433 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x80A5A371 EQ PUSH2 0x30F JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x32F JUMPI DUP1 PUSH4 0x8DD14802 EQ PUSH2 0x34D JUMPI DUP1 PUSH4 0x8F15B414 EQ PUSH2 0x36D JUMPI DUP1 PUSH4 0xB3C9ED59 EQ PUSH2 0x38D JUMPI DUP1 PUSH4 0xCE89A040 EQ PUSH2 0x3C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4F1EF286 GT PUSH2 0x123 JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x25C JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0x26F JUMPI DUP1 PUSH4 0x54FD4D50 EQ PUSH2 0x284 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x299 JUMPI DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x2AE JUMPI DUP1 PUSH4 0x7DC0D1D0 EQ PUSH2 0x2C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x16B JUMPI DUP1 PUSH4 0x10DBEBCE EQ PUSH2 0x196 JUMPI DUP1 PUSH4 0x163C50AC EQ PUSH2 0x1D7 JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x1F9 JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x21C JUMPI DUP1 PUSH4 0x36B09227 EQ PUSH2 0x23C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x177 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x180 PUSH2 0x4FC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x18D SWAP2 SWAP1 PUSH2 0x2125 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1C7 PUSH2 0x1B1 CALLDATASIZE PUSH1 0x4 PUSH2 0x2138 JUMP JUMPDEST PUSH2 0x132 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x18D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F7 PUSH2 0x1F2 CALLDATASIZE PUSH1 0x4 PUSH2 0x2333 JUMP JUMPDEST PUSH2 0x58B JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x205 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20E PUSH2 0x9CF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x18D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x228 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F7 PUSH2 0x237 CALLDATASIZE PUSH1 0x4 PUSH2 0x2429 JUMP JUMPDEST PUSH2 0x9DE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x248 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F7 PUSH2 0x257 CALLDATASIZE PUSH1 0x4 PUSH2 0x2444 JUMP JUMPDEST PUSH2 0xAA6 JUMP JUMPDEST PUSH2 0x1F7 PUSH2 0x26A CALLDATASIZE PUSH1 0x4 PUSH2 0x24C3 JUMP JUMPDEST PUSH2 0xD61 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x27B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20E PUSH2 0xE1A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x290 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x180 PUSH2 0xEDF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F7 PUSH2 0xEED JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F7 PUSH2 0xF01 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F7 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x18D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x31B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F7 PUSH2 0x32A CALLDATASIZE PUSH1 0x4 PUSH2 0x2511 JUMP JUMPDEST PUSH2 0xF78 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x33B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2F7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x359 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F7 PUSH2 0x368 CALLDATASIZE PUSH1 0x4 PUSH2 0x2429 JUMP JUMPDEST PUSH2 0x11C0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x379 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F7 PUSH2 0x388 CALLDATASIZE PUSH1 0x4 PUSH2 0x2561 JUMP JUMPDEST PUSH2 0x1213 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x399 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20E PUSH32 0x47B77FF24F11D889436314CD63FDEFEB0B0F9531DA691F5627F546C47E5F002C DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20E PUSH32 0xB0426304B718D58E27F05888D480CC1C9C956AFAAB3BA8D45AFCCE29F30D6448 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x401 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F7 PUSH2 0x410 CALLDATASIZE PUSH1 0x4 PUSH2 0x25E6 JUMP JUMPDEST PUSH2 0x143F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x421 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2F7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x43F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12F SLOAD PUSH2 0x2F7 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x460 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F7 PUSH2 0x46F CALLDATASIZE PUSH1 0x4 PUSH2 0x2664 JUMP JUMPDEST PUSH2 0x1688 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x480 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F7 PUSH2 0x48F CALLDATASIZE PUSH1 0x4 PUSH2 0x2429 JUMP JUMPDEST PUSH2 0x17B7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20E PUSH32 0x7ED266A150D7268B399E18C9036AD7FF35A4BF8F1DDF162234A3684916E16DC8 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F7 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x130 DUP1 SLOAD PUSH2 0x50A SWAP1 PUSH2 0x2695 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x536 SWAP1 PUSH2 0x2695 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x583 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x558 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x583 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x566 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST DUP4 MLOAD DUP8 MLOAD EQ PUSH2 0x5FC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4A61736D696E654D696E7465723A2069647320616E64206F7261636C65446174 PUSH1 0x44 DUP3 ADD MSTORE PUSH18 0xC2E640D8CADCCEE8D040DAD2E6DAC2E8C6D PUSH1 0x73 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 TIMESTAMP GT ISZERO PUSH2 0x645 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x12985CDB5A5B99535A5B9D195C8E88195E1C1A5C9959 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5F3 JUMP JUMPDEST PUSH1 0x0 DUP5 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x661 JUMPI PUSH2 0x661 PUSH2 0x216D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x68A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x6EC JUMPI DUP6 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x6AB JUMPI PUSH2 0x6AB PUSH2 0x26CF JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6CF JUMPI PUSH2 0x6CF PUSH2 0x26CF JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP1 PUSH2 0x6E4 DUP2 PUSH2 0x26E5 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x690 JUMP JUMPDEST POP DUP8 MLOAD PUSH1 0x5 SWAP1 DUP2 SHL PUSH1 0x20 DUP1 DUP12 ADD SWAP2 SWAP1 SWAP2 KECCAK256 DUP10 MLOAD DUP4 SHL DUP11 DUP4 ADD KECCAK256 DUP5 MLOAD SWAP1 SWAP4 SHL DUP5 DUP4 ADD KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH32 0x47B77FF24F11D889436314CD63FDEFEB0B0F9531DA691F5627F546C47E5F002C DUP2 DUP7 ADD MSTORE CALLER DUP2 DUP4 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x80 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0xE0 DUP1 DUP3 ADD DUP8 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH2 0x100 SWAP1 SWAP2 ADD SWAP1 SWAP3 MSTORE DUP2 MLOAD SWAP2 ADD KECCAK256 PUSH2 0x12F SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x797 PUSH2 0x791 DUP4 PUSH2 0x1828 JUMP JUMPDEST DUP6 PUSH2 0x187C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x7BD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F3 SWAP1 PUSH2 0x270C JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH2 0x132 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x81D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4A61736D696E654D696E7465723A206E6F6E6365207265706C61790000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5F3 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH2 0x132 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD DUP6 SWAP2 PUSH32 0x70CD0C14252EDEF0440009634A4E86036A1747C9FBE7E4C2C05B8B62F9C410E2 SWAP2 LOG2 PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH2 0x93E JUMPI PUSH1 0x0 DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x87E JUMPI PUSH2 0x87E PUSH2 0x26CF JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ PUSH2 0x92B JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x7E3810C DUP13 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x8D2 JUMPI PUSH2 0x8D2 PUSH2 0x26CF JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8F8 SWAP3 SWAP2 SWAP1 PUSH2 0x2755 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x912 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x926 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST POP DUP1 PUSH2 0x936 DUP2 PUSH2 0x26E5 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x861 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0xFBFEFFD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x1F7FDFFA SWAP1 PUSH2 0x991 SWAP1 DUP14 SWAP1 DUP14 SWAP1 DUP14 SWAP1 DUP14 SWAP1 PUSH1 0x4 ADD PUSH2 0x27B1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x9BF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9D9 PUSH2 0x18A0 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0xA26 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F3 SWAP1 PUSH2 0x2804 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xA58 PUSH2 0x18D7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xA7E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F3 SWAP1 PUSH2 0x2850 JUMP JUMPDEST PUSH2 0xA87 DUP2 PUSH2 0x1905 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xAA3 SWAP2 DUP4 SWAP2 SWAP1 PUSH2 0x190D JUMP JUMPDEST POP JUMP JUMPDEST DUP3 TIMESTAMP GT ISZERO PUSH2 0xAEF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x12985CDB5A5B99535A5B9D195C8E88195E1C1A5C9959 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5F3 JUMP JUMPDEST DUP4 MLOAD PUSH1 0x20 DUP1 DUP7 ADD SWAP2 SWAP1 SWAP2 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH32 0x7ED266A150D7268B399E18C9036AD7FF35A4BF8F1DDF162234A3684916E16DC8 DUP2 DUP6 ADD MSTORE CALLER DUP2 DUP4 ADD MSTORE PUSH1 0x60 DUP2 ADD DUP12 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xC0 DUP3 ADD DUP7 SWAP1 MSTORE PUSH1 0xE0 DUP1 DUP4 ADD DUP7 SWAP1 MSTORE DUP2 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH2 0x100 SWAP1 SWAP3 ADD SWAP1 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 PUSH2 0x12F SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xB83 PUSH2 0xB7D DUP4 PUSH2 0x1828 JUMP JUMPDEST DUP5 PUSH2 0x187C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xBA9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F3 SWAP1 PUSH2 0x270C JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH2 0x132 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xC09 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4A61736D696E654D696E7465723A206E6F6E6365207265706C61790000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5F3 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH2 0x132 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD DUP5 SWAP2 PUSH32 0x70CD0C14252EDEF0440009634A4E86036A1747C9FBE7E4C2C05B8B62F9C410E2 SWAP2 LOG2 DUP5 MLOAD ISZERO PUSH2 0xCD2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1F8E043 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x7E3810C SWAP1 PUSH2 0xC9F SWAP1 DUP12 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x2755 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xCCD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x731133E9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x731133E9 SWAP1 PUSH2 0xD24 SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x289C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD3E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD52 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0xDA9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F3 SWAP1 PUSH2 0x2804 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xDDB PUSH2 0x18D7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xE01 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F3 SWAP1 PUSH2 0x2850 JUMP JUMPDEST PUSH2 0xE0A DUP3 PUSH2 0x1905 JUMP JUMPDEST PUSH2 0xE16 DUP3 DUP3 PUSH1 0x1 PUSH2 0x190D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0xEBA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5F3 JUMP JUMPDEST POP PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SWAP1 JUMP JUMPDEST PUSH2 0x131 DUP1 SLOAD PUSH2 0x50A SWAP1 PUSH2 0x2695 JUMP JUMPDEST PUSH2 0xEF5 PUSH2 0x1A8F JUMP JUMPDEST PUSH2 0xEFF PUSH1 0x0 PUSH2 0x1AE9 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x65 SLOAD CALLER SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 EQ PUSH2 0xF6F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C6532537465703A2063616C6C6572206973206E6F742074686520 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x3732BB9037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5F3 JUMP JUMPDEST PUSH2 0xAA3 DUP2 PUSH2 0x1AE9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0xFC0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F3 SWAP1 PUSH2 0x2804 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xFF2 PUSH2 0x18D7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1018 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F3 SWAP1 PUSH2 0x2850 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3A6B011 PUSH1 0xE6 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xE9AC0440 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x107D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x10A1 SWAP2 SWAP1 PUSH2 0x28D4 JUMP JUMPDEST ISZERO PUSH2 0x10EE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4A61736D696E654D696E7465723A2066726F7A656E2073657269657300000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5F3 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x422475C8264E559FA982D4F66450A9BD1D5BEE42CF8A98F6E032D1715B859552 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x112B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x28F6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x40 MLOAD PUSH4 0x7A94C565 PUSH1 0xE1 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xF5298ACA SWAP1 PUSH1 0x64 ADD JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x11A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x11B7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x11C8 PUSH2 0x1A8F JUMP JUMPDEST PUSH2 0x12F DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0x9775531310B2880B61484ED85CBB0B491C8FDE3A07F289C63B92551782794497 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x1233 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x124D JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x124D JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x12B0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5F3 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x12D3 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0x131B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F3 SWAP1 PUSH2 0x2804 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x134D PUSH2 0x18D7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1373 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F3 SWAP1 PUSH2 0x2850 JUMP JUMPDEST PUSH2 0x137C DUP3 PUSH2 0x1AE9 JUMP JUMPDEST PUSH2 0x1384 PUSH2 0x1B02 JUMP JUMPDEST PUSH2 0x138E DUP6 DUP6 PUSH2 0x1B29 JUMP JUMPDEST PUSH2 0x130 PUSH2 0x139B DUP7 DUP3 PUSH2 0x2963 JUMP JUMPDEST POP PUSH2 0x131 PUSH2 0x13A9 DUP6 DUP3 PUSH2 0x2963 JUMP JUMPDEST POP PUSH2 0x12F DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0x9775531310B2880B61484ED85CBB0B491C8FDE3A07F289C63B92551782794497 SWAP1 PUSH1 0x0 SWAP1 LOG2 DUP1 ISZERO PUSH2 0x1438 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0x1487 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F3 SWAP1 PUSH2 0x2804 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x14B9 PUSH2 0x18D7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x14DF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F3 SWAP1 PUSH2 0x2850 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x15F2 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xE9AC0440 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x152C JUMPI PUSH2 0x152C PUSH2 0x26CF JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1552 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x156F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1593 SWAP2 SWAP1 PUSH2 0x28D4 JUMP JUMPDEST ISZERO PUSH2 0x15E0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4A61736D696E654D696E7465723A2066726F7A656E2073657269657300000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5F3 JUMP JUMPDEST DUP1 PUSH2 0x15EA DUP2 PUSH2 0x26E5 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x14E2 JUMP JUMPDEST POP CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xF989B967AB06CB95FFA87EDFC41B030132A3A687E55E92FAF63512234D18E28F DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x1630 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A23 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x40 MLOAD PUSH4 0x1AC83115 PUSH1 0xE2 SHL DUP2 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x6B20C454 SWAP1 PUSH2 0x1189 SWAP1 CALLER SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x2A5C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xB0426304B718D58E27F05888D480CC1C9C956AFAAB3BA8D45AFCCE29F30D6448 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 DUP4 ADD DUP6 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB DUP5 ADD DUP2 MSTORE PUSH1 0x60 SWAP1 SWAP3 ADD SWAP1 SWAP3 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 PUSH2 0x12F SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x16EB PUSH2 0xB7D DUP4 PUSH2 0x1828 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1711 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F3 SWAP1 PUSH2 0x270C JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH2 0x132 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1771 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4A61736D696E654D696E7465723A206E6F6E6365207265706C61790000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5F3 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH2 0x132 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD DUP5 SWAP2 PUSH32 0x70CD0C14252EDEF0440009634A4E86036A1747C9FBE7E4C2C05B8B62F9C410E2 SWAP2 LOG2 POP POP POP JUMP JUMPDEST PUSH2 0x17BF PUSH2 0x1A8F JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH2 0x17F0 PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x38D16B8CAC22D99FC7C124B9CD0DE2D3FA1FAEF420BFE791D8C362D765E22700 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1876 PUSH2 0x1835 PUSH2 0x18A0 JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH2 0x1901 PUSH1 0xF0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x22 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x42 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x62 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x188B DUP6 DUP6 PUSH2 0x1B5A JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1898 DUP2 PUSH2 0x1B9F JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9D9 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH2 0x18CF PUSH1 0xFB SLOAD SWAP1 JUMP JUMPDEST PUSH1 0xFC SLOAD PUSH2 0x1CE9 JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0xAA3 PUSH2 0x1A8F JUMP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1945 JUMPI PUSH2 0x1940 DUP4 PUSH2 0x1D33 JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x199F JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x199C SWAP2 DUP2 ADD SWAP1 PUSH2 0x2A90 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1A02 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x6F6E206973206E6F742055555053 PUSH1 0x90 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5F3 JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP2 EQ PUSH2 0x1A83 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1A58589B1955555251 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5F3 JUMP JUMPDEST POP PUSH2 0x1940 DUP4 DUP4 DUP4 PUSH2 0x1DE1 JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xEFF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5F3 JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE PUSH2 0xAA3 DUP2 PUSH2 0x1E0C JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xEFF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F3 SWAP1 PUSH2 0x2AA9 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1B50 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F3 SWAP1 PUSH2 0x2AA9 JUMP JUMPDEST PUSH2 0xE16 DUP3 DUP3 PUSH2 0x1E5E JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x41 SUB PUSH2 0x1B90 JUMPI PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x0 BYTE PUSH2 0x1B84 DUP8 DUP3 DUP6 DUP6 PUSH2 0x1E9F JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP POP PUSH2 0x1B98 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP PUSH1 0x2 JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1BB3 JUMPI PUSH2 0x1BB3 PUSH2 0x2AF4 JUMP JUMPDEST SUB PUSH2 0x1BBB JUMPI POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1BCF JUMPI PUSH2 0x1BCF PUSH2 0x2AF4 JUMP JUMPDEST SUB PUSH2 0x1C1C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5F3 JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1C30 JUMPI PUSH2 0x1C30 PUSH2 0x2AF4 JUMP JUMPDEST SUB PUSH2 0x1C7D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5F3 JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1C91 JUMPI PUSH2 0x1C91 PUSH2 0x2AF4 JUMP JUMPDEST SUB PUSH2 0xAA3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5F3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND EXTCODESIZE PUSH2 0x1DA0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5F3 JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1DEA DUP4 PUSH2 0x1F63 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0x1DF7 JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0x1940 JUMPI PUSH2 0x1E06 DUP4 DUP4 PUSH2 0x1FA3 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1E85 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F3 SWAP1 PUSH2 0x2AA9 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD KECCAK256 DUP2 MLOAD SWAP2 SWAP1 SWAP3 ADD KECCAK256 PUSH1 0xFB SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0xFC SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT ISZERO PUSH2 0x1ED6 JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x3 PUSH2 0x1F5A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP10 SWAP1 MSTORE PUSH1 0xFF DUP9 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1F2A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1F53 JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x1F5A JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1F6C DUP2 PUSH2 0x1D33 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE PUSH2 0x200B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5F3 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x40 MLOAD PUSH2 0x2026 SWAP2 SWAP1 PUSH2 0x2B0A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2061 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2066 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x208E DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2B27 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x2097 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x20A6 JUMPI POP DUP2 PUSH2 0x1D2C JUMP JUMPDEST PUSH2 0x1D2C DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x20BB JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F3 SWAP2 SWAP1 PUSH2 0x2125 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x20F0 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x20D8 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x2111 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x20D5 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1D2C PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x20F9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x214A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2168 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x21AC JUMPI PUSH2 0x21AC PUSH2 0x216D JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x21CE JUMPI PUSH2 0x21CE PUSH2 0x216D JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x21E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x21FE PUSH2 0x21F9 DUP4 PUSH2 0x21B4 JUMP JUMPDEST PUSH2 0x2183 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x221D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x2238 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x2221 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2254 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x226E JUMPI PUSH2 0x226E PUSH2 0x216D JUMP JUMPDEST PUSH2 0x2281 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x2183 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x2296 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x22C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x22D4 PUSH2 0x21F9 DUP4 PUSH2 0x21B4 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x22F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x2238 JUMPI DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2317 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0x2325 DUP10 DUP7 DUP4 DUP12 ADD ADD PUSH2 0x2243 JUMP JUMPDEST DUP5 MSTORE POP SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x22F7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x2350 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2359 DUP10 PUSH2 0x2151 JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2376 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2382 DUP13 DUP4 DUP14 ADD PUSH2 0x21D8 JUMP JUMPDEST SWAP9 POP PUSH1 0x40 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2398 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x23A4 DUP13 DUP4 DUP14 ADD PUSH2 0x21D8 JUMP JUMPDEST SWAP8 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x23BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x23C6 DUP13 DUP4 DUP14 ADD PUSH2 0x2243 JUMP JUMPDEST SWAP7 POP PUSH1 0x80 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x23DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x23E8 DUP13 DUP4 DUP14 ADD PUSH2 0x22B3 JUMP JUMPDEST SWAP6 POP PUSH1 0xA0 DUP12 ADD CALLDATALOAD SWAP5 POP PUSH1 0xC0 DUP12 ADD CALLDATALOAD SWAP4 POP PUSH1 0xE0 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x240C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2419 DUP12 DUP3 DUP13 ADD PUSH2 0x2243 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x243B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D2C DUP3 PUSH2 0x2151 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x2461 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x246A DUP10 PUSH2 0x2151 JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2495 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x24A1 DUP13 DUP4 DUP14 ADD PUSH2 0x2243 JUMP JUMPDEST SWAP7 POP PUSH1 0x80 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x24B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x23E8 DUP13 DUP4 DUP14 ADD PUSH2 0x2243 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x24D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x24DF DUP4 PUSH2 0x2151 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x24FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2507 DUP6 DUP3 DUP7 ADD PUSH2 0x2243 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2526 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x254B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2557 DUP7 DUP3 DUP8 ADD PUSH2 0x2243 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2577 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x258F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x259B DUP9 DUP4 DUP10 ADD PUSH2 0x2243 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x25B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25BE DUP8 DUP3 DUP9 ADD PUSH2 0x2243 JUMP JUMPDEST SWAP4 POP POP PUSH2 0x25CD PUSH1 0x40 DUP7 ADD PUSH2 0x2151 JUMP JUMPDEST SWAP2 POP PUSH2 0x25DB PUSH1 0x60 DUP7 ADD PUSH2 0x2151 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x25FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2613 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x261F DUP8 DUP4 DUP9 ADD PUSH2 0x21D8 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2635 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2641 DUP8 DUP4 DUP9 ADD PUSH2 0x21D8 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2657 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2557 DUP7 DUP3 DUP8 ADD PUSH2 0x2243 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2677 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x24FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x26A9 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x26C9 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x2705 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x29 SWAP1 DUP3 ADD MSTORE PUSH32 0x4A61736D696E654D696E7465723A20626164207369676E61747572652F77726F PUSH1 0x40 DUP3 ADD MSTORE PUSH9 0x37339039B4B3B732B9 PUSH1 0xB9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x276E PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x20F9 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x27A6 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x278A JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x27D3 PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x2776 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x27E5 DUP2 DUP7 PUSH2 0x2776 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x27F9 DUP2 DUP6 PUSH2 0x20F9 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x19195B1959D85D1958D85B1B PUSH1 0xA2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x6163746976652070726F7879 PUSH1 0xA0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE DUP4 PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x28CA PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x20F9 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x28E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1D2C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x208E PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x20F9 JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x1940 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x293C JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x295B JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2948 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x297D JUMPI PUSH2 0x297D PUSH2 0x216D JUMP JUMPDEST PUSH2 0x2991 DUP2 PUSH2 0x298B DUP5 SLOAD PUSH2 0x2695 JUMP JUMPDEST DUP5 PUSH2 0x2915 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x29C6 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x29AE JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x295B JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x29F5 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x29D6 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x2A13 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH2 0x2A36 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x2776 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x2A48 DUP2 DUP7 PUSH2 0x2776 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x28CA DUP2 DUP6 PUSH2 0x20F9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x2A7E PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x2776 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x28CA DUP2 DUP6 PUSH2 0x2776 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2AA2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x2B1C DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x20D5 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x706673582212205B160D 0xCE PUSH20 0xB8E2EC7B229BDEE149D3865784095768BCA0AA43 0xED PUSH15 0x8CC42D222464736F6C634300081100 CALLER ","sourceMap":"1114:12043:24:-:0;;;1332:4:6;1289:48;;1467:92:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;1518:14:24;;;;;1538:16;;;1114:12043;;14:177:30;93:13;;-1:-1:-1;;;;;135:31:30;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:293::-;275:6;283;336:2;324:9;315:7;311:23;307:32;304:52;;;352:1;349;342:12;304:52;375:40;405:9;375:40;:::i;:::-;365:50;;434:49;479:2;468:9;464:18;434:49;:::i;:::-;424:59;;196:293;;;;;:::o;:::-;1114:12043:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@CONSUMENONCE_TYPEHASH_5405":{"entryPoint":null,"id":5405,"parameterSlots":0,"returnSlots":0},"@DOMAIN_SEPARATOR_5390":{"entryPoint":2511,"id":5390,"parameterSlots":0,"returnSlots":1},"@MINTBATCH_TYPEHASH_5400":{"entryPoint":null,"id":5400,"parameterSlots":0,"returnSlots":0},"@MINT_TYPEHASH_5395":{"entryPoint":null,"id":5395,"parameterSlots":0,"returnSlots":0},"@_EIP712NameHash_3677":{"entryPoint":null,"id":3677,"parameterSlots":0,"returnSlots":1},"@_EIP712VersionHash_3686":{"entryPoint":null,"id":3686,"parameterSlots":0,"returnSlots":1},"@__EIP712_init_3574":{"entryPoint":6953,"id":3574,"parameterSlots":2,"returnSlots":0},"@__EIP712_init_unchained_3610":{"entryPoint":7774,"id":3610,"parameterSlots":2,"returnSlots":0},"@__UUPSUpgradeable_init_813":{"entryPoint":6914,"id":813,"parameterSlots":0,"returnSlots":0},"@_authorizeUpgrade_5325":{"entryPoint":6405,"id":5325,"parameterSlots":1,"returnSlots":0},"@_buildDomainSeparator_3652":{"entryPoint":7401,"id":3652,"parameterSlots":3,"returnSlots":1},"@_checkOwner_174":{"entryPoint":6799,"id":174,"parameterSlots":0,"returnSlots":0},"@_domainSeparatorV4_3625":{"entryPoint":6304,"id":3625,"parameterSlots":0,"returnSlots":1},"@_functionDelegateCall_610":{"entryPoint":8099,"id":610,"parameterSlots":2,"returnSlots":1},"@_getImplementation_294":{"entryPoint":6359,"id":294,"parameterSlots":0,"returnSlots":1},"@_hashArray_5565":{"entryPoint":null,"id":5565,"parameterSlots":1,"returnSlots":1},"@_hashTypedDataV4_3668":{"entryPoint":6184,"id":3668,"parameterSlots":1,"returnSlots":1},"@_msgSender_2931":{"entryPoint":null,"id":2931,"parameterSlots":0,"returnSlots":1},"@_revert_2903":{"entryPoint":null,"id":2903,"parameterSlots":2,"returnSlots":0},"@_setImplementation_318":{"entryPoint":7475,"id":318,"parameterSlots":1,"returnSlots":0},"@_throwError_3235":{"entryPoint":7071,"id":3235,"parameterSlots":1,"returnSlots":0},"@_transferOwnership_231":{"entryPoint":7692,"id":231,"parameterSlots":1,"returnSlots":0},"@_transferOwnership_77":{"entryPoint":6889,"id":77,"parameterSlots":1,"returnSlots":0},"@_upgradeToAndCallUUPS_414":{"entryPoint":6413,"id":414,"parameterSlots":3,"returnSlots":0},"@_upgradeToAndCall_361":{"entryPoint":7649,"id":361,"parameterSlots":3,"returnSlots":0},"@_upgradeTo_333":{"entryPoint":8035,"id":333,"parameterSlots":1,"returnSlots":0},"@acceptOwnership_99":{"entryPoint":3841,"id":99,"parameterSlots":0,"returnSlots":0},"@bridge_5348":{"entryPoint":null,"id":5348,"parameterSlots":0,"returnSlots":0},"@burnBatch_5912":{"entryPoint":5183,"id":5912,"parameterSlots":3,"returnSlots":0},"@burn_5842":{"entryPoint":3960,"id":5842,"parameterSlots":3,"returnSlots":0},"@consumeNonce_5790":{"entryPoint":5768,"id":5790,"parameterSlots":2,"returnSlots":0},"@consumedNonces_5380":{"entryPoint":null,"id":5380,"parameterSlots":0,"returnSlots":0},"@getAddressSlot_2972":{"entryPoint":null,"id":2972,"parameterSlots":1,"returnSlots":1},"@getBooleanSlot_2983":{"entryPoint":null,"id":2983,"parameterSlots":1,"returnSlots":1},"@initialize_5449":{"entryPoint":4627,"id":5449,"parameterSlots":4,"returnSlots":0},"@isContract_2638":{"entryPoint":null,"id":2638,"parameterSlots":1,"returnSlots":1},"@mintBatch_5740":{"entryPoint":1419,"id":5740,"parameterSlots":8,"returnSlots":0},"@mint_5555":{"entryPoint":2726,"id":5555,"parameterSlots":8,"returnSlots":0},"@name_5372":{"entryPoint":1276,"id":5372,"parameterSlots":0,"returnSlots":0},"@oracle_5329":{"entryPoint":null,"id":5329,"parameterSlots":0,"returnSlots":0},"@owner_160":{"entryPoint":null,"id":160,"parameterSlots":0,"returnSlots":1},"@pendingOwner_40":{"entryPoint":null,"id":40,"parameterSlots":0,"returnSlots":1},"@proxiableUUID_876":{"entryPoint":3610,"id":876,"parameterSlots":0,"returnSlots":1},"@recover_3308":{"entryPoint":6268,"id":3308,"parameterSlots":2,"returnSlots":1},"@renounceOwnership_188":{"entryPoint":3821,"id":188,"parameterSlots":0,"returnSlots":0},"@setBridge_5369":{"entryPoint":4544,"id":5369,"parameterSlots":1,"returnSlots":0},"@toTypedDataHash_3541":{"entryPoint":null,"id":3541,"parameterSlots":2,"returnSlots":1},"@token_5327":{"entryPoint":null,"id":5327,"parameterSlots":0,"returnSlots":0},"@transferOwnership_60":{"entryPoint":6071,"id":60,"parameterSlots":1,"returnSlots":0},"@tryRecover_3281":{"entryPoint":7002,"id":3281,"parameterSlots":2,"returnSlots":2},"@tryRecover_3449":{"entryPoint":7839,"id":3449,"parameterSlots":4,"returnSlots":2},"@upgradeToAndCall_919":{"entryPoint":3425,"id":919,"parameterSlots":2,"returnSlots":0},"@upgradeTo_898":{"entryPoint":2526,"id":898,"parameterSlots":1,"returnSlots":0},"@verifyCallResult_2883":{"entryPoint":8343,"id":2883,"parameterSlots":3,"returnSlots":1},"@version_5375":{"entryPoint":3807,"id":5375,"parameterSlots":0,"returnSlots":0},"abi_decode_address":{"entryPoint":8529,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_bytes_dyn":{"entryPoint":8883,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_array_uint256_dyn":{"entryPoint":8664,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes":{"entryPoint":8771,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":9257,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptrt_uint256t_bytes32t_bytes_memory_ptr":{"entryPoint":9011,"id":null,"parameterSlots":2,"returnSlots":8},"abi_decode_tuple_t_addresst_bytes_memory_ptr":{"entryPoint":9411,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256t_uint256t_bytes_memory_ptrt_bytes_memory_ptrt_uint256t_bytes32t_bytes_memory_ptr":{"entryPoint":9284,"id":null,"parameterSlots":2,"returnSlots":8},"abi_decode_tuple_t_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr":{"entryPoint":9702,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":10452,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":8504,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32_fromMemory":{"entryPoint":10896,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_bytes_memory_ptr":{"entryPoint":9828,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_addresst_address":{"entryPoint":9569,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_uint256t_uint256t_bytes_memory_ptr":{"entryPoint":9489,"id":null,"parameterSlots":2,"returnSlots":3},"abi_encode_array_uint256_dyn":{"entryPoint":10102,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string":{"entryPoint":8441,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":11018,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":10844,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":10161,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":10396,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":10787,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_bytes32__to_t_bytes32_t_address_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":8,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_uint256_t_uint256_t_bytes32_t_uint256_t_bytes32__to_t_bytes32_t_address_t_uint256_t_uint256_t_bytes32_t_uint256_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":8,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8485,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_151cbd16c266184352ebde6b137391339f946268ebac138a34bbf5fc5cbfac2c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_225559eb8402045bea7ff07c35d0ad8c0547830223ac1c21d44fb948d6896ebc__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_2f2c7f3aa71c7d1af89585f8c6fe06b516954bdd914e34b10b05f2f1e4d63ed8__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9996,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10244,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10320,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6a202c3fb661fc6d1c876b693892fa18c66d222ca913c0aa6eb0dfcf881c0e8a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9255a47dfbd5a3ccd82274f7fbcd278a7de4302eaa96aac250ed7ff8d0c1772f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10921,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fae1d53a06674f782f7e6c9acc836dfc0f6ccd86af9201cd196e6ea6361131e5__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_bytes_memory_ptr__to_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":10069,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":10486,"id":null,"parameterSlots":4,"returnSlots":1},"allocate_memory":{"entryPoint":8579,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_array_uint256_dyn":{"entryPoint":8628,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":10517,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":10595,"id":null,"parameterSlots":2,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":8405,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":9877,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"increment_t_uint256":{"entryPoint":9957,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x21":{"entryPoint":10996,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":9935,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":8557,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:28488:30","statements":[{"nodeType":"YulBlock","src":"6:3:30","statements":[]},{"body":{"nodeType":"YulBlock","src":"80:184:30","statements":[{"nodeType":"YulVariableDeclaration","src":"90:10:30","value":{"kind":"number","nodeType":"YulLiteral","src":"99:1:30","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"94:1:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"159:63:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"184:3:30"},{"name":"i","nodeType":"YulIdentifier","src":"189:1:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"180:3:30"},"nodeType":"YulFunctionCall","src":"180:11:30"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"203:3:30"},{"name":"i","nodeType":"YulIdentifier","src":"208:1:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"199:3:30"},"nodeType":"YulFunctionCall","src":"199:11:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"193:5:30"},"nodeType":"YulFunctionCall","src":"193:18:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"173:6:30"},"nodeType":"YulFunctionCall","src":"173:39:30"},"nodeType":"YulExpressionStatement","src":"173:39:30"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"120:1:30"},{"name":"length","nodeType":"YulIdentifier","src":"123:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"117:2:30"},"nodeType":"YulFunctionCall","src":"117:13:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"131:19:30","statements":[{"nodeType":"YulAssignment","src":"133:15:30","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"142:1:30"},{"kind":"number","nodeType":"YulLiteral","src":"145:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"138:3:30"},"nodeType":"YulFunctionCall","src":"138:10:30"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"133:1:30"}]}]},"pre":{"nodeType":"YulBlock","src":"113:3:30","statements":[]},"src":"109:113:30"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"242:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"247:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"238:3:30"},"nodeType":"YulFunctionCall","src":"238:16:30"},{"kind":"number","nodeType":"YulLiteral","src":"256:1:30","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"231:6:30"},"nodeType":"YulFunctionCall","src":"231:27:30"},"nodeType":"YulExpressionStatement","src":"231:27:30"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"58:3:30","type":""},{"name":"dst","nodeType":"YulTypedName","src":"63:3:30","type":""},{"name":"length","nodeType":"YulTypedName","src":"68:6:30","type":""}],"src":"14:250:30"},{"body":{"nodeType":"YulBlock","src":"319:221:30","statements":[{"nodeType":"YulVariableDeclaration","src":"329:26:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"349:5:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"343:5:30"},"nodeType":"YulFunctionCall","src":"343:12:30"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"333:6:30","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"371:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"376:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"364:6:30"},"nodeType":"YulFunctionCall","src":"364:19:30"},"nodeType":"YulExpressionStatement","src":"364:19:30"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"431:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"438:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"427:3:30"},"nodeType":"YulFunctionCall","src":"427:16:30"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"449:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"454:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"445:3:30"},"nodeType":"YulFunctionCall","src":"445:14:30"},{"name":"length","nodeType":"YulIdentifier","src":"461:6:30"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"392:34:30"},"nodeType":"YulFunctionCall","src":"392:76:30"},"nodeType":"YulExpressionStatement","src":"392:76:30"},{"nodeType":"YulAssignment","src":"477:57:30","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"492:3:30"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"505:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"513:2:30","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"501:3:30"},"nodeType":"YulFunctionCall","src":"501:15:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"522:2:30","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"518:3:30"},"nodeType":"YulFunctionCall","src":"518:7:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"497:3:30"},"nodeType":"YulFunctionCall","src":"497:29:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"488:3:30"},"nodeType":"YulFunctionCall","src":"488:39:30"},{"kind":"number","nodeType":"YulLiteral","src":"529:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"484:3:30"},"nodeType":"YulFunctionCall","src":"484:50:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"477:3:30"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"296:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"303:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"311:3:30","type":""}],"src":"269:271:30"},{"body":{"nodeType":"YulBlock","src":"666:99:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"683:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"694:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"676:6:30"},"nodeType":"YulFunctionCall","src":"676:21:30"},"nodeType":"YulExpressionStatement","src":"676:21:30"},{"nodeType":"YulAssignment","src":"706:53:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"732:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"744:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"755:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"740:3:30"},"nodeType":"YulFunctionCall","src":"740:18:30"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"714:17:30"},"nodeType":"YulFunctionCall","src":"714:45:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"706:4:30"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"635:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"646:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"657:4:30","type":""}],"src":"545:220:30"},{"body":{"nodeType":"YulBlock","src":"840:110:30","statements":[{"body":{"nodeType":"YulBlock","src":"886:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"895:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"898:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"888:6:30"},"nodeType":"YulFunctionCall","src":"888:12:30"},"nodeType":"YulExpressionStatement","src":"888:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"861:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"870:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"857:3:30"},"nodeType":"YulFunctionCall","src":"857:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"882:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"853:3:30"},"nodeType":"YulFunctionCall","src":"853:32:30"},"nodeType":"YulIf","src":"850:52:30"},{"nodeType":"YulAssignment","src":"911:33:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"934:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"921:12:30"},"nodeType":"YulFunctionCall","src":"921:23:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"911:6:30"}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"806:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"817:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"829:6:30","type":""}],"src":"770:180:30"},{"body":{"nodeType":"YulBlock","src":"1050:92:30","statements":[{"nodeType":"YulAssignment","src":"1060:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1072:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"1083:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1068:3:30"},"nodeType":"YulFunctionCall","src":"1068:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1060:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1102:9:30"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1127:6:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1120:6:30"},"nodeType":"YulFunctionCall","src":"1120:14:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1113:6:30"},"nodeType":"YulFunctionCall","src":"1113:22:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1095:6:30"},"nodeType":"YulFunctionCall","src":"1095:41:30"},"nodeType":"YulExpressionStatement","src":"1095:41:30"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1019:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1030:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1041:4:30","type":""}],"src":"955:187:30"},{"body":{"nodeType":"YulBlock","src":"1196:147:30","statements":[{"nodeType":"YulAssignment","src":"1206:29:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1228:6:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1215:12:30"},"nodeType":"YulFunctionCall","src":"1215:20:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1206:5:30"}]},{"body":{"nodeType":"YulBlock","src":"1321:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1330:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1333:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1323:6:30"},"nodeType":"YulFunctionCall","src":"1323:12:30"},"nodeType":"YulExpressionStatement","src":"1323:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1257:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1268:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"1275:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1264:3:30"},"nodeType":"YulFunctionCall","src":"1264:54:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1254:2:30"},"nodeType":"YulFunctionCall","src":"1254:65:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1247:6:30"},"nodeType":"YulFunctionCall","src":"1247:73:30"},"nodeType":"YulIf","src":"1244:93:30"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1175:6:30","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1186:5:30","type":""}],"src":"1147:196:30"},{"body":{"nodeType":"YulBlock","src":"1380:95:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1397:1:30","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1404:3:30","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"1409:10:30","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1400:3:30"},"nodeType":"YulFunctionCall","src":"1400:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1390:6:30"},"nodeType":"YulFunctionCall","src":"1390:31:30"},"nodeType":"YulExpressionStatement","src":"1390:31:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1437:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1440:4:30","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1430:6:30"},"nodeType":"YulFunctionCall","src":"1430:15:30"},"nodeType":"YulExpressionStatement","src":"1430:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1461:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1464:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1454:6:30"},"nodeType":"YulFunctionCall","src":"1454:15:30"},"nodeType":"YulExpressionStatement","src":"1454:15:30"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"1348:127:30"},{"body":{"nodeType":"YulBlock","src":"1525:230:30","statements":[{"nodeType":"YulAssignment","src":"1535:19:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1551:2:30","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1545:5:30"},"nodeType":"YulFunctionCall","src":"1545:9:30"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1535:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"1563:58:30","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1585:6:30"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1601:4:30"},{"kind":"number","nodeType":"YulLiteral","src":"1607:2:30","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1597:3:30"},"nodeType":"YulFunctionCall","src":"1597:13:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1616:2:30","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1612:3:30"},"nodeType":"YulFunctionCall","src":"1612:7:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1593:3:30"},"nodeType":"YulFunctionCall","src":"1593:27:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1581:3:30"},"nodeType":"YulFunctionCall","src":"1581:40:30"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"1567:10:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"1696:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1698:16:30"},"nodeType":"YulFunctionCall","src":"1698:18:30"},"nodeType":"YulExpressionStatement","src":"1698:18:30"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1639:10:30"},{"kind":"number","nodeType":"YulLiteral","src":"1651:18:30","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1636:2:30"},"nodeType":"YulFunctionCall","src":"1636:34:30"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1675:10:30"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1687:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1672:2:30"},"nodeType":"YulFunctionCall","src":"1672:22:30"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1633:2:30"},"nodeType":"YulFunctionCall","src":"1633:62:30"},"nodeType":"YulIf","src":"1630:88:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1734:2:30","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1738:10:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1727:6:30"},"nodeType":"YulFunctionCall","src":"1727:22:30"},"nodeType":"YulExpressionStatement","src":"1727:22:30"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"1505:4:30","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1514:6:30","type":""}],"src":"1480:275:30"},{"body":{"nodeType":"YulBlock","src":"1829:114:30","statements":[{"body":{"nodeType":"YulBlock","src":"1873:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1875:16:30"},"nodeType":"YulFunctionCall","src":"1875:18:30"},"nodeType":"YulExpressionStatement","src":"1875:18:30"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1845:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"1853:18:30","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1842:2:30"},"nodeType":"YulFunctionCall","src":"1842:30:30"},"nodeType":"YulIf","src":"1839:56:30"},{"nodeType":"YulAssignment","src":"1904:33:30","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1920:1:30","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"1923:6:30"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1916:3:30"},"nodeType":"YulFunctionCall","src":"1916:14:30"},{"kind":"number","nodeType":"YulLiteral","src":"1932:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1912:3:30"},"nodeType":"YulFunctionCall","src":"1912:25:30"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1904:4:30"}]}]},"name":"array_allocation_size_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"1809:6:30","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"1820:4:30","type":""}],"src":"1760:183:30"},{"body":{"nodeType":"YulBlock","src":"2012:598:30","statements":[{"body":{"nodeType":"YulBlock","src":"2061:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2070:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2073:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2063:6:30"},"nodeType":"YulFunctionCall","src":"2063:12:30"},"nodeType":"YulExpressionStatement","src":"2063:12:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2040:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"2048:4:30","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2036:3:30"},"nodeType":"YulFunctionCall","src":"2036:17:30"},{"name":"end","nodeType":"YulIdentifier","src":"2055:3:30"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2032:3:30"},"nodeType":"YulFunctionCall","src":"2032:27:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2025:6:30"},"nodeType":"YulFunctionCall","src":"2025:35:30"},"nodeType":"YulIf","src":"2022:55:30"},{"nodeType":"YulVariableDeclaration","src":"2086:30:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2109:6:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2096:12:30"},"nodeType":"YulFunctionCall","src":"2096:20:30"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2090:2:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2125:14:30","value":{"kind":"number","nodeType":"YulLiteral","src":"2135:4:30","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2129:2:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2148:71:30","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2215:2:30"}],"functionName":{"name":"array_allocation_size_array_uint256_dyn","nodeType":"YulIdentifier","src":"2175:39:30"},"nodeType":"YulFunctionCall","src":"2175:43:30"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"2159:15:30"},"nodeType":"YulFunctionCall","src":"2159:60:30"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"2152:3:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2228:16:30","value":{"name":"dst","nodeType":"YulIdentifier","src":"2241:3:30"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"2232:5:30","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2260:3:30"},{"name":"_1","nodeType":"YulIdentifier","src":"2265:2:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2253:6:30"},"nodeType":"YulFunctionCall","src":"2253:15:30"},"nodeType":"YulExpressionStatement","src":"2253:15:30"},{"nodeType":"YulAssignment","src":"2277:19:30","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2288:3:30"},{"name":"_2","nodeType":"YulIdentifier","src":"2293:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2284:3:30"},"nodeType":"YulFunctionCall","src":"2284:12:30"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"2277:3:30"}]},{"nodeType":"YulVariableDeclaration","src":"2305:46:30","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2327:6:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2339:1:30","type":"","value":"5"},{"name":"_1","nodeType":"YulIdentifier","src":"2342:2:30"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2335:3:30"},"nodeType":"YulFunctionCall","src":"2335:10:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2323:3:30"},"nodeType":"YulFunctionCall","src":"2323:23:30"},{"name":"_2","nodeType":"YulIdentifier","src":"2348:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2319:3:30"},"nodeType":"YulFunctionCall","src":"2319:32:30"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"2309:6:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"2379:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2388:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2391:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2381:6:30"},"nodeType":"YulFunctionCall","src":"2381:12:30"},"nodeType":"YulExpressionStatement","src":"2381:12:30"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"2366:6:30"},{"name":"end","nodeType":"YulIdentifier","src":"2374:3:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2363:2:30"},"nodeType":"YulFunctionCall","src":"2363:15:30"},"nodeType":"YulIf","src":"2360:35:30"},{"nodeType":"YulVariableDeclaration","src":"2404:26:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2419:6:30"},{"name":"_2","nodeType":"YulIdentifier","src":"2427:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2415:3:30"},"nodeType":"YulFunctionCall","src":"2415:15:30"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"2408:3:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"2495:86:30","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2516:3:30"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2534:3:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2521:12:30"},"nodeType":"YulFunctionCall","src":"2521:17:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2509:6:30"},"nodeType":"YulFunctionCall","src":"2509:30:30"},"nodeType":"YulExpressionStatement","src":"2509:30:30"},{"nodeType":"YulAssignment","src":"2552:19:30","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2563:3:30"},{"name":"_2","nodeType":"YulIdentifier","src":"2568:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2559:3:30"},"nodeType":"YulFunctionCall","src":"2559:12:30"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"2552:3:30"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2450:3:30"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"2455:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2447:2:30"},"nodeType":"YulFunctionCall","src":"2447:15:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2463:23:30","statements":[{"nodeType":"YulAssignment","src":"2465:19:30","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2476:3:30"},{"name":"_2","nodeType":"YulIdentifier","src":"2481:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2472:3:30"},"nodeType":"YulFunctionCall","src":"2472:12:30"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"2465:3:30"}]}]},"pre":{"nodeType":"YulBlock","src":"2443:3:30","statements":[]},"src":"2439:142:30"},{"nodeType":"YulAssignment","src":"2590:14:30","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"2599:5:30"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2590:5:30"}]}]},"name":"abi_decode_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1986:6:30","type":""},{"name":"end","nodeType":"YulTypedName","src":"1994:3:30","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2002:5:30","type":""}],"src":"1948:662:30"},{"body":{"nodeType":"YulBlock","src":"2667:478:30","statements":[{"body":{"nodeType":"YulBlock","src":"2716:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2725:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2728:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2718:6:30"},"nodeType":"YulFunctionCall","src":"2718:12:30"},"nodeType":"YulExpressionStatement","src":"2718:12:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2695:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"2703:4:30","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2691:3:30"},"nodeType":"YulFunctionCall","src":"2691:17:30"},{"name":"end","nodeType":"YulIdentifier","src":"2710:3:30"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2687:3:30"},"nodeType":"YulFunctionCall","src":"2687:27:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2680:6:30"},"nodeType":"YulFunctionCall","src":"2680:35:30"},"nodeType":"YulIf","src":"2677:55:30"},{"nodeType":"YulVariableDeclaration","src":"2741:30:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2764:6:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2751:12:30"},"nodeType":"YulFunctionCall","src":"2751:20:30"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2745:2:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"2810:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2812:16:30"},"nodeType":"YulFunctionCall","src":"2812:18:30"},"nodeType":"YulExpressionStatement","src":"2812:18:30"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2786:2:30"},{"kind":"number","nodeType":"YulLiteral","src":"2790:18:30","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2783:2:30"},"nodeType":"YulFunctionCall","src":"2783:26:30"},"nodeType":"YulIf","src":"2780:52:30"},{"nodeType":"YulVariableDeclaration","src":"2841:70:30","value":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2884:2:30"},{"kind":"number","nodeType":"YulLiteral","src":"2888:4:30","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2880:3:30"},"nodeType":"YulFunctionCall","src":"2880:13:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2899:2:30","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2895:3:30"},"nodeType":"YulFunctionCall","src":"2895:7:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2876:3:30"},"nodeType":"YulFunctionCall","src":"2876:27:30"},{"kind":"number","nodeType":"YulLiteral","src":"2905:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2872:3:30"},"nodeType":"YulFunctionCall","src":"2872:38:30"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"2856:15:30"},"nodeType":"YulFunctionCall","src":"2856:55:30"},"variables":[{"name":"array_1","nodeType":"YulTypedName","src":"2845:7:30","type":""}]},{"expression":{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"2927:7:30"},{"name":"_1","nodeType":"YulIdentifier","src":"2936:2:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2920:6:30"},"nodeType":"YulFunctionCall","src":"2920:19:30"},"nodeType":"YulExpressionStatement","src":"2920:19:30"},{"body":{"nodeType":"YulBlock","src":"2987:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2996:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2999:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2989:6:30"},"nodeType":"YulFunctionCall","src":"2989:12:30"},"nodeType":"YulExpressionStatement","src":"2989:12:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2962:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"2970:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2958:3:30"},"nodeType":"YulFunctionCall","src":"2958:15:30"},{"kind":"number","nodeType":"YulLiteral","src":"2975:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2954:3:30"},"nodeType":"YulFunctionCall","src":"2954:26:30"},{"name":"end","nodeType":"YulIdentifier","src":"2982:3:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2951:2:30"},"nodeType":"YulFunctionCall","src":"2951:35:30"},"nodeType":"YulIf","src":"2948:55:30"},{"expression":{"arguments":[{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"3029:7:30"},{"kind":"number","nodeType":"YulLiteral","src":"3038:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3025:3:30"},"nodeType":"YulFunctionCall","src":"3025:18:30"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3049:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"3057:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3045:3:30"},"nodeType":"YulFunctionCall","src":"3045:17:30"},{"name":"_1","nodeType":"YulIdentifier","src":"3064:2:30"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"3012:12:30"},"nodeType":"YulFunctionCall","src":"3012:55:30"},"nodeType":"YulExpressionStatement","src":"3012:55:30"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"3091:7:30"},{"name":"_1","nodeType":"YulIdentifier","src":"3100:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3087:3:30"},"nodeType":"YulFunctionCall","src":"3087:16:30"},{"kind":"number","nodeType":"YulLiteral","src":"3105:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3083:3:30"},"nodeType":"YulFunctionCall","src":"3083:27:30"},{"kind":"number","nodeType":"YulLiteral","src":"3112:1:30","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3076:6:30"},"nodeType":"YulFunctionCall","src":"3076:38:30"},"nodeType":"YulExpressionStatement","src":"3076:38:30"},{"nodeType":"YulAssignment","src":"3123:16:30","value":{"name":"array_1","nodeType":"YulIdentifier","src":"3132:7:30"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3123:5:30"}]}]},"name":"abi_decode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2641:6:30","type":""},{"name":"end","nodeType":"YulTypedName","src":"2649:3:30","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2657:5:30","type":""}],"src":"2615:530:30"},{"body":{"nodeType":"YulBlock","src":"3212:824:30","statements":[{"body":{"nodeType":"YulBlock","src":"3261:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3270:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3273:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3263:6:30"},"nodeType":"YulFunctionCall","src":"3263:12:30"},"nodeType":"YulExpressionStatement","src":"3263:12:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3240:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"3248:4:30","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3236:3:30"},"nodeType":"YulFunctionCall","src":"3236:17:30"},{"name":"end","nodeType":"YulIdentifier","src":"3255:3:30"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3232:3:30"},"nodeType":"YulFunctionCall","src":"3232:27:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3225:6:30"},"nodeType":"YulFunctionCall","src":"3225:35:30"},"nodeType":"YulIf","src":"3222:55:30"},{"nodeType":"YulVariableDeclaration","src":"3286:30:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3309:6:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3296:12:30"},"nodeType":"YulFunctionCall","src":"3296:20:30"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3290:2:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3325:14:30","value":{"kind":"number","nodeType":"YulLiteral","src":"3335:4:30","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"3329:2:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3348:71:30","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3415:2:30"}],"functionName":{"name":"array_allocation_size_array_uint256_dyn","nodeType":"YulIdentifier","src":"3375:39:30"},"nodeType":"YulFunctionCall","src":"3375:43:30"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"3359:15:30"},"nodeType":"YulFunctionCall","src":"3359:60:30"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"3352:3:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3428:16:30","value":{"name":"dst","nodeType":"YulIdentifier","src":"3441:3:30"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"3432:5:30","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3460:3:30"},{"name":"_1","nodeType":"YulIdentifier","src":"3465:2:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3453:6:30"},"nodeType":"YulFunctionCall","src":"3453:15:30"},"nodeType":"YulExpressionStatement","src":"3453:15:30"},{"nodeType":"YulAssignment","src":"3477:19:30","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3488:3:30"},{"name":"_2","nodeType":"YulIdentifier","src":"3493:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3484:3:30"},"nodeType":"YulFunctionCall","src":"3484:12:30"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3477:3:30"}]},{"nodeType":"YulVariableDeclaration","src":"3505:46:30","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3527:6:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3539:1:30","type":"","value":"5"},{"name":"_1","nodeType":"YulIdentifier","src":"3542:2:30"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3535:3:30"},"nodeType":"YulFunctionCall","src":"3535:10:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3523:3:30"},"nodeType":"YulFunctionCall","src":"3523:23:30"},{"name":"_2","nodeType":"YulIdentifier","src":"3548:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3519:3:30"},"nodeType":"YulFunctionCall","src":"3519:32:30"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"3509:6:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"3579:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3588:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3591:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3581:6:30"},"nodeType":"YulFunctionCall","src":"3581:12:30"},"nodeType":"YulExpressionStatement","src":"3581:12:30"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"3566:6:30"},{"name":"end","nodeType":"YulIdentifier","src":"3574:3:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3563:2:30"},"nodeType":"YulFunctionCall","src":"3563:15:30"},"nodeType":"YulIf","src":"3560:35:30"},{"nodeType":"YulVariableDeclaration","src":"3604:26:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3619:6:30"},{"name":"_2","nodeType":"YulIdentifier","src":"3627:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3615:3:30"},"nodeType":"YulFunctionCall","src":"3615:15:30"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"3608:3:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"3695:312:30","statements":[{"nodeType":"YulVariableDeclaration","src":"3709:36:30","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3741:3:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3728:12:30"},"nodeType":"YulFunctionCall","src":"3728:17:30"},"variables":[{"name":"innerOffset","nodeType":"YulTypedName","src":"3713:11:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"3809:74:30","statements":[{"nodeType":"YulVariableDeclaration","src":"3827:11:30","value":{"kind":"number","nodeType":"YulLiteral","src":"3837:1:30","type":"","value":"0"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"3831:2:30","type":""}]},{"expression":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"3862:2:30"},{"name":"_3","nodeType":"YulIdentifier","src":"3866:2:30"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3855:6:30"},"nodeType":"YulFunctionCall","src":"3855:14:30"},"nodeType":"YulExpressionStatement","src":"3855:14:30"}]},"condition":{"arguments":[{"name":"innerOffset","nodeType":"YulIdentifier","src":"3764:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"3777:18:30","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3761:2:30"},"nodeType":"YulFunctionCall","src":"3761:35:30"},"nodeType":"YulIf","src":"3758:125:30"},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3903:3:30"},{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3933:6:30"},{"name":"innerOffset","nodeType":"YulIdentifier","src":"3941:11:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3929:3:30"},"nodeType":"YulFunctionCall","src":"3929:24:30"},{"name":"_2","nodeType":"YulIdentifier","src":"3955:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3925:3:30"},"nodeType":"YulFunctionCall","src":"3925:33:30"},{"name":"end","nodeType":"YulIdentifier","src":"3960:3:30"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"3908:16:30"},"nodeType":"YulFunctionCall","src":"3908:56:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3896:6:30"},"nodeType":"YulFunctionCall","src":"3896:69:30"},"nodeType":"YulExpressionStatement","src":"3896:69:30"},{"nodeType":"YulAssignment","src":"3978:19:30","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3989:3:30"},{"name":"_2","nodeType":"YulIdentifier","src":"3994:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3985:3:30"},"nodeType":"YulFunctionCall","src":"3985:12:30"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3978:3:30"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3650:3:30"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"3655:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3647:2:30"},"nodeType":"YulFunctionCall","src":"3647:15:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3663:23:30","statements":[{"nodeType":"YulAssignment","src":"3665:19:30","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3676:3:30"},{"name":"_2","nodeType":"YulIdentifier","src":"3681:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3672:3:30"},"nodeType":"YulFunctionCall","src":"3672:12:30"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"3665:3:30"}]}]},"pre":{"nodeType":"YulBlock","src":"3643:3:30","statements":[]},"src":"3639:368:30"},{"nodeType":"YulAssignment","src":"4016:14:30","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"4025:5:30"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"4016:5:30"}]}]},"name":"abi_decode_array_bytes_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3186:6:30","type":""},{"name":"end","nodeType":"YulTypedName","src":"3194:3:30","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3202:5:30","type":""}],"src":"3150:886:30"},{"body":{"nodeType":"YulBlock","src":"4332:1148:30","statements":[{"body":{"nodeType":"YulBlock","src":"4379:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4388:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4391:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4381:6:30"},"nodeType":"YulFunctionCall","src":"4381:12:30"},"nodeType":"YulExpressionStatement","src":"4381:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4353:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"4362:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4349:3:30"},"nodeType":"YulFunctionCall","src":"4349:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"4374:3:30","type":"","value":"256"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4345:3:30"},"nodeType":"YulFunctionCall","src":"4345:33:30"},"nodeType":"YulIf","src":"4342:53:30"},{"nodeType":"YulAssignment","src":"4404:39:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4433:9:30"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4414:18:30"},"nodeType":"YulFunctionCall","src":"4414:29:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4404:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"4452:46:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4483:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"4494:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4479:3:30"},"nodeType":"YulFunctionCall","src":"4479:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4466:12:30"},"nodeType":"YulFunctionCall","src":"4466:32:30"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4456:6:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4507:28:30","value":{"kind":"number","nodeType":"YulLiteral","src":"4517:18:30","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4511:2:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"4562:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4571:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4574:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4564:6:30"},"nodeType":"YulFunctionCall","src":"4564:12:30"},"nodeType":"YulExpressionStatement","src":"4564:12:30"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4550:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"4558:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4547:2:30"},"nodeType":"YulFunctionCall","src":"4547:14:30"},"nodeType":"YulIf","src":"4544:34:30"},{"nodeType":"YulAssignment","src":"4587:71:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4630:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"4641:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4626:3:30"},"nodeType":"YulFunctionCall","src":"4626:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4650:7:30"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"4597:28:30"},"nodeType":"YulFunctionCall","src":"4597:61:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4587:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"4667:48:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4700:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"4711:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4696:3:30"},"nodeType":"YulFunctionCall","src":"4696:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4683:12:30"},"nodeType":"YulFunctionCall","src":"4683:32:30"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"4671:8:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"4744:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4753:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4756:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4746:6:30"},"nodeType":"YulFunctionCall","src":"4746:12:30"},"nodeType":"YulExpressionStatement","src":"4746:12:30"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"4730:8:30"},{"name":"_1","nodeType":"YulIdentifier","src":"4740:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4727:2:30"},"nodeType":"YulFunctionCall","src":"4727:16:30"},"nodeType":"YulIf","src":"4724:36:30"},{"nodeType":"YulAssignment","src":"4769:73:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4812:9:30"},{"name":"offset_1","nodeType":"YulIdentifier","src":"4823:8:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4808:3:30"},"nodeType":"YulFunctionCall","src":"4808:24:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4834:7:30"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"4779:28:30"},"nodeType":"YulFunctionCall","src":"4779:63:30"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4769:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"4851:48:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4884:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"4895:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4880:3:30"},"nodeType":"YulFunctionCall","src":"4880:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4867:12:30"},"nodeType":"YulFunctionCall","src":"4867:32:30"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"4855:8:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"4928:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4937:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4940:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4930:6:30"},"nodeType":"YulFunctionCall","src":"4930:12:30"},"nodeType":"YulExpressionStatement","src":"4930:12:30"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"4914:8:30"},{"name":"_1","nodeType":"YulIdentifier","src":"4924:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4911:2:30"},"nodeType":"YulFunctionCall","src":"4911:16:30"},"nodeType":"YulIf","src":"4908:36:30"},{"nodeType":"YulAssignment","src":"4953:61:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4984:9:30"},{"name":"offset_2","nodeType":"YulIdentifier","src":"4995:8:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4980:3:30"},"nodeType":"YulFunctionCall","src":"4980:24:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5006:7:30"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"4963:16:30"},"nodeType":"YulFunctionCall","src":"4963:51:30"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4953:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"5023:49:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5056:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"5067:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5052:3:30"},"nodeType":"YulFunctionCall","src":"5052:19:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5039:12:30"},"nodeType":"YulFunctionCall","src":"5039:33:30"},"variables":[{"name":"offset_3","nodeType":"YulTypedName","src":"5027:8:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"5101:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5110:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5113:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5103:6:30"},"nodeType":"YulFunctionCall","src":"5103:12:30"},"nodeType":"YulExpressionStatement","src":"5103:12:30"}]},"condition":{"arguments":[{"name":"offset_3","nodeType":"YulIdentifier","src":"5087:8:30"},{"name":"_1","nodeType":"YulIdentifier","src":"5097:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5084:2:30"},"nodeType":"YulFunctionCall","src":"5084:16:30"},"nodeType":"YulIf","src":"5081:36:30"},{"nodeType":"YulAssignment","src":"5126:71:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5167:9:30"},{"name":"offset_3","nodeType":"YulIdentifier","src":"5178:8:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5163:3:30"},"nodeType":"YulFunctionCall","src":"5163:24:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5189:7:30"}],"functionName":{"name":"abi_decode_array_bytes_dyn","nodeType":"YulIdentifier","src":"5136:26:30"},"nodeType":"YulFunctionCall","src":"5136:61:30"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"5126:6:30"}]},{"nodeType":"YulAssignment","src":"5206:43:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5233:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"5244:3:30","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5229:3:30"},"nodeType":"YulFunctionCall","src":"5229:19:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5216:12:30"},"nodeType":"YulFunctionCall","src":"5216:33:30"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"5206:6:30"}]},{"nodeType":"YulAssignment","src":"5258:43:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5285:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"5296:3:30","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5281:3:30"},"nodeType":"YulFunctionCall","src":"5281:19:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5268:12:30"},"nodeType":"YulFunctionCall","src":"5268:33:30"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"5258:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"5310:49:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5343:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"5354:3:30","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5339:3:30"},"nodeType":"YulFunctionCall","src":"5339:19:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5326:12:30"},"nodeType":"YulFunctionCall","src":"5326:33:30"},"variables":[{"name":"offset_4","nodeType":"YulTypedName","src":"5314:8:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"5388:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5397:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5400:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5390:6:30"},"nodeType":"YulFunctionCall","src":"5390:12:30"},"nodeType":"YulExpressionStatement","src":"5390:12:30"}]},"condition":{"arguments":[{"name":"offset_4","nodeType":"YulIdentifier","src":"5374:8:30"},{"name":"_1","nodeType":"YulIdentifier","src":"5384:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5371:2:30"},"nodeType":"YulFunctionCall","src":"5371:16:30"},"nodeType":"YulIf","src":"5368:36:30"},{"nodeType":"YulAssignment","src":"5413:61:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5444:9:30"},{"name":"offset_4","nodeType":"YulIdentifier","src":"5455:8:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5440:3:30"},"nodeType":"YulFunctionCall","src":"5440:24:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5466:7:30"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"5423:16:30"},"nodeType":"YulFunctionCall","src":"5423:51:30"},"variableNames":[{"name":"value7","nodeType":"YulIdentifier","src":"5413:6:30"}]}]},"name":"abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptrt_uint256t_bytes32t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4242:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4253:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4265:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4273:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4281:6:30","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4289:6:30","type":""},{"name":"value4","nodeType":"YulTypedName","src":"4297:6:30","type":""},{"name":"value5","nodeType":"YulTypedName","src":"4305:6:30","type":""},{"name":"value6","nodeType":"YulTypedName","src":"4313:6:30","type":""},{"name":"value7","nodeType":"YulTypedName","src":"4321:6:30","type":""}],"src":"4041:1439:30"},{"body":{"nodeType":"YulBlock","src":"5586:76:30","statements":[{"nodeType":"YulAssignment","src":"5596:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5608:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"5619:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5604:3:30"},"nodeType":"YulFunctionCall","src":"5604:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5596:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5638:9:30"},{"name":"value0","nodeType":"YulIdentifier","src":"5649:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5631:6:30"},"nodeType":"YulFunctionCall","src":"5631:25:30"},"nodeType":"YulExpressionStatement","src":"5631:25:30"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5555:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5566:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5577:4:30","type":""}],"src":"5485:177:30"},{"body":{"nodeType":"YulBlock","src":"5737:116:30","statements":[{"body":{"nodeType":"YulBlock","src":"5783:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5792:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5795:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5785:6:30"},"nodeType":"YulFunctionCall","src":"5785:12:30"},"nodeType":"YulExpressionStatement","src":"5785:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5758:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"5767:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5754:3:30"},"nodeType":"YulFunctionCall","src":"5754:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"5779:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5750:3:30"},"nodeType":"YulFunctionCall","src":"5750:32:30"},"nodeType":"YulIf","src":"5747:52:30"},{"nodeType":"YulAssignment","src":"5808:39:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5837:9:30"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"5818:18:30"},"nodeType":"YulFunctionCall","src":"5818:29:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5808:6:30"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5703:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5714:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5726:6:30","type":""}],"src":"5667:186:30"},{"body":{"nodeType":"YulBlock","src":"6074:872:30","statements":[{"body":{"nodeType":"YulBlock","src":"6121:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6130:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6133:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6123:6:30"},"nodeType":"YulFunctionCall","src":"6123:12:30"},"nodeType":"YulExpressionStatement","src":"6123:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6095:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"6104:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6091:3:30"},"nodeType":"YulFunctionCall","src":"6091:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"6116:3:30","type":"","value":"256"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6087:3:30"},"nodeType":"YulFunctionCall","src":"6087:33:30"},"nodeType":"YulIf","src":"6084:53:30"},{"nodeType":"YulAssignment","src":"6146:39:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6175:9:30"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"6156:18:30"},"nodeType":"YulFunctionCall","src":"6156:29:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6146:6:30"}]},{"nodeType":"YulAssignment","src":"6194:42:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6221:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"6232:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6217:3:30"},"nodeType":"YulFunctionCall","src":"6217:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6204:12:30"},"nodeType":"YulFunctionCall","src":"6204:32:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6194:6:30"}]},{"nodeType":"YulAssignment","src":"6245:42:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6272:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"6283:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6268:3:30"},"nodeType":"YulFunctionCall","src":"6268:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6255:12:30"},"nodeType":"YulFunctionCall","src":"6255:32:30"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"6245:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"6296:46:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6327:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"6338:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6323:3:30"},"nodeType":"YulFunctionCall","src":"6323:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6310:12:30"},"nodeType":"YulFunctionCall","src":"6310:32:30"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6300:6:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6351:28:30","value":{"kind":"number","nodeType":"YulLiteral","src":"6361:18:30","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"6355:2:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"6406:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6415:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6418:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6408:6:30"},"nodeType":"YulFunctionCall","src":"6408:12:30"},"nodeType":"YulExpressionStatement","src":"6408:12:30"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6394:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"6402:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6391:2:30"},"nodeType":"YulFunctionCall","src":"6391:14:30"},"nodeType":"YulIf","src":"6388:34:30"},{"nodeType":"YulAssignment","src":"6431:59:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6462:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"6473:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6458:3:30"},"nodeType":"YulFunctionCall","src":"6458:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6482:7:30"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"6441:16:30"},"nodeType":"YulFunctionCall","src":"6441:49:30"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"6431:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"6499:49:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6532:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"6543:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6528:3:30"},"nodeType":"YulFunctionCall","src":"6528:19:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6515:12:30"},"nodeType":"YulFunctionCall","src":"6515:33:30"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"6503:8:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"6577:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6586:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6589:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6579:6:30"},"nodeType":"YulFunctionCall","src":"6579:12:30"},"nodeType":"YulExpressionStatement","src":"6579:12:30"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"6563:8:30"},{"name":"_1","nodeType":"YulIdentifier","src":"6573:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6560:2:30"},"nodeType":"YulFunctionCall","src":"6560:16:30"},"nodeType":"YulIf","src":"6557:36:30"},{"nodeType":"YulAssignment","src":"6602:61:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6633:9:30"},{"name":"offset_1","nodeType":"YulIdentifier","src":"6644:8:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6629:3:30"},"nodeType":"YulFunctionCall","src":"6629:24:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6655:7:30"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"6612:16:30"},"nodeType":"YulFunctionCall","src":"6612:51:30"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"6602:6:30"}]},{"nodeType":"YulAssignment","src":"6672:43:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6699:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"6710:3:30","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6695:3:30"},"nodeType":"YulFunctionCall","src":"6695:19:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6682:12:30"},"nodeType":"YulFunctionCall","src":"6682:33:30"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"6672:6:30"}]},{"nodeType":"YulAssignment","src":"6724:43:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6751:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"6762:3:30","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6747:3:30"},"nodeType":"YulFunctionCall","src":"6747:19:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6734:12:30"},"nodeType":"YulFunctionCall","src":"6734:33:30"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"6724:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"6776:49:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6809:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"6820:3:30","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6805:3:30"},"nodeType":"YulFunctionCall","src":"6805:19:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6792:12:30"},"nodeType":"YulFunctionCall","src":"6792:33:30"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"6780:8:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"6854:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6863:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6866:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6856:6:30"},"nodeType":"YulFunctionCall","src":"6856:12:30"},"nodeType":"YulExpressionStatement","src":"6856:12:30"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"6840:8:30"},{"name":"_1","nodeType":"YulIdentifier","src":"6850:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6837:2:30"},"nodeType":"YulFunctionCall","src":"6837:16:30"},"nodeType":"YulIf","src":"6834:36:30"},{"nodeType":"YulAssignment","src":"6879:61:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6910:9:30"},{"name":"offset_2","nodeType":"YulIdentifier","src":"6921:8:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6906:3:30"},"nodeType":"YulFunctionCall","src":"6906:24:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6932:7:30"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"6889:16:30"},"nodeType":"YulFunctionCall","src":"6889:51:30"},"variableNames":[{"name":"value7","nodeType":"YulIdentifier","src":"6879:6:30"}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_uint256t_bytes_memory_ptrt_bytes_memory_ptrt_uint256t_bytes32t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5984:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5995:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6007:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6015:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6023:6:30","type":""},{"name":"value3","nodeType":"YulTypedName","src":"6031:6:30","type":""},{"name":"value4","nodeType":"YulTypedName","src":"6039:6:30","type":""},{"name":"value5","nodeType":"YulTypedName","src":"6047:6:30","type":""},{"name":"value6","nodeType":"YulTypedName","src":"6055:6:30","type":""},{"name":"value7","nodeType":"YulTypedName","src":"6063:6:30","type":""}],"src":"5858:1088:30"},{"body":{"nodeType":"YulBlock","src":"7047:298:30","statements":[{"body":{"nodeType":"YulBlock","src":"7093:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7102:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7105:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7095:6:30"},"nodeType":"YulFunctionCall","src":"7095:12:30"},"nodeType":"YulExpressionStatement","src":"7095:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7068:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"7077:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7064:3:30"},"nodeType":"YulFunctionCall","src":"7064:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"7089:2:30","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7060:3:30"},"nodeType":"YulFunctionCall","src":"7060:32:30"},"nodeType":"YulIf","src":"7057:52:30"},{"nodeType":"YulAssignment","src":"7118:39:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7147:9:30"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"7128:18:30"},"nodeType":"YulFunctionCall","src":"7128:29:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7118:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"7166:46:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7197:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"7208:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7193:3:30"},"nodeType":"YulFunctionCall","src":"7193:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7180:12:30"},"nodeType":"YulFunctionCall","src":"7180:32:30"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7170:6:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"7255:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7264:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7267:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7257:6:30"},"nodeType":"YulFunctionCall","src":"7257:12:30"},"nodeType":"YulExpressionStatement","src":"7257:12:30"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7227:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"7235:18:30","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7224:2:30"},"nodeType":"YulFunctionCall","src":"7224:30:30"},"nodeType":"YulIf","src":"7221:50:30"},{"nodeType":"YulAssignment","src":"7280:59:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7311:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"7322:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7307:3:30"},"nodeType":"YulFunctionCall","src":"7307:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7331:7:30"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"7290:16:30"},"nodeType":"YulFunctionCall","src":"7290:49:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7280:6:30"}]}]},"name":"abi_decode_tuple_t_addresst_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7005:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7016:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7028:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7036:6:30","type":""}],"src":"6951:394:30"},{"body":{"nodeType":"YulBlock","src":"7451:125:30","statements":[{"nodeType":"YulAssignment","src":"7461:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7473:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"7484:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7469:3:30"},"nodeType":"YulFunctionCall","src":"7469:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7461:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7503:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7518:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"7526:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7514:3:30"},"nodeType":"YulFunctionCall","src":"7514:55:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7496:6:30"},"nodeType":"YulFunctionCall","src":"7496:74:30"},"nodeType":"YulExpressionStatement","src":"7496:74:30"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7420:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7431:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7442:4:30","type":""}],"src":"7350:226:30"},{"body":{"nodeType":"YulBlock","src":"7694:343:30","statements":[{"body":{"nodeType":"YulBlock","src":"7740:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7749:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7752:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7742:6:30"},"nodeType":"YulFunctionCall","src":"7742:12:30"},"nodeType":"YulExpressionStatement","src":"7742:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7715:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"7724:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7711:3:30"},"nodeType":"YulFunctionCall","src":"7711:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"7736:2:30","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7707:3:30"},"nodeType":"YulFunctionCall","src":"7707:32:30"},"nodeType":"YulIf","src":"7704:52:30"},{"nodeType":"YulAssignment","src":"7765:33:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7788:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7775:12:30"},"nodeType":"YulFunctionCall","src":"7775:23:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7765:6:30"}]},{"nodeType":"YulAssignment","src":"7807:42:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7834:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"7845:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7830:3:30"},"nodeType":"YulFunctionCall","src":"7830:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7817:12:30"},"nodeType":"YulFunctionCall","src":"7817:32:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7807:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"7858:46:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7889:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"7900:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7885:3:30"},"nodeType":"YulFunctionCall","src":"7885:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7872:12:30"},"nodeType":"YulFunctionCall","src":"7872:32:30"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7862:6:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"7947:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7956:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7959:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7949:6:30"},"nodeType":"YulFunctionCall","src":"7949:12:30"},"nodeType":"YulExpressionStatement","src":"7949:12:30"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7919:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"7927:18:30","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7916:2:30"},"nodeType":"YulFunctionCall","src":"7916:30:30"},"nodeType":"YulIf","src":"7913:50:30"},{"nodeType":"YulAssignment","src":"7972:59:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8003:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"8014:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7999:3:30"},"nodeType":"YulFunctionCall","src":"7999:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8023:7:30"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"7982:16:30"},"nodeType":"YulFunctionCall","src":"7982:49:30"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"7972:6:30"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7644:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7655:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7667:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7675:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7683:6:30","type":""}],"src":"7581:456:30"},{"body":{"nodeType":"YulBlock","src":"8183:549:30","statements":[{"body":{"nodeType":"YulBlock","src":"8230:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8239:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8242:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8232:6:30"},"nodeType":"YulFunctionCall","src":"8232:12:30"},"nodeType":"YulExpressionStatement","src":"8232:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8204:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"8213:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8200:3:30"},"nodeType":"YulFunctionCall","src":"8200:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"8225:3:30","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8196:3:30"},"nodeType":"YulFunctionCall","src":"8196:33:30"},"nodeType":"YulIf","src":"8193:53:30"},{"nodeType":"YulVariableDeclaration","src":"8255:37:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8282:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8269:12:30"},"nodeType":"YulFunctionCall","src":"8269:23:30"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8259:6:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8301:28:30","value":{"kind":"number","nodeType":"YulLiteral","src":"8311:18:30","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"8305:2:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"8356:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8365:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8368:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8358:6:30"},"nodeType":"YulFunctionCall","src":"8358:12:30"},"nodeType":"YulExpressionStatement","src":"8358:12:30"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8344:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"8352:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8341:2:30"},"nodeType":"YulFunctionCall","src":"8341:14:30"},"nodeType":"YulIf","src":"8338:34:30"},{"nodeType":"YulAssignment","src":"8381:59:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8412:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"8423:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8408:3:30"},"nodeType":"YulFunctionCall","src":"8408:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8432:7:30"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"8391:16:30"},"nodeType":"YulFunctionCall","src":"8391:49:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8381:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"8449:48:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8482:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"8493:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8478:3:30"},"nodeType":"YulFunctionCall","src":"8478:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8465:12:30"},"nodeType":"YulFunctionCall","src":"8465:32:30"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"8453:8:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"8526:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8535:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8538:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8528:6:30"},"nodeType":"YulFunctionCall","src":"8528:12:30"},"nodeType":"YulExpressionStatement","src":"8528:12:30"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"8512:8:30"},{"name":"_1","nodeType":"YulIdentifier","src":"8522:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8509:2:30"},"nodeType":"YulFunctionCall","src":"8509:16:30"},"nodeType":"YulIf","src":"8506:36:30"},{"nodeType":"YulAssignment","src":"8551:61:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8582:9:30"},{"name":"offset_1","nodeType":"YulIdentifier","src":"8593:8:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8578:3:30"},"nodeType":"YulFunctionCall","src":"8578:24:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8604:7:30"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"8561:16:30"},"nodeType":"YulFunctionCall","src":"8561:51:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"8551:6:30"}]},{"nodeType":"YulAssignment","src":"8621:48:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8654:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"8665:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8650:3:30"},"nodeType":"YulFunctionCall","src":"8650:18:30"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"8631:18:30"},"nodeType":"YulFunctionCall","src":"8631:38:30"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"8621:6:30"}]},{"nodeType":"YulAssignment","src":"8678:48:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8711:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"8722:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8707:3:30"},"nodeType":"YulFunctionCall","src":"8707:18:30"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"8688:18:30"},"nodeType":"YulFunctionCall","src":"8688:38:30"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"8678:6:30"}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8125:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8136:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8148:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8156:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"8164:6:30","type":""},{"name":"value3","nodeType":"YulTypedName","src":"8172:6:30","type":""}],"src":"8042:690:30"},{"body":{"nodeType":"YulBlock","src":"8900:630:30","statements":[{"body":{"nodeType":"YulBlock","src":"8946:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8955:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8958:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8948:6:30"},"nodeType":"YulFunctionCall","src":"8948:12:30"},"nodeType":"YulExpressionStatement","src":"8948:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8921:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"8930:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8917:3:30"},"nodeType":"YulFunctionCall","src":"8917:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"8942:2:30","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8913:3:30"},"nodeType":"YulFunctionCall","src":"8913:32:30"},"nodeType":"YulIf","src":"8910:52:30"},{"nodeType":"YulVariableDeclaration","src":"8971:37:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8998:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8985:12:30"},"nodeType":"YulFunctionCall","src":"8985:23:30"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8975:6:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9017:28:30","value":{"kind":"number","nodeType":"YulLiteral","src":"9027:18:30","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"9021:2:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"9072:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9081:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9084:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9074:6:30"},"nodeType":"YulFunctionCall","src":"9074:12:30"},"nodeType":"YulExpressionStatement","src":"9074:12:30"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9060:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"9068:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9057:2:30"},"nodeType":"YulFunctionCall","src":"9057:14:30"},"nodeType":"YulIf","src":"9054:34:30"},{"nodeType":"YulAssignment","src":"9097:71:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9140:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"9151:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9136:3:30"},"nodeType":"YulFunctionCall","src":"9136:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9160:7:30"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"9107:28:30"},"nodeType":"YulFunctionCall","src":"9107:61:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9097:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"9177:48:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9210:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9221:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9206:3:30"},"nodeType":"YulFunctionCall","src":"9206:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9193:12:30"},"nodeType":"YulFunctionCall","src":"9193:32:30"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"9181:8:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"9254:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9263:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9266:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9256:6:30"},"nodeType":"YulFunctionCall","src":"9256:12:30"},"nodeType":"YulExpressionStatement","src":"9256:12:30"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"9240:8:30"},{"name":"_1","nodeType":"YulIdentifier","src":"9250:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9237:2:30"},"nodeType":"YulFunctionCall","src":"9237:16:30"},"nodeType":"YulIf","src":"9234:36:30"},{"nodeType":"YulAssignment","src":"9279:73:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9322:9:30"},{"name":"offset_1","nodeType":"YulIdentifier","src":"9333:8:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9318:3:30"},"nodeType":"YulFunctionCall","src":"9318:24:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9344:7:30"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"9289:28:30"},"nodeType":"YulFunctionCall","src":"9289:63:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9279:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"9361:48:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9394:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9405:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9390:3:30"},"nodeType":"YulFunctionCall","src":"9390:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9377:12:30"},"nodeType":"YulFunctionCall","src":"9377:32:30"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"9365:8:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"9438:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9447:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9450:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9440:6:30"},"nodeType":"YulFunctionCall","src":"9440:12:30"},"nodeType":"YulExpressionStatement","src":"9440:12:30"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"9424:8:30"},{"name":"_1","nodeType":"YulIdentifier","src":"9434:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9421:2:30"},"nodeType":"YulFunctionCall","src":"9421:16:30"},"nodeType":"YulIf","src":"9418:36:30"},{"nodeType":"YulAssignment","src":"9463:61:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9494:9:30"},{"name":"offset_2","nodeType":"YulIdentifier","src":"9505:8:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9490:3:30"},"nodeType":"YulFunctionCall","src":"9490:24:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9516:7:30"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"9473:16:30"},"nodeType":"YulFunctionCall","src":"9473:51:30"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"9463:6:30"}]}]},"name":"abi_decode_tuple_t_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8850:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8861:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8873:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8881:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"8889:6:30","type":""}],"src":"8737:793:30"},{"body":{"nodeType":"YulBlock","src":"9631:292:30","statements":[{"body":{"nodeType":"YulBlock","src":"9677:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9686:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9689:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9679:6:30"},"nodeType":"YulFunctionCall","src":"9679:12:30"},"nodeType":"YulExpressionStatement","src":"9679:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9652:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"9661:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9648:3:30"},"nodeType":"YulFunctionCall","src":"9648:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"9673:2:30","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9644:3:30"},"nodeType":"YulFunctionCall","src":"9644:32:30"},"nodeType":"YulIf","src":"9641:52:30"},{"nodeType":"YulAssignment","src":"9702:33:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9725:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9712:12:30"},"nodeType":"YulFunctionCall","src":"9712:23:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9702:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"9744:46:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9775:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9786:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9771:3:30"},"nodeType":"YulFunctionCall","src":"9771:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9758:12:30"},"nodeType":"YulFunctionCall","src":"9758:32:30"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9748:6:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"9833:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9842:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9845:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9835:6:30"},"nodeType":"YulFunctionCall","src":"9835:12:30"},"nodeType":"YulExpressionStatement","src":"9835:12:30"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9805:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"9813:18:30","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9802:2:30"},"nodeType":"YulFunctionCall","src":"9802:30:30"},"nodeType":"YulIf","src":"9799:50:30"},{"nodeType":"YulAssignment","src":"9858:59:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9889:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"9900:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9885:3:30"},"nodeType":"YulFunctionCall","src":"9885:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9909:7:30"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"9868:16:30"},"nodeType":"YulFunctionCall","src":"9868:49:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9858:6:30"}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9589:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9600:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9612:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9620:6:30","type":""}],"src":"9535:388:30"},{"body":{"nodeType":"YulBlock","src":"9983:325:30","statements":[{"nodeType":"YulAssignment","src":"9993:22:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10007:1:30","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"10010:4:30"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"10003:3:30"},"nodeType":"YulFunctionCall","src":"10003:12:30"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"9993:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"10024:38:30","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"10054:4:30"},{"kind":"number","nodeType":"YulLiteral","src":"10060:1:30","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10050:3:30"},"nodeType":"YulFunctionCall","src":"10050:12:30"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"10028:18:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"10101:31:30","statements":[{"nodeType":"YulAssignment","src":"10103:27:30","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10117:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"10125:4:30","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10113:3:30"},"nodeType":"YulFunctionCall","src":"10113:17:30"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"10103:6:30"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"10081:18:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10074:6:30"},"nodeType":"YulFunctionCall","src":"10074:26:30"},"nodeType":"YulIf","src":"10071:61:30"},{"body":{"nodeType":"YulBlock","src":"10191:111:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10212:1:30","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10219:3:30","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"10224:10:30","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10215:3:30"},"nodeType":"YulFunctionCall","src":"10215:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10205:6:30"},"nodeType":"YulFunctionCall","src":"10205:31:30"},"nodeType":"YulExpressionStatement","src":"10205:31:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10256:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10259:4:30","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10249:6:30"},"nodeType":"YulFunctionCall","src":"10249:15:30"},"nodeType":"YulExpressionStatement","src":"10249:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10284:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10287:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10277:6:30"},"nodeType":"YulFunctionCall","src":"10277:15:30"},"nodeType":"YulExpressionStatement","src":"10277:15:30"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"10147:18:30"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10170:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"10178:2:30","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10167:2:30"},"nodeType":"YulFunctionCall","src":"10167:14:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"10144:2:30"},"nodeType":"YulFunctionCall","src":"10144:38:30"},"nodeType":"YulIf","src":"10141:161:30"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"9963:4:30","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"9972:6:30","type":""}],"src":"9928:380:30"},{"body":{"nodeType":"YulBlock","src":"10487:240:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10504:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10515:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10497:6:30"},"nodeType":"YulFunctionCall","src":"10497:21:30"},"nodeType":"YulExpressionStatement","src":"10497:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10538:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10549:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10534:3:30"},"nodeType":"YulFunctionCall","src":"10534:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"10554:2:30","type":"","value":"50"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10527:6:30"},"nodeType":"YulFunctionCall","src":"10527:30:30"},"nodeType":"YulExpressionStatement","src":"10527:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10577:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10588:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10573:3:30"},"nodeType":"YulFunctionCall","src":"10573:18:30"},{"hexValue":"4a61736d696e654d696e7465723a2069647320616e64206f7261636c65446174","kind":"string","nodeType":"YulLiteral","src":"10593:34:30","type":"","value":"JasmineMinter: ids and oracleDat"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10566:6:30"},"nodeType":"YulFunctionCall","src":"10566:62:30"},"nodeType":"YulExpressionStatement","src":"10566:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10648:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10659:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10644:3:30"},"nodeType":"YulFunctionCall","src":"10644:18:30"},{"hexValue":"6173206c656e677468206d69736d61746368","kind":"string","nodeType":"YulLiteral","src":"10664:20:30","type":"","value":"as length mismatch"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10637:6:30"},"nodeType":"YulFunctionCall","src":"10637:48:30"},"nodeType":"YulExpressionStatement","src":"10637:48:30"},{"nodeType":"YulAssignment","src":"10694:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10706:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10717:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10702:3:30"},"nodeType":"YulFunctionCall","src":"10702:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10694:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_9255a47dfbd5a3ccd82274f7fbcd278a7de4302eaa96aac250ed7ff8d0c1772f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10464:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10478:4:30","type":""}],"src":"10313:414:30"},{"body":{"nodeType":"YulBlock","src":"10906:172:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10923:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10934:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10916:6:30"},"nodeType":"YulFunctionCall","src":"10916:21:30"},"nodeType":"YulExpressionStatement","src":"10916:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10957:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10968:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10953:3:30"},"nodeType":"YulFunctionCall","src":"10953:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"10973:2:30","type":"","value":"22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10946:6:30"},"nodeType":"YulFunctionCall","src":"10946:30:30"},"nodeType":"YulExpressionStatement","src":"10946:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10996:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"11007:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10992:3:30"},"nodeType":"YulFunctionCall","src":"10992:18:30"},{"hexValue":"4a61736d696e654d696e7465723a2065787069726564","kind":"string","nodeType":"YulLiteral","src":"11012:24:30","type":"","value":"JasmineMinter: expired"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10985:6:30"},"nodeType":"YulFunctionCall","src":"10985:52:30"},"nodeType":"YulExpressionStatement","src":"10985:52:30"},{"nodeType":"YulAssignment","src":"11046:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11058:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"11069:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11054:3:30"},"nodeType":"YulFunctionCall","src":"11054:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11046:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_fae1d53a06674f782f7e6c9acc836dfc0f6ccd86af9201cd196e6ea6361131e5__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10883:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10897:4:30","type":""}],"src":"10732:346:30"},{"body":{"nodeType":"YulBlock","src":"11115:95:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11132:1:30","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11139:3:30","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"11144:10:30","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"11135:3:30"},"nodeType":"YulFunctionCall","src":"11135:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11125:6:30"},"nodeType":"YulFunctionCall","src":"11125:31:30"},"nodeType":"YulExpressionStatement","src":"11125:31:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11172:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"11175:4:30","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11165:6:30"},"nodeType":"YulFunctionCall","src":"11165:15:30"},"nodeType":"YulExpressionStatement","src":"11165:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11196:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11199:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11189:6:30"},"nodeType":"YulFunctionCall","src":"11189:15:30"},"nodeType":"YulExpressionStatement","src":"11189:15:30"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"11083:127:30"},{"body":{"nodeType":"YulBlock","src":"11262:185:30","statements":[{"body":{"nodeType":"YulBlock","src":"11301:111:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11322:1:30","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11329:3:30","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"11334:10:30","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"11325:3:30"},"nodeType":"YulFunctionCall","src":"11325:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11315:6:30"},"nodeType":"YulFunctionCall","src":"11315:31:30"},"nodeType":"YulExpressionStatement","src":"11315:31:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11366:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"11369:4:30","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11359:6:30"},"nodeType":"YulFunctionCall","src":"11359:15:30"},"nodeType":"YulExpressionStatement","src":"11359:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11394:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11397:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11387:6:30"},"nodeType":"YulFunctionCall","src":"11387:15:30"},"nodeType":"YulExpressionStatement","src":"11387:15:30"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11278:5:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11289:1:30","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"11285:3:30"},"nodeType":"YulFunctionCall","src":"11285:6:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"11275:2:30"},"nodeType":"YulFunctionCall","src":"11275:17:30"},"nodeType":"YulIf","src":"11272:140:30"},{"nodeType":"YulAssignment","src":"11421:20:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11432:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"11439:1:30","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11428:3:30"},"nodeType":"YulFunctionCall","src":"11428:13:30"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"11421:3:30"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11244:5:30","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"11254:3:30","type":""}],"src":"11215:232:30"},{"body":{"nodeType":"YulBlock","src":"11721:387:30","statements":[{"nodeType":"YulAssignment","src":"11731:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11743:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"11754:3:30","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11739:3:30"},"nodeType":"YulFunctionCall","src":"11739:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11731:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11774:9:30"},{"name":"value0","nodeType":"YulIdentifier","src":"11785:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11767:6:30"},"nodeType":"YulFunctionCall","src":"11767:25:30"},"nodeType":"YulExpressionStatement","src":"11767:25:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11812:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"11823:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11808:3:30"},"nodeType":"YulFunctionCall","src":"11808:18:30"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11832:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"11840:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11828:3:30"},"nodeType":"YulFunctionCall","src":"11828:55:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11801:6:30"},"nodeType":"YulFunctionCall","src":"11801:83:30"},"nodeType":"YulExpressionStatement","src":"11801:83:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11904:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"11915:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11900:3:30"},"nodeType":"YulFunctionCall","src":"11900:18:30"},{"name":"value2","nodeType":"YulIdentifier","src":"11920:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11893:6:30"},"nodeType":"YulFunctionCall","src":"11893:34:30"},"nodeType":"YulExpressionStatement","src":"11893:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11947:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"11958:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11943:3:30"},"nodeType":"YulFunctionCall","src":"11943:18:30"},{"name":"value3","nodeType":"YulIdentifier","src":"11963:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11936:6:30"},"nodeType":"YulFunctionCall","src":"11936:34:30"},"nodeType":"YulExpressionStatement","src":"11936:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11990:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12001:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11986:3:30"},"nodeType":"YulFunctionCall","src":"11986:19:30"},{"name":"value4","nodeType":"YulIdentifier","src":"12007:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11979:6:30"},"nodeType":"YulFunctionCall","src":"11979:35:30"},"nodeType":"YulExpressionStatement","src":"11979:35:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12034:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12045:3:30","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12030:3:30"},"nodeType":"YulFunctionCall","src":"12030:19:30"},{"name":"value5","nodeType":"YulIdentifier","src":"12051:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12023:6:30"},"nodeType":"YulFunctionCall","src":"12023:35:30"},"nodeType":"YulExpressionStatement","src":"12023:35:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12078:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12089:3:30","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12074:3:30"},"nodeType":"YulFunctionCall","src":"12074:19:30"},{"name":"value6","nodeType":"YulIdentifier","src":"12095:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12067:6:30"},"nodeType":"YulFunctionCall","src":"12067:35:30"},"nodeType":"YulExpressionStatement","src":"12067:35:30"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_bytes32__to_t_bytes32_t_address_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11642:9:30","type":""},{"name":"value6","nodeType":"YulTypedName","src":"11653:6:30","type":""},{"name":"value5","nodeType":"YulTypedName","src":"11661:6:30","type":""},{"name":"value4","nodeType":"YulTypedName","src":"11669:6:30","type":""},{"name":"value3","nodeType":"YulTypedName","src":"11677:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"11685:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11693:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11701:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11712:4:30","type":""}],"src":"11452:656:30"},{"body":{"nodeType":"YulBlock","src":"12287:231:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12304:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12315:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12297:6:30"},"nodeType":"YulFunctionCall","src":"12297:21:30"},"nodeType":"YulExpressionStatement","src":"12297:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12338:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12349:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12334:3:30"},"nodeType":"YulFunctionCall","src":"12334:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"12354:2:30","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12327:6:30"},"nodeType":"YulFunctionCall","src":"12327:30:30"},"nodeType":"YulExpressionStatement","src":"12327:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12377:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12388:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12373:3:30"},"nodeType":"YulFunctionCall","src":"12373:18:30"},{"hexValue":"4a61736d696e654d696e7465723a20626164207369676e61747572652f77726f","kind":"string","nodeType":"YulLiteral","src":"12393:34:30","type":"","value":"JasmineMinter: bad signature/wro"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12366:6:30"},"nodeType":"YulFunctionCall","src":"12366:62:30"},"nodeType":"YulExpressionStatement","src":"12366:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12448:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12459:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12444:3:30"},"nodeType":"YulFunctionCall","src":"12444:18:30"},{"hexValue":"6e67207369676e6572","kind":"string","nodeType":"YulLiteral","src":"12464:11:30","type":"","value":"ng signer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12437:6:30"},"nodeType":"YulFunctionCall","src":"12437:39:30"},"nodeType":"YulExpressionStatement","src":"12437:39:30"},{"nodeType":"YulAssignment","src":"12485:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12497:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12508:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12493:3:30"},"nodeType":"YulFunctionCall","src":"12493:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12485:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_2f2c7f3aa71c7d1af89585f8c6fe06b516954bdd914e34b10b05f2f1e4d63ed8__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12264:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12278:4:30","type":""}],"src":"12113:405:30"},{"body":{"nodeType":"YulBlock","src":"12697:177:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12714:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12725:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12707:6:30"},"nodeType":"YulFunctionCall","src":"12707:21:30"},"nodeType":"YulExpressionStatement","src":"12707:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12748:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12759:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12744:3:30"},"nodeType":"YulFunctionCall","src":"12744:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"12764:2:30","type":"","value":"27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12737:6:30"},"nodeType":"YulFunctionCall","src":"12737:30:30"},"nodeType":"YulExpressionStatement","src":"12737:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12787:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12798:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12783:3:30"},"nodeType":"YulFunctionCall","src":"12783:18:30"},{"hexValue":"4a61736d696e654d696e7465723a206e6f6e6365207265706c6179","kind":"string","nodeType":"YulLiteral","src":"12803:29:30","type":"","value":"JasmineMinter: nonce replay"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12776:6:30"},"nodeType":"YulFunctionCall","src":"12776:57:30"},"nodeType":"YulExpressionStatement","src":"12776:57:30"},{"nodeType":"YulAssignment","src":"12842:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12854:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12865:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12850:3:30"},"nodeType":"YulFunctionCall","src":"12850:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12842:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_151cbd16c266184352ebde6b137391339f946268ebac138a34bbf5fc5cbfac2c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12674:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12688:4:30","type":""}],"src":"12523:351:30"},{"body":{"nodeType":"YulBlock","src":"13026:142:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13043:9:30"},{"name":"value0","nodeType":"YulIdentifier","src":"13054:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13036:6:30"},"nodeType":"YulFunctionCall","src":"13036:25:30"},"nodeType":"YulExpressionStatement","src":"13036:25:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13081:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13092:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13077:3:30"},"nodeType":"YulFunctionCall","src":"13077:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"13097:2:30","type":"","value":"64"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13070:6:30"},"nodeType":"YulFunctionCall","src":"13070:30:30"},"nodeType":"YulExpressionStatement","src":"13070:30:30"},{"nodeType":"YulAssignment","src":"13109:53:30","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"13135:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13147:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13158:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13143:3:30"},"nodeType":"YulFunctionCall","src":"13143:18:30"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"13117:17:30"},"nodeType":"YulFunctionCall","src":"13117:45:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13109:4:30"}]}]},"name":"abi_encode_tuple_t_uint256_t_bytes_memory_ptr__to_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12987:9:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12998:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13006:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13017:4:30","type":""}],"src":"12879:289:30"},{"body":{"nodeType":"YulBlock","src":"13234:374:30","statements":[{"nodeType":"YulVariableDeclaration","src":"13244:26:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13264:5:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13258:5:30"},"nodeType":"YulFunctionCall","src":"13258:12:30"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"13248:6:30","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13286:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"13291:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13279:6:30"},"nodeType":"YulFunctionCall","src":"13279:19:30"},"nodeType":"YulExpressionStatement","src":"13279:19:30"},{"nodeType":"YulVariableDeclaration","src":"13307:14:30","value":{"kind":"number","nodeType":"YulLiteral","src":"13317:4:30","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"13311:2:30","type":""}]},{"nodeType":"YulAssignment","src":"13330:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13341:3:30"},{"name":"_1","nodeType":"YulIdentifier","src":"13346:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13337:3:30"},"nodeType":"YulFunctionCall","src":"13337:12:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13330:3:30"}]},{"nodeType":"YulVariableDeclaration","src":"13358:28:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13376:5:30"},{"name":"_1","nodeType":"YulIdentifier","src":"13383:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13372:3:30"},"nodeType":"YulFunctionCall","src":"13372:14:30"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"13362:6:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13395:10:30","value":{"kind":"number","nodeType":"YulLiteral","src":"13404:1:30","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"13399:1:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"13463:120:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13484:3:30"},{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"13495:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13489:5:30"},"nodeType":"YulFunctionCall","src":"13489:13:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13477:6:30"},"nodeType":"YulFunctionCall","src":"13477:26:30"},"nodeType":"YulExpressionStatement","src":"13477:26:30"},{"nodeType":"YulAssignment","src":"13516:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13527:3:30"},{"name":"_1","nodeType":"YulIdentifier","src":"13532:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13523:3:30"},"nodeType":"YulFunctionCall","src":"13523:12:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13516:3:30"}]},{"nodeType":"YulAssignment","src":"13548:25:30","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"13562:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"13570:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13558:3:30"},"nodeType":"YulFunctionCall","src":"13558:15:30"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"13548:6:30"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"13425:1:30"},{"name":"length","nodeType":"YulIdentifier","src":"13428:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"13422:2:30"},"nodeType":"YulFunctionCall","src":"13422:13:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"13436:18:30","statements":[{"nodeType":"YulAssignment","src":"13438:14:30","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"13447:1:30"},{"kind":"number","nodeType":"YulLiteral","src":"13450:1:30","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13443:3:30"},"nodeType":"YulFunctionCall","src":"13443:9:30"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"13438:1:30"}]}]},"pre":{"nodeType":"YulBlock","src":"13418:3:30","statements":[]},"src":"13414:169:30"},{"nodeType":"YulAssignment","src":"13592:10:30","value":{"name":"pos","nodeType":"YulIdentifier","src":"13599:3:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13592:3:30"}]}]},"name":"abi_encode_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13211:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"13218:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13226:3:30","type":""}],"src":"13173:435:30"},{"body":{"nodeType":"YulBlock","src":"13916:445:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13933:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13948:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"13956:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13944:3:30"},"nodeType":"YulFunctionCall","src":"13944:55:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13926:6:30"},"nodeType":"YulFunctionCall","src":"13926:74:30"},"nodeType":"YulExpressionStatement","src":"13926:74:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14020:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14031:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14016:3:30"},"nodeType":"YulFunctionCall","src":"14016:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"14036:3:30","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14009:6:30"},"nodeType":"YulFunctionCall","src":"14009:31:30"},"nodeType":"YulExpressionStatement","src":"14009:31:30"},{"nodeType":"YulVariableDeclaration","src":"14049:71:30","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"14092:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14104:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14115:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14100:3:30"},"nodeType":"YulFunctionCall","src":"14100:19:30"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"14063:28:30"},"nodeType":"YulFunctionCall","src":"14063:57:30"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"14053:6:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14140:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14151:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14136:3:30"},"nodeType":"YulFunctionCall","src":"14136:18:30"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"14160:6:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"14168:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14156:3:30"},"nodeType":"YulFunctionCall","src":"14156:22:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14129:6:30"},"nodeType":"YulFunctionCall","src":"14129:50:30"},"nodeType":"YulExpressionStatement","src":"14129:50:30"},{"nodeType":"YulVariableDeclaration","src":"14188:58:30","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"14231:6:30"},{"name":"tail_1","nodeType":"YulIdentifier","src":"14239:6:30"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"14202:28:30"},"nodeType":"YulFunctionCall","src":"14202:44:30"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"14192:6:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14266:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14277:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14262:3:30"},"nodeType":"YulFunctionCall","src":"14262:18:30"},{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"14286:6:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"14294:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14282:3:30"},"nodeType":"YulFunctionCall","src":"14282:22:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14255:6:30"},"nodeType":"YulFunctionCall","src":"14255:50:30"},"nodeType":"YulExpressionStatement","src":"14255:50:30"},{"nodeType":"YulAssignment","src":"14314:41:30","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"14340:6:30"},{"name":"tail_2","nodeType":"YulIdentifier","src":"14348:6:30"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"14322:17:30"},"nodeType":"YulFunctionCall","src":"14322:33:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14314:4:30"}]}]},"name":"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13861:9:30","type":""},{"name":"value3","nodeType":"YulTypedName","src":"13872:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"13880:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"13888:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13896:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13907:4:30","type":""}],"src":"13613:748:30"},{"body":{"nodeType":"YulBlock","src":"14540:234:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14557:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14568:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14550:6:30"},"nodeType":"YulFunctionCall","src":"14550:21:30"},"nodeType":"YulExpressionStatement","src":"14550:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14591:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14602:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14587:3:30"},"nodeType":"YulFunctionCall","src":"14587:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"14607:2:30","type":"","value":"44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14580:6:30"},"nodeType":"YulFunctionCall","src":"14580:30:30"},"nodeType":"YulExpressionStatement","src":"14580:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14630:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14641:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14626:3:30"},"nodeType":"YulFunctionCall","src":"14626:18:30"},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820","kind":"string","nodeType":"YulLiteral","src":"14646:34:30","type":"","value":"Function must be called through "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14619:6:30"},"nodeType":"YulFunctionCall","src":"14619:62:30"},"nodeType":"YulExpressionStatement","src":"14619:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14701:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14712:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14697:3:30"},"nodeType":"YulFunctionCall","src":"14697:18:30"},{"hexValue":"64656c656761746563616c6c","kind":"string","nodeType":"YulLiteral","src":"14717:14:30","type":"","value":"delegatecall"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14690:6:30"},"nodeType":"YulFunctionCall","src":"14690:42:30"},"nodeType":"YulExpressionStatement","src":"14690:42:30"},{"nodeType":"YulAssignment","src":"14741:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14753:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14764:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14749:3:30"},"nodeType":"YulFunctionCall","src":"14749:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14741:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14517:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14531:4:30","type":""}],"src":"14366:408:30"},{"body":{"nodeType":"YulBlock","src":"14953:234:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14970:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14981:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14963:6:30"},"nodeType":"YulFunctionCall","src":"14963:21:30"},"nodeType":"YulExpressionStatement","src":"14963:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15004:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15015:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15000:3:30"},"nodeType":"YulFunctionCall","src":"15000:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"15020:2:30","type":"","value":"44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14993:6:30"},"nodeType":"YulFunctionCall","src":"14993:30:30"},"nodeType":"YulExpressionStatement","src":"14993:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15043:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15054:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15039:3:30"},"nodeType":"YulFunctionCall","src":"15039:18:30"},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820","kind":"string","nodeType":"YulLiteral","src":"15059:34:30","type":"","value":"Function must be called through "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15032:6:30"},"nodeType":"YulFunctionCall","src":"15032:62:30"},"nodeType":"YulExpressionStatement","src":"15032:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15114:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15125:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15110:3:30"},"nodeType":"YulFunctionCall","src":"15110:18:30"},{"hexValue":"6163746976652070726f7879","kind":"string","nodeType":"YulLiteral","src":"15130:14:30","type":"","value":"active proxy"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15103:6:30"},"nodeType":"YulFunctionCall","src":"15103:42:30"},"nodeType":"YulExpressionStatement","src":"15103:42:30"},{"nodeType":"YulAssignment","src":"15154:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15166:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15177:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15162:3:30"},"nodeType":"YulFunctionCall","src":"15162:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15154:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14930:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14944:4:30","type":""}],"src":"14779:408:30"},{"body":{"nodeType":"YulBlock","src":"15461:387:30","statements":[{"nodeType":"YulAssignment","src":"15471:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15483:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15494:3:30","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15479:3:30"},"nodeType":"YulFunctionCall","src":"15479:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15471:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15514:9:30"},{"name":"value0","nodeType":"YulIdentifier","src":"15525:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15507:6:30"},"nodeType":"YulFunctionCall","src":"15507:25:30"},"nodeType":"YulExpressionStatement","src":"15507:25:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15552:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15563:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15548:3:30"},"nodeType":"YulFunctionCall","src":"15548:18:30"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"15572:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"15580:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15568:3:30"},"nodeType":"YulFunctionCall","src":"15568:55:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15541:6:30"},"nodeType":"YulFunctionCall","src":"15541:83:30"},"nodeType":"YulExpressionStatement","src":"15541:83:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15644:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15655:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15640:3:30"},"nodeType":"YulFunctionCall","src":"15640:18:30"},{"name":"value2","nodeType":"YulIdentifier","src":"15660:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15633:6:30"},"nodeType":"YulFunctionCall","src":"15633:34:30"},"nodeType":"YulExpressionStatement","src":"15633:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15687:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15698:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15683:3:30"},"nodeType":"YulFunctionCall","src":"15683:18:30"},{"name":"value3","nodeType":"YulIdentifier","src":"15703:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15676:6:30"},"nodeType":"YulFunctionCall","src":"15676:34:30"},"nodeType":"YulExpressionStatement","src":"15676:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15730:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15741:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15726:3:30"},"nodeType":"YulFunctionCall","src":"15726:19:30"},{"name":"value4","nodeType":"YulIdentifier","src":"15747:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15719:6:30"},"nodeType":"YulFunctionCall","src":"15719:35:30"},"nodeType":"YulExpressionStatement","src":"15719:35:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15774:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15785:3:30","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15770:3:30"},"nodeType":"YulFunctionCall","src":"15770:19:30"},{"name":"value5","nodeType":"YulIdentifier","src":"15791:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15763:6:30"},"nodeType":"YulFunctionCall","src":"15763:35:30"},"nodeType":"YulExpressionStatement","src":"15763:35:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15818:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15829:3:30","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15814:3:30"},"nodeType":"YulFunctionCall","src":"15814:19:30"},{"name":"value6","nodeType":"YulIdentifier","src":"15835:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15807:6:30"},"nodeType":"YulFunctionCall","src":"15807:35:30"},"nodeType":"YulExpressionStatement","src":"15807:35:30"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_uint256_t_uint256_t_bytes32_t_uint256_t_bytes32__to_t_bytes32_t_address_t_uint256_t_uint256_t_bytes32_t_uint256_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15382:9:30","type":""},{"name":"value6","nodeType":"YulTypedName","src":"15393:6:30","type":""},{"name":"value5","nodeType":"YulTypedName","src":"15401:6:30","type":""},{"name":"value4","nodeType":"YulTypedName","src":"15409:6:30","type":""},{"name":"value3","nodeType":"YulTypedName","src":"15417:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"15425:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15433:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15441:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15452:4:30","type":""}],"src":"15192:656:30"},{"body":{"nodeType":"YulBlock","src":"16056:279:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16073:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16088:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"16096:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16084:3:30"},"nodeType":"YulFunctionCall","src":"16084:55:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16066:6:30"},"nodeType":"YulFunctionCall","src":"16066:74:30"},"nodeType":"YulExpressionStatement","src":"16066:74:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16160:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16171:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16156:3:30"},"nodeType":"YulFunctionCall","src":"16156:18:30"},{"name":"value1","nodeType":"YulIdentifier","src":"16176:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16149:6:30"},"nodeType":"YulFunctionCall","src":"16149:34:30"},"nodeType":"YulExpressionStatement","src":"16149:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16203:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16214:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16199:3:30"},"nodeType":"YulFunctionCall","src":"16199:18:30"},{"name":"value2","nodeType":"YulIdentifier","src":"16219:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16192:6:30"},"nodeType":"YulFunctionCall","src":"16192:34:30"},"nodeType":"YulExpressionStatement","src":"16192:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16246:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16257:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16242:3:30"},"nodeType":"YulFunctionCall","src":"16242:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"16262:3:30","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16235:6:30"},"nodeType":"YulFunctionCall","src":"16235:31:30"},"nodeType":"YulExpressionStatement","src":"16235:31:30"},{"nodeType":"YulAssignment","src":"16275:54:30","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"16301:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16313:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16324:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16309:3:30"},"nodeType":"YulFunctionCall","src":"16309:19:30"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"16283:17:30"},"nodeType":"YulFunctionCall","src":"16283:46:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16275:4:30"}]}]},"name":"abi_encode_tuple_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16001:9:30","type":""},{"name":"value3","nodeType":"YulTypedName","src":"16012:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"16020:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16028:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16036:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16047:4:30","type":""}],"src":"15853:482:30"},{"body":{"nodeType":"YulBlock","src":"16514:246:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16531:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16542:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16524:6:30"},"nodeType":"YulFunctionCall","src":"16524:21:30"},"nodeType":"YulExpressionStatement","src":"16524:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16565:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16576:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16561:3:30"},"nodeType":"YulFunctionCall","src":"16561:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"16581:2:30","type":"","value":"56"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16554:6:30"},"nodeType":"YulFunctionCall","src":"16554:30:30"},"nodeType":"YulExpressionStatement","src":"16554:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16604:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16615:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16600:3:30"},"nodeType":"YulFunctionCall","src":"16600:18:30"},{"hexValue":"555550535570677261646561626c653a206d757374206e6f742062652063616c","kind":"string","nodeType":"YulLiteral","src":"16620:34:30","type":"","value":"UUPSUpgradeable: must not be cal"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16593:6:30"},"nodeType":"YulFunctionCall","src":"16593:62:30"},"nodeType":"YulExpressionStatement","src":"16593:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16675:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16686:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16671:3:30"},"nodeType":"YulFunctionCall","src":"16671:18:30"},{"hexValue":"6c6564207468726f7567682064656c656761746563616c6c","kind":"string","nodeType":"YulLiteral","src":"16691:26:30","type":"","value":"led through delegatecall"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16664:6:30"},"nodeType":"YulFunctionCall","src":"16664:54:30"},"nodeType":"YulExpressionStatement","src":"16664:54:30"},{"nodeType":"YulAssignment","src":"16727:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16739:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16750:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16735:3:30"},"nodeType":"YulFunctionCall","src":"16735:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16727:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16491:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16505:4:30","type":""}],"src":"16340:420:30"},{"body":{"nodeType":"YulBlock","src":"16939:231:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16956:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16967:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16949:6:30"},"nodeType":"YulFunctionCall","src":"16949:21:30"},"nodeType":"YulExpressionStatement","src":"16949:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16990:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"17001:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16986:3:30"},"nodeType":"YulFunctionCall","src":"16986:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"17006:2:30","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16979:6:30"},"nodeType":"YulFunctionCall","src":"16979:30:30"},"nodeType":"YulExpressionStatement","src":"16979:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17029:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"17040:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17025:3:30"},"nodeType":"YulFunctionCall","src":"17025:18:30"},{"hexValue":"4f776e61626c6532537465703a2063616c6c6572206973206e6f742074686520","kind":"string","nodeType":"YulLiteral","src":"17045:34:30","type":"","value":"Ownable2Step: caller is not the "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17018:6:30"},"nodeType":"YulFunctionCall","src":"17018:62:30"},"nodeType":"YulExpressionStatement","src":"17018:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17100:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"17111:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17096:3:30"},"nodeType":"YulFunctionCall","src":"17096:18:30"},{"hexValue":"6e6577206f776e6572","kind":"string","nodeType":"YulLiteral","src":"17116:11:30","type":"","value":"new owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17089:6:30"},"nodeType":"YulFunctionCall","src":"17089:39:30"},"nodeType":"YulExpressionStatement","src":"17089:39:30"},{"nodeType":"YulAssignment","src":"17137:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17149:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"17160:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17145:3:30"},"nodeType":"YulFunctionCall","src":"17145:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17137:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_225559eb8402045bea7ff07c35d0ad8c0547830223ac1c21d44fb948d6896ebc__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16916:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16930:4:30","type":""}],"src":"16765:405:30"},{"body":{"nodeType":"YulBlock","src":"17276:76:30","statements":[{"nodeType":"YulAssignment","src":"17286:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17298:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"17309:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17294:3:30"},"nodeType":"YulFunctionCall","src":"17294:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17286:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17328:9:30"},{"name":"value0","nodeType":"YulIdentifier","src":"17339:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17321:6:30"},"nodeType":"YulFunctionCall","src":"17321:25:30"},"nodeType":"YulExpressionStatement","src":"17321:25:30"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17245:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17256:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17267:4:30","type":""}],"src":"17175:177:30"},{"body":{"nodeType":"YulBlock","src":"17435:199:30","statements":[{"body":{"nodeType":"YulBlock","src":"17481:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17490:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"17493:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"17483:6:30"},"nodeType":"YulFunctionCall","src":"17483:12:30"},"nodeType":"YulExpressionStatement","src":"17483:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"17456:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"17465:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17452:3:30"},"nodeType":"YulFunctionCall","src":"17452:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"17477:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"17448:3:30"},"nodeType":"YulFunctionCall","src":"17448:32:30"},"nodeType":"YulIf","src":"17445:52:30"},{"nodeType":"YulVariableDeclaration","src":"17506:29:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17525:9:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17519:5:30"},"nodeType":"YulFunctionCall","src":"17519:16:30"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"17510:5:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"17588:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17597:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"17600:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"17590:6:30"},"nodeType":"YulFunctionCall","src":"17590:12:30"},"nodeType":"YulExpressionStatement","src":"17590:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17557:5:30"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17578:5:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"17571:6:30"},"nodeType":"YulFunctionCall","src":"17571:13:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"17564:6:30"},"nodeType":"YulFunctionCall","src":"17564:21:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"17554:2:30"},"nodeType":"YulFunctionCall","src":"17554:32:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"17547:6:30"},"nodeType":"YulFunctionCall","src":"17547:40:30"},"nodeType":"YulIf","src":"17544:60:30"},{"nodeType":"YulAssignment","src":"17613:15:30","value":{"name":"value","nodeType":"YulIdentifier","src":"17623:5:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"17613:6:30"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17401:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"17412:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"17424:6:30","type":""}],"src":"17357:277:30"},{"body":{"nodeType":"YulBlock","src":"17813:178:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17830:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"17841:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17823:6:30"},"nodeType":"YulFunctionCall","src":"17823:21:30"},"nodeType":"YulExpressionStatement","src":"17823:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17864:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"17875:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17860:3:30"},"nodeType":"YulFunctionCall","src":"17860:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"17880:2:30","type":"","value":"28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17853:6:30"},"nodeType":"YulFunctionCall","src":"17853:30:30"},"nodeType":"YulExpressionStatement","src":"17853:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17903:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"17914:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17899:3:30"},"nodeType":"YulFunctionCall","src":"17899:18:30"},{"hexValue":"4a61736d696e654d696e7465723a2066726f7a656e20736572696573","kind":"string","nodeType":"YulLiteral","src":"17919:30:30","type":"","value":"JasmineMinter: frozen series"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17892:6:30"},"nodeType":"YulFunctionCall","src":"17892:58:30"},"nodeType":"YulExpressionStatement","src":"17892:58:30"},{"nodeType":"YulAssignment","src":"17959:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17971:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"17982:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17967:3:30"},"nodeType":"YulFunctionCall","src":"17967:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17959:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_6a202c3fb661fc6d1c876b693892fa18c66d222ca913c0aa6eb0dfcf881c0e8a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17790:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17804:4:30","type":""}],"src":"17639:352:30"},{"body":{"nodeType":"YulBlock","src":"18171:185:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18188:9:30"},{"name":"value0","nodeType":"YulIdentifier","src":"18199:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18181:6:30"},"nodeType":"YulFunctionCall","src":"18181:25:30"},"nodeType":"YulExpressionStatement","src":"18181:25:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18226:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18237:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18222:3:30"},"nodeType":"YulFunctionCall","src":"18222:18:30"},{"name":"value1","nodeType":"YulIdentifier","src":"18242:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18215:6:30"},"nodeType":"YulFunctionCall","src":"18215:34:30"},"nodeType":"YulExpressionStatement","src":"18215:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18269:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18280:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18265:3:30"},"nodeType":"YulFunctionCall","src":"18265:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"18285:2:30","type":"","value":"96"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18258:6:30"},"nodeType":"YulFunctionCall","src":"18258:30:30"},"nodeType":"YulExpressionStatement","src":"18258:30:30"},{"nodeType":"YulAssignment","src":"18297:53:30","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"18323:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18335:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18346:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18331:3:30"},"nodeType":"YulFunctionCall","src":"18331:18:30"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"18305:17:30"},"nodeType":"YulFunctionCall","src":"18305:45:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18297:4:30"}]}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18124:9:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"18135:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"18143:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"18151:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18162:4:30","type":""}],"src":"17996:360:30"},{"body":{"nodeType":"YulBlock","src":"18518:211:30","statements":[{"nodeType":"YulAssignment","src":"18528:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18540:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18551:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18536:3:30"},"nodeType":"YulFunctionCall","src":"18536:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18528:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18570:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18585:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"18593:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18581:3:30"},"nodeType":"YulFunctionCall","src":"18581:55:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18563:6:30"},"nodeType":"YulFunctionCall","src":"18563:74:30"},"nodeType":"YulExpressionStatement","src":"18563:74:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18657:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18668:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18653:3:30"},"nodeType":"YulFunctionCall","src":"18653:18:30"},{"name":"value1","nodeType":"YulIdentifier","src":"18673:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18646:6:30"},"nodeType":"YulFunctionCall","src":"18646:34:30"},"nodeType":"YulExpressionStatement","src":"18646:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18700:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18711:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18696:3:30"},"nodeType":"YulFunctionCall","src":"18696:18:30"},{"name":"value2","nodeType":"YulIdentifier","src":"18716:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18689:6:30"},"nodeType":"YulFunctionCall","src":"18689:34:30"},"nodeType":"YulExpressionStatement","src":"18689:34:30"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18471:9:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"18482:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"18490:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"18498:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18509:4:30","type":""}],"src":"18361:368:30"},{"body":{"nodeType":"YulBlock","src":"18908:236:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18925:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18936:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18918:6:30"},"nodeType":"YulFunctionCall","src":"18918:21:30"},"nodeType":"YulExpressionStatement","src":"18918:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18959:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18970:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18955:3:30"},"nodeType":"YulFunctionCall","src":"18955:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"18975:2:30","type":"","value":"46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18948:6:30"},"nodeType":"YulFunctionCall","src":"18948:30:30"},"nodeType":"YulExpressionStatement","src":"18948:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18998:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"19009:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18994:3:30"},"nodeType":"YulFunctionCall","src":"18994:18:30"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561","kind":"string","nodeType":"YulLiteral","src":"19014:34:30","type":"","value":"Initializable: contract is alrea"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18987:6:30"},"nodeType":"YulFunctionCall","src":"18987:62:30"},"nodeType":"YulExpressionStatement","src":"18987:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19069:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"19080:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19065:3:30"},"nodeType":"YulFunctionCall","src":"19065:18:30"},{"hexValue":"647920696e697469616c697a6564","kind":"string","nodeType":"YulLiteral","src":"19085:16:30","type":"","value":"dy initialized"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19058:6:30"},"nodeType":"YulFunctionCall","src":"19058:44:30"},"nodeType":"YulExpressionStatement","src":"19058:44:30"},{"nodeType":"YulAssignment","src":"19111:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19123:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"19134:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19119:3:30"},"nodeType":"YulFunctionCall","src":"19119:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19111:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18885:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18899:4:30","type":""}],"src":"18734:410:30"},{"body":{"nodeType":"YulBlock","src":"19205:65:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19222:1:30","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"19225:3:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19215:6:30"},"nodeType":"YulFunctionCall","src":"19215:14:30"},"nodeType":"YulExpressionStatement","src":"19215:14:30"},{"nodeType":"YulAssignment","src":"19238:26:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19256:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19259:4:30","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"19246:9:30"},"nodeType":"YulFunctionCall","src":"19246:18:30"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"19238:4:30"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"19188:3:30","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"19196:4:30","type":""}],"src":"19149:121:30"},{"body":{"nodeType":"YulBlock","src":"19356:464:30","statements":[{"body":{"nodeType":"YulBlock","src":"19389:425:30","statements":[{"nodeType":"YulVariableDeclaration","src":"19403:11:30","value":{"kind":"number","nodeType":"YulLiteral","src":"19413:1:30","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"19407:2:30","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"19434:2:30"},{"name":"array","nodeType":"YulIdentifier","src":"19438:5:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19427:6:30"},"nodeType":"YulFunctionCall","src":"19427:17:30"},"nodeType":"YulExpressionStatement","src":"19427:17:30"},{"nodeType":"YulVariableDeclaration","src":"19457:31:30","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"19479:2:30"},{"kind":"number","nodeType":"YulLiteral","src":"19483:4:30","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"19469:9:30"},"nodeType":"YulFunctionCall","src":"19469:19:30"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"19461:4:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"19501:57:30","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"19524:4:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19534:1:30","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"19541:10:30"},{"kind":"number","nodeType":"YulLiteral","src":"19553:2:30","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19537:3:30"},"nodeType":"YulFunctionCall","src":"19537:19:30"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"19530:3:30"},"nodeType":"YulFunctionCall","src":"19530:27:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19520:3:30"},"nodeType":"YulFunctionCall","src":"19520:38:30"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"19505:11:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"19595:23:30","statements":[{"nodeType":"YulAssignment","src":"19597:19:30","value":{"name":"data","nodeType":"YulIdentifier","src":"19612:4:30"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"19597:11:30"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"19577:10:30"},{"kind":"number","nodeType":"YulLiteral","src":"19589:4:30","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"19574:2:30"},"nodeType":"YulFunctionCall","src":"19574:20:30"},"nodeType":"YulIf","src":"19571:47:30"},{"nodeType":"YulVariableDeclaration","src":"19631:41:30","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"19645:4:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19655:1:30","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"19662:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"19667:2:30","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19658:3:30"},"nodeType":"YulFunctionCall","src":"19658:12:30"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"19651:3:30"},"nodeType":"YulFunctionCall","src":"19651:20:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19641:3:30"},"nodeType":"YulFunctionCall","src":"19641:31:30"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"19635:2:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"19685:24:30","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"19698:11:30"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"19689:5:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"19783:21:30","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"19792:5:30"},{"name":"_1","nodeType":"YulIdentifier","src":"19799:2:30"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"19785:6:30"},"nodeType":"YulFunctionCall","src":"19785:17:30"},"nodeType":"YulExpressionStatement","src":"19785:17:30"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"19733:5:30"},{"name":"_2","nodeType":"YulIdentifier","src":"19740:2:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"19730:2:30"},"nodeType":"YulFunctionCall","src":"19730:13:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"19744:26:30","statements":[{"nodeType":"YulAssignment","src":"19746:22:30","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"19759:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"19766:1:30","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19755:3:30"},"nodeType":"YulFunctionCall","src":"19755:13:30"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"19746:5:30"}]}]},"pre":{"nodeType":"YulBlock","src":"19726:3:30","statements":[]},"src":"19722:82:30"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"19372:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"19377:2:30","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"19369:2:30"},"nodeType":"YulFunctionCall","src":"19369:11:30"},"nodeType":"YulIf","src":"19366:448:30"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"19328:5:30","type":""},{"name":"len","nodeType":"YulTypedName","src":"19335:3:30","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"19340:10:30","type":""}],"src":"19275:545:30"},{"body":{"nodeType":"YulBlock","src":"19910:81:30","statements":[{"nodeType":"YulAssignment","src":"19920:65:30","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"19935:4:30"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19953:1:30","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"19956:3:30"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"19949:3:30"},"nodeType":"YulFunctionCall","src":"19949:11:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19966:1:30","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"19962:3:30"},"nodeType":"YulFunctionCall","src":"19962:6:30"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"19945:3:30"},"nodeType":"YulFunctionCall","src":"19945:24:30"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"19941:3:30"},"nodeType":"YulFunctionCall","src":"19941:29:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"19931:3:30"},"nodeType":"YulFunctionCall","src":"19931:40:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19977:1:30","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"19980:3:30"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"19973:3:30"},"nodeType":"YulFunctionCall","src":"19973:11:30"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"19928:2:30"},"nodeType":"YulFunctionCall","src":"19928:57:30"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"19920:4:30"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"19887:4:30","type":""},{"name":"len","nodeType":"YulTypedName","src":"19893:3:30","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"19901:4:30","type":""}],"src":"19825:166:30"},{"body":{"nodeType":"YulBlock","src":"20092:1256:30","statements":[{"nodeType":"YulVariableDeclaration","src":"20102:24:30","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"20122:3:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"20116:5:30"},"nodeType":"YulFunctionCall","src":"20116:10:30"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"20106:6:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"20169:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"20171:16:30"},"nodeType":"YulFunctionCall","src":"20171:18:30"},"nodeType":"YulExpressionStatement","src":"20171:18:30"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"20141:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"20149:18:30","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"20138:2:30"},"nodeType":"YulFunctionCall","src":"20138:30:30"},"nodeType":"YulIf","src":"20135:56:30"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"20244:4:30"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"20282:4:30"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"20276:5:30"},"nodeType":"YulFunctionCall","src":"20276:11:30"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"20250:25:30"},"nodeType":"YulFunctionCall","src":"20250:38:30"},{"name":"newLen","nodeType":"YulIdentifier","src":"20290:6:30"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"20200:43:30"},"nodeType":"YulFunctionCall","src":"20200:97:30"},"nodeType":"YulExpressionStatement","src":"20200:97:30"},{"nodeType":"YulVariableDeclaration","src":"20306:18:30","value":{"kind":"number","nodeType":"YulLiteral","src":"20323:1:30","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"20310:9:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"20333:23:30","value":{"kind":"number","nodeType":"YulLiteral","src":"20352:4:30","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"20337:11:30","type":""}]},{"nodeType":"YulAssignment","src":"20365:24:30","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"20378:11:30"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"20365:9:30"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"20435:656:30","statements":[{"nodeType":"YulVariableDeclaration","src":"20449:35:30","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"20468:6:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20480:2:30","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"20476:3:30"},"nodeType":"YulFunctionCall","src":"20476:7:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"20464:3:30"},"nodeType":"YulFunctionCall","src":"20464:20:30"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"20453:7:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"20497:49:30","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"20541:4:30"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"20511:29:30"},"nodeType":"YulFunctionCall","src":"20511:35:30"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"20501:6:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"20559:10:30","value":{"kind":"number","nodeType":"YulLiteral","src":"20568:1:30","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"20563:1:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"20646:172:30","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"20671:6:30"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"20689:3:30"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"20694:9:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20685:3:30"},"nodeType":"YulFunctionCall","src":"20685:19:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"20679:5:30"},"nodeType":"YulFunctionCall","src":"20679:26:30"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"20664:6:30"},"nodeType":"YulFunctionCall","src":"20664:42:30"},"nodeType":"YulExpressionStatement","src":"20664:42:30"},{"nodeType":"YulAssignment","src":"20723:24:30","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"20737:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"20745:1:30","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20733:3:30"},"nodeType":"YulFunctionCall","src":"20733:14:30"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"20723:6:30"}]},{"nodeType":"YulAssignment","src":"20764:40:30","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"20781:9:30"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"20792:11:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20777:3:30"},"nodeType":"YulFunctionCall","src":"20777:27:30"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"20764:9:30"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"20593:1:30"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"20596:7:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"20590:2:30"},"nodeType":"YulFunctionCall","src":"20590:14:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"20605:28:30","statements":[{"nodeType":"YulAssignment","src":"20607:24:30","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"20616:1:30"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"20619:11:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20612:3:30"},"nodeType":"YulFunctionCall","src":"20612:19:30"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"20607:1:30"}]}]},"pre":{"nodeType":"YulBlock","src":"20586:3:30","statements":[]},"src":"20582:236:30"},{"body":{"nodeType":"YulBlock","src":"20866:166:30","statements":[{"nodeType":"YulVariableDeclaration","src":"20884:43:30","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"20911:3:30"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"20916:9:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20907:3:30"},"nodeType":"YulFunctionCall","src":"20907:19:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"20901:5:30"},"nodeType":"YulFunctionCall","src":"20901:26:30"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"20888:9:30","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"20951:6:30"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"20963:9:30"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20990:1:30","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"20993:6:30"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"20986:3:30"},"nodeType":"YulFunctionCall","src":"20986:14:30"},{"kind":"number","nodeType":"YulLiteral","src":"21002:3:30","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"20982:3:30"},"nodeType":"YulFunctionCall","src":"20982:24:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21012:1:30","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"21008:3:30"},"nodeType":"YulFunctionCall","src":"21008:6:30"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"20978:3:30"},"nodeType":"YulFunctionCall","src":"20978:37:30"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"20974:3:30"},"nodeType":"YulFunctionCall","src":"20974:42:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"20959:3:30"},"nodeType":"YulFunctionCall","src":"20959:58:30"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"20944:6:30"},"nodeType":"YulFunctionCall","src":"20944:74:30"},"nodeType":"YulExpressionStatement","src":"20944:74:30"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"20837:7:30"},{"name":"newLen","nodeType":"YulIdentifier","src":"20846:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"20834:2:30"},"nodeType":"YulFunctionCall","src":"20834:19:30"},"nodeType":"YulIf","src":"20831:201:30"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"21052:4:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21066:1:30","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"21069:6:30"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"21062:3:30"},"nodeType":"YulFunctionCall","src":"21062:14:30"},{"kind":"number","nodeType":"YulLiteral","src":"21078:1:30","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21058:3:30"},"nodeType":"YulFunctionCall","src":"21058:22:30"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"21045:6:30"},"nodeType":"YulFunctionCall","src":"21045:36:30"},"nodeType":"YulExpressionStatement","src":"21045:36:30"}]},"nodeType":"YulCase","src":"20428:663:30","value":{"kind":"number","nodeType":"YulLiteral","src":"20433:1:30","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"21108:234:30","statements":[{"nodeType":"YulVariableDeclaration","src":"21122:14:30","value":{"kind":"number","nodeType":"YulLiteral","src":"21135:1:30","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"21126:5:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"21171:67:30","statements":[{"nodeType":"YulAssignment","src":"21189:35:30","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"21208:3:30"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"21213:9:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21204:3:30"},"nodeType":"YulFunctionCall","src":"21204:19:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"21198:5:30"},"nodeType":"YulFunctionCall","src":"21198:26:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"21189:5:30"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"21152:6:30"},"nodeType":"YulIf","src":"21149:89:30"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"21258:4:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21317:5:30"},{"name":"newLen","nodeType":"YulIdentifier","src":"21324:6:30"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"21264:52:30"},"nodeType":"YulFunctionCall","src":"21264:67:30"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"21251:6:30"},"nodeType":"YulFunctionCall","src":"21251:81:30"},"nodeType":"YulExpressionStatement","src":"21251:81:30"}]},"nodeType":"YulCase","src":"21100:242:30","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"20408:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"20416:2:30","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"20405:2:30"},"nodeType":"YulFunctionCall","src":"20405:14:30"},"nodeType":"YulSwitch","src":"20398:944:30"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"20077:4:30","type":""},{"name":"src","nodeType":"YulTypedName","src":"20083:3:30","type":""}],"src":"19996:1352:30"},{"body":{"nodeType":"YulBlock","src":"21460:87:30","statements":[{"nodeType":"YulAssignment","src":"21470:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21482:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"21493:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21478:3:30"},"nodeType":"YulFunctionCall","src":"21478:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21470:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21512:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"21527:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"21535:4:30","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"21523:3:30"},"nodeType":"YulFunctionCall","src":"21523:17:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21505:6:30"},"nodeType":"YulFunctionCall","src":"21505:36:30"},"nodeType":"YulExpressionStatement","src":"21505:36:30"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21429:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"21440:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21451:4:30","type":""}],"src":"21353:194:30"},{"body":{"nodeType":"YulBlock","src":"21827:351:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21844:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"21855:2:30","type":"","value":"96"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21837:6:30"},"nodeType":"YulFunctionCall","src":"21837:21:30"},"nodeType":"YulExpressionStatement","src":"21837:21:30"},{"nodeType":"YulVariableDeclaration","src":"21867:70:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"21910:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21922:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"21933:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21918:3:30"},"nodeType":"YulFunctionCall","src":"21918:18:30"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"21881:28:30"},"nodeType":"YulFunctionCall","src":"21881:56:30"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"21871:6:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21957:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"21968:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21953:3:30"},"nodeType":"YulFunctionCall","src":"21953:18:30"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"21977:6:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"21985:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21973:3:30"},"nodeType":"YulFunctionCall","src":"21973:22:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21946:6:30"},"nodeType":"YulFunctionCall","src":"21946:50:30"},"nodeType":"YulExpressionStatement","src":"21946:50:30"},{"nodeType":"YulVariableDeclaration","src":"22005:58:30","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"22048:6:30"},{"name":"tail_1","nodeType":"YulIdentifier","src":"22056:6:30"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"22019:28:30"},"nodeType":"YulFunctionCall","src":"22019:44:30"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"22009:6:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22083:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"22094:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22079:3:30"},"nodeType":"YulFunctionCall","src":"22079:18:30"},{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"22103:6:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"22111:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22099:3:30"},"nodeType":"YulFunctionCall","src":"22099:22:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22072:6:30"},"nodeType":"YulFunctionCall","src":"22072:50:30"},"nodeType":"YulExpressionStatement","src":"22072:50:30"},{"nodeType":"YulAssignment","src":"22131:41:30","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"22157:6:30"},{"name":"tail_2","nodeType":"YulIdentifier","src":"22165:6:30"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"22139:17:30"},"nodeType":"YulFunctionCall","src":"22139:33:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22131:4:30"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21780:9:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"21791:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"21799:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"21807:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21818:4:30","type":""}],"src":"21552:626:30"},{"body":{"nodeType":"YulBlock","src":"22440:328:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22457:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"22472:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"22480:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"22468:3:30"},"nodeType":"YulFunctionCall","src":"22468:55:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22450:6:30"},"nodeType":"YulFunctionCall","src":"22450:74:30"},"nodeType":"YulExpressionStatement","src":"22450:74:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22544:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"22555:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22540:3:30"},"nodeType":"YulFunctionCall","src":"22540:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"22560:2:30","type":"","value":"96"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22533:6:30"},"nodeType":"YulFunctionCall","src":"22533:30:30"},"nodeType":"YulExpressionStatement","src":"22533:30:30"},{"nodeType":"YulVariableDeclaration","src":"22572:70:30","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"22615:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22627:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"22638:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22623:3:30"},"nodeType":"YulFunctionCall","src":"22623:18:30"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"22586:28:30"},"nodeType":"YulFunctionCall","src":"22586:56:30"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"22576:6:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22662:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"22673:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22658:3:30"},"nodeType":"YulFunctionCall","src":"22658:18:30"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"22682:6:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"22690:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22678:3:30"},"nodeType":"YulFunctionCall","src":"22678:22:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22651:6:30"},"nodeType":"YulFunctionCall","src":"22651:50:30"},"nodeType":"YulExpressionStatement","src":"22651:50:30"},{"nodeType":"YulAssignment","src":"22710:52:30","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"22747:6:30"},{"name":"tail_1","nodeType":"YulIdentifier","src":"22755:6:30"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"22718:28:30"},"nodeType":"YulFunctionCall","src":"22718:44:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22710:4:30"}]}]},"name":"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22393:9:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"22404:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"22412:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"22420:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22431:4:30","type":""}],"src":"22183:585:30"},{"body":{"nodeType":"YulBlock","src":"22902:119:30","statements":[{"nodeType":"YulAssignment","src":"22912:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22924:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"22935:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22920:3:30"},"nodeType":"YulFunctionCall","src":"22920:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22912:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22954:9:30"},{"name":"value0","nodeType":"YulIdentifier","src":"22965:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22947:6:30"},"nodeType":"YulFunctionCall","src":"22947:25:30"},"nodeType":"YulExpressionStatement","src":"22947:25:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22992:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"23003:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22988:3:30"},"nodeType":"YulFunctionCall","src":"22988:18:30"},{"name":"value1","nodeType":"YulIdentifier","src":"23008:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22981:6:30"},"nodeType":"YulFunctionCall","src":"22981:34:30"},"nodeType":"YulExpressionStatement","src":"22981:34:30"}]},"name":"abi_encode_tuple_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22863:9:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"22874:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"22882:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22893:4:30","type":""}],"src":"22773:248:30"},{"body":{"nodeType":"YulBlock","src":"23107:103:30","statements":[{"body":{"nodeType":"YulBlock","src":"23153:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23162:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"23165:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"23155:6:30"},"nodeType":"YulFunctionCall","src":"23155:12:30"},"nodeType":"YulExpressionStatement","src":"23155:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"23128:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"23137:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23124:3:30"},"nodeType":"YulFunctionCall","src":"23124:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"23149:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"23120:3:30"},"nodeType":"YulFunctionCall","src":"23120:32:30"},"nodeType":"YulIf","src":"23117:52:30"},{"nodeType":"YulAssignment","src":"23178:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23194:9:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23188:5:30"},"nodeType":"YulFunctionCall","src":"23188:16:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"23178:6:30"}]}]},"name":"abi_decode_tuple_t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23073:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"23084:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"23096:6:30","type":""}],"src":"23026:184:30"},{"body":{"nodeType":"YulBlock","src":"23389:236:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23406:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"23417:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23399:6:30"},"nodeType":"YulFunctionCall","src":"23399:21:30"},"nodeType":"YulExpressionStatement","src":"23399:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23440:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"23451:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23436:3:30"},"nodeType":"YulFunctionCall","src":"23436:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"23456:2:30","type":"","value":"46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23429:6:30"},"nodeType":"YulFunctionCall","src":"23429:30:30"},"nodeType":"YulExpressionStatement","src":"23429:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23479:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"23490:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23475:3:30"},"nodeType":"YulFunctionCall","src":"23475:18:30"},{"hexValue":"45524331393637557067726164653a206e657720696d706c656d656e74617469","kind":"string","nodeType":"YulLiteral","src":"23495:34:30","type":"","value":"ERC1967Upgrade: new implementati"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23468:6:30"},"nodeType":"YulFunctionCall","src":"23468:62:30"},"nodeType":"YulExpressionStatement","src":"23468:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23550:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"23561:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23546:3:30"},"nodeType":"YulFunctionCall","src":"23546:18:30"},{"hexValue":"6f6e206973206e6f742055555053","kind":"string","nodeType":"YulLiteral","src":"23566:16:30","type":"","value":"on is not UUPS"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23539:6:30"},"nodeType":"YulFunctionCall","src":"23539:44:30"},"nodeType":"YulExpressionStatement","src":"23539:44:30"},{"nodeType":"YulAssignment","src":"23592:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23604:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"23615:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23600:3:30"},"nodeType":"YulFunctionCall","src":"23600:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23592:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23366:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23380:4:30","type":""}],"src":"23215:410:30"},{"body":{"nodeType":"YulBlock","src":"23804:231:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23821:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"23832:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23814:6:30"},"nodeType":"YulFunctionCall","src":"23814:21:30"},"nodeType":"YulExpressionStatement","src":"23814:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23855:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"23866:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23851:3:30"},"nodeType":"YulFunctionCall","src":"23851:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"23871:2:30","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23844:6:30"},"nodeType":"YulFunctionCall","src":"23844:30:30"},"nodeType":"YulExpressionStatement","src":"23844:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23894:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"23905:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23890:3:30"},"nodeType":"YulFunctionCall","src":"23890:18:30"},{"hexValue":"45524331393637557067726164653a20756e737570706f727465642070726f78","kind":"string","nodeType":"YulLiteral","src":"23910:34:30","type":"","value":"ERC1967Upgrade: unsupported prox"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23883:6:30"},"nodeType":"YulFunctionCall","src":"23883:62:30"},"nodeType":"YulExpressionStatement","src":"23883:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23965:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"23976:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23961:3:30"},"nodeType":"YulFunctionCall","src":"23961:18:30"},{"hexValue":"6961626c6555554944","kind":"string","nodeType":"YulLiteral","src":"23981:11:30","type":"","value":"iableUUID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23954:6:30"},"nodeType":"YulFunctionCall","src":"23954:39:30"},"nodeType":"YulExpressionStatement","src":"23954:39:30"},{"nodeType":"YulAssignment","src":"24002:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24014:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"24025:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24010:3:30"},"nodeType":"YulFunctionCall","src":"24010:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24002:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23781:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23795:4:30","type":""}],"src":"23630:405:30"},{"body":{"nodeType":"YulBlock","src":"24214:182:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24231:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"24242:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24224:6:30"},"nodeType":"YulFunctionCall","src":"24224:21:30"},"nodeType":"YulExpressionStatement","src":"24224:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24265:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"24276:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24261:3:30"},"nodeType":"YulFunctionCall","src":"24261:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"24281:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24254:6:30"},"nodeType":"YulFunctionCall","src":"24254:30:30"},"nodeType":"YulExpressionStatement","src":"24254:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24304:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"24315:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24300:3:30"},"nodeType":"YulFunctionCall","src":"24300:18:30"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"24320:34:30","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24293:6:30"},"nodeType":"YulFunctionCall","src":"24293:62:30"},"nodeType":"YulExpressionStatement","src":"24293:62:30"},{"nodeType":"YulAssignment","src":"24364:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24376:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"24387:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24372:3:30"},"nodeType":"YulFunctionCall","src":"24372:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24364:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24191:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24205:4:30","type":""}],"src":"24040:356:30"},{"body":{"nodeType":"YulBlock","src":"24575:233:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24592:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"24603:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24585:6:30"},"nodeType":"YulFunctionCall","src":"24585:21:30"},"nodeType":"YulExpressionStatement","src":"24585:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24626:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"24637:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24622:3:30"},"nodeType":"YulFunctionCall","src":"24622:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"24642:2:30","type":"","value":"43"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24615:6:30"},"nodeType":"YulFunctionCall","src":"24615:30:30"},"nodeType":"YulExpressionStatement","src":"24615:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24665:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"24676:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24661:3:30"},"nodeType":"YulFunctionCall","src":"24661:18:30"},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069","kind":"string","nodeType":"YulLiteral","src":"24681:34:30","type":"","value":"Initializable: contract is not i"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24654:6:30"},"nodeType":"YulFunctionCall","src":"24654:62:30"},"nodeType":"YulExpressionStatement","src":"24654:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24736:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"24747:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24732:3:30"},"nodeType":"YulFunctionCall","src":"24732:18:30"},{"hexValue":"6e697469616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"24752:13:30","type":"","value":"nitializing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24725:6:30"},"nodeType":"YulFunctionCall","src":"24725:41:30"},"nodeType":"YulExpressionStatement","src":"24725:41:30"},{"nodeType":"YulAssignment","src":"24775:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24787:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"24798:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24783:3:30"},"nodeType":"YulFunctionCall","src":"24783:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24775:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24552:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24566:4:30","type":""}],"src":"24401:407:30"},{"body":{"nodeType":"YulBlock","src":"25061:144:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25078:3:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25087:3:30","type":"","value":"240"},{"kind":"number","nodeType":"YulLiteral","src":"25092:4:30","type":"","value":"6401"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"25083:3:30"},"nodeType":"YulFunctionCall","src":"25083:14:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25071:6:30"},"nodeType":"YulFunctionCall","src":"25071:27:30"},"nodeType":"YulExpressionStatement","src":"25071:27:30"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25118:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"25123:1:30","type":"","value":"2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25114:3:30"},"nodeType":"YulFunctionCall","src":"25114:11:30"},{"name":"value0","nodeType":"YulIdentifier","src":"25127:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25107:6:30"},"nodeType":"YulFunctionCall","src":"25107:27:30"},"nodeType":"YulExpressionStatement","src":"25107:27:30"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25154:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"25159:2:30","type":"","value":"34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25150:3:30"},"nodeType":"YulFunctionCall","src":"25150:12:30"},{"name":"value1","nodeType":"YulIdentifier","src":"25164:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25143:6:30"},"nodeType":"YulFunctionCall","src":"25143:28:30"},"nodeType":"YulExpressionStatement","src":"25143:28:30"},{"nodeType":"YulAssignment","src":"25180:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25191:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"25196:2:30","type":"","value":"66"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25187:3:30"},"nodeType":"YulFunctionCall","src":"25187:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"25180:3:30"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"25029:3:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"25034:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"25042:6:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"25053:3:30","type":""}],"src":"24813:392:30"},{"body":{"nodeType":"YulBlock","src":"25242:95:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25259:1:30","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25266:3:30","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"25271:10:30","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"25262:3:30"},"nodeType":"YulFunctionCall","src":"25262:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25252:6:30"},"nodeType":"YulFunctionCall","src":"25252:31:30"},"nodeType":"YulExpressionStatement","src":"25252:31:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25299:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"25302:4:30","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25292:6:30"},"nodeType":"YulFunctionCall","src":"25292:15:30"},"nodeType":"YulExpressionStatement","src":"25292:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25323:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25326:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"25316:6:30"},"nodeType":"YulFunctionCall","src":"25316:15:30"},"nodeType":"YulExpressionStatement","src":"25316:15:30"}]},"name":"panic_error_0x21","nodeType":"YulFunctionDefinition","src":"25210:127:30"},{"body":{"nodeType":"YulBlock","src":"25516:174:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25533:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"25544:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25526:6:30"},"nodeType":"YulFunctionCall","src":"25526:21:30"},"nodeType":"YulExpressionStatement","src":"25526:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25567:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"25578:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25563:3:30"},"nodeType":"YulFunctionCall","src":"25563:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"25583:2:30","type":"","value":"24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25556:6:30"},"nodeType":"YulFunctionCall","src":"25556:30:30"},"nodeType":"YulExpressionStatement","src":"25556:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25606:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"25617:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25602:3:30"},"nodeType":"YulFunctionCall","src":"25602:18:30"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","kind":"string","nodeType":"YulLiteral","src":"25622:26:30","type":"","value":"ECDSA: invalid signature"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25595:6:30"},"nodeType":"YulFunctionCall","src":"25595:54:30"},"nodeType":"YulExpressionStatement","src":"25595:54:30"},{"nodeType":"YulAssignment","src":"25658:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25670:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"25681:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25666:3:30"},"nodeType":"YulFunctionCall","src":"25666:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25658:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25493:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25507:4:30","type":""}],"src":"25342:348:30"},{"body":{"nodeType":"YulBlock","src":"25869:181:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25886:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"25897:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25879:6:30"},"nodeType":"YulFunctionCall","src":"25879:21:30"},"nodeType":"YulExpressionStatement","src":"25879:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25920:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"25931:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25916:3:30"},"nodeType":"YulFunctionCall","src":"25916:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"25936:2:30","type":"","value":"31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25909:6:30"},"nodeType":"YulFunctionCall","src":"25909:30:30"},"nodeType":"YulExpressionStatement","src":"25909:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25959:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"25970:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25955:3:30"},"nodeType":"YulFunctionCall","src":"25955:18:30"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","kind":"string","nodeType":"YulLiteral","src":"25975:33:30","type":"","value":"ECDSA: invalid signature length"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25948:6:30"},"nodeType":"YulFunctionCall","src":"25948:61:30"},"nodeType":"YulExpressionStatement","src":"25948:61:30"},{"nodeType":"YulAssignment","src":"26018:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26030:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"26041:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26026:3:30"},"nodeType":"YulFunctionCall","src":"26026:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26018:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25846:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25860:4:30","type":""}],"src":"25695:355:30"},{"body":{"nodeType":"YulBlock","src":"26229:224:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26246:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"26257:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26239:6:30"},"nodeType":"YulFunctionCall","src":"26239:21:30"},"nodeType":"YulExpressionStatement","src":"26239:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26280:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"26291:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26276:3:30"},"nodeType":"YulFunctionCall","src":"26276:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"26296:2:30","type":"","value":"34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26269:6:30"},"nodeType":"YulFunctionCall","src":"26269:30:30"},"nodeType":"YulExpressionStatement","src":"26269:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26319:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"26330:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26315:3:30"},"nodeType":"YulFunctionCall","src":"26315:18:30"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c","kind":"string","nodeType":"YulLiteral","src":"26335:34:30","type":"","value":"ECDSA: invalid signature 's' val"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26308:6:30"},"nodeType":"YulFunctionCall","src":"26308:62:30"},"nodeType":"YulExpressionStatement","src":"26308:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26390:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"26401:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26386:3:30"},"nodeType":"YulFunctionCall","src":"26386:18:30"},{"hexValue":"7565","kind":"string","nodeType":"YulLiteral","src":"26406:4:30","type":"","value":"ue"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26379:6:30"},"nodeType":"YulFunctionCall","src":"26379:32:30"},"nodeType":"YulExpressionStatement","src":"26379:32:30"},{"nodeType":"YulAssignment","src":"26420:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26432:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"26443:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26428:3:30"},"nodeType":"YulFunctionCall","src":"26428:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26420:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26206:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26220:4:30","type":""}],"src":"26055:398:30"},{"body":{"nodeType":"YulBlock","src":"26671:299:30","statements":[{"nodeType":"YulAssignment","src":"26681:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26693:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"26704:3:30","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26689:3:30"},"nodeType":"YulFunctionCall","src":"26689:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26681:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26724:9:30"},{"name":"value0","nodeType":"YulIdentifier","src":"26735:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26717:6:30"},"nodeType":"YulFunctionCall","src":"26717:25:30"},"nodeType":"YulExpressionStatement","src":"26717:25:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26762:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"26773:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26758:3:30"},"nodeType":"YulFunctionCall","src":"26758:18:30"},{"name":"value1","nodeType":"YulIdentifier","src":"26778:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26751:6:30"},"nodeType":"YulFunctionCall","src":"26751:34:30"},"nodeType":"YulExpressionStatement","src":"26751:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26805:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"26816:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26801:3:30"},"nodeType":"YulFunctionCall","src":"26801:18:30"},{"name":"value2","nodeType":"YulIdentifier","src":"26821:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26794:6:30"},"nodeType":"YulFunctionCall","src":"26794:34:30"},"nodeType":"YulExpressionStatement","src":"26794:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26848:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"26859:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26844:3:30"},"nodeType":"YulFunctionCall","src":"26844:18:30"},{"name":"value3","nodeType":"YulIdentifier","src":"26864:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26837:6:30"},"nodeType":"YulFunctionCall","src":"26837:34:30"},"nodeType":"YulExpressionStatement","src":"26837:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26891:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"26902:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26887:3:30"},"nodeType":"YulFunctionCall","src":"26887:19:30"},{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"26912:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"26920:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"26908:3:30"},"nodeType":"YulFunctionCall","src":"26908:55:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26880:6:30"},"nodeType":"YulFunctionCall","src":"26880:84:30"},"nodeType":"YulExpressionStatement","src":"26880:84:30"}]},"name":"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26608:9:30","type":""},{"name":"value4","nodeType":"YulTypedName","src":"26619:6:30","type":""},{"name":"value3","nodeType":"YulTypedName","src":"26627:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"26635:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"26643:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"26651:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26662:4:30","type":""}],"src":"26458:512:30"},{"body":{"nodeType":"YulBlock","src":"27149:235:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27166:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"27177:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27159:6:30"},"nodeType":"YulFunctionCall","src":"27159:21:30"},"nodeType":"YulExpressionStatement","src":"27159:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27200:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"27211:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27196:3:30"},"nodeType":"YulFunctionCall","src":"27196:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"27216:2:30","type":"","value":"45"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27189:6:30"},"nodeType":"YulFunctionCall","src":"27189:30:30"},"nodeType":"YulExpressionStatement","src":"27189:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27239:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"27250:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27235:3:30"},"nodeType":"YulFunctionCall","src":"27235:18:30"},{"hexValue":"455243313936373a206e657720696d706c656d656e746174696f6e206973206e","kind":"string","nodeType":"YulLiteral","src":"27255:34:30","type":"","value":"ERC1967: new implementation is n"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27228:6:30"},"nodeType":"YulFunctionCall","src":"27228:62:30"},"nodeType":"YulExpressionStatement","src":"27228:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27310:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"27321:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27306:3:30"},"nodeType":"YulFunctionCall","src":"27306:18:30"},{"hexValue":"6f74206120636f6e7472616374","kind":"string","nodeType":"YulLiteral","src":"27326:15:30","type":"","value":"ot a contract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27299:6:30"},"nodeType":"YulFunctionCall","src":"27299:43:30"},"nodeType":"YulExpressionStatement","src":"27299:43:30"},{"nodeType":"YulAssignment","src":"27351:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27363:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"27374:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27359:3:30"},"nodeType":"YulFunctionCall","src":"27359:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27351:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27126:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27140:4:30","type":""}],"src":"26975:409:30"},{"body":{"nodeType":"YulBlock","src":"27570:217:30","statements":[{"nodeType":"YulAssignment","src":"27580:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27592:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"27603:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27588:3:30"},"nodeType":"YulFunctionCall","src":"27588:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27580:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27623:9:30"},{"name":"value0","nodeType":"YulIdentifier","src":"27634:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27616:6:30"},"nodeType":"YulFunctionCall","src":"27616:25:30"},"nodeType":"YulExpressionStatement","src":"27616:25:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27661:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"27672:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27657:3:30"},"nodeType":"YulFunctionCall","src":"27657:18:30"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"27681:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"27689:4:30","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"27677:3:30"},"nodeType":"YulFunctionCall","src":"27677:17:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27650:6:30"},"nodeType":"YulFunctionCall","src":"27650:45:30"},"nodeType":"YulExpressionStatement","src":"27650:45:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27715:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"27726:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27711:3:30"},"nodeType":"YulFunctionCall","src":"27711:18:30"},{"name":"value2","nodeType":"YulIdentifier","src":"27731:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27704:6:30"},"nodeType":"YulFunctionCall","src":"27704:34:30"},"nodeType":"YulExpressionStatement","src":"27704:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27758:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"27769:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27754:3:30"},"nodeType":"YulFunctionCall","src":"27754:18:30"},{"name":"value3","nodeType":"YulIdentifier","src":"27774:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27747:6:30"},"nodeType":"YulFunctionCall","src":"27747:34:30"},"nodeType":"YulExpressionStatement","src":"27747:34:30"}]},"name":"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27515:9:30","type":""},{"name":"value3","nodeType":"YulTypedName","src":"27526:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"27534:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"27542:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"27550:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27561:4:30","type":""}],"src":"27389:398:30"},{"body":{"nodeType":"YulBlock","src":"27966:228:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27983:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"27994:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27976:6:30"},"nodeType":"YulFunctionCall","src":"27976:21:30"},"nodeType":"YulExpressionStatement","src":"27976:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28017:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"28028:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28013:3:30"},"nodeType":"YulFunctionCall","src":"28013:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"28033:2:30","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28006:6:30"},"nodeType":"YulFunctionCall","src":"28006:30:30"},"nodeType":"YulExpressionStatement","src":"28006:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28056:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"28067:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28052:3:30"},"nodeType":"YulFunctionCall","src":"28052:18:30"},{"hexValue":"416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f","kind":"string","nodeType":"YulLiteral","src":"28072:34:30","type":"","value":"Address: delegate call to non-co"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28045:6:30"},"nodeType":"YulFunctionCall","src":"28045:62:30"},"nodeType":"YulExpressionStatement","src":"28045:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28127:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"28138:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28123:3:30"},"nodeType":"YulFunctionCall","src":"28123:18:30"},{"hexValue":"6e7472616374","kind":"string","nodeType":"YulLiteral","src":"28143:8:30","type":"","value":"ntract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28116:6:30"},"nodeType":"YulFunctionCall","src":"28116:36:30"},"nodeType":"YulExpressionStatement","src":"28116:36:30"},{"nodeType":"YulAssignment","src":"28161:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28173:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"28184:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28169:3:30"},"nodeType":"YulFunctionCall","src":"28169:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28161:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27943:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27957:4:30","type":""}],"src":"27792:402:30"},{"body":{"nodeType":"YulBlock","src":"28336:150:30","statements":[{"nodeType":"YulVariableDeclaration","src":"28346:27:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"28366:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"28360:5:30"},"nodeType":"YulFunctionCall","src":"28360:13:30"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"28350:6:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"28421:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"28429:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28417:3:30"},"nodeType":"YulFunctionCall","src":"28417:17:30"},{"name":"pos","nodeType":"YulIdentifier","src":"28436:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"28441:6:30"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"28382:34:30"},"nodeType":"YulFunctionCall","src":"28382:66:30"},"nodeType":"YulExpressionStatement","src":"28382:66:30"},{"nodeType":"YulAssignment","src":"28457:23:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28468:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"28473:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28464:3:30"},"nodeType":"YulFunctionCall","src":"28464:16:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"28457:3:30"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"28312:3:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"28317:6:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"28328:3:30","type":""}],"src":"28199:287:30"}]},"contents":"{\n    { }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_array_uint256_dyn(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(shl(5, length), 0x20)\n    }\n    function abi_decode_array_uint256_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_uint256_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        if gt(_1, 0xffffffffffffffff) { panic_error_0x41() }\n        let array_1 := allocate_memory(add(and(add(_1, 0x1f), not(31)), 0x20))\n        mstore(array_1, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(array_1, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(array_1, _1), 0x20), 0)\n        array := array_1\n    }\n    function abi_decode_array_bytes_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_uint256_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            let innerOffset := calldataload(src)\n            if gt(innerOffset, 0xffffffffffffffff)\n            {\n                let _3 := 0\n                revert(_3, _3)\n            }\n            mstore(dst, abi_decode_bytes(add(add(offset, innerOffset), _2), end))\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptrt_uint256t_bytes32t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7\n    {\n        if slt(sub(dataEnd, headStart), 256) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value1 := abi_decode_array_uint256_dyn(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 64))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value2 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n        let offset_2 := calldataload(add(headStart, 96))\n        if gt(offset_2, _1) { revert(0, 0) }\n        value3 := abi_decode_bytes(add(headStart, offset_2), dataEnd)\n        let offset_3 := calldataload(add(headStart, 128))\n        if gt(offset_3, _1) { revert(0, 0) }\n        value4 := abi_decode_array_bytes_dyn(add(headStart, offset_3), dataEnd)\n        value5 := calldataload(add(headStart, 160))\n        value6 := calldataload(add(headStart, 192))\n        let offset_4 := calldataload(add(headStart, 224))\n        if gt(offset_4, _1) { revert(0, 0) }\n        value7 := abi_decode_bytes(add(headStart, offset_4), dataEnd)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_uint256t_uint256t_bytes_memory_ptrt_bytes_memory_ptrt_uint256t_bytes32t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7\n    {\n        if slt(sub(dataEnd, headStart), 256) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value3 := abi_decode_bytes(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 128))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value4 := abi_decode_bytes(add(headStart, offset_1), dataEnd)\n        value5 := calldataload(add(headStart, 160))\n        value6 := calldataload(add(headStart, 192))\n        let offset_2 := calldataload(add(headStart, 224))\n        if gt(offset_2, _1) { revert(0, 0) }\n        value7 := abi_decode_bytes(add(headStart, offset_2), dataEnd)\n    }\n    function abi_decode_tuple_t_addresst_bytes_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value1 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value2 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_addresst_address(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_bytes(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_bytes(add(headStart, offset_1), dataEnd)\n        value2 := abi_decode_address(add(headStart, 64))\n        value3 := abi_decode_address(add(headStart, 96))\n    }\n    function abi_decode_tuple_t_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_array_uint256_dyn(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        value2 := abi_decode_bytes(add(headStart, offset_2), dataEnd)\n    }\n    function abi_decode_tuple_t_bytes32t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value1 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_9255a47dfbd5a3ccd82274f7fbcd278a7de4302eaa96aac250ed7ff8d0c1772f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 50)\n        mstore(add(headStart, 64), \"JasmineMinter: ids and oracleDat\")\n        mstore(add(headStart, 96), \"as length mismatch\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_fae1d53a06674f782f7e6c9acc836dfc0f6ccd86af9201cd196e6ea6361131e5__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"JasmineMinter: expired\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_bytes32__to_t_bytes32_t_address_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_bytes32__fromStack_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 224)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n        mstore(add(headStart, 192), value6)\n    }\n    function abi_encode_tuple_t_stringliteral_2f2c7f3aa71c7d1af89585f8c6fe06b516954bdd914e34b10b05f2f1e4d63ed8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"JasmineMinter: bad signature/wro\")\n        mstore(add(headStart, 96), \"ng signer\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_151cbd16c266184352ebde6b137391339f946268ebac138a34bbf5fc5cbfac2c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"JasmineMinter: nonce replay\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256_t_bytes_memory_ptr__to_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), 64)\n        tail := abi_encode_string(value1, add(headStart, 64))\n    }\n    function abi_encode_array_uint256_dyn(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let _1 := 0x20\n        pos := add(pos, _1)\n        let srcPtr := add(value, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos\n    }\n    function abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), 128)\n        let tail_1 := abi_encode_array_uint256_dyn(value1, add(headStart, 128))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        let tail_2 := abi_encode_array_uint256_dyn(value2, tail_1)\n        mstore(add(headStart, 96), sub(tail_2, headStart))\n        tail := abi_encode_string(value3, tail_2)\n    }\n    function abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"Function must be called through \")\n        mstore(add(headStart, 96), \"delegatecall\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"Function must be called through \")\n        mstore(add(headStart, 96), \"active proxy\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_uint256_t_uint256_t_bytes32_t_uint256_t_bytes32__to_t_bytes32_t_address_t_uint256_t_uint256_t_bytes32_t_uint256_t_bytes32__fromStack_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 224)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n        mstore(add(headStart, 192), value6)\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 56)\n        mstore(add(headStart, 64), \"UUPSUpgradeable: must not be cal\")\n        mstore(add(headStart, 96), \"led through delegatecall\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_225559eb8402045bea7ff07c35d0ad8c0547830223ac1c21d44fb948d6896ebc__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"Ownable2Step: caller is not the \")\n        mstore(add(headStart, 96), \"new owner\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_6a202c3fb661fc6d1c876b693892fa18c66d222ca913c0aa6eb0dfcf881c0e8a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"JasmineMinter: frozen series\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), 96)\n        tail := abi_encode_string(value2, add(headStart, 96))\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 96)\n        let tail_1 := abi_encode_array_uint256_dyn(value0, add(headStart, 96))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        let tail_2 := abi_encode_array_uint256_dyn(value1, tail_1)\n        mstore(add(headStart, 64), sub(tail_2, headStart))\n        tail := abi_encode_string(value2, tail_2)\n    }\n    function abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), 96)\n        let tail_1 := abi_encode_array_uint256_dyn(value1, add(headStart, 96))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        tail := abi_encode_array_uint256_dyn(value2, tail_1)\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"ERC1967Upgrade: new implementati\")\n        mstore(add(headStart, 96), \"on is not UUPS\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1967Upgrade: unsupported prox\")\n        mstore(add(headStart, 96), \"iableUUID\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"Initializable: contract is not i\")\n        mstore(add(headStart, 96), \"nitializing\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, shl(240, 6401))\n        mstore(add(pos, 2), value0)\n        mstore(add(pos, 34), value1)\n        end := add(pos, 66)\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature length\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature 's' val\")\n        mstore(add(headStart, 96), \"ue\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 45)\n        mstore(add(headStart, 64), \"ERC1967: new implementation is n\")\n        mstore(add(headStart, 96), \"ot a contract\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: delegate call to non-co\")\n        mstore(add(headStart, 96), \"ntract\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n}","id":30,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"826":[{"length":32,"start":2536},{"length":32,"start":2600},{"length":32,"start":3435},{"length":32,"start":3499},{"length":32,"start":3623},{"length":32,"start":3970},{"length":32,"start":4034},{"length":32,"start":4829},{"length":32,"start":4893},{"length":32,"start":5193},{"length":32,"start":5257}],"5327":[{"length":32,"start":1242},{"length":32,"start":2390},{"length":32,"start":3305},{"length":32,"start":4142},{"length":32,"start":4438},{"length":32,"start":5357},{"length":32,"start":5703}],"5329":[{"length":32,"start":725},{"length":32,"start":2195},{"length":32,"start":3176}]},"linkReferences":{},"object":"6080604052600436106101665760003560e01c806380a5a371116100d1578063e090fa3c1161008a578063e922ba7911610064578063e922ba7914610454578063f2fde38b14610474578063f76fc35e14610494578063fc0c546a146104c857600080fd5b8063e090fa3c146103f5578063e30c397814610415578063e78cea921461043357600080fd5b806380a5a3711461030f5780638da5cb5b1461032f5780638dd148021461034d5780638f15b4141461036d578063b3c9ed591461038d578063ce89a040146103c157600080fd5b80634f1ef286116101235780634f1ef2861461025c57806352d1902d1461026f57806354fd4d5014610284578063715018a61461029957806379ba5097146102ae5780637dc0d1d0146102c357600080fd5b806306fdde031461016b57806310dbebce14610196578063163c50ac146101d75780633644e515146101f95780633659cfe61461021c57806336b092271461023c575b600080fd5b34801561017757600080fd5b506101806104fc565b60405161018d9190612125565b60405180910390f35b3480156101a257600080fd5b506101c76101b1366004612138565b6101326020526000908152604090205460ff1681565b604051901515815260200161018d565b3480156101e357600080fd5b506101f76101f2366004612333565b61058b565b005b34801561020557600080fd5b5061020e6109cf565b60405190815260200161018d565b34801561022857600080fd5b506101f7610237366004612429565b6109de565b34801561024857600080fd5b506101f7610257366004612444565b610aa6565b6101f761026a3660046124c3565b610d61565b34801561027b57600080fd5b5061020e610e1a565b34801561029057600080fd5b50610180610edf565b3480156102a557600080fd5b506101f7610eed565b3480156102ba57600080fd5b506101f7610f01565b3480156102cf57600080fd5b506102f77f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161018d565b34801561031b57600080fd5b506101f761032a366004612511565b610f78565b34801561033b57600080fd5b506033546001600160a01b03166102f7565b34801561035957600080fd5b506101f7610368366004612429565b6111c0565b34801561037957600080fd5b506101f7610388366004612561565b611213565b34801561039957600080fd5b5061020e7f47b77ff24f11d889436314cd63fdefeb0b0f9531da691f5627f546c47e5f002c81565b3480156103cd57600080fd5b5061020e7fb0426304b718d58e27f05888d480cc1c9c956afaab3ba8d45afcce29f30d644881565b34801561040157600080fd5b506101f76104103660046125e6565b61143f565b34801561042157600080fd5b506065546001600160a01b03166102f7565b34801561043f57600080fd5b5061012f546102f7906001600160a01b031681565b34801561046057600080fd5b506101f761046f366004612664565b611688565b34801561048057600080fd5b506101f761048f366004612429565b6117b7565b3480156104a057600080fd5b5061020e7f7ed266a150d7268b399e18c9036ad7ff35a4bf8f1ddf162234a3684916e16dc881565b3480156104d457600080fd5b506102f77f000000000000000000000000000000000000000000000000000000000000000081565b610130805461050a90612695565b80601f016020809104026020016040519081016040528092919081815260200182805461053690612695565b80156105835780601f1061055857610100808354040283529160200191610583565b820191906000526020600020905b81548152906001019060200180831161056657829003601f168201915b505050505081565b83518751146105fc5760405162461bcd60e51b815260206004820152603260248201527f4a61736d696e654d696e7465723a2069647320616e64206f7261636c654461746044820152710c2e640d8cadccee8d040dad2e6dac2e8c6d60731b60648201526084015b60405180910390fd5b824211156106455760405162461bcd60e51b815260206004820152601660248201527512985cdb5a5b99535a5b9d195c8e88195e1c1a5c995960521b60448201526064016105f3565b6000845167ffffffffffffffff8111156106615761066161216d565b60405190808252806020026020018201604052801561068a578160200160208202803683370190505b50905060005b85518110156106ec578581815181106106ab576106ab6126cf565b60200260200101518051906020012060001c8282815181106106cf576106cf6126cf565b6020908102919091010152806106e4816126e5565b915050610690565b508751600590811b6020808b01919091208951831b8a830120845190931b84830120604080517f47b77ff24f11d889436314cd63fdefeb0b0f9531da691f5627f546c47e5f002c8186015233818301526060810193909352608083019490945260a082015260c0810187905260e080820187905283518083039091018152610100909101909252815191012061012f546001600160a01b031661079761079183611828565b8561187c565b6001600160a01b0316146107bd5760405162461bcd60e51b81526004016105f39061270c565b6000848152610132602052604090205460ff161561081d5760405162461bcd60e51b815260206004820152601b60248201527f4a61736d696e654d696e7465723a206e6f6e6365207265706c6179000000000060448201526064016105f3565b60008481526101326020526040808220805460ff191660011790555185917f70cd0c14252edef0440009634a4e86036a1747c9fbe7e4c2c05b8b62f9c410e291a260005b865181101561093e57600087828151811061087e5761087e6126cf565b60200260200101519050805160001461092b577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166307e3810c8c84815181106108d2576108d26126cf565b6020026020010151836040518363ffffffff1660e01b81526004016108f8929190612755565b600060405180830381600087803b15801561091257600080fd5b505af1158015610926573d6000803e3d6000fd5b505050505b5080610936816126e5565b915050610861565b50604051630fbfeffd60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631f7fdffa90610991908d908d908d908d906004016127b1565b600060405180830381600087803b1580156109ab57600080fd5b505af11580156109bf573d6000803e3d6000fd5b5050505050505050505050505050565b60006109d96118a0565b905090565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610a265760405162461bcd60e51b81526004016105f390612804565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610a586118d7565b6001600160a01b031614610a7e5760405162461bcd60e51b81526004016105f390612850565b610a8781611905565b60408051600080825260208201909252610aa39183919061190d565b50565b82421115610aef5760405162461bcd60e51b815260206004820152601660248201527512985cdb5a5b99535a5b9d195c8e88195e1c1a5c995960521b60448201526064016105f3565b8351602080860191909120604080517f7ed266a150d7268b399e18c9036ad7ff35a4bf8f1ddf162234a3684916e16dc8818501523381830152606081018b9052608081018a905260a081019290925260c0820186905260e0808301869052815180840390910181526101009092019052805191012061012f546001600160a01b0316610b83610b7d83611828565b8461187c565b6001600160a01b031614610ba95760405162461bcd60e51b81526004016105f39061270c565b6000838152610132602052604090205460ff1615610c095760405162461bcd60e51b815260206004820152601b60248201527f4a61736d696e654d696e7465723a206e6f6e6365207265706c6179000000000060448201526064016105f3565b60008381526101326020526040808220805460ff191660011790555184917f70cd0c14252edef0440009634a4e86036a1747c9fbe7e4c2c05b8b62f9c410e291a2845115610cd2576040516301f8e04360e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906307e3810c90610c9f908b908990600401612755565b600060405180830381600087803b158015610cb957600080fd5b505af1158015610ccd573d6000803e3d6000fd5b505050505b60405163731133e960e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063731133e990610d24908c908c908c908c9060040161289c565b600060405180830381600087803b158015610d3e57600080fd5b505af1158015610d52573d6000803e3d6000fd5b50505050505050505050505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610da95760405162461bcd60e51b81526004016105f390612804565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610ddb6118d7565b6001600160a01b031614610e015760405162461bcd60e51b81526004016105f390612850565b610e0a82611905565b610e168282600161190d565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610eba5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016105f3565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b610131805461050a90612695565b610ef5611a8f565b610eff6000611ae9565b565b60655433906001600160a01b03168114610f6f5760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b60648201526084016105f3565b610aa381611ae9565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610fc05760405162461bcd60e51b81526004016105f390612804565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610ff26118d7565b6001600160a01b0316146110185760405162461bcd60e51b81526004016105f390612850565b6040516303a6b01160e61b8152600481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e9ac044090602401602060405180830381865afa15801561107d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a191906128d4565b156110ee5760405162461bcd60e51b815260206004820152601c60248201527f4a61736d696e654d696e7465723a2066726f7a656e207365726965730000000060448201526064016105f3565b336001600160a01b03167f422475c8264e559fa982d4f66450a9bd1d5bee42cf8a98f6e032d1715b85955284848460405161112b939291906128f6565b60405180910390a2604051637a94c56560e11b815233600482015260248101849052604481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f5298aca906064015b600060405180830381600087803b1580156111a357600080fd5b505af11580156111b7573d6000803e3d6000fd5b50505050505050565b6111c8611a8f565b61012f80546001600160a01b0319166001600160a01b0383169081179091556040517f9775531310b2880b61484ed85cbb0b491c8fde3a07f289c63b9255178279449790600090a250565b600054610100900460ff16158080156112335750600054600160ff909116105b8061124d5750303b15801561124d575060005460ff166001145b6112b05760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105f3565b6000805460ff1916600117905580156112d3576000805461ff0019166101001790555b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361131b5760405162461bcd60e51b81526004016105f390612804565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661134d6118d7565b6001600160a01b0316146113735760405162461bcd60e51b81526004016105f390612850565b61137c82611ae9565b611384611b02565b61138e8585611b29565b61013061139b8682612963565b506101316113a98582612963565b5061012f80546001600160a01b0319166001600160a01b0385169081179091556040517f9775531310b2880b61484ed85cbb0b491c8fde3a07f289c63b9255178279449790600090a28015611438576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036114875760405162461bcd60e51b81526004016105f390612804565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166114b96118d7565b6001600160a01b0316146114df5760405162461bcd60e51b81526004016105f390612850565b60005b83518110156115f2577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e9ac044085838151811061152c5761152c6126cf565b60200260200101516040518263ffffffff1660e01b815260040161155291815260200190565b602060405180830381865afa15801561156f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159391906128d4565b156115e05760405162461bcd60e51b815260206004820152601c60248201527f4a61736d696e654d696e7465723a2066726f7a656e207365726965730000000060448201526064016105f3565b806115ea816126e5565b9150506114e2565b50336001600160a01b03167ff989b967ab06cb95ffa87edfc41b030132a3a687e55e92faf63512234d18e28f84848460405161163093929190612a23565b60405180910390a2604051631ac8311560e21b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636b20c4549061118990339087908790600401612a5c565b604080517fb0426304b718d58e27f05888d480cc1c9c956afaab3ba8d45afcce29f30d64486020808301919091528183018590528251808303840181526060909201909252805191012061012f546001600160a01b03166116eb610b7d83611828565b6001600160a01b0316146117115760405162461bcd60e51b81526004016105f39061270c565b6000838152610132602052604090205460ff16156117715760405162461bcd60e51b815260206004820152601b60248201527f4a61736d696e654d696e7465723a206e6f6e6365207265706c6179000000000060448201526064016105f3565b60008381526101326020526040808220805460ff191660011790555184917f70cd0c14252edef0440009634a4e86036a1747c9fbe7e4c2c05b8b62f9c410e291a2505050565b6117bf611a8f565b606580546001600160a01b0383166001600160a01b031990911681179091556117f06033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b60006118766118356118a0565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b92915050565b600080600061188b8585611b5a565b9150915061189881611b9f565b509392505050565b60006109d97f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6118cf60fb5490565b60fc54611ce9565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b610aa3611a8f565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156119455761194083611d33565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561199f575060408051601f3d908101601f1916820190925261199c91810190612a90565b60015b611a025760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016105f3565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114611a835760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016105f3565b50611940838383611de1565b6033546001600160a01b03163314610eff5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105f3565b606580546001600160a01b0319169055610aa381611e0c565b600054610100900460ff16610eff5760405162461bcd60e51b81526004016105f390612aa9565b600054610100900460ff16611b505760405162461bcd60e51b81526004016105f390612aa9565b610e168282611e5e565b6000808251604103611b905760208301516040840151606085015160001a611b8487828585611e9f565b94509450505050611b98565b506000905060025b9250929050565b6000816004811115611bb357611bb3612af4565b03611bbb5750565b6001816004811115611bcf57611bcf612af4565b03611c1c5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016105f3565b6002816004811115611c3057611c30612af4565b03611c7d5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016105f3565b6003816004811115611c9157611c91612af4565b03610aa35760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016105f3565b6040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090505b9392505050565b6001600160a01b0381163b611da05760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016105f3565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b611dea83611f63565b600082511180611df75750805b1561194057611e068383611fa3565b50505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16611e855760405162461bcd60e51b81526004016105f390612aa9565b81516020928301208151919092012060fb9190915560fc55565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611ed65750600090506003611f5a565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611f2a573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611f5357600060019250925050611f5a565b9150600090505b94509492505050565b611f6c81611d33565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b61200b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016105f3565b600080846001600160a01b0316846040516120269190612b0a565b600060405180830381855af49150503d8060008114612061576040519150601f19603f3d011682016040523d82523d6000602084013e612066565b606091505b509150915061208e8282604051806060016040528060278152602001612b2760279139612097565b95945050505050565b606083156120a6575081611d2c565b611d2c83838151156120bb5781518083602001fd5b8060405162461bcd60e51b81526004016105f39190612125565b60005b838110156120f05781810151838201526020016120d8565b50506000910152565b600081518084526121118160208601602086016120d5565b601f01601f19169290920160200192915050565b602081526000611d2c60208301846120f9565b60006020828403121561214a57600080fd5b5035919050565b80356001600160a01b038116811461216857600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156121ac576121ac61216d565b604052919050565b600067ffffffffffffffff8211156121ce576121ce61216d565b5060051b60200190565b600082601f8301126121e957600080fd5b813560206121fe6121f9836121b4565b612183565b82815260059290921b8401810191818101908684111561221d57600080fd5b8286015b848110156122385780358352918301918301612221565b509695505050505050565b600082601f83011261225457600080fd5b813567ffffffffffffffff81111561226e5761226e61216d565b612281601f8201601f1916602001612183565b81815284602083860101111561229657600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f8301126122c457600080fd5b813560206122d46121f9836121b4565b82815260059290921b840181019181810190868411156122f357600080fd5b8286015b8481101561223857803567ffffffffffffffff8111156123175760008081fd5b6123258986838b0101612243565b8452509183019183016122f7565b600080600080600080600080610100898b03121561235057600080fd5b61235989612151565b9750602089013567ffffffffffffffff8082111561237657600080fd5b6123828c838d016121d8565b985060408b013591508082111561239857600080fd5b6123a48c838d016121d8565b975060608b01359150808211156123ba57600080fd5b6123c68c838d01612243565b965060808b01359150808211156123dc57600080fd5b6123e88c838d016122b3565b955060a08b0135945060c08b0135935060e08b013591508082111561240c57600080fd5b506124198b828c01612243565b9150509295985092959890939650565b60006020828403121561243b57600080fd5b611d2c82612151565b600080600080600080600080610100898b03121561246157600080fd5b61246a89612151565b97506020890135965060408901359550606089013567ffffffffffffffff8082111561249557600080fd5b6124a18c838d01612243565b965060808b01359150808211156124b757600080fd5b6123e88c838d01612243565b600080604083850312156124d657600080fd5b6124df83612151565b9150602083013567ffffffffffffffff8111156124fb57600080fd5b61250785828601612243565b9150509250929050565b60008060006060848603121561252657600080fd5b8335925060208401359150604084013567ffffffffffffffff81111561254b57600080fd5b61255786828701612243565b9150509250925092565b6000806000806080858703121561257757600080fd5b843567ffffffffffffffff8082111561258f57600080fd5b61259b88838901612243565b955060208701359150808211156125b157600080fd5b506125be87828801612243565b9350506125cd60408601612151565b91506125db60608601612151565b905092959194509250565b6000806000606084860312156125fb57600080fd5b833567ffffffffffffffff8082111561261357600080fd5b61261f878388016121d8565b9450602086013591508082111561263557600080fd5b612641878388016121d8565b9350604086013591508082111561265757600080fd5b5061255786828701612243565b6000806040838503121561267757600080fd5b82359150602083013567ffffffffffffffff8111156124fb57600080fd5b600181811c908216806126a957607f821691505b6020821081036126c957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b60006001820161270557634e487b7160e01b600052601160045260246000fd5b5060010190565b60208082526029908201527f4a61736d696e654d696e7465723a20626164207369676e61747572652f77726f60408201526837339039b4b3b732b960b91b606082015260800190565b82815260406020820152600061276e60408301846120f9565b949350505050565b600081518084526020808501945080840160005b838110156127a65781518752958201959082019060010161278a565b509495945050505050565b6001600160a01b03851681526080602082015260006127d36080830186612776565b82810360408401526127e58186612776565b905082810360608401526127f981856120f9565b979650505050505050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6001600160a01b03851681528360208201528260408201526080606082015260006128ca60808301846120f9565b9695505050505050565b6000602082840312156128e657600080fd5b81518015158114611d2c57600080fd5b83815282602082015260606040820152600061208e60608301846120f9565b601f82111561194057600081815260208120601f850160051c8101602086101561293c5750805b601f850160051c820191505b8181101561295b57828155600101612948565b505050505050565b815167ffffffffffffffff81111561297d5761297d61216d565b6129918161298b8454612695565b84612915565b602080601f8311600181146129c657600084156129ae5750858301515b600019600386901b1c1916600185901b17855561295b565b600085815260208120601f198616915b828110156129f5578886015182559484019460019091019084016129d6565b5085821015612a135787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b606081526000612a366060830186612776565b8281036020840152612a488186612776565b905082810360408401526128ca81856120f9565b6001600160a01b0384168152606060208201526000612a7e6060830185612776565b82810360408401526128ca8185612776565b600060208284031215612aa257600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052602160045260246000fd5b60008251612b1c8184602087016120d5565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212205b160dce73b8e2ec7b229bdee149d3865784095768bca0aa43ed6e8cc42d222464736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x166 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x80A5A371 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0xE090FA3C GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xE922BA79 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xE922BA79 EQ PUSH2 0x454 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x474 JUMPI DUP1 PUSH4 0xF76FC35E EQ PUSH2 0x494 JUMPI DUP1 PUSH4 0xFC0C546A EQ PUSH2 0x4C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xE090FA3C EQ PUSH2 0x3F5 JUMPI DUP1 PUSH4 0xE30C3978 EQ PUSH2 0x415 JUMPI DUP1 PUSH4 0xE78CEA92 EQ PUSH2 0x433 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x80A5A371 EQ PUSH2 0x30F JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x32F JUMPI DUP1 PUSH4 0x8DD14802 EQ PUSH2 0x34D JUMPI DUP1 PUSH4 0x8F15B414 EQ PUSH2 0x36D JUMPI DUP1 PUSH4 0xB3C9ED59 EQ PUSH2 0x38D JUMPI DUP1 PUSH4 0xCE89A040 EQ PUSH2 0x3C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4F1EF286 GT PUSH2 0x123 JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x25C JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0x26F JUMPI DUP1 PUSH4 0x54FD4D50 EQ PUSH2 0x284 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x299 JUMPI DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x2AE JUMPI DUP1 PUSH4 0x7DC0D1D0 EQ PUSH2 0x2C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x16B JUMPI DUP1 PUSH4 0x10DBEBCE EQ PUSH2 0x196 JUMPI DUP1 PUSH4 0x163C50AC EQ PUSH2 0x1D7 JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x1F9 JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x21C JUMPI DUP1 PUSH4 0x36B09227 EQ PUSH2 0x23C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x177 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x180 PUSH2 0x4FC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x18D SWAP2 SWAP1 PUSH2 0x2125 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1C7 PUSH2 0x1B1 CALLDATASIZE PUSH1 0x4 PUSH2 0x2138 JUMP JUMPDEST PUSH2 0x132 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x18D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F7 PUSH2 0x1F2 CALLDATASIZE PUSH1 0x4 PUSH2 0x2333 JUMP JUMPDEST PUSH2 0x58B JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x205 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20E PUSH2 0x9CF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x18D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x228 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F7 PUSH2 0x237 CALLDATASIZE PUSH1 0x4 PUSH2 0x2429 JUMP JUMPDEST PUSH2 0x9DE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x248 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F7 PUSH2 0x257 CALLDATASIZE PUSH1 0x4 PUSH2 0x2444 JUMP JUMPDEST PUSH2 0xAA6 JUMP JUMPDEST PUSH2 0x1F7 PUSH2 0x26A CALLDATASIZE PUSH1 0x4 PUSH2 0x24C3 JUMP JUMPDEST PUSH2 0xD61 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x27B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20E PUSH2 0xE1A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x290 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x180 PUSH2 0xEDF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F7 PUSH2 0xEED JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F7 PUSH2 0xF01 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F7 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x18D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x31B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F7 PUSH2 0x32A CALLDATASIZE PUSH1 0x4 PUSH2 0x2511 JUMP JUMPDEST PUSH2 0xF78 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x33B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2F7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x359 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F7 PUSH2 0x368 CALLDATASIZE PUSH1 0x4 PUSH2 0x2429 JUMP JUMPDEST PUSH2 0x11C0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x379 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F7 PUSH2 0x388 CALLDATASIZE PUSH1 0x4 PUSH2 0x2561 JUMP JUMPDEST PUSH2 0x1213 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x399 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20E PUSH32 0x47B77FF24F11D889436314CD63FDEFEB0B0F9531DA691F5627F546C47E5F002C DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20E PUSH32 0xB0426304B718D58E27F05888D480CC1C9C956AFAAB3BA8D45AFCCE29F30D6448 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x401 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F7 PUSH2 0x410 CALLDATASIZE PUSH1 0x4 PUSH2 0x25E6 JUMP JUMPDEST PUSH2 0x143F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x421 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2F7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x43F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12F SLOAD PUSH2 0x2F7 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x460 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F7 PUSH2 0x46F CALLDATASIZE PUSH1 0x4 PUSH2 0x2664 JUMP JUMPDEST PUSH2 0x1688 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x480 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F7 PUSH2 0x48F CALLDATASIZE PUSH1 0x4 PUSH2 0x2429 JUMP JUMPDEST PUSH2 0x17B7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20E PUSH32 0x7ED266A150D7268B399E18C9036AD7FF35A4BF8F1DDF162234A3684916E16DC8 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F7 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x130 DUP1 SLOAD PUSH2 0x50A SWAP1 PUSH2 0x2695 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x536 SWAP1 PUSH2 0x2695 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x583 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x558 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x583 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x566 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST DUP4 MLOAD DUP8 MLOAD EQ PUSH2 0x5FC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4A61736D696E654D696E7465723A2069647320616E64206F7261636C65446174 PUSH1 0x44 DUP3 ADD MSTORE PUSH18 0xC2E640D8CADCCEE8D040DAD2E6DAC2E8C6D PUSH1 0x73 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 TIMESTAMP GT ISZERO PUSH2 0x645 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x12985CDB5A5B99535A5B9D195C8E88195E1C1A5C9959 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5F3 JUMP JUMPDEST PUSH1 0x0 DUP5 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x661 JUMPI PUSH2 0x661 PUSH2 0x216D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x68A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x6EC JUMPI DUP6 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x6AB JUMPI PUSH2 0x6AB PUSH2 0x26CF JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6CF JUMPI PUSH2 0x6CF PUSH2 0x26CF JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP1 PUSH2 0x6E4 DUP2 PUSH2 0x26E5 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x690 JUMP JUMPDEST POP DUP8 MLOAD PUSH1 0x5 SWAP1 DUP2 SHL PUSH1 0x20 DUP1 DUP12 ADD SWAP2 SWAP1 SWAP2 KECCAK256 DUP10 MLOAD DUP4 SHL DUP11 DUP4 ADD KECCAK256 DUP5 MLOAD SWAP1 SWAP4 SHL DUP5 DUP4 ADD KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH32 0x47B77FF24F11D889436314CD63FDEFEB0B0F9531DA691F5627F546C47E5F002C DUP2 DUP7 ADD MSTORE CALLER DUP2 DUP4 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x80 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0xE0 DUP1 DUP3 ADD DUP8 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH2 0x100 SWAP1 SWAP2 ADD SWAP1 SWAP3 MSTORE DUP2 MLOAD SWAP2 ADD KECCAK256 PUSH2 0x12F SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x797 PUSH2 0x791 DUP4 PUSH2 0x1828 JUMP JUMPDEST DUP6 PUSH2 0x187C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x7BD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F3 SWAP1 PUSH2 0x270C JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH2 0x132 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x81D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4A61736D696E654D696E7465723A206E6F6E6365207265706C61790000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5F3 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH2 0x132 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD DUP6 SWAP2 PUSH32 0x70CD0C14252EDEF0440009634A4E86036A1747C9FBE7E4C2C05B8B62F9C410E2 SWAP2 LOG2 PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH2 0x93E JUMPI PUSH1 0x0 DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x87E JUMPI PUSH2 0x87E PUSH2 0x26CF JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ PUSH2 0x92B JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x7E3810C DUP13 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x8D2 JUMPI PUSH2 0x8D2 PUSH2 0x26CF JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8F8 SWAP3 SWAP2 SWAP1 PUSH2 0x2755 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x912 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x926 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST POP DUP1 PUSH2 0x936 DUP2 PUSH2 0x26E5 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x861 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0xFBFEFFD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x1F7FDFFA SWAP1 PUSH2 0x991 SWAP1 DUP14 SWAP1 DUP14 SWAP1 DUP14 SWAP1 DUP14 SWAP1 PUSH1 0x4 ADD PUSH2 0x27B1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x9BF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9D9 PUSH2 0x18A0 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0xA26 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F3 SWAP1 PUSH2 0x2804 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xA58 PUSH2 0x18D7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xA7E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F3 SWAP1 PUSH2 0x2850 JUMP JUMPDEST PUSH2 0xA87 DUP2 PUSH2 0x1905 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xAA3 SWAP2 DUP4 SWAP2 SWAP1 PUSH2 0x190D JUMP JUMPDEST POP JUMP JUMPDEST DUP3 TIMESTAMP GT ISZERO PUSH2 0xAEF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x12985CDB5A5B99535A5B9D195C8E88195E1C1A5C9959 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5F3 JUMP JUMPDEST DUP4 MLOAD PUSH1 0x20 DUP1 DUP7 ADD SWAP2 SWAP1 SWAP2 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH32 0x7ED266A150D7268B399E18C9036AD7FF35A4BF8F1DDF162234A3684916E16DC8 DUP2 DUP6 ADD MSTORE CALLER DUP2 DUP4 ADD MSTORE PUSH1 0x60 DUP2 ADD DUP12 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xC0 DUP3 ADD DUP7 SWAP1 MSTORE PUSH1 0xE0 DUP1 DUP4 ADD DUP7 SWAP1 MSTORE DUP2 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH2 0x100 SWAP1 SWAP3 ADD SWAP1 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 PUSH2 0x12F SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xB83 PUSH2 0xB7D DUP4 PUSH2 0x1828 JUMP JUMPDEST DUP5 PUSH2 0x187C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xBA9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F3 SWAP1 PUSH2 0x270C JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH2 0x132 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xC09 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4A61736D696E654D696E7465723A206E6F6E6365207265706C61790000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5F3 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH2 0x132 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD DUP5 SWAP2 PUSH32 0x70CD0C14252EDEF0440009634A4E86036A1747C9FBE7E4C2C05B8B62F9C410E2 SWAP2 LOG2 DUP5 MLOAD ISZERO PUSH2 0xCD2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1F8E043 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x7E3810C SWAP1 PUSH2 0xC9F SWAP1 DUP12 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x2755 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xCCD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x731133E9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x731133E9 SWAP1 PUSH2 0xD24 SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x289C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD3E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD52 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0xDA9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F3 SWAP1 PUSH2 0x2804 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xDDB PUSH2 0x18D7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xE01 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F3 SWAP1 PUSH2 0x2850 JUMP JUMPDEST PUSH2 0xE0A DUP3 PUSH2 0x1905 JUMP JUMPDEST PUSH2 0xE16 DUP3 DUP3 PUSH1 0x1 PUSH2 0x190D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0xEBA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5F3 JUMP JUMPDEST POP PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SWAP1 JUMP JUMPDEST PUSH2 0x131 DUP1 SLOAD PUSH2 0x50A SWAP1 PUSH2 0x2695 JUMP JUMPDEST PUSH2 0xEF5 PUSH2 0x1A8F JUMP JUMPDEST PUSH2 0xEFF PUSH1 0x0 PUSH2 0x1AE9 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x65 SLOAD CALLER SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 EQ PUSH2 0xF6F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C6532537465703A2063616C6C6572206973206E6F742074686520 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x3732BB9037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5F3 JUMP JUMPDEST PUSH2 0xAA3 DUP2 PUSH2 0x1AE9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0xFC0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F3 SWAP1 PUSH2 0x2804 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xFF2 PUSH2 0x18D7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1018 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F3 SWAP1 PUSH2 0x2850 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3A6B011 PUSH1 0xE6 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xE9AC0440 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x107D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x10A1 SWAP2 SWAP1 PUSH2 0x28D4 JUMP JUMPDEST ISZERO PUSH2 0x10EE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4A61736D696E654D696E7465723A2066726F7A656E2073657269657300000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5F3 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x422475C8264E559FA982D4F66450A9BD1D5BEE42CF8A98F6E032D1715B859552 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x112B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x28F6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x40 MLOAD PUSH4 0x7A94C565 PUSH1 0xE1 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xF5298ACA SWAP1 PUSH1 0x64 ADD JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x11A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x11B7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x11C8 PUSH2 0x1A8F JUMP JUMPDEST PUSH2 0x12F DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0x9775531310B2880B61484ED85CBB0B491C8FDE3A07F289C63B92551782794497 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x1233 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x124D JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x124D JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x12B0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5F3 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x12D3 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0x131B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F3 SWAP1 PUSH2 0x2804 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x134D PUSH2 0x18D7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1373 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F3 SWAP1 PUSH2 0x2850 JUMP JUMPDEST PUSH2 0x137C DUP3 PUSH2 0x1AE9 JUMP JUMPDEST PUSH2 0x1384 PUSH2 0x1B02 JUMP JUMPDEST PUSH2 0x138E DUP6 DUP6 PUSH2 0x1B29 JUMP JUMPDEST PUSH2 0x130 PUSH2 0x139B DUP7 DUP3 PUSH2 0x2963 JUMP JUMPDEST POP PUSH2 0x131 PUSH2 0x13A9 DUP6 DUP3 PUSH2 0x2963 JUMP JUMPDEST POP PUSH2 0x12F DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0x9775531310B2880B61484ED85CBB0B491C8FDE3A07F289C63B92551782794497 SWAP1 PUSH1 0x0 SWAP1 LOG2 DUP1 ISZERO PUSH2 0x1438 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0x1487 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F3 SWAP1 PUSH2 0x2804 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x14B9 PUSH2 0x18D7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x14DF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F3 SWAP1 PUSH2 0x2850 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x15F2 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xE9AC0440 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x152C JUMPI PUSH2 0x152C PUSH2 0x26CF JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1552 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x156F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1593 SWAP2 SWAP1 PUSH2 0x28D4 JUMP JUMPDEST ISZERO PUSH2 0x15E0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4A61736D696E654D696E7465723A2066726F7A656E2073657269657300000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5F3 JUMP JUMPDEST DUP1 PUSH2 0x15EA DUP2 PUSH2 0x26E5 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x14E2 JUMP JUMPDEST POP CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xF989B967AB06CB95FFA87EDFC41B030132A3A687E55E92FAF63512234D18E28F DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x1630 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A23 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x40 MLOAD PUSH4 0x1AC83115 PUSH1 0xE2 SHL DUP2 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x6B20C454 SWAP1 PUSH2 0x1189 SWAP1 CALLER SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x2A5C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xB0426304B718D58E27F05888D480CC1C9C956AFAAB3BA8D45AFCCE29F30D6448 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 DUP4 ADD DUP6 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB DUP5 ADD DUP2 MSTORE PUSH1 0x60 SWAP1 SWAP3 ADD SWAP1 SWAP3 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 PUSH2 0x12F SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x16EB PUSH2 0xB7D DUP4 PUSH2 0x1828 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1711 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F3 SWAP1 PUSH2 0x270C JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH2 0x132 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1771 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4A61736D696E654D696E7465723A206E6F6E6365207265706C61790000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5F3 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH2 0x132 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD DUP5 SWAP2 PUSH32 0x70CD0C14252EDEF0440009634A4E86036A1747C9FBE7E4C2C05B8B62F9C410E2 SWAP2 LOG2 POP POP POP JUMP JUMPDEST PUSH2 0x17BF PUSH2 0x1A8F JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH2 0x17F0 PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x38D16B8CAC22D99FC7C124B9CD0DE2D3FA1FAEF420BFE791D8C362D765E22700 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1876 PUSH2 0x1835 PUSH2 0x18A0 JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH2 0x1901 PUSH1 0xF0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x22 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x42 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x62 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x188B DUP6 DUP6 PUSH2 0x1B5A JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1898 DUP2 PUSH2 0x1B9F JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9D9 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH2 0x18CF PUSH1 0xFB SLOAD SWAP1 JUMP JUMPDEST PUSH1 0xFC SLOAD PUSH2 0x1CE9 JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0xAA3 PUSH2 0x1A8F JUMP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1945 JUMPI PUSH2 0x1940 DUP4 PUSH2 0x1D33 JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x199F JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x199C SWAP2 DUP2 ADD SWAP1 PUSH2 0x2A90 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1A02 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x6F6E206973206E6F742055555053 PUSH1 0x90 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5F3 JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP2 EQ PUSH2 0x1A83 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1A58589B1955555251 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5F3 JUMP JUMPDEST POP PUSH2 0x1940 DUP4 DUP4 DUP4 PUSH2 0x1DE1 JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xEFF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5F3 JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE PUSH2 0xAA3 DUP2 PUSH2 0x1E0C JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xEFF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F3 SWAP1 PUSH2 0x2AA9 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1B50 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F3 SWAP1 PUSH2 0x2AA9 JUMP JUMPDEST PUSH2 0xE16 DUP3 DUP3 PUSH2 0x1E5E JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x41 SUB PUSH2 0x1B90 JUMPI PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x0 BYTE PUSH2 0x1B84 DUP8 DUP3 DUP6 DUP6 PUSH2 0x1E9F JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP POP PUSH2 0x1B98 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP PUSH1 0x2 JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1BB3 JUMPI PUSH2 0x1BB3 PUSH2 0x2AF4 JUMP JUMPDEST SUB PUSH2 0x1BBB JUMPI POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1BCF JUMPI PUSH2 0x1BCF PUSH2 0x2AF4 JUMP JUMPDEST SUB PUSH2 0x1C1C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5F3 JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1C30 JUMPI PUSH2 0x1C30 PUSH2 0x2AF4 JUMP JUMPDEST SUB PUSH2 0x1C7D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5F3 JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1C91 JUMPI PUSH2 0x1C91 PUSH2 0x2AF4 JUMP JUMPDEST SUB PUSH2 0xAA3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5F3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND EXTCODESIZE PUSH2 0x1DA0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5F3 JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1DEA DUP4 PUSH2 0x1F63 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0x1DF7 JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0x1940 JUMPI PUSH2 0x1E06 DUP4 DUP4 PUSH2 0x1FA3 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1E85 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F3 SWAP1 PUSH2 0x2AA9 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD KECCAK256 DUP2 MLOAD SWAP2 SWAP1 SWAP3 ADD KECCAK256 PUSH1 0xFB SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0xFC SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT ISZERO PUSH2 0x1ED6 JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x3 PUSH2 0x1F5A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP10 SWAP1 MSTORE PUSH1 0xFF DUP9 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1F2A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1F53 JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x1F5A JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1F6C DUP2 PUSH2 0x1D33 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE PUSH2 0x200B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5F3 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x40 MLOAD PUSH2 0x2026 SWAP2 SWAP1 PUSH2 0x2B0A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2061 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2066 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x208E DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2B27 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x2097 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x20A6 JUMPI POP DUP2 PUSH2 0x1D2C JUMP JUMPDEST PUSH2 0x1D2C DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x20BB JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F3 SWAP2 SWAP1 PUSH2 0x2125 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x20F0 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x20D8 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x2111 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x20D5 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1D2C PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x20F9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x214A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2168 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x21AC JUMPI PUSH2 0x21AC PUSH2 0x216D JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x21CE JUMPI PUSH2 0x21CE PUSH2 0x216D JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x21E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x21FE PUSH2 0x21F9 DUP4 PUSH2 0x21B4 JUMP JUMPDEST PUSH2 0x2183 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x221D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x2238 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x2221 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2254 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x226E JUMPI PUSH2 0x226E PUSH2 0x216D JUMP JUMPDEST PUSH2 0x2281 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x2183 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x2296 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x22C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x22D4 PUSH2 0x21F9 DUP4 PUSH2 0x21B4 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x22F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x2238 JUMPI DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2317 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0x2325 DUP10 DUP7 DUP4 DUP12 ADD ADD PUSH2 0x2243 JUMP JUMPDEST DUP5 MSTORE POP SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x22F7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x2350 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2359 DUP10 PUSH2 0x2151 JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2376 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2382 DUP13 DUP4 DUP14 ADD PUSH2 0x21D8 JUMP JUMPDEST SWAP9 POP PUSH1 0x40 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2398 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x23A4 DUP13 DUP4 DUP14 ADD PUSH2 0x21D8 JUMP JUMPDEST SWAP8 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x23BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x23C6 DUP13 DUP4 DUP14 ADD PUSH2 0x2243 JUMP JUMPDEST SWAP7 POP PUSH1 0x80 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x23DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x23E8 DUP13 DUP4 DUP14 ADD PUSH2 0x22B3 JUMP JUMPDEST SWAP6 POP PUSH1 0xA0 DUP12 ADD CALLDATALOAD SWAP5 POP PUSH1 0xC0 DUP12 ADD CALLDATALOAD SWAP4 POP PUSH1 0xE0 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x240C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2419 DUP12 DUP3 DUP13 ADD PUSH2 0x2243 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x243B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D2C DUP3 PUSH2 0x2151 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x2461 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x246A DUP10 PUSH2 0x2151 JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2495 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x24A1 DUP13 DUP4 DUP14 ADD PUSH2 0x2243 JUMP JUMPDEST SWAP7 POP PUSH1 0x80 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x24B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x23E8 DUP13 DUP4 DUP14 ADD PUSH2 0x2243 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x24D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x24DF DUP4 PUSH2 0x2151 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x24FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2507 DUP6 DUP3 DUP7 ADD PUSH2 0x2243 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2526 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x254B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2557 DUP7 DUP3 DUP8 ADD PUSH2 0x2243 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2577 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x258F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x259B DUP9 DUP4 DUP10 ADD PUSH2 0x2243 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x25B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25BE DUP8 DUP3 DUP9 ADD PUSH2 0x2243 JUMP JUMPDEST SWAP4 POP POP PUSH2 0x25CD PUSH1 0x40 DUP7 ADD PUSH2 0x2151 JUMP JUMPDEST SWAP2 POP PUSH2 0x25DB PUSH1 0x60 DUP7 ADD PUSH2 0x2151 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x25FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2613 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x261F DUP8 DUP4 DUP9 ADD PUSH2 0x21D8 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2635 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2641 DUP8 DUP4 DUP9 ADD PUSH2 0x21D8 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2657 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2557 DUP7 DUP3 DUP8 ADD PUSH2 0x2243 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2677 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x24FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x26A9 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x26C9 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x2705 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x29 SWAP1 DUP3 ADD MSTORE PUSH32 0x4A61736D696E654D696E7465723A20626164207369676E61747572652F77726F PUSH1 0x40 DUP3 ADD MSTORE PUSH9 0x37339039B4B3B732B9 PUSH1 0xB9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x276E PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x20F9 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x27A6 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x278A JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x27D3 PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x2776 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x27E5 DUP2 DUP7 PUSH2 0x2776 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x27F9 DUP2 DUP6 PUSH2 0x20F9 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x19195B1959D85D1958D85B1B PUSH1 0xA2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x6163746976652070726F7879 PUSH1 0xA0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE DUP4 PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x28CA PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x20F9 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x28E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1D2C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x208E PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x20F9 JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x1940 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x293C JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x295B JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2948 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x297D JUMPI PUSH2 0x297D PUSH2 0x216D JUMP JUMPDEST PUSH2 0x2991 DUP2 PUSH2 0x298B DUP5 SLOAD PUSH2 0x2695 JUMP JUMPDEST DUP5 PUSH2 0x2915 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x29C6 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x29AE JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x295B JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x29F5 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x29D6 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x2A13 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH2 0x2A36 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x2776 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x2A48 DUP2 DUP7 PUSH2 0x2776 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x28CA DUP2 DUP6 PUSH2 0x20F9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x2A7E PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x2776 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x28CA DUP2 DUP6 PUSH2 0x2776 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2AA2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x2B1C DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x20D5 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x706673582212205B160D 0xCE PUSH20 0xB8E2EC7B229BDEE149D3865784095768BCA0AA43 0xED PUSH15 0x8CC42D222464736F6C634300081100 CALLER ","sourceMap":"1114:12043:24:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2097:18;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2549:46;;;;;;;;;;-1:-1:-1;2549:46:24;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1120:14:30;;1113:22;1095:41;;1083:2;1068:18;2549:46:24;955:187:30;8253:1856:24;;;;;;;;;;-1:-1:-1;8253:1856:24;;;;;:::i;:::-;;:::i;:::-;;2697:98;;;;;;;;;;;;;:::i;:::-;;;5631:25:30;;;5619:2;5604:18;2697:98:24;5485:177:30;3317:197:6;;;;;;;;;;-1:-1:-1;3317:197:6;;;;;:::i;:::-;;:::i;5409:1050:24:-;;;;;;;;;;-1:-1:-1;5409:1050:24;;;;;:::i;:::-;;:::i;3763:222:6:-;;;;;;:::i;:::-;;:::i;3006:131::-;;;;;;;;;;;;;:::i;2211:21:24:-;;;;;;;;;;;;;:::i;2071:101:1:-;;;;;;;;;;;;;:::i;2010:206:0:-;;;;;;;;;;;;;:::i;1431:31:24:-;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7514:55:30;;;7496:74;;7484:2;7469:18;1431:31:24;7350:226:30;11442:311:24;;;;;;;;;;-1:-1:-1;11442:311:24;;;;;:::i;:::-;;:::i;1441:85:1:-;;;;;;;;;;-1:-1:-1;1513:6:1;;-1:-1:-1;;;;;1513:6:1;1441:85;;1883:121:24;;;;;;;;;;-1:-1:-1;1883:121:24;;;;;:::i;:::-;;:::i;3321:441::-;;;;;;;;;;-1:-1:-1;3321:441:24;;;;;:::i;:::-;;:::i;3025:195::-;;;;;;;;;;;;3074:146;3025:195;;3224:92;;;;;;;;;;;;3276:40;3224:92;;12594:423;;;;;;;;;;-1:-1:-1;12594:423:24;;;;;:::i;:::-;;:::i;1123:99:0:-;;;;;;;;;;-1:-1:-1;1202:13:0;;-1:-1:-1;;;;;1202:13:0;1123:99;;1714:21:24;;;;;;;;;;-1:-1:-1;1714:21:24;;;;-1:-1:-1;;;;;1714:21:24;;;10204:427;;;;;;;;;;-1:-1:-1;10204:427:24;;;;;:::i;:::-;;:::i;1415:178:0:-;;;;;;;;;;-1:-1:-1;1415:178:0;;;;;:::i;:::-;;:::i;2845:176:24:-;;;;;;;;;;;;2889:132;2845:176;;1397:30;;;;;;;;;;;;;;;2097:18;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;8253:1856::-;8621:11;:18;8607:3;:10;:32;8592:113;;;;-1:-1:-1;;;8592:113:24;;10515:2:30;8592:113:24;;;10497:21:30;10554:2;10534:18;;;10527:30;10593:34;10573:18;;;10566:62;-1:-1:-1;;;10644:18:30;;;10637:48;10702:19;;8592:113:24;;;;;;;;;8766:8;8747:15;:27;;8739:62;;;;-1:-1:-1;;;8739:62:24;;10934:2:30;8739:62:24;;;10916:21:30;10973:2;10953:18;;;10946:30;-1:-1:-1;;;10992:18:30;;;10985:52;11054:18;;8739:62:24;10732:346:30;8739:62:24;9006:33;9056:11;:18;9042:33;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;9042:33:24;;9006:69;;9086:9;9081:116;9101:11;:18;9097:1;:22;9081:116;;;9174:11;9186:1;9174:14;;;;;;;;:::i;:::-;;;;;;;9164:25;;;;;;9156:34;;9134:16;9151:1;9134:19;;;;;;;;:::i;:::-;;;;;;;;;;:56;9121:3;;;;:::i;:::-;;;;9081:116;;;-1:-1:-1;6622:8:24;;6619:1;6615:16;;;6605:4;6601:12;;;6591:41;;;;6622:8;;6615:16;;6601:12;;;6591:41;6622:8;;6615:16;;;6601:12;;;6591:41;9240:193;;;3074:146;9240:193;;;11767:25:30;929:10:14;11808:18:30;;;11801:83;11900:18;;;11893:34;;;;11943:18;;;11936:34;;;;11986:19;;;11979:35;12030:19;;;12023:35;;;12074:19;;;;12067:35;;;9240:193:24;;;;;;;;;;11739:19:30;;;;9240:193:24;;;9223:216;;;;;9523:6;;-1:-1:-1;;;;;9523:6:24;9460:59;9485:28;9223:216;9485:16;:28::i;:::-;9515:3;9460:24;:59::i;:::-;-1:-1:-1;;;;;9460:69:24;;9445:141;;;;-1:-1:-1;;;9445:141:24;;;;;;;:::i;:::-;9602:21;;;;:14;:21;;;;;;;;9601:22;9593:62;;;;-1:-1:-1;;;9593:62:24;;12725:2:30;9593:62:24;;;12707:21:30;12764:2;12744:18;;;12737:30;12803:29;12783:18;;;12776:57;12850:18;;9593:62:24;12523:351:30;9593:62:24;9661:21;;;;:14;:21;;;;;;:28;;-1:-1:-1;;9661:28:24;9685:4;9661:28;;;9700:20;9676:5;;9700:20;;;9824:9;9819:209;9839:11;:18;9835:1;:22;9819:209;;;9872:23;9898:11;9910:1;9898:14;;;;;;;;:::i;:::-;;;;;;;9872:40;;9924:10;:17;9945:1;9924:22;9920:102;;9973:6;-1:-1:-1;;;;;9958:35:24;;9994:3;9998:1;9994:6;;;;;;;;:::i;:::-;;;;;;;10002:10;9958:55;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9920:102;-1:-1:-1;9859:3:24;;;;:::i;:::-;;;;9819:209;;;-1:-1:-1;10033:71:24;;-1:-1:-1;;;10033:71:24;;-1:-1:-1;;;;;10050:5:24;10033:33;;;;:71;;10067:8;;10077:3;;10082:7;;10091:12;;10033:71;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8489:1620;;8253:1856;;;;;;;;:::o;2697:98::-;2748:7;2770:20;:18;:20::i;:::-;2763:27;;2697:98;:::o;3317:197:6:-;-1:-1:-1;;;;;1898:6:6;1881:23;1889:4;1881:23;1873:80;;;;-1:-1:-1;;;1873:80:6;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:6;:20;:18;:20::i;:::-;-1:-1:-1;;;;;1971:30:6;;1963:87;;;;-1:-1:-1;;;1963:87:6;;;;;;;:::i;:::-;3400:36:::1;3418:17;3400;:36::i;:::-;3487:12;::::0;;3497:1:::1;3487:12:::0;;;::::1;::::0;::::1;::::0;;;3446:61:::1;::::0;3468:17;;3487:12;3446:21:::1;:61::i;:::-;3317:197:::0;:::o;5409:1050:24:-;5678:8;5659:15;:27;;5651:62;;;;-1:-1:-1;;;5651:62:24;;10934:2:30;5651:62:24;;;10916:21:30;10973:2;10953:18;;;10946:30;-1:-1:-1;;;10992:18:30;;;10985:52;11054:18;;5651:62:24;10732:346:30;5651:62:24;5843:21;;;;;;;;;;5791:91;;;2889:132;5791:91;;;11767:25:30;929:10:14;11808:18:30;;;11801:83;11900:18;;;11893:34;;;11943:18;;;11936:34;;;11986:19;;;11979:35;;;;12030:19;;;12023:35;;;12074:19;;;;12067:35;;;5791:91:24;;;;;;;;;;11739:19:30;;;;5791:91:24;;5774:114;;;;;5972:6;;-1:-1:-1;;;;;5972:6:24;5909:59;5934:28;5774:114;5934:16;:28::i;:::-;5964:3;5909:24;:59::i;:::-;-1:-1:-1;;;;;5909:69:24;;5894:141;;;;-1:-1:-1;;;5894:141:24;;;;;;;:::i;:::-;6073:21;;;;:14;:21;;;;;;;;6072:22;6064:62;;;;-1:-1:-1;;;6064:62:24;;12725:2:30;6064:62:24;;;12707:21:30;12764:2;12744:18;;;12737:30;12803:29;12783:18;;;12776:57;12850:18;;6064:62:24;12523:351:30;6064:62:24;6132:21;;;;:14;:21;;;;;;:28;;-1:-1:-1;;6132:28:24;6156:4;6132:28;;;6171:20;6147:5;;6171:20;;;6295:17;;:22;6291:94;;6327:51;;-1:-1:-1;;;6327:51:24;;-1:-1:-1;;;;;6342:6:24;6327:35;;;;:51;;6363:2;;6367:10;;6327:51;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6291:94;6390:64;;-1:-1:-1;;;6390:64:24;;-1:-1:-1;;;;;6407:5:24;6390:28;;;;:64;;6419:8;;6429:2;;6433:6;;6441:12;;6390:64;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5617:842;5409:1050;;;;;;;;:::o;3763:222:6:-;-1:-1:-1;;;;;1898:6:6;1881:23;1889:4;1881:23;1873:80;;;;-1:-1:-1;;;1873:80:6;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:6;:20;:18;:20::i;:::-;-1:-1:-1;;;;;1971:30:6;;1963:87;;;;-1:-1:-1;;;1963:87:6;;;;;;;:::i;:::-;3880:36:::1;3898:17;3880;:36::i;:::-;3926:52;3948:17;3967:4;3973;3926:21;:52::i;:::-;3763:222:::0;;:::o;3006:131::-;3084:7;2324:4;-1:-1:-1;;;;;2333:6:6;2316:23;;2308:92;;;;-1:-1:-1;;;2308:92:6;;16542:2:30;2308:92:6;;;16524:21:30;16581:2;16561:18;;;16554:30;16620:34;16600:18;;;16593:62;16691:26;16671:18;;;16664:54;16735:19;;2308:92:6;16340:420:30;2308:92:6;-1:-1:-1;1292:66:3::1;3006:131:6::0;:::o;2211:21:24:-;;;;;;;:::i;2071:101:1:-;1334:13;:11;:13::i;:::-;2135:30:::1;2162:1;2135:18;:30::i;:::-;2071:101::o:0;2010:206:0:-;1202:13;;929:10:14;;-1:-1:-1;;;;;1202:13:0;2103:24;;2095:78;;;;-1:-1:-1;;;2095:78:0;;16967:2:30;2095:78:0;;;16949:21:30;17006:2;16986:18;;;16979:30;17045:34;17025:18;;;17018:62;-1:-1:-1;;;17096:18:30;;;17089:39;17145:19;;2095:78:0;16765:405:30;2095:78:0;2183:26;2202:6;2183:18;:26::i;11442:311:24:-;-1:-1:-1;;;;;1898:6:6;1881:23;1889:4;1881:23;1873:80;;;;-1:-1:-1;;;1873:80:6;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:6;:20;:18;:20::i;:::-;-1:-1:-1;;;;;1971:30:6;;1963:87;;;;-1:-1:-1;;;1963:87:6;;;;;;;:::i;:::-;11557:39:24::1;::::0;-1:-1:-1;;;11557:39:24;;::::1;::::0;::::1;5631:25:30::0;;;11579:5:24::1;-1:-1:-1::0;;;;;11557:35:24::1;::::0;::::1;::::0;5604:18:30;;11557:39:24::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;11556:40;11548:81;;;::::0;-1:-1:-1;;;11548:81:24;;17841:2:30;11548:81:24::1;::::0;::::1;17823:21:30::0;17880:2;17860:18;;;17853:30;17919;17899:18;;;17892:58;17967:18;;11548:81:24::1;17639:352:30::0;11548:81:24::1;929:10:14::0;-1:-1:-1;;;;;11640:48:24::1;;11667:2;11671:6;11679:8;11640:48;;;;;;;;:::i;:::-;;;;;;;;11694:54;::::0;-1:-1:-1;;;11694:54:24;;929:10:14;11694:54:24::1;::::0;::::1;18563:74:30::0;18653:18;;;18646:34;;;18696:18;;;18689:34;;;11711:5:24::1;-1:-1:-1::0;;;;;11694:28:24::1;::::0;::::1;::::0;18536:18:30;;11694:54:24::1;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;11442:311:::0;;;:::o;1883:121::-;1334:13:1;:11;:13::i;:::-;1946:6:24::1;:18:::0;;-1:-1:-1;;;;;;1946:18:24::1;-1:-1:-1::0;;;;;1946:18:24;::::1;::::0;;::::1;::::0;;;1975:24:::1;::::0;::::1;::::0;-1:-1:-1;;1975:24:24::1;1883:121:::0;:::o;3321:441::-;3268:19:5;3291:13;;;;;;3290:14;;3336:34;;;;-1:-1:-1;3354:12:5;;3369:1;3354:12;;;;:16;3336:34;3335:108;;;-1:-1:-1;3415:4:5;1476:19:13;:23;;;3376:66:5;;-1:-1:-1;3425:12:5;;;;;:17;3376:66;3314:201;;;;-1:-1:-1;;;3314:201:5;;18936:2:30;3314:201:5;;;18918:21:30;18975:2;18955:18;;;18948:30;19014:34;18994:18;;;18987:62;-1:-1:-1;;;19065:18:30;;;19058:44;19119:19;;3314:201:5;18734:410:30;3314:201:5;3525:12;:16;;-1:-1:-1;;3525:16:5;3540:1;3525:16;;;3551:65;;;;3585:13;:20;;-1:-1:-1;;3585:20:5;;;;;3551:65;-1:-1:-1;;;;;1898:6:6::1;1881:23;1889:4;1881:23:::0;1873:80:::1;;;;-1:-1:-1::0;;;1873:80:6::1;;;;;;;:::i;:::-;1995:6;-1:-1:-1::0;;;;;1971:30:6::1;:20;:18;:20::i;:::-;-1:-1:-1::0;;;;;1971:30:6::1;;1963:87;;;;-1:-1:-1::0;;;1963:87:6::1;;;;;;;:::i;:::-;3500:32:24::2;3519:12;3500:18;:32::i;:::-;3564:24;:22;:24::i;:::-;3594:42;3608:11;3621:14;3594:13;:42::i;:::-;3642:4;:18;3649:11:::0;3642:4;:18:::2;:::i;:::-;-1:-1:-1::0;3666:7:24::2;:24;3676:14:::0;3666:7;:24:::2;:::i;:::-;-1:-1:-1::0;3696:6:24::2;:22:::0;;-1:-1:-1;;;;;;3696:22:24::2;-1:-1:-1::0;;;;;3696:22:24;::::2;::::0;;::::2;::::0;;;3729:28:::2;::::0;::::2;::::0;-1:-1:-1;;3729:28:24::2;3640:14:5::0;3636:99;;;3686:5;3670:21;;-1:-1:-1;;3670:21:5;;;3710:14;;-1:-1:-1;21505:36:30;;3710:14:5;;21493:2:30;21478:18;3710:14:5;;;;;;;3636:99;3258:483;3321:441:24;;;;:::o;12594:423::-;-1:-1:-1;;;;;1898:6:6;1881:23;1889:4;1881:23;1873:80;;;;-1:-1:-1;;;1873:80:6;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:6;:20;:18;:20::i;:::-;-1:-1:-1;;;;;1971:30:6;;1963:87;;;;-1:-1:-1;;;1963:87:6;;;;;;;:::i;:::-;12730:9:24::1;12725:161;12745:3;:10;12741:1;:14;12725:161;;;12810:5;-1:-1:-1::0;;;;;12788:35:24::1;;12824:3;12828:1;12824:6;;;;;;;;:::i;:::-;;;;;;;12788:43;;;;;;;;;;;;;5631:25:30::0;;5619:2;5604:18;;5485:177;12788:43:24::1;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;12787:44;12770:109;;;::::0;-1:-1:-1;;;12770:109:24;;17841:2:30;12770:109:24::1;::::0;::::1;17823:21:30::0;17880:2;17860:18;;;17853:30;17919;17899:18;;;17892:58;17967:18;;12770:109:24::1;17639:352:30::0;12770:109:24::1;12757:3:::0;::::1;::::0;::::1;:::i;:::-;;;;12725:161;;;-1:-1:-1::0;929:10:14;-1:-1:-1;;;;;12896:49:24::1;;12922:3;12927:7;12936:8;12896:49;;;;;;;;:::i;:::-;;;;;;;;12951:61;::::0;-1:-1:-1;;;12951:61:24;;12968:5:::1;-1:-1:-1::0;;;;;12951:33:24::1;::::0;::::1;::::0;:61:::1;::::0;929:10:14;;12999:3:24;;13004:7;;12951:61:::1;;;:::i;10204:427::-:0;10305:40;;;3276;10305;;;;22947:25:30;;;;22988:18;;;22981:34;;;10305:40:24;;;;;;;;;22920:18:30;;;;10305:40:24;;;10295:51;;;;;10430:6;;-1:-1:-1;;;;;10430:6:24;10367:59;10392:28;10295:51;10392:16;:28::i;10367:59::-;-1:-1:-1;;;;;10367:69:24;;10352:141;;;;-1:-1:-1;;;10352:141:24;;;;;;;:::i;:::-;10508:21;;;;:14;:21;;;;;;;;10507:22;10499:62;;;;-1:-1:-1;;;10499:62:24;;12725:2:30;10499:62:24;;;12707:21:30;12764:2;12744:18;;;12737:30;12803:29;12783:18;;;12776:57;12850:18;;10499:62:24;12523:351:30;10499:62:24;10567:21;;;;:14;:21;;;;;;:28;;-1:-1:-1;;10567:28:24;10591:4;10567:28;;;10606:20;10582:5;;10606:20;;;10268:363;10204:427;;:::o;1415:178:0:-;1334:13:1;:11;:13::i;:::-;1504::0::1;:24:::0;;-1:-1:-1;;;;;1504:24:0;::::1;-1:-1:-1::0;;;;;;1504:24:0;;::::1;::::0;::::1;::::0;;;1568:7:::1;1513:6:1::0;;-1:-1:-1;;;;;1513:6:1;;1441:85;1568:7:0::1;-1:-1:-1::0;;;;;1543:43:0::1;;;;;;;;;;;1415:178:::0;:::o;3899:176:18:-;3976:7;4002:66;4035:20;:18;:20::i;:::-;4057:10;8503:57:17;;-1:-1:-1;;;8503:57:17;;;25071:27:30;25114:11;;;25107:27;;;25150:12;;;25143:28;;;8467:7:17;;25187:12:30;;8503:57:17;;;;;;;;;;;;8493:68;;;;;;8486:75;;8374:194;;;;;4002:66:18;3995:73;3899:176;-1:-1:-1;;3899:176:18:o;3683:227:17:-;3761:7;3781:17;3800:18;3822:27;3833:4;3839:9;3822:10;:27::i;:::-;3780:69;;;;3859:18;3871:5;3859:11;:18::i;:::-;-1:-1:-1;3894:9:17;3683:227;-1:-1:-1;;;3683:227:17:o;2851:160:18:-;2904:7;2930:74;1604:95;2964:17;4395:12;;;4311:103;2964:17;4740:15;;2930:21;:74::i;1563:151:3:-;1292:66;1642:65;-1:-1:-1;;;;;1642:65:3;;1563:151::o;1327:66:24:-;1334:13:1;:11;:13::i;2938:974:3:-;951:66;3384:59;;;3380:526;;;3459:37;3478:17;3459:18;:37::i;:::-;2938:974;;;:::o;3380:526::-;3560:17;-1:-1:-1;;;;;3531:61:3;;:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3531:63:3;;;;;;;;-1:-1:-1;;3531:63:3;;;;;;;;;;;;:::i;:::-;;;3527:302;;3758:56;;-1:-1:-1;;;3758:56:3;;23417:2:30;3758:56:3;;;23399:21:30;23456:2;23436:18;;;23429:30;23495:34;23475:18;;;23468:62;-1:-1:-1;;;23546:18:30;;;23539:44;23600:19;;3758:56:3;23215:410:30;3527:302:3;1292:66;3644:28;;3636:82;;;;-1:-1:-1;;;3636:82:3;;23832:2:30;3636:82:3;;;23814:21:30;23871:2;23851:18;;;23844:30;23910:34;23890:18;;;23883:62;-1:-1:-1;;;23961:18:30;;;23954:39;24010:19;;3636:82:3;23630:405:30;3636:82:3;3595:138;3842:53;3860:17;3879:4;3885:9;3842:17;:53::i;1599:130:1:-;1513:6;;-1:-1:-1;;;;;1513:6:1;929:10:14;1662:23:1;1654:68;;;;-1:-1:-1;;;1654:68:1;;24242:2:30;1654:68:1;;;24224:21:30;;;24261:18;;;24254:30;24320:34;24300:18;;;24293:62;24372:18;;1654:68:1;24040:356:30;1777:153:0;1866:13;1859:20;;-1:-1:-1;;;;;;1859:20:0;;;1889:34;1914:8;1889:24;:34::i;1042:67:6:-;5363:13:5;;;;;;;5355:69;;;;-1:-1:-1;;;5355:69:5;;;;;;;:::i;2315:147:18:-;5363:13:5;;;;;;;5355:69;;;;-1:-1:-1;;;5355:69:5;;;;;;;:::i;:::-;2417:38:18::1;2441:4;2447:7;2417:23;:38::i;2167:730:17:-:0;2248:7;2257:12;2285:9;:16;2305:2;2285:22;2281:610;;2621:4;2606:20;;2600:27;2670:4;2655:20;;2649:27;2727:4;2712:20;;2706:27;2323:9;2698:36;2768:25;2779:4;2698:36;2600:27;2649;2768:10;:25::i;:::-;2761:32;;;;;;;;;2281:610;-1:-1:-1;2840:1:17;;-1:-1:-1;2844:35:17;2281:610;2167:730;;;;;:::o;592:511::-;669:20;660:5;:29;;;;;;;;:::i;:::-;;656:441;;592:511;:::o;656:441::-;765:29;756:5;:38;;;;;;;;:::i;:::-;;752:345;;810:34;;-1:-1:-1;;;810:34:17;;25544:2:30;810:34:17;;;25526:21:30;25583:2;25563:18;;;25556:30;25622:26;25602:18;;;25595:54;25666:18;;810:34:17;25342:348:30;752:345:17;874:35;865:5;:44;;;;;;;;:::i;:::-;;861:236;;925:41;;-1:-1:-1;;;925:41:17;;25897:2:30;925:41:17;;;25879:21:30;25936:2;25916:18;;;25909:30;25975:33;25955:18;;;25948:61;26026:18;;925:41:17;25695:355:30;861:236:17;996:30;987:5;:39;;;;;;;;:::i;:::-;;983:114;;1042:44;;-1:-1:-1;;;1042:44:17;;26257:2:30;1042:44:17;;;26239:21:30;26296:2;26276:18;;;26269:30;26335:34;26315:18;;;26308:62;-1:-1:-1;;;26386:18:30;;;26379:32;26428:19;;1042:44:17;26055:398:30;3017:257:18;3193:73;;;;;;26717:25:30;;;26758:18;;;26751:34;;;26801:18;;;26794:34;;;3237:13:18;26844:18:30;;;26837:34;3260:4:18;26887:19:30;;;26880:84;3157:7:18;;26689:19:30;;3193:73:18;;;;;;;;;;;;3183:84;;;;;;3176:91;;3017:257;;;;;;:::o;1805:281:3:-;-1:-1:-1;;;;;1476:19:13;;;1878:106:3;;;;-1:-1:-1;;;1878:106:3;;27177:2:30;1878:106:3;;;27159:21:30;27216:2;27196:18;;;27189:30;27255:34;27235:18;;;27228:62;-1:-1:-1;;;27306:18:30;;;27299:43;27359:19;;1878:106:3;26975:409:30;1878:106:3;1292:66;1994:85;;-1:-1:-1;;;;;;1994:85:3;-1:-1:-1;;;;;1994:85:3;;;;;;;;;;1805:281::o;2478:288::-;2616:29;2627:17;2616:10;:29::i;:::-;2673:1;2659:4;:11;:15;:28;;;;2678:9;2659:28;2655:105;;;2703:46;2725:17;2744:4;2703:21;:46::i;:::-;;2478:288;;;:::o;2673:187:1:-;2765:6;;;-1:-1:-1;;;;;2781:17:1;;;-1:-1:-1;;;;;;2781:17:1;;;;;;;2813:40;;2765:6;;;2781:17;2765:6;;2813:40;;2746:16;;2813:40;2736:124;2673:187;:::o;2468:297:18:-;5363:13:5;;;;;;;5355:69;;;;-1:-1:-1;;;5355:69:5;;;;;;;:::i;:::-;2601:22:18;;::::1;::::0;;::::1;::::0;2657:25;;;;;::::1;::::0;2692:12:::1;:25:::0;;;;2727:15:::1;:31:::0;2468:297::o;5091:1494:17:-;5217:7;;6141:66;6128:79;;6124:161;;;-1:-1:-1;6239:1:17;;-1:-1:-1;6243:30:17;6223:51;;6124:161;6396:24;;;6379:14;6396:24;;;;;;;;;27616:25:30;;;27689:4;27677:17;;27657:18;;;27650:45;;;;27711:18;;;27704:34;;;27754:18;;;27747:34;;;6396:24:17;;27588:19:30;;6396:24:17;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6396:24:17;;-1:-1:-1;;6396:24:17;;;-1:-1:-1;;;;;;;6434:20:17;;6430:101;;6486:1;6490:29;6470:50;;;;;;;6430:101;6549:6;-1:-1:-1;6557:20:17;;-1:-1:-1;5091:1494:17;;;;;;;;:::o;2192:152:3:-;2258:37;2277:17;2258:18;:37::i;:::-;2310:27;;-1:-1:-1;;;;;2310:27:3;;;;;;;;2192:152;:::o;7088:455::-;7171:12;-1:-1:-1;;;;;1476:19:13;;;7195:88:3;;;;-1:-1:-1;;;7195:88:3;;27994:2:30;7195:88:3;;;27976:21:30;28033:2;28013:18;;;28006:30;28072:34;28052:18;;;28045:62;-1:-1:-1;;;28123:18:30;;;28116:36;28169:19;;7195:88:3;27792:402:30;7195:88:3;7354:12;7368:23;7395:6;-1:-1:-1;;;;;7395:19:3;7415:4;7395:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7353:67;;;;7437:99;7473:7;7482:10;7437:99;;;;;;;;;;;;;;;;;:35;:99::i;:::-;7430:106;7088:455;-1:-1:-1;;;;;7088:455:3:o;7438:295:13:-;7584:12;7612:7;7608:119;;;-1:-1:-1;7642:10:13;7635:17;;7608:119;7683:33;7691:10;7703:12;7898:17;;:21;7894:379;;8126:10;8120:17;8182:15;8169:10;8165:2;8161:19;8154:44;7894:379;8249:12;8242:20;;-1:-1:-1;;;8242:20:13;;;;;;;;:::i;14:250:30:-;99:1;109:113;123:6;120:1;117:13;109:113;;;199:11;;;193:18;180:11;;;173:39;145:2;138:10;109:113;;;-1:-1:-1;;256:1:30;238:16;;231:27;14:250::o;269:271::-;311:3;349:5;343:12;376:6;371:3;364:19;392:76;461:6;454:4;449:3;445:14;438:4;431:5;427:16;392:76;:::i;:::-;522:2;501:15;-1:-1:-1;;497:29:30;488:39;;;;529:4;484:50;;269:271;-1:-1:-1;;269:271:30:o;545:220::-;694:2;683:9;676:21;657:4;714:45;755:2;744:9;740:18;732:6;714:45;:::i;770:180::-;829:6;882:2;870:9;861:7;857:23;853:32;850:52;;;898:1;895;888:12;850:52;-1:-1:-1;921:23:30;;770:180;-1:-1:-1;770:180:30:o;1147:196::-;1215:20;;-1:-1:-1;;;;;1264:54:30;;1254:65;;1244:93;;1333:1;1330;1323:12;1244:93;1147:196;;;:::o;1348:127::-;1409:10;1404:3;1400:20;1397:1;1390:31;1440:4;1437:1;1430:15;1464:4;1461:1;1454:15;1480:275;1551:2;1545:9;1616:2;1597:13;;-1:-1:-1;;1593:27:30;1581:40;;1651:18;1636:34;;1672:22;;;1633:62;1630:88;;;1698:18;;:::i;:::-;1734:2;1727:22;1480:275;;-1:-1:-1;1480:275:30:o;1760:183::-;1820:4;1853:18;1845:6;1842:30;1839:56;;;1875:18;;:::i;:::-;-1:-1:-1;1920:1:30;1916:14;1932:4;1912:25;;1760:183::o;1948:662::-;2002:5;2055:3;2048:4;2040:6;2036:17;2032:27;2022:55;;2073:1;2070;2063:12;2022:55;2109:6;2096:20;2135:4;2159:60;2175:43;2215:2;2175:43;:::i;:::-;2159:60;:::i;:::-;2253:15;;;2339:1;2335:10;;;;2323:23;;2319:32;;;2284:12;;;;2363:15;;;2360:35;;;2391:1;2388;2381:12;2360:35;2427:2;2419:6;2415:15;2439:142;2455:6;2450:3;2447:15;2439:142;;;2521:17;;2509:30;;2559:12;;;;2472;;2439:142;;;-1:-1:-1;2599:5:30;1948:662;-1:-1:-1;;;;;;1948:662:30:o;2615:530::-;2657:5;2710:3;2703:4;2695:6;2691:17;2687:27;2677:55;;2728:1;2725;2718:12;2677:55;2764:6;2751:20;2790:18;2786:2;2783:26;2780:52;;;2812:18;;:::i;:::-;2856:55;2899:2;2880:13;;-1:-1:-1;;2876:27:30;2905:4;2872:38;2856:55;:::i;:::-;2936:2;2927:7;2920:19;2982:3;2975:4;2970:2;2962:6;2958:15;2954:26;2951:35;2948:55;;;2999:1;2996;2989:12;2948:55;3064:2;3057:4;3049:6;3045:17;3038:4;3029:7;3025:18;3012:55;3112:1;3087:16;;;3105:4;3083:27;3076:38;;;;3091:7;2615:530;-1:-1:-1;;;2615:530:30:o;3150:886::-;3202:5;3255:3;3248:4;3240:6;3236:17;3232:27;3222:55;;3273:1;3270;3263:12;3222:55;3309:6;3296:20;3335:4;3359:60;3375:43;3415:2;3375:43;:::i;3359:60::-;3453:15;;;3539:1;3535:10;;;;3523:23;;3519:32;;;3484:12;;;;3563:15;;;3560:35;;;3591:1;3588;3581:12;3560:35;3627:2;3619:6;3615:15;3639:368;3655:6;3650:3;3647:15;3639:368;;;3741:3;3728:17;3777:18;3764:11;3761:35;3758:125;;;3837:1;3866:2;3862;3855:14;3758:125;3908:56;3960:3;3955:2;3941:11;3933:6;3929:24;3925:33;3908:56;:::i;:::-;3896:69;;-1:-1:-1;3985:12:30;;;;3672;;3639:368;;4041:1439;4265:6;4273;4281;4289;4297;4305;4313;4321;4374:3;4362:9;4353:7;4349:23;4345:33;4342:53;;;4391:1;4388;4381:12;4342:53;4414:29;4433:9;4414:29;:::i;:::-;4404:39;;4494:2;4483:9;4479:18;4466:32;4517:18;4558:2;4550:6;4547:14;4544:34;;;4574:1;4571;4564:12;4544:34;4597:61;4650:7;4641:6;4630:9;4626:22;4597:61;:::i;:::-;4587:71;;4711:2;4700:9;4696:18;4683:32;4667:48;;4740:2;4730:8;4727:16;4724:36;;;4756:1;4753;4746:12;4724:36;4779:63;4834:7;4823:8;4812:9;4808:24;4779:63;:::i;:::-;4769:73;;4895:2;4884:9;4880:18;4867:32;4851:48;;4924:2;4914:8;4911:16;4908:36;;;4940:1;4937;4930:12;4908:36;4963:51;5006:7;4995:8;4984:9;4980:24;4963:51;:::i;:::-;4953:61;;5067:3;5056:9;5052:19;5039:33;5023:49;;5097:2;5087:8;5084:16;5081:36;;;5113:1;5110;5103:12;5081:36;5136:61;5189:7;5178:8;5167:9;5163:24;5136:61;:::i;:::-;5126:71;;5244:3;5233:9;5229:19;5216:33;5206:43;;5296:3;5285:9;5281:19;5268:33;5258:43;;5354:3;5343:9;5339:19;5326:33;5310:49;;5384:2;5374:8;5371:16;5368:36;;;5400:1;5397;5390:12;5368:36;;5423:51;5466:7;5455:8;5444:9;5440:24;5423:51;:::i;:::-;5413:61;;;4041:1439;;;;;;;;;;;:::o;5667:186::-;5726:6;5779:2;5767:9;5758:7;5754:23;5750:32;5747:52;;;5795:1;5792;5785:12;5747:52;5818:29;5837:9;5818:29;:::i;5858:1088::-;6007:6;6015;6023;6031;6039;6047;6055;6063;6116:3;6104:9;6095:7;6091:23;6087:33;6084:53;;;6133:1;6130;6123:12;6084:53;6156:29;6175:9;6156:29;:::i;:::-;6146:39;;6232:2;6221:9;6217:18;6204:32;6194:42;;6283:2;6272:9;6268:18;6255:32;6245:42;;6338:2;6327:9;6323:18;6310:32;6361:18;6402:2;6394:6;6391:14;6388:34;;;6418:1;6415;6408:12;6388:34;6441:49;6482:7;6473:6;6462:9;6458:22;6441:49;:::i;:::-;6431:59;;6543:3;6532:9;6528:19;6515:33;6499:49;;6573:2;6563:8;6560:16;6557:36;;;6589:1;6586;6579:12;6557:36;6612:51;6655:7;6644:8;6633:9;6629:24;6612:51;:::i;6951:394::-;7028:6;7036;7089:2;7077:9;7068:7;7064:23;7060:32;7057:52;;;7105:1;7102;7095:12;7057:52;7128:29;7147:9;7128:29;:::i;:::-;7118:39;;7208:2;7197:9;7193:18;7180:32;7235:18;7227:6;7224:30;7221:50;;;7267:1;7264;7257:12;7221:50;7290:49;7331:7;7322:6;7311:9;7307:22;7290:49;:::i;:::-;7280:59;;;6951:394;;;;;:::o;7581:456::-;7667:6;7675;7683;7736:2;7724:9;7715:7;7711:23;7707:32;7704:52;;;7752:1;7749;7742:12;7704:52;7788:9;7775:23;7765:33;;7845:2;7834:9;7830:18;7817:32;7807:42;;7900:2;7889:9;7885:18;7872:32;7927:18;7919:6;7916:30;7913:50;;;7959:1;7956;7949:12;7913:50;7982:49;8023:7;8014:6;8003:9;7999:22;7982:49;:::i;:::-;7972:59;;;7581:456;;;;;:::o;8042:690::-;8148:6;8156;8164;8172;8225:3;8213:9;8204:7;8200:23;8196:33;8193:53;;;8242:1;8239;8232:12;8193:53;8282:9;8269:23;8311:18;8352:2;8344:6;8341:14;8338:34;;;8368:1;8365;8358:12;8338:34;8391:49;8432:7;8423:6;8412:9;8408:22;8391:49;:::i;:::-;8381:59;;8493:2;8482:9;8478:18;8465:32;8449:48;;8522:2;8512:8;8509:16;8506:36;;;8538:1;8535;8528:12;8506:36;;8561:51;8604:7;8593:8;8582:9;8578:24;8561:51;:::i;:::-;8551:61;;;8631:38;8665:2;8654:9;8650:18;8631:38;:::i;:::-;8621:48;;8688:38;8722:2;8711:9;8707:18;8688:38;:::i;:::-;8678:48;;8042:690;;;;;;;:::o;8737:793::-;8873:6;8881;8889;8942:2;8930:9;8921:7;8917:23;8913:32;8910:52;;;8958:1;8955;8948:12;8910:52;8998:9;8985:23;9027:18;9068:2;9060:6;9057:14;9054:34;;;9084:1;9081;9074:12;9054:34;9107:61;9160:7;9151:6;9140:9;9136:22;9107:61;:::i;:::-;9097:71;;9221:2;9210:9;9206:18;9193:32;9177:48;;9250:2;9240:8;9237:16;9234:36;;;9266:1;9263;9256:12;9234:36;9289:63;9344:7;9333:8;9322:9;9318:24;9289:63;:::i;:::-;9279:73;;9405:2;9394:9;9390:18;9377:32;9361:48;;9434:2;9424:8;9421:16;9418:36;;;9450:1;9447;9440:12;9418:36;;9473:51;9516:7;9505:8;9494:9;9490:24;9473:51;:::i;9535:388::-;9612:6;9620;9673:2;9661:9;9652:7;9648:23;9644:32;9641:52;;;9689:1;9686;9679:12;9641:52;9725:9;9712:23;9702:33;;9786:2;9775:9;9771:18;9758:32;9813:18;9805:6;9802:30;9799:50;;;9845:1;9842;9835:12;9928:380;10007:1;10003:12;;;;10050;;;10071:61;;10125:4;10117:6;10113:17;10103:27;;10071:61;10178:2;10170:6;10167:14;10147:18;10144:38;10141:161;;10224:10;10219:3;10215:20;10212:1;10205:31;10259:4;10256:1;10249:15;10287:4;10284:1;10277:15;10141:161;;9928:380;;;:::o;11083:127::-;11144:10;11139:3;11135:20;11132:1;11125:31;11175:4;11172:1;11165:15;11199:4;11196:1;11189:15;11215:232;11254:3;11275:17;;;11272:140;;11334:10;11329:3;11325:20;11322:1;11315:31;11369:4;11366:1;11359:15;11397:4;11394:1;11387:15;11272:140;-1:-1:-1;11439:1:30;11428:13;;11215:232::o;12113:405::-;12315:2;12297:21;;;12354:2;12334:18;;;12327:30;12393:34;12388:2;12373:18;;12366:62;-1:-1:-1;;;12459:2:30;12444:18;;12437:39;12508:3;12493:19;;12113:405::o;12879:289::-;13054:6;13043:9;13036:25;13097:2;13092;13081:9;13077:18;13070:30;13017:4;13117:45;13158:2;13147:9;13143:18;13135:6;13117:45;:::i;:::-;13109:53;12879:289;-1:-1:-1;;;;12879:289:30:o;13173:435::-;13226:3;13264:5;13258:12;13291:6;13286:3;13279:19;13317:4;13346:2;13341:3;13337:12;13330:19;;13383:2;13376:5;13372:14;13404:1;13414:169;13428:6;13425:1;13422:13;13414:169;;;13489:13;;13477:26;;13523:12;;;;13558:15;;;;13450:1;13443:9;13414:169;;;-1:-1:-1;13599:3:30;;13173:435;-1:-1:-1;;;;;13173:435:30:o;13613:748::-;-1:-1:-1;;;;;13948:6:30;13944:55;13933:9;13926:74;14036:3;14031:2;14020:9;14016:18;14009:31;13907:4;14063:57;14115:3;14104:9;14100:19;14092:6;14063:57;:::i;:::-;14168:9;14160:6;14156:22;14151:2;14140:9;14136:18;14129:50;14202:44;14239:6;14231;14202:44;:::i;:::-;14188:58;;14294:9;14286:6;14282:22;14277:2;14266:9;14262:18;14255:50;14322:33;14348:6;14340;14322:33;:::i;:::-;14314:41;13613:748;-1:-1:-1;;;;;;;13613:748:30:o;14366:408::-;14568:2;14550:21;;;14607:2;14587:18;;;14580:30;14646:34;14641:2;14626:18;;14619:62;-1:-1:-1;;;14712:2:30;14697:18;;14690:42;14764:3;14749:19;;14366:408::o;14779:::-;14981:2;14963:21;;;15020:2;15000:18;;;14993:30;15059:34;15054:2;15039:18;;15032:62;-1:-1:-1;;;15125:2:30;15110:18;;15103:42;15177:3;15162:19;;14779:408::o;15853:482::-;-1:-1:-1;;;;;16088:6:30;16084:55;16073:9;16066:74;16176:6;16171:2;16160:9;16156:18;16149:34;16219:6;16214:2;16203:9;16199:18;16192:34;16262:3;16257:2;16246:9;16242:18;16235:31;16047:4;16283:46;16324:3;16313:9;16309:19;16301:6;16283:46;:::i;:::-;16275:54;15853:482;-1:-1:-1;;;;;;15853:482:30:o;17357:277::-;17424:6;17477:2;17465:9;17456:7;17452:23;17448:32;17445:52;;;17493:1;17490;17483:12;17445:52;17525:9;17519:16;17578:5;17571:13;17564:21;17557:5;17554:32;17544:60;;17600:1;17597;17590:12;17996:360;18199:6;18188:9;18181:25;18242:6;18237:2;18226:9;18222:18;18215:34;18285:2;18280;18269:9;18265:18;18258:30;18162:4;18305:45;18346:2;18335:9;18331:18;18323:6;18305:45;:::i;19275:545::-;19377:2;19372:3;19369:11;19366:448;;;19413:1;19438:5;19434:2;19427:17;19483:4;19479:2;19469:19;19553:2;19541:10;19537:19;19534:1;19530:27;19524:4;19520:38;19589:4;19577:10;19574:20;19571:47;;;-1:-1:-1;19612:4:30;19571:47;19667:2;19662:3;19658:12;19655:1;19651:20;19645:4;19641:31;19631:41;;19722:82;19740:2;19733:5;19730:13;19722:82;;;19785:17;;;19766:1;19755:13;19722:82;;;19726:3;;;19275:545;;;:::o;19996:1352::-;20122:3;20116:10;20149:18;20141:6;20138:30;20135:56;;;20171:18;;:::i;:::-;20200:97;20290:6;20250:38;20282:4;20276:11;20250:38;:::i;:::-;20244:4;20200:97;:::i;:::-;20352:4;;20416:2;20405:14;;20433:1;20428:663;;;;21135:1;21152:6;21149:89;;;-1:-1:-1;21204:19:30;;;21198:26;21149:89;-1:-1:-1;;19953:1:30;19949:11;;;19945:24;19941:29;19931:40;19977:1;19973:11;;;19928:57;21251:81;;20398:944;;20428:663;19222:1;19215:14;;;19259:4;19246:18;;-1:-1:-1;;20464:20:30;;;20582:236;20596:7;20593:1;20590:14;20582:236;;;20685:19;;;20679:26;20664:42;;20777:27;;;;20745:1;20733:14;;;;20612:19;;20582:236;;;20586:3;20846:6;20837:7;20834:19;20831:201;;;20907:19;;;20901:26;-1:-1:-1;;20990:1:30;20986:14;;;21002:3;20982:24;20978:37;20974:42;20959:58;20944:74;;20831:201;-1:-1:-1;;;;;21078:1:30;21062:14;;;21058:22;21045:36;;-1:-1:-1;19996:1352:30:o;21552:626::-;21855:2;21844:9;21837:21;21818:4;21881:56;21933:2;21922:9;21918:18;21910:6;21881:56;:::i;:::-;21985:9;21977:6;21973:22;21968:2;21957:9;21953:18;21946:50;22019:44;22056:6;22048;22019:44;:::i;:::-;22005:58;;22111:9;22103:6;22099:22;22094:2;22083:9;22079:18;22072:50;22139:33;22165:6;22157;22139:33;:::i;22183:585::-;-1:-1:-1;;;;;22472:6:30;22468:55;22457:9;22450:74;22560:2;22555;22544:9;22540:18;22533:30;22431:4;22586:56;22638:2;22627:9;22623:18;22615:6;22586:56;:::i;:::-;22690:9;22682:6;22678:22;22673:2;22662:9;22658:18;22651:50;22718:44;22755:6;22747;22718:44;:::i;23026:184::-;23096:6;23149:2;23137:9;23128:7;23124:23;23120:32;23117:52;;;23165:1;23162;23155:12;23117:52;-1:-1:-1;23188:16:30;;23026:184;-1:-1:-1;23026:184:30:o;24401:407::-;24603:2;24585:21;;;24642:2;24622:18;;;24615:30;24681:34;24676:2;24661:18;;24654:62;-1:-1:-1;;;24747:2:30;24732:18;;24725:41;24798:3;24783:19;;24401:407::o;25210:127::-;25271:10;25266:3;25262:20;25259:1;25252:31;25302:4;25299:1;25292:15;25326:4;25323:1;25316:15;28199:287;28328:3;28366:6;28360:13;28382:66;28441:6;28436:3;28429:4;28421:6;28417:17;28382:66;:::i;:::-;28464:16;;;;;28199:287;-1:-1:-1;;28199:287:30:o"},"gasEstimates":{"creation":{"codeDepositCost":"2227800","executionCost":"infinite","totalCost":"infinite"},"external":{"CONSUMENONCE_TYPEHASH()":"328","DOMAIN_SEPARATOR()":"infinite","MINTBATCH_TYPEHASH()":"306","MINT_TYPEHASH()":"283","acceptOwnership()":"infinite","bridge()":"2426","burn(uint256,uint256,bytes)":"infinite","burnBatch(uint256[],uint256[],bytes)":"infinite","consumeNonce(bytes32,bytes)":"infinite","consumedNonces(bytes32)":"2496","initialize(string,string,address,address)":"infinite","mint(address,uint256,uint256,bytes,bytes,uint256,bytes32,bytes)":"infinite","mintBatch(address,uint256[],uint256[],bytes,bytes[],uint256,bytes32,bytes)":"infinite","name()":"infinite","oracle()":"infinite","owner()":"2376","pendingOwner()":"2398","proxiableUUID()":"infinite","renounceOwnership()":"infinite","setBridge(address)":"27941","token()":"infinite","transferOwnership(address)":"30481","upgradeTo(address)":"infinite","upgradeToAndCall(address,bytes)":"infinite","version()":"infinite"},"internal":{"_authorizeUpgrade(address)":"infinite","_hashArray(uint256[] memory)":"infinite"}},"methodIdentifiers":{"CONSUMENONCE_TYPEHASH()":"ce89a040","DOMAIN_SEPARATOR()":"3644e515","MINTBATCH_TYPEHASH()":"b3c9ed59","MINT_TYPEHASH()":"f76fc35e","acceptOwnership()":"79ba5097","bridge()":"e78cea92","burn(uint256,uint256,bytes)":"80a5a371","burnBatch(uint256[],uint256[],bytes)":"e090fa3c","consumeNonce(bytes32,bytes)":"e922ba79","consumedNonces(bytes32)":"10dbebce","initialize(string,string,address,address)":"8f15b414","mint(address,uint256,uint256,bytes,bytes,uint256,bytes32,bytes)":"36b09227","mintBatch(address,uint256[],uint256[],bytes,bytes[],uint256,bytes32,bytes)":"163c50ac","name()":"06fdde03","oracle()":"7dc0d1d0","owner()":"8da5cb5b","pendingOwner()":"e30c3978","proxiableUUID()":"52d1902d","renounceOwnership()":"715018a6","setBridge(address)":"8dd14802","token()":"fc0c546a","transferOwnership(address)":"f2fde38b","upgradeTo(address)":"3659cfe6","upgradeToAndCall(address,bytes)":"4f1ef286","version()":"54fd4d50"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBridge\",\"type\":\"address\"}],\"name\":\"BridgeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"BurnedBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"BurnedSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"name\":\"NonceConsumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONSUMENONCE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTBATCH_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"consumeNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"consumedNonces\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"initialName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"initialVersion\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"initialBridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"transferData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"oracleData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"transferData\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"oracleDatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBridge\",\"type\":\"address\"}],\"name\":\"setBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is upgradeable. You can only append new contracts to the list of bases. You cannot delete bases or reorder them.\",\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"burn(uint256,uint256,bytes)\":{\"details\":\"JasmineMinter must be approved to spend the caller's EATs for the operation to succeed. JasmineMinter indirectly authenticates that the caller owns the specified amount of the specified EATs.\",\"params\":{\"amount\":\"The amount of EAT of the specified series to be redeemed/bridged-off.\",\"id\":\"The series of EAT to be redeemed/bridged-off.\",\"metadata\":\"Message to the bridge specifying whether to redeem or bridge-off. If the operation is a bridge-off, also specifies the destination of the EAC. JasmineMinter imposes no authentication or structure on the metadata. Malformed or otherwise invalid metadata is an unrecoverable error.\"}},\"burnBatch(uint256[],uint256[],bytes)\":{\"details\":\"JasmineMinter must be approved to spend the caller's EATs for the operation to succeed. JasmineMinter indirectly authenticates that the caller owns the specified amount of the specified EATs.\",\"params\":{\"amounts\":\"The amounts of EATs of the specified series to be redeemed/bridged-off.\",\"ids\":\"The series of EATs to be redeemed/bridged-off.\",\"metadata\":\"Message to the bridge specifying whether to redeem or bridge-off. If the operation is a bridge-off, also specifies the destination of the EAC. JasmineMinter imposes no authentication or structure on the metadata. Malformed or otherwise invalid metadata is an unrecoverable error.\"}},\"mint(address,uint256,uint256,bytes,bytes,uint256,bytes32,bytes)\":{\"params\":{\"amount\":\"The quantity of EATs to mint. The amount is part of the EIP712 minting authorization.\",\"deadline\":\"The latest timestamp at which the mint authorization remains valid. After this time, attempts to mint will revert. The deadline is part of the EIP712 minting authorization.\",\"id\":\"The identifier of the EAT series to mint. See JasmineOracle for the constraints on this value. The id is part of the EIP712 minting authorization.\",\"nonce\":\"Used to prevent signature replay. The nonce is part of the EIP712 minting authorization. If consumedNonces(nonce), the minting authorization is invalid.\",\"oracleData\":\"Authenticated EAT metadata passed to the oracle. Oracle updates are idempotent. The oracleData is part of the EIP712 minting authorization.\",\"receiver\":\"The initial owner of the newly-minted EATs. If this is a contract, it must support IERC1155Receiver.onERC1155Received. Failure of the receiver callback does not invalidate the nonce. The receiver is NOT part of the EIP712 minting authorization.\",\"sig\":\"Encoded ECDSA signature by `bridge` over the EIP712 minting authorization. Formed as the 65-byte concatenation of r, s, and v in that order. s must be in the lower half of the curve. v must be 27 or 28.\",\"transferData\":\"Additional argument to be passed to `receiver`'s callback. Ignored if `receiver` is not a contract. The transferData is NOT part of the EIP712 minting authorization.\"}},\"mintBatch(address,uint256[],uint256[],bytes,bytes[],uint256,bytes32,bytes)\":{\"params\":{\"amounts\":\"The quantities of EATs to mint. The amounts are part of the EIP712 minting authorization.\",\"deadline\":\"The latest timestamp at which the mint authorization remains valid. After this time, attempts to mint will revert. The deadline is part of the EIP712 minting authorization.\",\"ids\":\"The identifiers of the EAT series to mint. See JasmineOracle for the constraints on this value. The ids are part of the EIP712 minting authorization.\",\"nonce\":\"Used to prevent signature replay. The nonce is part of the EIP712 minting authorization. If consumedNonces(nonce), the minting authorization is invalid.\",\"oracleDatas\":\"Authenticated EAT metadatas passed to the oracle. Oracle updates are idempotent. The oracleData is part of the EIP712 minting authorization.\",\"receiver\":\"The initial owner of the newly-minted EATs. If this is a contract, it must support IERC1155Receiver.onERC1155Received. Failure of the receiver callback does not invalidate the nonce. The receiver is NOT part of the EIP712 minting authorization.\",\"sig\":\"Encoded ECDSA signature by `bridge` over the EIP712 minting authorization. Formed as the 65-byte concatenation of r, s, and v in that order. s must be in the lower half of the curve. v must be 27 or 28.\",\"transferData\":\"Additional argument to be passed to `receiver`'s callback. Ignored if `receiver` is not a contract. The transferData is NOT part of the EIP712 minting authorization.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"Reserved storage gap. LINK: https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"},\"bridge\":{\"details\":\"This is the wallet/EOA address that authorizes minting new EATs. This is a separate authority from the right to upgrade protocol contracts.\"},\"consumedNonces\":{\"details\":\"This contract uses non-sequential nonces so that multiple mint authorizations can be issued concurrently. The downside to this approach is that it is slightly more involved to invalidate a nonce that has not yet been consumed.\"},\"name\":{\"details\":\"This is the EIP712 domain name. It is exposed here for ease of introspection.\"},\"version\":{\"details\":\"This is the EIP712 domain version. It is exposed here for ease of introspection.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"notice\":\"This is the EIP712 domain separator. It is exposed here for ease of introspection.\"},\"burn(uint256,uint256,bytes)\":{\"notice\":\"Used in both redemption and bridge-off flows.\"},\"burnBatch(uint256[],uint256[],bytes)\":{\"notice\":\"Used in both redemption and bridge-off flows.\"},\"consumeNonce(bytes32,bytes)\":{\"notice\":\"Used to invalidate a nonce embedded in another EIP712 minting authorization.\"},\"consumedNonces(bytes32)\":{\"notice\":\"Whether a particular nonce has been used to prevent replay.\"},\"mint(address,uint256,uint256,bytes,bytes,uint256,bytes32,bytes)\":{\"notice\":\"Mint a new EAT.Only callable by the address specified in the EIP712 mint authoriztaion.\"},\"mintBatch(address,uint256[],uint256[],bytes,bytes[],uint256,bytes32,bytes)\":{\"notice\":\"Mint a new EAT.Only callable by the address specified in the EIP712 mint authoriztaion.\"},\"setBridge(address)\":{\"notice\":\"When the bridge wallet/EOA is migrated, the owner updates the bridge address.\"}},\"notice\":\"This contract is responsible for validating that the bridge has authorized an EAT mint.This contract also updates the oracle with EAT metadata during each mint.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/JasmineMinter.sol\":\"JasmineMinter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() external {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd712fb45b3ea0ab49679164e3895037adc26ce12879d5184feb040e01c1c07a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x12f297cafe6e2847ae0378502f155654d0764b532a9873c8afe4350950fa7971\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x3017aded62c4a2b9707f5f06f92934e592c1c9b6f384b91b51340a6d5f841931\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"src/JasmineMinter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport {\\n  Ownable2StepUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\nimport {\\n  UUPSUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {\\n  EIP712Upgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\\\";\\nimport {\\n  ECDSAUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport {IJasmineOracle} from \\\"./interfaces/IJasmineOracle.sol\\\";\\nimport {IERC1155Burnable} from \\\"./interfaces/IERC1155Burnable.sol\\\";\\nimport {IERC1155Mintable} from \\\"./interfaces/IERC1155Mintable.sol\\\";\\nimport {IJasmineEATExtensions} from \\\"./interfaces/IJasmineEATExtensions.sol\\\";\\n\\n/// @dev This contract is upgradeable. You can only append new contracts to the list of bases. You cannot delete bases or reorder them.\\n/// @notice This contract is responsible for validating that the bridge has authorized an EAT mint.\\n/// @notice This contract also updates the oracle with EAT metadata during each mint.\\ncontract JasmineMinter is Ownable2StepUpgradeable, UUPSUpgradeable, EIP712Upgradeable {\\n  /// @dev We use the `Ownable` owner for upgrades, not the ERC1967 admin. The ERC1967 admin is not used by this contract.\\n  function _authorizeUpgrade(address) internal override onlyOwner {}\\n\\n  address public immutable token;\\n  address public immutable oracle;\\n\\n  constructor(address _token, address _oracle) {\\n    token = _token;\\n    oracle = _oracle;\\n  }\\n\\n  /// @dev This is the wallet/EOA address that authorizes minting new EATs. This is a separate authority from the right to upgrade protocol contracts.\\n  address public bridge;\\n\\n  event BridgeChanged(address indexed newBridge);\\n\\n  /// @notice When the bridge wallet/EOA is migrated, the owner updates the bridge address.\\n  function setBridge(address newBridge) external onlyOwner {\\n    bridge = newBridge;\\n    emit BridgeChanged(newBridge);\\n  }\\n\\n  /// @dev This is the EIP712 domain name. It is exposed here for ease of introspection.\\n  string public name;\\n  /// @dev This is the EIP712 domain version. It is exposed here for ease of introspection.\\n  string public version;\\n\\n  /// @notice Whether a particular nonce has been used to prevent replay.\\n  /// @dev This contract uses non-sequential nonces so that multiple mint authorizations can be issued concurrently. The downside to this approach is that it is slightly more involved to invalidate a nonce that has not yet been consumed.\\n  mapping(bytes32 => bool) public consumedNonces;\\n\\n  /// @notice This is the EIP712 domain separator. It is exposed here for ease of introspection.\\n  function DOMAIN_SEPARATOR() external view returns (bytes32) {\\n    return _domainSeparatorV4();\\n  }\\n\\n  // These are the EIP712 struct type hashes.\\n  bytes32 public constant MINT_TYPEHASH =\\n    keccak256(\\n      \\\"MintAuthorization(address minter,uint256 id,uint256 amount,bytes oracleData,uint256 deadline,bytes32 nonce)\\\"\\n    );\\n  bytes32 public constant MINTBATCH_TYPEHASH =\\n    keccak256(\\n      \\\"MintBatchAuthorization(address minter,uint256[] ids,uint256[] amounts,bytes[] oracleDatas,uint256 deadline,bytes32 nonce)\\\"\\n    );\\n  bytes32 public constant CONSUMENONCE_TYPEHASH =\\n    keccak256(\\\"ConsumeNonce(bytes32 nonce)\\\");\\n\\n  function initialize(\\n    string memory initialName,\\n    string memory initialVersion,\\n    address initialBridge,\\n    address initialOwner\\n  ) external initializer onlyProxy {\\n    _transferOwnership(initialOwner); // __Ownable2Step_init();\\n    __UUPSUpgradeable_init();\\n    __EIP712_init(initialName, initialVersion);\\n    name = initialName;\\n    version = initialVersion;\\n    bridge = initialBridge;\\n    emit BridgeChanged(initialBridge);\\n  }\\n\\n  event NonceConsumed(bytes32 indexed nonce);\\n\\n  /// @notice Mint a new EAT.\\n  /// @notice Only callable by the address specified in the EIP712 mint authoriztaion.\\n  /// @param receiver The initial owner of the newly-minted EATs. If this is a contract, it must support IERC1155Receiver.onERC1155Received. Failure of the receiver callback does not invalidate the nonce. The receiver is NOT part of the EIP712 minting authorization.\\n  /// @param id The identifier of the EAT series to mint. See JasmineOracle for the constraints on this value. The id is part of the EIP712 minting authorization.\\n  /// @param amount The quantity of EATs to mint. The amount is part of the EIP712 minting authorization.\\n  /// @param transferData Additional argument to be passed to `receiver`'s callback. Ignored if `receiver` is not a contract. The transferData is NOT part of the EIP712 minting authorization.\\n  /// @param oracleData Authenticated EAT metadata passed to the oracle. Oracle updates are idempotent. The oracleData is part of the EIP712 minting authorization.\\n  /// @param deadline The latest timestamp at which the mint authorization remains valid. After this time, attempts to mint will revert. The deadline is part of the EIP712 minting authorization.\\n  /// @param nonce Used to prevent signature replay. The nonce is part of the EIP712 minting authorization. If consumedNonces(nonce), the minting authorization is invalid.\\n  /// @param sig Encoded ECDSA signature by `bridge` over the EIP712 minting authorization. Formed as the 65-byte concatenation of r, s, and v in that order. s must be in the lower half of the curve. v must be 27 or 28.\\n  function mint(\\n    address receiver,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory transferData,\\n    bytes memory oracleData,\\n    uint256 deadline,\\n    bytes32 nonce,\\n    bytes memory sig\\n  ) external {\\n    // Check for expiration\\n    require(block.timestamp <= deadline, \\\"JasmineMinter: expired\\\");\\n    // Check the EIP712 signature\\n    bytes32 structHash = keccak256(\\n      abi.encode(MINT_TYPEHASH, _msgSender(), id, amount, keccak256(oracleData), deadline, nonce)\\n    );\\n    require(\\n      ECDSAUpgradeable.recover(_hashTypedDataV4(structHash), sig) == bridge,\\n      \\\"JasmineMinter: bad signature/wrong signer\\\"\\n    );\\n    // Check the nonce\\n    require(!consumedNonces[nonce], \\\"JasmineMinter: nonce replay\\\");\\n    consumedNonces[nonce] = true;\\n    emit NonceConsumed(nonce);\\n    // `oracle` is a trusted contract, so we don't need to follow checks-effects-interactions\\n    if (oracleData.length != 0) {\\n      IJasmineOracle(oracle).updateSeries(id, oracleData);\\n    }\\n    IERC1155Mintable(token).mint(receiver, id, amount, transferData);\\n  }\\n\\n  function _hashArray(uint256[] memory a) internal pure returns (bytes32 result) {\\n    assembly (\\\"memory-safe\\\") {\\n      result := keccak256(add(0x20, a), shl(5, mload(a)))\\n    }\\n  }\\n\\n  /// @notice Mint a new EAT.\\n  /// @notice Only callable by the address specified in the EIP712 mint authoriztaion.\\n  /// @param receiver The initial owner of the newly-minted EATs. If this is a contract, it must support IERC1155Receiver.onERC1155Received. Failure of the receiver callback does not invalidate the nonce. The receiver is NOT part of the EIP712 minting authorization.\\n  /// @param ids The identifiers of the EAT series to mint. See JasmineOracle for the constraints on this value. The ids are part of the EIP712 minting authorization.\\n  /// @param amounts The quantities of EATs to mint. The amounts are part of the EIP712 minting authorization.\\n  /// @param transferData Additional argument to be passed to `receiver`'s callback. Ignored if `receiver` is not a contract. The transferData is NOT part of the EIP712 minting authorization.\\n  /// @param oracleDatas Authenticated EAT metadatas passed to the oracle. Oracle updates are idempotent. The oracleData is part of the EIP712 minting authorization.\\n  /// @param deadline The latest timestamp at which the mint authorization remains valid. After this time, attempts to mint will revert. The deadline is part of the EIP712 minting authorization.\\n  /// @param nonce Used to prevent signature replay. The nonce is part of the EIP712 minting authorization. If consumedNonces(nonce), the minting authorization is invalid.\\n  /// @param sig Encoded ECDSA signature by `bridge` over the EIP712 minting authorization. Formed as the 65-byte concatenation of r, s, and v in that order. s must be in the lower half of the curve. v must be 27 or 28.\\n  function mintBatch(\\n    address receiver,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory transferData,\\n    bytes[] memory oracleDatas,\\n    uint256 deadline,\\n    bytes32 nonce,\\n    bytes memory sig\\n  ) external {\\n    // We don't check `ids.length == amounts.length` because `token` will do\\n    // that for us.\\n    require(\\n      ids.length == oracleDatas.length,\\n      \\\"JasmineMinter: ids and oracleDatas length mismatch\\\"\\n    );\\n    // Check for expiration\\n    require(block.timestamp <= deadline, \\\"JasmineMinter: expired\\\");\\n\\n    // Hashing an array of bytes for EIP712 is obnoxious. We have to store the\\n    // array of hashes of bytes and then hash *that* to get the appropriate\\n    // value to feed into the struct hash.\\n    uint256[] memory oracleDataHashes = new uint256[](oracleDatas.length);\\n    for (uint256 i; i < oracleDatas.length; i++) {\\n      oracleDataHashes[i] = uint256(keccak256(oracleDatas[i]));\\n    }\\n    bytes32 structHash = keccak256(\\n      abi.encode(\\n        MINTBATCH_TYPEHASH,\\n        _msgSender(),\\n        _hashArray(ids),\\n        _hashArray(amounts),\\n        _hashArray(oracleDataHashes),\\n        deadline,\\n        nonce\\n      )\\n    );\\n    require(\\n      ECDSAUpgradeable.recover(_hashTypedDataV4(structHash), sig) == bridge,\\n      \\\"JasmineMinter: bad signature/wrong signer\\\"\\n    );\\n\\n    require(!consumedNonces[nonce], \\\"JasmineMinter: nonce replay\\\");\\n    consumedNonces[nonce] = true;\\n    emit NonceConsumed(nonce);\\n\\n    // oracle is a trusted contract, so we don't need to follow checks-effects-interactions\\n    for (uint256 i; i < oracleDatas.length; i++) {\\n      bytes memory oracleData = oracleDatas[i];\\n      if (oracleData.length != 0) {\\n        IJasmineOracle(oracle).updateSeries(ids[i], oracleData);\\n      }\\n    }\\n    IERC1155Mintable(token).mintBatch(receiver, ids, amounts, transferData);\\n  }\\n\\n  /// @notice Used to invalidate a nonce embedded in another EIP712 minting authorization.\\n  function consumeNonce(bytes32 nonce, bytes memory sig) external {\\n    bytes32 structHash = keccak256(abi.encode(CONSUMENONCE_TYPEHASH, nonce));\\n    require(\\n      ECDSAUpgradeable.recover(_hashTypedDataV4(structHash), sig) == bridge,\\n      \\\"JasmineMinter: bad signature/wrong signer\\\"\\n    );\\n    require(!consumedNonces[nonce], \\\"JasmineMinter: nonce replay\\\");\\n    consumedNonces[nonce] = true;\\n    emit NonceConsumed(nonce);\\n  }\\n\\n  event BurnedSingle(address indexed owner, uint256 id, uint256 amount, bytes metadata);\\n\\n  /// @notice Used in both redemption and bridge-off flows.\\n  /// @dev JasmineMinter must be approved to spend the caller's EATs for the operation to succeed. JasmineMinter indirectly authenticates that the caller owns the specified amount of the specified EATs.\\n  /// @param id The series of EAT to be redeemed/bridged-off.\\n  /// @param amount The amount of EAT of the specified series to be redeemed/bridged-off.\\n  /// @param metadata Message to the bridge specifying whether to redeem or bridge-off. If the operation is a bridge-off, also specifies the destination of the EAC. JasmineMinter imposes no authentication or structure on the metadata. Malformed or otherwise invalid metadata is an unrecoverable error.\\n  function burn(\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory metadata\\n  ) external onlyProxy {\\n    require(!IJasmineEATExtensions(token).frozen(id), \\\"JasmineMinter: frozen series\\\");\\n    emit BurnedSingle(_msgSender(), id, amount, metadata);\\n    IERC1155Burnable(token).burn(_msgSender(), id, amount);\\n  }\\n\\n  event BurnedBatch(\\n    address indexed owner,\\n    uint256[] ids,\\n    uint256[] amounts,\\n    bytes metadata\\n  );\\n\\n  /// @notice Used in both redemption and bridge-off flows.\\n  /// @dev JasmineMinter must be approved to spend the caller's EATs for the operation to succeed. JasmineMinter indirectly authenticates that the caller owns the specified amount of the specified EATs.\\n  /// @param ids The series of EATs to be redeemed/bridged-off.\\n  /// @param amounts The amounts of EATs of the specified series to be redeemed/bridged-off.\\n  /// @param metadata Message to the bridge specifying whether to redeem or bridge-off. If the operation is a bridge-off, also specifies the destination of the EAC. JasmineMinter imposes no authentication or structure on the metadata. Malformed or otherwise invalid metadata is an unrecoverable error.\\n  function burnBatch(\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory metadata\\n  ) external onlyProxy {\\n    for (uint256 i; i < ids.length; i++) {\\n      require(\\n        !IJasmineEATExtensions(token).frozen(ids[i]),\\n        \\\"JasmineMinter: frozen series\\\"\\n      );\\n    }\\n    emit BurnedBatch(_msgSender(), ids, amounts, metadata);\\n    IERC1155Burnable(token).burnBatch(_msgSender(), ids, amounts);\\n  }\\n\\n  /// @dev Reserved storage gap. LINK: https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n  uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x698f9abe01ae8be5459ae7f6e96ce50ddeaa842a7473fed70e531c4acdeccc6d\",\"license\":\"BUSL-1.1\"},\"src/interfaces/IERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\ninterface IERC1155Burnable {\\n  function burn(\\n    address account,\\n    uint256 id,\\n    uint256 value\\n  ) external;\\n\\n  function burnBatch(\\n    address account,\\n    uint256[] memory ids,\\n    uint256[] memory values\\n  ) external;\\n}\\n\",\"keccak256\":\"0x4abeec733217ccdd0b97c7b175bc504219e87b76cd8d16bbf45b2e07a170ef81\",\"license\":\"BUSL-1.1\"},\"src/interfaces/IERC1155Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\ninterface IERC1155Mintable {\\n  function mint(\\n    address to,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory data\\n  ) external;\\n\\n  function mintBatch(\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) external;\\n}\\n\",\"keccak256\":\"0xc10e0624828b4a87707b79e828a6c20bbfa918080e8e3d81654f8600289c8d1a\",\"license\":\"BUSL-1.1\"},\"src/interfaces/IJasmineEATExtensions.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\ninterface IJasmineEATExtensions {\\n  function frozen(uint256) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x997989399c52edffdd87ef845ec2a370c060ce7eca7170d1b2123be047d9d8a8\",\"license\":\"BUSL-1.1\"},\"src/interfaces/IJasmineOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\ninterface IJasmineOracle {\\n  // This function takes a `bytes` instead of something more structure to allow\\n  // the minter and the oracle to be upgraded separately. If desire, future\\n  // upgrades can apply more structure here.\\n  function updateSeries(uint256 id, bytes memory encodedMetadata) external;\\n}\\n\",\"keccak256\":\"0x638a7d4cb538ff93fac3a961f2ba5ef4eeb2ec14fc8a38057e20b0bc7848c71b\",\"license\":\"BUSL-1.1\"}},\"version\":1}","storageLayout":{"storage":[{"astId":633,"contract":"src/JasmineMinter.sol:JasmineMinter","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":636,"contract":"src/JasmineMinter.sol:JasmineMinter","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2945,"contract":"src/JasmineMinter.sol:JasmineMinter","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":116,"contract":"src/JasmineMinter.sol:JasmineMinter","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":236,"contract":"src/JasmineMinter.sol:JasmineMinter","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":25,"contract":"src/JasmineMinter.sol:JasmineMinter","label":"_pendingOwner","offset":0,"slot":"101","type":"t_address"},{"astId":104,"contract":"src/JasmineMinter.sol:JasmineMinter","label":"__gap","offset":0,"slot":"102","type":"t_array(t_uint256)49_storage"},{"astId":615,"contract":"src/JasmineMinter.sol:JasmineMinter","label":"__gap","offset":0,"slot":"151","type":"t_array(t_uint256)50_storage"},{"astId":930,"contract":"src/JasmineMinter.sol:JasmineMinter","label":"__gap","offset":0,"slot":"201","type":"t_array(t_uint256)50_storage"},{"astId":3551,"contract":"src/JasmineMinter.sol:JasmineMinter","label":"_HASHED_NAME","offset":0,"slot":"251","type":"t_bytes32"},{"astId":3553,"contract":"src/JasmineMinter.sol:JasmineMinter","label":"_HASHED_VERSION","offset":0,"slot":"252","type":"t_bytes32"},{"astId":3691,"contract":"src/JasmineMinter.sol:JasmineMinter","label":"__gap","offset":0,"slot":"253","type":"t_array(t_uint256)50_storage"},{"astId":5348,"contract":"src/JasmineMinter.sol:JasmineMinter","label":"bridge","offset":0,"slot":"303","type":"t_address"},{"astId":5372,"contract":"src/JasmineMinter.sol:JasmineMinter","label":"name","offset":0,"slot":"304","type":"t_string_storage"},{"astId":5375,"contract":"src/JasmineMinter.sol:JasmineMinter","label":"version","offset":0,"slot":"305","type":"t_string_storage"},{"astId":5380,"contract":"src/JasmineMinter.sol:JasmineMinter","label":"consumedNonces","offset":0,"slot":"306","type":"t_mapping(t_bytes32,t_bool)"},{"astId":5917,"contract":"src/JasmineMinter.sol:JasmineMinter","label":"__gap","offset":0,"slot":"307","type":"t_array(t_uint256)50_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_bytes32,t_bool)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bool)","numberOfBytes":"32","value":"t_bool"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{"DOMAIN_SEPARATOR()":{"notice":"This is the EIP712 domain separator. It is exposed here for ease of introspection."},"burn(uint256,uint256,bytes)":{"notice":"Used in both redemption and bridge-off flows."},"burnBatch(uint256[],uint256[],bytes)":{"notice":"Used in both redemption and bridge-off flows."},"consumeNonce(bytes32,bytes)":{"notice":"Used to invalidate a nonce embedded in another EIP712 minting authorization."},"consumedNonces(bytes32)":{"notice":"Whether a particular nonce has been used to prevent replay."},"mint(address,uint256,uint256,bytes,bytes,uint256,bytes32,bytes)":{"notice":"Mint a new EAT.Only callable by the address specified in the EIP712 mint authoriztaion."},"mintBatch(address,uint256[],uint256[],bytes,bytes[],uint256,bytes32,bytes)":{"notice":"Mint a new EAT.Only callable by the address specified in the EIP712 mint authoriztaion."},"setBridge(address)":{"notice":"When the bridge wallet/EOA is migrated, the owner updates the bridge address."}},"notice":"This contract is responsible for validating that the bridge has authorized an EAT mint.This contract also updates the oracle with EAT metadata during each mint.","version":1}}},"src/JasmineOracle.sol":{"JasmineOracle":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"newMinter","type":"address"}],"name":"MinterChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferStarted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"inputs":[],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"getUUID","outputs":[{"internalType":"uint128","name":"","type":"uint128"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"query","type":"uint256"}],"name":"hasCertificateType","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"query","type":"uint256"}],"name":"hasEndorsement","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"query","type":"uint256"}],"name":"hasFuel","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"query","type":"uint256"}],"name":"hasRegistry","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"min","type":"uint256"},{"internalType":"uint256","name":"max","type":"uint256"}],"name":"hasVintage","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"initialMinter","type":"address"},{"internalType":"address","name":"initialOwner","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"minter","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pendingOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newMinter","type":"address"}],"name":"setMinter","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"bytes","name":"encodedMetadata","type":"bytes"}],"name":"updateSeries","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"}],"name":"upgradeTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"details":"This contract is upgradeable. You can only append new contracts to the list of bases. You cannot delete bases or reorder them.","kind":"dev","methods":{"acceptOwnership()":{"details":"The new owner accepts the ownership transfer."},"owner()":{"details":"Returns the address of the current owner."},"pendingOwner()":{"details":"Returns the address of the pending owner."},"proxiableUUID()":{"details":"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."},"upgradeTo(address)":{"details":"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."},"upgradeToAndCall(address,bytes)":{"details":"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."}},"stateVariables":{"__gap":{"details":"Reserved storage gap. LINK: https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60a06040523060805234801561001457600080fd5b506080516116a561005a60003960008181610679015281816106b9015281816108180152818161085801528181610972015281816109b20152610a4501526116a56000f3fe6080604052600436106101095760003560e01c8063715018a611610095578063d7c9d1c511610064578063d7c9d1c514610313578063e30c397814610333578063f2fde38b14610351578063f776e98d14610371578063fca3b5aa146103ab57600080fd5b8063715018a61461028957806379ba50971461029e5780638da5cb5b146102b3578063bc5f8ccd146102d157600080fd5b80634ce78e5f116100dc5780634ce78e5f146101ad5780634f1ef286146101fb57806352d1902d1461020e57806354e69d0e1461023157806369cffd171461025157600080fd5b8063075461721461010e57806307e3810c1461014b5780633659cfe61461016d578063485cc9551461018d575b600080fd5b34801561011a57600080fd5b5060fb5461012e906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561015757600080fd5b5061016b6101663660046112f7565b6103cb565b005b34801561017957600080fd5b5061016b61018836600461135a565b61066f565b34801561019957600080fd5b5061016b6101a8366004611375565b61074e565b3480156101b957600080fd5b506101eb6101c83660046113a8565b600091825260fc60205260409091205465010000000000900463ffffffff161490565b6040519015158152602001610142565b61016b6102093660046113ca565b610968565b34801561021a57600080fd5b50610223610a38565b604051908152602001610142565b34801561023d57600080fd5b506101eb61024c366004611402565b610aeb565b34801561025d57600080fd5b5061027161026c36600461142e565b610b16565b6040516001600160801b039091168152602001610142565b34801561029557600080fd5b5061016b610b2c565b3480156102aa57600080fd5b5061016b610b40565b3480156102bf57600080fd5b506033546001600160a01b031661012e565b3480156102dd57600080fd5b506101eb6102ec3660046113a8565b600091825260fc6020526040909120546901000000000000000000900463ffffffff161490565b34801561031f57600080fd5b506101eb61032e3660046113a8565b610bb7565b34801561033f57600080fd5b506065546001600160a01b031661012e565b34801561035d57600080fd5b5061016b61036c36600461135a565b610bcf565b34801561037d57600080fd5b506101eb61038c3660046113a8565b600091825260fc602052604090912054610100900463ffffffff161490565b3480156103b757600080fd5b5061016b6103c636600461135a565b610c40565b6103d3610c92565b60008060006103e185610cfc565b92509250925060008060008060008060008a806020019051810190610406919061145b565b96509650965096509650965096508660ff1660011461047c5760405162461bcd60e51b815260206004820152602760248201527f4a61736d696e654f7261636c653a20696e76616c6964206d65746164617461206044820152663b32b939b4b7b760c91b60648201526084015b60405180910390fd5b856001600160801b03168a146104d45760405162461bcd60e51b815260206004820152601c60248201527f4a61736d696e654f7261636c653a2055554944206d69736d61746368000000006044820152606401610473565b8463ffffffff1689146105295760405162461bcd60e51b815260206004820181905260248201527f4a61736d696e654f7261636c653a207265676973747279206d69736d617463686044820152606401610473565b8364ffffffffff16881461057f5760405162461bcd60e51b815260206004820152601f60248201527f4a61736d696e654f7261636c653a2076696e74616765206d69736d61746368006044820152606401610473565b60405180608001604052808860ff1681526020018463ffffffff1681526020018363ffffffff1681526020018263ffffffff1681525060fc60008e815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160056101000a81548163ffffffff021916908363ffffffff16021790555060608201518160000160096101000a81548163ffffffff021916908363ffffffff160217905550905050505050505050505050505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036106b75760405162461bcd60e51b815260040161047390611504565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610700600080516020611629833981519152546001600160a01b031690565b6001600160a01b0316146107265760405162461bcd60e51b815260040161047390611550565b61072f81610d78565b6040805160008082526020820190925261074b91839190610d80565b50565b600054610100900460ff161580801561076e5750600054600160ff909116105b806107885750303b158015610788575060005460ff166001145b6107eb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610473565b6000805460ff19166001179055801561080e576000805461ff0019166101001790555b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036108565760405162461bcd60e51b815260040161047390611504565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661089f600080516020611629833981519152546001600160a01b031690565b6001600160a01b0316146108c55760405162461bcd60e51b815260040161047390611550565b6108ce82610eeb565b6108d6610f04565b60fb80546001600160a01b0319166001600160a01b0385169081179091556040517fb6b8f1859c5c352e5ffad07d0f77e384ac725512c015bd3a3ffc885831c8a42590600090a28015610963576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036109b05760405162461bcd60e51b815260040161047390611504565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109f9600080516020611629833981519152546001600160a01b031690565b6001600160a01b031614610a1f5760405162461bcd60e51b815260040161047390611550565b610a2882610d78565b610a3482826001610d80565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610ad85760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610473565b5060008051602061162983398151915290565b600080610af785610cfc565b92505050838110158015610b0b5750828111155b9150505b9392505050565b600080610b2283610cfc565b5090949350505050565b610b34610f6f565b610b3e6000610eeb565b565b60655433906001600160a01b03168114610bae5760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b6064820152608401610473565b61074b81610eeb565b600080610bc384610cfc565b50909314949350505050565b610bd7610f6f565b606580546001600160a01b0383166001600160a01b03199091168117909155610c086033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b610c48610f6f565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040517fb6b8f1859c5c352e5ffad07d0f77e384ac725512c015bd3a3ffc885831c8a42590600090a250565b60fb546001600160a01b03163314610b3e5760405162461bcd60e51b815260206004820152602760248201527f4a61736d696e654f7261636c653a2063616c6c6572206973206e6f74207468656044820152661036b4b73a32b960c91b6064820152608401610473565b608081901c606082901c63ffffffff16603883901c64ffffffffff1666ffffffffffffff84168015610d705760405162461bcd60e51b815260206004820152601960248201527f4a61736d696e654f7261636c653a20696e76616c6964204944000000000000006044820152606401610473565b509193909250565b61074b610f6f565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610db35761096383610fc9565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610e0d575060408051601f3d908101601f19168201909252610e0a9181019061159c565b60015b610e705760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610473565b6000805160206116298339815191528114610edf5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610473565b50610963838383611065565b606580546001600160a01b031916905561074b81611090565b600054610100900460ff16610b3e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610473565b6033546001600160a01b03163314610b3e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610473565b6001600160a01b0381163b6110365760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610473565b60008051602061162983398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61106e836110e2565b60008251118061107b5750805b156109635761108a8383611122565b50505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6110eb81610fc9565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b61118a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610473565b600080846001600160a01b0316846040516111a591906115d9565b600060405180830381855af49150503d80600081146111e0576040519150601f19603f3d011682016040523d82523d6000602084013e6111e5565b606091505b509150915061120d828260405180606001604052806027815260200161164960279139611216565b95945050505050565b60608315611225575081610b0f565b610b0f838381511561123a5781518083602001fd5b8060405162461bcd60e51b815260040161047391906115f5565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261127b57600080fd5b813567ffffffffffffffff8082111561129657611296611254565b604051601f8301601f19908116603f011681019082821181831017156112be576112be611254565b816040528381528660208588010111156112d757600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561130a57600080fd5b82359150602083013567ffffffffffffffff81111561132857600080fd5b6113348582860161126a565b9150509250929050565b80356001600160a01b038116811461135557600080fd5b919050565b60006020828403121561136c57600080fd5b610b0f8261133e565b6000806040838503121561138857600080fd5b6113918361133e565b915061139f6020840161133e565b90509250929050565b600080604083850312156113bb57600080fd5b50508035926020909101359150565b600080604083850312156113dd57600080fd5b6113e68361133e565b9150602083013567ffffffffffffffff81111561132857600080fd5b60008060006060848603121561141757600080fd5b505081359360208301359350604090920135919050565b60006020828403121561144057600080fd5b5035919050565b805163ffffffff8116811461135557600080fd5b600080600080600080600060e0888a03121561147657600080fd5b875160ff8116811461148757600080fd5b60208901519097506001600160801b03811681146114a457600080fd5b95506114b260408901611447565b9450606088015164ffffffffff811681146114cc57600080fd5b93506114da60808901611447565b92506114e860a08901611447565b91506114f660c08901611447565b905092959891949750929550565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6000602082840312156115ae57600080fd5b5051919050565b60005b838110156115d05781810151838201526020016115b8565b50506000910152565b600082516115eb8184602087016115b5565b9190910192915050565b60208152600082518060208401526116148160408501602087016115b5565b601f01601f1916919091016040019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220f2948a1079833271495f9104f10561680c703d3119093500abc8c82751c12ad864736f6c63430008110033","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE ADDRESS PUSH1 0x80 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x80 MLOAD PUSH2 0x16A5 PUSH2 0x5A PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x679 ADD MSTORE DUP2 DUP2 PUSH2 0x6B9 ADD MSTORE DUP2 DUP2 PUSH2 0x818 ADD MSTORE DUP2 DUP2 PUSH2 0x858 ADD MSTORE DUP2 DUP2 PUSH2 0x972 ADD MSTORE DUP2 DUP2 PUSH2 0x9B2 ADD MSTORE PUSH2 0xA45 ADD MSTORE PUSH2 0x16A5 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x109 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xD7C9D1C5 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xD7C9D1C5 EQ PUSH2 0x313 JUMPI DUP1 PUSH4 0xE30C3978 EQ PUSH2 0x333 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x351 JUMPI DUP1 PUSH4 0xF776E98D EQ PUSH2 0x371 JUMPI DUP1 PUSH4 0xFCA3B5AA EQ PUSH2 0x3AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x289 JUMPI DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x29E JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2B3 JUMPI DUP1 PUSH4 0xBC5F8CCD EQ PUSH2 0x2D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4CE78E5F GT PUSH2 0xDC JUMPI DUP1 PUSH4 0x4CE78E5F EQ PUSH2 0x1AD JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x1FB JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0x20E JUMPI DUP1 PUSH4 0x54E69D0E EQ PUSH2 0x231 JUMPI DUP1 PUSH4 0x69CFFD17 EQ PUSH2 0x251 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7546172 EQ PUSH2 0x10E JUMPI DUP1 PUSH4 0x7E3810C EQ PUSH2 0x14B JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x16D JUMPI DUP1 PUSH4 0x485CC955 EQ PUSH2 0x18D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x11A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xFB SLOAD PUSH2 0x12E SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x157 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16B PUSH2 0x166 CALLDATASIZE PUSH1 0x4 PUSH2 0x12F7 JUMP JUMPDEST PUSH2 0x3CB JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x179 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16B PUSH2 0x188 CALLDATASIZE PUSH1 0x4 PUSH2 0x135A JUMP JUMPDEST PUSH2 0x66F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x199 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16B PUSH2 0x1A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1375 JUMP JUMPDEST PUSH2 0x74E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1EB PUSH2 0x1C8 CALLDATASIZE PUSH1 0x4 PUSH2 0x13A8 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0xFC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD PUSH6 0x10000000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND EQ SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x142 JUMP JUMPDEST PUSH2 0x16B PUSH2 0x209 CALLDATASIZE PUSH1 0x4 PUSH2 0x13CA JUMP JUMPDEST PUSH2 0x968 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x21A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x223 PUSH2 0xA38 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x142 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x23D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1EB PUSH2 0x24C CALLDATASIZE PUSH1 0x4 PUSH2 0x1402 JUMP JUMPDEST PUSH2 0xAEB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x25D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x271 PUSH2 0x26C CALLDATASIZE PUSH1 0x4 PUSH2 0x142E JUMP JUMPDEST PUSH2 0xB16 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x142 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x295 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16B PUSH2 0xB2C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16B PUSH2 0xB40 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x12E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1EB PUSH2 0x2EC CALLDATASIZE PUSH1 0x4 PUSH2 0x13A8 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0xFC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD PUSH10 0x1000000000000000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND EQ SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x31F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1EB PUSH2 0x32E CALLDATASIZE PUSH1 0x4 PUSH2 0x13A8 JUMP JUMPDEST PUSH2 0xBB7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x33F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x12E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x35D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16B PUSH2 0x36C CALLDATASIZE PUSH1 0x4 PUSH2 0x135A JUMP JUMPDEST PUSH2 0xBCF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x37D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1EB PUSH2 0x38C CALLDATASIZE PUSH1 0x4 PUSH2 0x13A8 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0xFC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD PUSH2 0x100 SWAP1 DIV PUSH4 0xFFFFFFFF AND EQ SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16B PUSH2 0x3C6 CALLDATASIZE PUSH1 0x4 PUSH2 0x135A JUMP JUMPDEST PUSH2 0xC40 JUMP JUMPDEST PUSH2 0x3D3 PUSH2 0xC92 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x3E1 DUP6 PUSH2 0xCFC JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP11 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x406 SWAP2 SWAP1 PUSH2 0x145B JUMP JUMPDEST SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP DUP7 PUSH1 0xFF AND PUSH1 0x1 EQ PUSH2 0x47C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4A61736D696E654F7261636C653A20696E76616C6964206D6574616461746120 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x3B32B939B4B7B7 PUSH1 0xC9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP11 EQ PUSH2 0x4D4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4A61736D696E654F7261636C653A2055554944206D69736D6174636800000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x473 JUMP JUMPDEST DUP5 PUSH4 0xFFFFFFFF AND DUP10 EQ PUSH2 0x529 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4A61736D696E654F7261636C653A207265676973747279206D69736D61746368 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x473 JUMP JUMPDEST DUP4 PUSH5 0xFFFFFFFFFF AND DUP9 EQ PUSH2 0x57F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4A61736D696E654F7261636C653A2076696E74616765206D69736D6174636800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x473 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH4 0xFFFFFFFF AND DUP2 MSTORE POP PUSH1 0xFC PUSH1 0x0 DUP15 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x5 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x9 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0x6B7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x473 SWAP1 PUSH2 0x1504 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x700 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1629 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x726 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x473 SWAP1 PUSH2 0x1550 JUMP JUMPDEST PUSH2 0x72F DUP2 PUSH2 0xD78 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x74B SWAP2 DUP4 SWAP2 SWAP1 PUSH2 0xD80 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x76E JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x788 JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x788 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x7EB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x473 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x80E JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0x856 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x473 SWAP1 PUSH2 0x1504 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x89F PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1629 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x8C5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x473 SWAP1 PUSH2 0x1550 JUMP JUMPDEST PUSH2 0x8CE DUP3 PUSH2 0xEEB JUMP JUMPDEST PUSH2 0x8D6 PUSH2 0xF04 JUMP JUMPDEST PUSH1 0xFB DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0xB6B8F1859C5C352E5FFAD07D0F77E384AC725512C015BD3A3FFC885831C8A425 SWAP1 PUSH1 0x0 SWAP1 LOG2 DUP1 ISZERO PUSH2 0x963 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0x9B0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x473 SWAP1 PUSH2 0x1504 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x9F9 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1629 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xA1F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x473 SWAP1 PUSH2 0x1550 JUMP JUMPDEST PUSH2 0xA28 DUP3 PUSH2 0xD78 JUMP JUMPDEST PUSH2 0xA34 DUP3 DUP3 PUSH1 0x1 PUSH2 0xD80 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0xAD8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x473 JUMP JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1629 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xAF7 DUP6 PUSH2 0xCFC JUMP JUMPDEST SWAP3 POP POP POP DUP4 DUP2 LT ISZERO DUP1 ISZERO PUSH2 0xB0B JUMPI POP DUP3 DUP2 GT ISZERO JUMPDEST SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xB22 DUP4 PUSH2 0xCFC JUMP JUMPDEST POP SWAP1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xB34 PUSH2 0xF6F JUMP JUMPDEST PUSH2 0xB3E PUSH1 0x0 PUSH2 0xEEB JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x65 SLOAD CALLER SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 EQ PUSH2 0xBAE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C6532537465703A2063616C6C6572206973206E6F742074686520 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x3732BB9037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x473 JUMP JUMPDEST PUSH2 0x74B DUP2 PUSH2 0xEEB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xBC3 DUP5 PUSH2 0xCFC JUMP JUMPDEST POP SWAP1 SWAP4 EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xBD7 PUSH2 0xF6F JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH2 0xC08 PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x38D16B8CAC22D99FC7C124B9CD0DE2D3FA1FAEF420BFE791D8C362D765E22700 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH2 0xC48 PUSH2 0xF6F JUMP JUMPDEST PUSH1 0xFB DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0xB6B8F1859C5C352E5FFAD07D0F77E384AC725512C015BD3A3FFC885831C8A425 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0xFB SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xB3E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4A61736D696E654F7261636C653A2063616C6C6572206973206E6F7420746865 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x1036B4B73A32B9 PUSH1 0xC9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x473 JUMP JUMPDEST PUSH1 0x80 DUP2 SWAP1 SHR PUSH1 0x60 DUP3 SWAP1 SHR PUSH4 0xFFFFFFFF AND PUSH1 0x38 DUP4 SWAP1 SHR PUSH5 0xFFFFFFFFFF AND PUSH7 0xFFFFFFFFFFFFFF DUP5 AND DUP1 ISZERO PUSH2 0xD70 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4A61736D696E654F7261636C653A20696E76616C696420494400000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x473 JUMP JUMPDEST POP SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST PUSH2 0x74B PUSH2 0xF6F JUMP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xDB3 JUMPI PUSH2 0x963 DUP4 PUSH2 0xFC9 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xE0D JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xE0A SWAP2 DUP2 ADD SWAP1 PUSH2 0x159C JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xE70 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x6F6E206973206E6F742055555053 PUSH1 0x90 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x473 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1629 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 EQ PUSH2 0xEDF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1A58589B1955555251 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x473 JUMP JUMPDEST POP PUSH2 0x963 DUP4 DUP4 DUP4 PUSH2 0x1065 JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE PUSH2 0x74B DUP2 PUSH2 0x1090 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xB3E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x473 JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xB3E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x473 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND EXTCODESIZE PUSH2 0x1036 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x473 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1629 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x106E DUP4 PUSH2 0x10E2 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0x107B JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0x963 JUMPI PUSH2 0x108A DUP4 DUP4 PUSH2 0x1122 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x10EB DUP2 PUSH2 0xFC9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE PUSH2 0x118A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x473 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x40 MLOAD PUSH2 0x11A5 SWAP2 SWAP1 PUSH2 0x15D9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x11E0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x11E5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x120D DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1649 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x1216 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1225 JUMPI POP DUP2 PUSH2 0xB0F JUMP JUMPDEST PUSH2 0xB0F DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x123A JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x473 SWAP2 SWAP1 PUSH2 0x15F5 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x127B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1296 JUMPI PUSH2 0x1296 PUSH2 0x1254 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x12BE JUMPI PUSH2 0x12BE PUSH2 0x1254 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH2 0x12D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x20 DUP8 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP6 DUP4 ADD ADD MSTORE DUP1 SWAP5 POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x130A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1328 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1334 DUP6 DUP3 DUP7 ADD PUSH2 0x126A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1355 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x136C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB0F DUP3 PUSH2 0x133E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1388 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1391 DUP4 PUSH2 0x133E JUMP JUMPDEST SWAP2 POP PUSH2 0x139F PUSH1 0x20 DUP5 ADD PUSH2 0x133E JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x13BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x13DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x13E6 DUP4 PUSH2 0x133E JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1328 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1417 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP2 CALLDATALOAD SWAP4 PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 SWAP1 SWAP3 ADD CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1440 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1355 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x1476 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x1487 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP10 ADD MLOAD SWAP1 SWAP8 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x14A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP6 POP PUSH2 0x14B2 PUSH1 0x40 DUP10 ADD PUSH2 0x1447 JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD MLOAD PUSH5 0xFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x14CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 POP PUSH2 0x14DA PUSH1 0x80 DUP10 ADD PUSH2 0x1447 JUMP JUMPDEST SWAP3 POP PUSH2 0x14E8 PUSH1 0xA0 DUP10 ADD PUSH2 0x1447 JUMP JUMPDEST SWAP2 POP PUSH2 0x14F6 PUSH1 0xC0 DUP10 ADD PUSH2 0x1447 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x19195B1959D85D1958D85B1B PUSH1 0xA2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x6163746976652070726F7879 PUSH1 0xA0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x15AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x15D0 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x15B8 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x15EB DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x15B5 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1614 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x15B5 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID CALLDATASIZE ADDMOD SWAP5 LOG1 EXTCODESIZE LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBC416464726573733A206C6F PUSH24 0x2D6C6576656C2064656C65676174652063616C6C20666169 PUSH13 0x6564A2646970667358221220F2 SWAP5 DUP11 LT PUSH26 0x833271495F9104F10561680C703D3119093500ABC8C82751C12A 0xD8 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"703:5055:25:-:0;;;1332:4:6;1289:48;;703:5055:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@__UUPSUpgradeable_init_813":{"entryPoint":3844,"id":813,"parameterSlots":0,"returnSlots":0},"@_authorizeUpgrade_5943":{"entryPoint":3448,"id":5943,"parameterSlots":1,"returnSlots":0},"@_checkMinter_5958":{"entryPoint":3218,"id":5958,"parameterSlots":0,"returnSlots":0},"@_checkOwner_174":{"entryPoint":3951,"id":174,"parameterSlots":0,"returnSlots":0},"@_destructureId_6087":{"entryPoint":3324,"id":6087,"parameterSlots":1,"returnSlots":3},"@_functionDelegateCall_610":{"entryPoint":4386,"id":610,"parameterSlots":2,"returnSlots":1},"@_getImplementation_294":{"entryPoint":null,"id":294,"parameterSlots":0,"returnSlots":1},"@_msgSender_2931":{"entryPoint":null,"id":2931,"parameterSlots":0,"returnSlots":1},"@_revert_2903":{"entryPoint":null,"id":2903,"parameterSlots":2,"returnSlots":0},"@_setImplementation_318":{"entryPoint":4041,"id":318,"parameterSlots":1,"returnSlots":0},"@_transferOwnership_231":{"entryPoint":4240,"id":231,"parameterSlots":1,"returnSlots":0},"@_transferOwnership_77":{"entryPoint":3819,"id":77,"parameterSlots":1,"returnSlots":0},"@_upgradeToAndCallUUPS_414":{"entryPoint":3456,"id":414,"parameterSlots":3,"returnSlots":0},"@_upgradeToAndCall_361":{"entryPoint":4197,"id":361,"parameterSlots":3,"returnSlots":0},"@_upgradeTo_333":{"entryPoint":4322,"id":333,"parameterSlots":1,"returnSlots":0},"@acceptOwnership_99":{"entryPoint":2880,"id":99,"parameterSlots":0,"returnSlots":0},"@getAddressSlot_2972":{"entryPoint":null,"id":2972,"parameterSlots":1,"returnSlots":1},"@getBooleanSlot_2983":{"entryPoint":null,"id":2983,"parameterSlots":1,"returnSlots":1},"@getUUID_6107":{"entryPoint":2838,"id":6107,"parameterSlots":1,"returnSlots":1},"@hasCertificateType_6190":{"entryPoint":null,"id":6190,"parameterSlots":2,"returnSlots":1},"@hasEndorsement_6207":{"entryPoint":null,"id":6207,"parameterSlots":2,"returnSlots":1},"@hasFuel_6173":{"entryPoint":null,"id":6173,"parameterSlots":2,"returnSlots":1},"@hasRegistry_6128":{"entryPoint":2999,"id":6128,"parameterSlots":2,"returnSlots":1},"@hasVintage_6155":{"entryPoint":2795,"id":6155,"parameterSlots":3,"returnSlots":1},"@initialize_6013":{"entryPoint":1870,"id":6013,"parameterSlots":2,"returnSlots":0},"@isContract_2638":{"entryPoint":null,"id":2638,"parameterSlots":1,"returnSlots":1},"@minter_5946":{"entryPoint":null,"id":5946,"parameterSlots":0,"returnSlots":0},"@owner_160":{"entryPoint":null,"id":160,"parameterSlots":0,"returnSlots":1},"@pendingOwner_40":{"entryPoint":null,"id":40,"parameterSlots":0,"returnSlots":1},"@proxiableUUID_876":{"entryPoint":2616,"id":876,"parameterSlots":0,"returnSlots":1},"@renounceOwnership_188":{"entryPoint":2860,"id":188,"parameterSlots":0,"returnSlots":0},"@setMinter_5986":{"entryPoint":3136,"id":5986,"parameterSlots":1,"returnSlots":0},"@transferOwnership_60":{"entryPoint":3023,"id":60,"parameterSlots":1,"returnSlots":0},"@updateSeries_6302":{"entryPoint":971,"id":6302,"parameterSlots":2,"returnSlots":0},"@upgradeToAndCall_919":{"entryPoint":2408,"id":919,"parameterSlots":2,"returnSlots":0},"@upgradeTo_898":{"entryPoint":1647,"id":898,"parameterSlots":1,"returnSlots":0},"@verifyCallResult_2883":{"entryPoint":4630,"id":2883,"parameterSlots":3,"returnSlots":1},"abi_decode_address":{"entryPoint":4926,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_bytes":{"entryPoint":4714,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":4954,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":4981,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_bytes_memory_ptr":{"entryPoint":5066,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32_fromMemory":{"entryPoint":5532,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":5166,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_bytes_memory_ptr":{"entryPoint":4855,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256t_uint256":{"entryPoint":5032,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256t_uint256t_uint256":{"entryPoint":5122,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_uint8t_uint128t_uint32t_uint40t_uint32t_uint32t_uint32_fromMemory":{"entryPoint":5211,"id":null,"parameterSlots":2,"returnSlots":7},"abi_decode_uint32_fromMemory":{"entryPoint":5191,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":5593,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5621,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_225559eb8402045bea7ff07c35d0ad8c0547830223ac1c21d44fb948d6896ebc__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3634f33128b839ba5aef34071c3d16bdb2be9a8409f06e01b36f02ba0c6fd43c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5380,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_47a3bd5b6e49234fa94e9da8ea5a7d8a1dc9626493701a7bc7dbdf644696d561__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5456,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6d452a5da70bea7507f7f2b90704a455c1547a2793b598dadcd558c856077ca3__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8b616c52b3148b05e75083b1a70f12c0e7167f192499878c62938ea41e452dbb__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cb632be90e6be82dfa05c64f79aee82f69a0acc10696a637a916b6886e169fbd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_df9425266fe7933ff585facc22dca0a4c1e3703f9880cb0c973bca3701fe9bdb__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint128__to_t_uint128__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":5557,"id":null,"parameterSlots":3,"returnSlots":0},"panic_error_0x41":{"entryPoint":4692,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:13124:30","statements":[{"nodeType":"YulBlock","src":"6:3:30","statements":[]},{"body":{"nodeType":"YulBlock","src":"115:125:30","statements":[{"nodeType":"YulAssignment","src":"125:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"137:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"148:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"133:3:30"},"nodeType":"YulFunctionCall","src":"133:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"125:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"167:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"182:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"190:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"178:3:30"},"nodeType":"YulFunctionCall","src":"178:55:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"160:6:30"},"nodeType":"YulFunctionCall","src":"160:74:30"},"nodeType":"YulExpressionStatement","src":"160:74:30"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"84:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"95:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"106:4:30","type":""}],"src":"14:226:30"},{"body":{"nodeType":"YulBlock","src":"277:95:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"294:1:30","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"301:3:30","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"306:10:30","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"297:3:30"},"nodeType":"YulFunctionCall","src":"297:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"287:6:30"},"nodeType":"YulFunctionCall","src":"287:31:30"},"nodeType":"YulExpressionStatement","src":"287:31:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"334:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"337:4:30","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"327:6:30"},"nodeType":"YulFunctionCall","src":"327:15:30"},"nodeType":"YulExpressionStatement","src":"327:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"358:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"361:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"351:6:30"},"nodeType":"YulFunctionCall","src":"351:15:30"},"nodeType":"YulExpressionStatement","src":"351:15:30"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"245:127:30"},{"body":{"nodeType":"YulBlock","src":"429:666:30","statements":[{"body":{"nodeType":"YulBlock","src":"478:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"487:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"490:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"480:6:30"},"nodeType":"YulFunctionCall","src":"480:12:30"},"nodeType":"YulExpressionStatement","src":"480:12:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"457:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"465:4:30","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"453:3:30"},"nodeType":"YulFunctionCall","src":"453:17:30"},{"name":"end","nodeType":"YulIdentifier","src":"472:3:30"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"449:3:30"},"nodeType":"YulFunctionCall","src":"449:27:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"442:6:30"},"nodeType":"YulFunctionCall","src":"442:35:30"},"nodeType":"YulIf","src":"439:55:30"},{"nodeType":"YulVariableDeclaration","src":"503:30:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"526:6:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"513:12:30"},"nodeType":"YulFunctionCall","src":"513:20:30"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"507:2:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"542:28:30","value":{"kind":"number","nodeType":"YulLiteral","src":"552:18:30","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"546:2:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"593:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"595:16:30"},"nodeType":"YulFunctionCall","src":"595:18:30"},"nodeType":"YulExpressionStatement","src":"595:18:30"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"585:2:30"},{"name":"_2","nodeType":"YulIdentifier","src":"589:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"582:2:30"},"nodeType":"YulFunctionCall","src":"582:10:30"},"nodeType":"YulIf","src":"579:36:30"},{"nodeType":"YulVariableDeclaration","src":"624:17:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"638:2:30","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"634:3:30"},"nodeType":"YulFunctionCall","src":"634:7:30"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"628:2:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"650:23:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"670:2:30","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"664:5:30"},"nodeType":"YulFunctionCall","src":"664:9:30"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"654:6:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"682:71:30","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"704:6:30"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"728:2:30"},{"kind":"number","nodeType":"YulLiteral","src":"732:4:30","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"724:3:30"},"nodeType":"YulFunctionCall","src":"724:13:30"},{"name":"_3","nodeType":"YulIdentifier","src":"739:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"720:3:30"},"nodeType":"YulFunctionCall","src":"720:22:30"},{"kind":"number","nodeType":"YulLiteral","src":"744:2:30","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"716:3:30"},"nodeType":"YulFunctionCall","src":"716:31:30"},{"name":"_3","nodeType":"YulIdentifier","src":"749:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"712:3:30"},"nodeType":"YulFunctionCall","src":"712:40:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"700:3:30"},"nodeType":"YulFunctionCall","src":"700:53:30"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"686:10:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"812:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"814:16:30"},"nodeType":"YulFunctionCall","src":"814:18:30"},"nodeType":"YulExpressionStatement","src":"814:18:30"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"771:10:30"},{"name":"_2","nodeType":"YulIdentifier","src":"783:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"768:2:30"},"nodeType":"YulFunctionCall","src":"768:18:30"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"791:10:30"},{"name":"memPtr","nodeType":"YulIdentifier","src":"803:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"788:2:30"},"nodeType":"YulFunctionCall","src":"788:22:30"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"765:2:30"},"nodeType":"YulFunctionCall","src":"765:46:30"},"nodeType":"YulIf","src":"762:72:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"850:2:30","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"854:10:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"843:6:30"},"nodeType":"YulFunctionCall","src":"843:22:30"},"nodeType":"YulExpressionStatement","src":"843:22:30"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"881:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"889:2:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"874:6:30"},"nodeType":"YulFunctionCall","src":"874:18:30"},"nodeType":"YulExpressionStatement","src":"874:18:30"},{"body":{"nodeType":"YulBlock","src":"940:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"949:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"952:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"942:6:30"},"nodeType":"YulFunctionCall","src":"942:12:30"},"nodeType":"YulExpressionStatement","src":"942:12:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"915:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"923:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"911:3:30"},"nodeType":"YulFunctionCall","src":"911:15:30"},{"kind":"number","nodeType":"YulLiteral","src":"928:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"907:3:30"},"nodeType":"YulFunctionCall","src":"907:26:30"},{"name":"end","nodeType":"YulIdentifier","src":"935:3:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"904:2:30"},"nodeType":"YulFunctionCall","src":"904:35:30"},"nodeType":"YulIf","src":"901:55:30"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"982:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"990:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"978:3:30"},"nodeType":"YulFunctionCall","src":"978:17:30"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1001:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"1009:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"997:3:30"},"nodeType":"YulFunctionCall","src":"997:17:30"},{"name":"_1","nodeType":"YulIdentifier","src":"1016:2:30"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"965:12:30"},"nodeType":"YulFunctionCall","src":"965:54:30"},"nodeType":"YulExpressionStatement","src":"965:54:30"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1043:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"1051:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1039:3:30"},"nodeType":"YulFunctionCall","src":"1039:15:30"},{"kind":"number","nodeType":"YulLiteral","src":"1056:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1035:3:30"},"nodeType":"YulFunctionCall","src":"1035:26:30"},{"kind":"number","nodeType":"YulLiteral","src":"1063:1:30","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1028:6:30"},"nodeType":"YulFunctionCall","src":"1028:37:30"},"nodeType":"YulExpressionStatement","src":"1028:37:30"},{"nodeType":"YulAssignment","src":"1074:15:30","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"1083:6:30"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1074:5:30"}]}]},"name":"abi_decode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"403:6:30","type":""},{"name":"end","nodeType":"YulTypedName","src":"411:3:30","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"419:5:30","type":""}],"src":"377:718:30"},{"body":{"nodeType":"YulBlock","src":"1196:292:30","statements":[{"body":{"nodeType":"YulBlock","src":"1242:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1251:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1254:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1244:6:30"},"nodeType":"YulFunctionCall","src":"1244:12:30"},"nodeType":"YulExpressionStatement","src":"1244:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1217:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"1226:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1213:3:30"},"nodeType":"YulFunctionCall","src":"1213:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"1238:2:30","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1209:3:30"},"nodeType":"YulFunctionCall","src":"1209:32:30"},"nodeType":"YulIf","src":"1206:52:30"},{"nodeType":"YulAssignment","src":"1267:33:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1290:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1277:12:30"},"nodeType":"YulFunctionCall","src":"1277:23:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1267:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"1309:46:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1340:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"1351:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1336:3:30"},"nodeType":"YulFunctionCall","src":"1336:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1323:12:30"},"nodeType":"YulFunctionCall","src":"1323:32:30"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1313:6:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"1398:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1407:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1410:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1400:6:30"},"nodeType":"YulFunctionCall","src":"1400:12:30"},"nodeType":"YulExpressionStatement","src":"1400:12:30"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1370:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"1378:18:30","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1367:2:30"},"nodeType":"YulFunctionCall","src":"1367:30:30"},"nodeType":"YulIf","src":"1364:50:30"},{"nodeType":"YulAssignment","src":"1423:59:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1454:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"1465:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1450:3:30"},"nodeType":"YulFunctionCall","src":"1450:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1474:7:30"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"1433:16:30"},"nodeType":"YulFunctionCall","src":"1433:49:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1423:6:30"}]}]},"name":"abi_decode_tuple_t_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1154:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1165:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1177:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1185:6:30","type":""}],"src":"1100:388:30"},{"body":{"nodeType":"YulBlock","src":"1542:147:30","statements":[{"nodeType":"YulAssignment","src":"1552:29:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1574:6:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1561:12:30"},"nodeType":"YulFunctionCall","src":"1561:20:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1552:5:30"}]},{"body":{"nodeType":"YulBlock","src":"1667:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1676:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1679:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1669:6:30"},"nodeType":"YulFunctionCall","src":"1669:12:30"},"nodeType":"YulExpressionStatement","src":"1669:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1603:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1614:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"1621:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1610:3:30"},"nodeType":"YulFunctionCall","src":"1610:54:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1600:2:30"},"nodeType":"YulFunctionCall","src":"1600:65:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1593:6:30"},"nodeType":"YulFunctionCall","src":"1593:73:30"},"nodeType":"YulIf","src":"1590:93:30"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1521:6:30","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1532:5:30","type":""}],"src":"1493:196:30"},{"body":{"nodeType":"YulBlock","src":"1764:116:30","statements":[{"body":{"nodeType":"YulBlock","src":"1810:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1819:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1822:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1812:6:30"},"nodeType":"YulFunctionCall","src":"1812:12:30"},"nodeType":"YulExpressionStatement","src":"1812:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1785:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"1794:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1781:3:30"},"nodeType":"YulFunctionCall","src":"1781:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"1806:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1777:3:30"},"nodeType":"YulFunctionCall","src":"1777:32:30"},"nodeType":"YulIf","src":"1774:52:30"},{"nodeType":"YulAssignment","src":"1835:39:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1864:9:30"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1845:18:30"},"nodeType":"YulFunctionCall","src":"1845:29:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1835:6:30"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1730:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1741:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1753:6:30","type":""}],"src":"1694:186:30"},{"body":{"nodeType":"YulBlock","src":"1972:173:30","statements":[{"body":{"nodeType":"YulBlock","src":"2018:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2027:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2030:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2020:6:30"},"nodeType":"YulFunctionCall","src":"2020:12:30"},"nodeType":"YulExpressionStatement","src":"2020:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1993:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"2002:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1989:3:30"},"nodeType":"YulFunctionCall","src":"1989:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"2014:2:30","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1985:3:30"},"nodeType":"YulFunctionCall","src":"1985:32:30"},"nodeType":"YulIf","src":"1982:52:30"},{"nodeType":"YulAssignment","src":"2043:39:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2072:9:30"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2053:18:30"},"nodeType":"YulFunctionCall","src":"2053:29:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2043:6:30"}]},{"nodeType":"YulAssignment","src":"2091:48:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2124:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"2135:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2120:3:30"},"nodeType":"YulFunctionCall","src":"2120:18:30"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2101:18:30"},"nodeType":"YulFunctionCall","src":"2101:38:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2091:6:30"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1930:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1941:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1953:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1961:6:30","type":""}],"src":"1885:260:30"},{"body":{"nodeType":"YulBlock","src":"2237:161:30","statements":[{"body":{"nodeType":"YulBlock","src":"2283:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2292:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2295:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2285:6:30"},"nodeType":"YulFunctionCall","src":"2285:12:30"},"nodeType":"YulExpressionStatement","src":"2285:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2258:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"2267:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2254:3:30"},"nodeType":"YulFunctionCall","src":"2254:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"2279:2:30","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2250:3:30"},"nodeType":"YulFunctionCall","src":"2250:32:30"},"nodeType":"YulIf","src":"2247:52:30"},{"nodeType":"YulAssignment","src":"2308:33:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2331:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2318:12:30"},"nodeType":"YulFunctionCall","src":"2318:23:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2308:6:30"}]},{"nodeType":"YulAssignment","src":"2350:42:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2377:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"2388:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2373:3:30"},"nodeType":"YulFunctionCall","src":"2373:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2360:12:30"},"nodeType":"YulFunctionCall","src":"2360:32:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2350:6:30"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2195:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2206:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2218:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2226:6:30","type":""}],"src":"2150:248:30"},{"body":{"nodeType":"YulBlock","src":"2498:92:30","statements":[{"nodeType":"YulAssignment","src":"2508:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2520:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"2531:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2516:3:30"},"nodeType":"YulFunctionCall","src":"2516:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2508:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2550:9:30"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2575:6:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2568:6:30"},"nodeType":"YulFunctionCall","src":"2568:14:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2561:6:30"},"nodeType":"YulFunctionCall","src":"2561:22:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2543:6:30"},"nodeType":"YulFunctionCall","src":"2543:41:30"},"nodeType":"YulExpressionStatement","src":"2543:41:30"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2467:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2478:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2489:4:30","type":""}],"src":"2403:187:30"},{"body":{"nodeType":"YulBlock","src":"2691:298:30","statements":[{"body":{"nodeType":"YulBlock","src":"2737:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2746:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2749:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2739:6:30"},"nodeType":"YulFunctionCall","src":"2739:12:30"},"nodeType":"YulExpressionStatement","src":"2739:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2712:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"2721:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2708:3:30"},"nodeType":"YulFunctionCall","src":"2708:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"2733:2:30","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2704:3:30"},"nodeType":"YulFunctionCall","src":"2704:32:30"},"nodeType":"YulIf","src":"2701:52:30"},{"nodeType":"YulAssignment","src":"2762:39:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2791:9:30"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2772:18:30"},"nodeType":"YulFunctionCall","src":"2772:29:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2762:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"2810:46:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2841:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"2852:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2837:3:30"},"nodeType":"YulFunctionCall","src":"2837:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2824:12:30"},"nodeType":"YulFunctionCall","src":"2824:32:30"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2814:6:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"2899:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2908:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2911:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2901:6:30"},"nodeType":"YulFunctionCall","src":"2901:12:30"},"nodeType":"YulExpressionStatement","src":"2901:12:30"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2871:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"2879:18:30","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2868:2:30"},"nodeType":"YulFunctionCall","src":"2868:30:30"},"nodeType":"YulIf","src":"2865:50:30"},{"nodeType":"YulAssignment","src":"2924:59:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2955:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"2966:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2951:3:30"},"nodeType":"YulFunctionCall","src":"2951:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2975:7:30"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"2934:16:30"},"nodeType":"YulFunctionCall","src":"2934:49:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2924:6:30"}]}]},"name":"abi_decode_tuple_t_addresst_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2649:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2660:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2672:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2680:6:30","type":""}],"src":"2595:394:30"},{"body":{"nodeType":"YulBlock","src":"3095:76:30","statements":[{"nodeType":"YulAssignment","src":"3105:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3117:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"3128:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3113:3:30"},"nodeType":"YulFunctionCall","src":"3113:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3105:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3147:9:30"},{"name":"value0","nodeType":"YulIdentifier","src":"3158:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3140:6:30"},"nodeType":"YulFunctionCall","src":"3140:25:30"},"nodeType":"YulExpressionStatement","src":"3140:25:30"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3064:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3075:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3086:4:30","type":""}],"src":"2994:177:30"},{"body":{"nodeType":"YulBlock","src":"3280:212:30","statements":[{"body":{"nodeType":"YulBlock","src":"3326:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3335:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3338:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3328:6:30"},"nodeType":"YulFunctionCall","src":"3328:12:30"},"nodeType":"YulExpressionStatement","src":"3328:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3301:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"3310:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3297:3:30"},"nodeType":"YulFunctionCall","src":"3297:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"3322:2:30","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3293:3:30"},"nodeType":"YulFunctionCall","src":"3293:32:30"},"nodeType":"YulIf","src":"3290:52:30"},{"nodeType":"YulAssignment","src":"3351:33:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3374:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3361:12:30"},"nodeType":"YulFunctionCall","src":"3361:23:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3351:6:30"}]},{"nodeType":"YulAssignment","src":"3393:42:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3420:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"3431:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3416:3:30"},"nodeType":"YulFunctionCall","src":"3416:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3403:12:30"},"nodeType":"YulFunctionCall","src":"3403:32:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3393:6:30"}]},{"nodeType":"YulAssignment","src":"3444:42:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3471:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"3482:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3467:3:30"},"nodeType":"YulFunctionCall","src":"3467:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3454:12:30"},"nodeType":"YulFunctionCall","src":"3454:32:30"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3444:6:30"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3230:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3241:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3253:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3261:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3269:6:30","type":""}],"src":"3176:316:30"},{"body":{"nodeType":"YulBlock","src":"3567:110:30","statements":[{"body":{"nodeType":"YulBlock","src":"3613:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3622:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3625:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3615:6:30"},"nodeType":"YulFunctionCall","src":"3615:12:30"},"nodeType":"YulExpressionStatement","src":"3615:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3588:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"3597:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3584:3:30"},"nodeType":"YulFunctionCall","src":"3584:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"3609:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3580:3:30"},"nodeType":"YulFunctionCall","src":"3580:32:30"},"nodeType":"YulIf","src":"3577:52:30"},{"nodeType":"YulAssignment","src":"3638:33:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3661:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3648:12:30"},"nodeType":"YulFunctionCall","src":"3648:23:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3638:6:30"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3533:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3544:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3556:6:30","type":""}],"src":"3497:180:30"},{"body":{"nodeType":"YulBlock","src":"3783:117:30","statements":[{"nodeType":"YulAssignment","src":"3793:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3805:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"3816:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3801:3:30"},"nodeType":"YulFunctionCall","src":"3801:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3793:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3835:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3850:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"3858:34:30","type":"","value":"0xffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3846:3:30"},"nodeType":"YulFunctionCall","src":"3846:47:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3828:6:30"},"nodeType":"YulFunctionCall","src":"3828:66:30"},"nodeType":"YulExpressionStatement","src":"3828:66:30"}]},"name":"abi_encode_tuple_t_uint128__to_t_uint128__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3752:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3763:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3774:4:30","type":""}],"src":"3682:218:30"},{"body":{"nodeType":"YulBlock","src":"3964:108:30","statements":[{"nodeType":"YulAssignment","src":"3974:22:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3989:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3983:5:30"},"nodeType":"YulFunctionCall","src":"3983:13:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3974:5:30"}]},{"body":{"nodeType":"YulBlock","src":"4050:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4059:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4062:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4052:6:30"},"nodeType":"YulFunctionCall","src":"4052:12:30"},"nodeType":"YulExpressionStatement","src":"4052:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4018:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4029:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"4036:10:30","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4025:3:30"},"nodeType":"YulFunctionCall","src":"4025:22:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4015:2:30"},"nodeType":"YulFunctionCall","src":"4015:33:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4008:6:30"},"nodeType":"YulFunctionCall","src":"4008:41:30"},"nodeType":"YulIf","src":"4005:61:30"}]},"name":"abi_decode_uint32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3943:6:30","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3954:5:30","type":""}],"src":"3905:167:30"},{"body":{"nodeType":"YulBlock","src":"4253:790:30","statements":[{"body":{"nodeType":"YulBlock","src":"4300:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4309:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4312:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4302:6:30"},"nodeType":"YulFunctionCall","src":"4302:12:30"},"nodeType":"YulExpressionStatement","src":"4302:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4274:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"4283:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4270:3:30"},"nodeType":"YulFunctionCall","src":"4270:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"4295:3:30","type":"","value":"224"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4266:3:30"},"nodeType":"YulFunctionCall","src":"4266:33:30"},"nodeType":"YulIf","src":"4263:53:30"},{"nodeType":"YulVariableDeclaration","src":"4325:29:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4344:9:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4338:5:30"},"nodeType":"YulFunctionCall","src":"4338:16:30"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4329:5:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"4402:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4411:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4414:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4404:6:30"},"nodeType":"YulFunctionCall","src":"4404:12:30"},"nodeType":"YulExpressionStatement","src":"4404:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4376:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4387:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"4394:4:30","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4383:3:30"},"nodeType":"YulFunctionCall","src":"4383:16:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4373:2:30"},"nodeType":"YulFunctionCall","src":"4373:27:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4366:6:30"},"nodeType":"YulFunctionCall","src":"4366:35:30"},"nodeType":"YulIf","src":"4363:55:30"},{"nodeType":"YulAssignment","src":"4427:15:30","value":{"name":"value","nodeType":"YulIdentifier","src":"4437:5:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4427:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"4451:40:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4476:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"4487:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4472:3:30"},"nodeType":"YulFunctionCall","src":"4472:18:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4466:5:30"},"nodeType":"YulFunctionCall","src":"4466:25:30"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"4455:7:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"4573:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4582:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4585:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4575:6:30"},"nodeType":"YulFunctionCall","src":"4575:12:30"},"nodeType":"YulExpressionStatement","src":"4575:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"4513:7:30"},{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"4526:7:30"},{"kind":"number","nodeType":"YulLiteral","src":"4535:34:30","type":"","value":"0xffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4522:3:30"},"nodeType":"YulFunctionCall","src":"4522:48:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4510:2:30"},"nodeType":"YulFunctionCall","src":"4510:61:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4503:6:30"},"nodeType":"YulFunctionCall","src":"4503:69:30"},"nodeType":"YulIf","src":"4500:89:30"},{"nodeType":"YulAssignment","src":"4598:17:30","value":{"name":"value_1","nodeType":"YulIdentifier","src":"4608:7:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4598:6:30"}]},{"nodeType":"YulAssignment","src":"4624:58:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4667:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"4678:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4663:3:30"},"nodeType":"YulFunctionCall","src":"4663:18:30"}],"functionName":{"name":"abi_decode_uint32_fromMemory","nodeType":"YulIdentifier","src":"4634:28:30"},"nodeType":"YulFunctionCall","src":"4634:48:30"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4624:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"4691:40:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4716:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"4727:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4712:3:30"},"nodeType":"YulFunctionCall","src":"4712:18:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4706:5:30"},"nodeType":"YulFunctionCall","src":"4706:25:30"},"variables":[{"name":"value_2","nodeType":"YulTypedName","src":"4695:7:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"4791:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4800:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4803:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4793:6:30"},"nodeType":"YulFunctionCall","src":"4793:12:30"},"nodeType":"YulExpressionStatement","src":"4793:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"4753:7:30"},{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"4766:7:30"},{"kind":"number","nodeType":"YulLiteral","src":"4775:12:30","type":"","value":"0xffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4762:3:30"},"nodeType":"YulFunctionCall","src":"4762:26:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4750:2:30"},"nodeType":"YulFunctionCall","src":"4750:39:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4743:6:30"},"nodeType":"YulFunctionCall","src":"4743:47:30"},"nodeType":"YulIf","src":"4740:67:30"},{"nodeType":"YulAssignment","src":"4816:17:30","value":{"name":"value_2","nodeType":"YulIdentifier","src":"4826:7:30"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4816:6:30"}]},{"nodeType":"YulAssignment","src":"4842:59:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4885:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"4896:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4881:3:30"},"nodeType":"YulFunctionCall","src":"4881:19:30"}],"functionName":{"name":"abi_decode_uint32_fromMemory","nodeType":"YulIdentifier","src":"4852:28:30"},"nodeType":"YulFunctionCall","src":"4852:49:30"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"4842:6:30"}]},{"nodeType":"YulAssignment","src":"4910:59:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4953:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"4964:3:30","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4949:3:30"},"nodeType":"YulFunctionCall","src":"4949:19:30"}],"functionName":{"name":"abi_decode_uint32_fromMemory","nodeType":"YulIdentifier","src":"4920:28:30"},"nodeType":"YulFunctionCall","src":"4920:49:30"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"4910:6:30"}]},{"nodeType":"YulAssignment","src":"4978:59:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5021:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"5032:3:30","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5017:3:30"},"nodeType":"YulFunctionCall","src":"5017:19:30"}],"functionName":{"name":"abi_decode_uint32_fromMemory","nodeType":"YulIdentifier","src":"4988:28:30"},"nodeType":"YulFunctionCall","src":"4988:49:30"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"4978:6:30"}]}]},"name":"abi_decode_tuple_t_uint8t_uint128t_uint32t_uint40t_uint32t_uint32t_uint32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4171:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4182:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4194:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4202:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4210:6:30","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4218:6:30","type":""},{"name":"value4","nodeType":"YulTypedName","src":"4226:6:30","type":""},{"name":"value5","nodeType":"YulTypedName","src":"4234:6:30","type":""},{"name":"value6","nodeType":"YulTypedName","src":"4242:6:30","type":""}],"src":"4077:966:30"},{"body":{"nodeType":"YulBlock","src":"5222:229:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5239:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"5250:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5232:6:30"},"nodeType":"YulFunctionCall","src":"5232:21:30"},"nodeType":"YulExpressionStatement","src":"5232:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5273:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"5284:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5269:3:30"},"nodeType":"YulFunctionCall","src":"5269:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"5289:2:30","type":"","value":"39"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5262:6:30"},"nodeType":"YulFunctionCall","src":"5262:30:30"},"nodeType":"YulExpressionStatement","src":"5262:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5312:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"5323:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5308:3:30"},"nodeType":"YulFunctionCall","src":"5308:18:30"},{"hexValue":"4a61736d696e654f7261636c653a20696e76616c6964206d6574616461746120","kind":"string","nodeType":"YulLiteral","src":"5328:34:30","type":"","value":"JasmineOracle: invalid metadata "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5301:6:30"},"nodeType":"YulFunctionCall","src":"5301:62:30"},"nodeType":"YulExpressionStatement","src":"5301:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5383:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"5394:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5379:3:30"},"nodeType":"YulFunctionCall","src":"5379:18:30"},{"hexValue":"76657273696f6e","kind":"string","nodeType":"YulLiteral","src":"5399:9:30","type":"","value":"version"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5372:6:30"},"nodeType":"YulFunctionCall","src":"5372:37:30"},"nodeType":"YulExpressionStatement","src":"5372:37:30"},{"nodeType":"YulAssignment","src":"5418:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5430:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"5441:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5426:3:30"},"nodeType":"YulFunctionCall","src":"5426:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5418:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_47a3bd5b6e49234fa94e9da8ea5a7d8a1dc9626493701a7bc7dbdf644696d561__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5199:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5213:4:30","type":""}],"src":"5048:403:30"},{"body":{"nodeType":"YulBlock","src":"5630:178:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5647:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"5658:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5640:6:30"},"nodeType":"YulFunctionCall","src":"5640:21:30"},"nodeType":"YulExpressionStatement","src":"5640:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5681:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"5692:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5677:3:30"},"nodeType":"YulFunctionCall","src":"5677:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"5697:2:30","type":"","value":"28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5670:6:30"},"nodeType":"YulFunctionCall","src":"5670:30:30"},"nodeType":"YulExpressionStatement","src":"5670:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5720:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"5731:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5716:3:30"},"nodeType":"YulFunctionCall","src":"5716:18:30"},{"hexValue":"4a61736d696e654f7261636c653a2055554944206d69736d61746368","kind":"string","nodeType":"YulLiteral","src":"5736:30:30","type":"","value":"JasmineOracle: UUID mismatch"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5709:6:30"},"nodeType":"YulFunctionCall","src":"5709:58:30"},"nodeType":"YulExpressionStatement","src":"5709:58:30"},{"nodeType":"YulAssignment","src":"5776:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5788:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"5799:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5784:3:30"},"nodeType":"YulFunctionCall","src":"5784:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5776:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_cb632be90e6be82dfa05c64f79aee82f69a0acc10696a637a916b6886e169fbd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5607:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5621:4:30","type":""}],"src":"5456:352:30"},{"body":{"nodeType":"YulBlock","src":"5987:182:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6004:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"6015:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5997:6:30"},"nodeType":"YulFunctionCall","src":"5997:21:30"},"nodeType":"YulExpressionStatement","src":"5997:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6038:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"6049:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6034:3:30"},"nodeType":"YulFunctionCall","src":"6034:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"6054:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6027:6:30"},"nodeType":"YulFunctionCall","src":"6027:30:30"},"nodeType":"YulExpressionStatement","src":"6027:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6077:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"6088:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6073:3:30"},"nodeType":"YulFunctionCall","src":"6073:18:30"},{"hexValue":"4a61736d696e654f7261636c653a207265676973747279206d69736d61746368","kind":"string","nodeType":"YulLiteral","src":"6093:34:30","type":"","value":"JasmineOracle: registry mismatch"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6066:6:30"},"nodeType":"YulFunctionCall","src":"6066:62:30"},"nodeType":"YulExpressionStatement","src":"6066:62:30"},{"nodeType":"YulAssignment","src":"6137:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6149:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"6160:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6145:3:30"},"nodeType":"YulFunctionCall","src":"6145:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6137:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_8b616c52b3148b05e75083b1a70f12c0e7167f192499878c62938ea41e452dbb__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5964:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5978:4:30","type":""}],"src":"5813:356:30"},{"body":{"nodeType":"YulBlock","src":"6348:181:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6365:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"6376:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6358:6:30"},"nodeType":"YulFunctionCall","src":"6358:21:30"},"nodeType":"YulExpressionStatement","src":"6358:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6399:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"6410:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6395:3:30"},"nodeType":"YulFunctionCall","src":"6395:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"6415:2:30","type":"","value":"31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6388:6:30"},"nodeType":"YulFunctionCall","src":"6388:30:30"},"nodeType":"YulExpressionStatement","src":"6388:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6438:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"6449:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6434:3:30"},"nodeType":"YulFunctionCall","src":"6434:18:30"},{"hexValue":"4a61736d696e654f7261636c653a2076696e74616765206d69736d61746368","kind":"string","nodeType":"YulLiteral","src":"6454:33:30","type":"","value":"JasmineOracle: vintage mismatch"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6427:6:30"},"nodeType":"YulFunctionCall","src":"6427:61:30"},"nodeType":"YulExpressionStatement","src":"6427:61:30"},{"nodeType":"YulAssignment","src":"6497:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6509:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"6520:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6505:3:30"},"nodeType":"YulFunctionCall","src":"6505:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6497:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d452a5da70bea7507f7f2b90704a455c1547a2793b598dadcd558c856077ca3__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6325:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6339:4:30","type":""}],"src":"6174:355:30"},{"body":{"nodeType":"YulBlock","src":"6708:234:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6725:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"6736:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6718:6:30"},"nodeType":"YulFunctionCall","src":"6718:21:30"},"nodeType":"YulExpressionStatement","src":"6718:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6759:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"6770:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6755:3:30"},"nodeType":"YulFunctionCall","src":"6755:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"6775:2:30","type":"","value":"44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6748:6:30"},"nodeType":"YulFunctionCall","src":"6748:30:30"},"nodeType":"YulExpressionStatement","src":"6748:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6798:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"6809:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6794:3:30"},"nodeType":"YulFunctionCall","src":"6794:18:30"},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820","kind":"string","nodeType":"YulLiteral","src":"6814:34:30","type":"","value":"Function must be called through "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6787:6:30"},"nodeType":"YulFunctionCall","src":"6787:62:30"},"nodeType":"YulExpressionStatement","src":"6787:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6869:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"6880:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6865:3:30"},"nodeType":"YulFunctionCall","src":"6865:18:30"},{"hexValue":"64656c656761746563616c6c","kind":"string","nodeType":"YulLiteral","src":"6885:14:30","type":"","value":"delegatecall"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6858:6:30"},"nodeType":"YulFunctionCall","src":"6858:42:30"},"nodeType":"YulExpressionStatement","src":"6858:42:30"},{"nodeType":"YulAssignment","src":"6909:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6921:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"6932:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6917:3:30"},"nodeType":"YulFunctionCall","src":"6917:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6909:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6685:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6699:4:30","type":""}],"src":"6534:408:30"},{"body":{"nodeType":"YulBlock","src":"7121:234:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7138:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"7149:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7131:6:30"},"nodeType":"YulFunctionCall","src":"7131:21:30"},"nodeType":"YulExpressionStatement","src":"7131:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7172:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"7183:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7168:3:30"},"nodeType":"YulFunctionCall","src":"7168:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"7188:2:30","type":"","value":"44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7161:6:30"},"nodeType":"YulFunctionCall","src":"7161:30:30"},"nodeType":"YulExpressionStatement","src":"7161:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7211:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"7222:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7207:3:30"},"nodeType":"YulFunctionCall","src":"7207:18:30"},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820","kind":"string","nodeType":"YulLiteral","src":"7227:34:30","type":"","value":"Function must be called through "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7200:6:30"},"nodeType":"YulFunctionCall","src":"7200:62:30"},"nodeType":"YulExpressionStatement","src":"7200:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7282:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"7293:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7278:3:30"},"nodeType":"YulFunctionCall","src":"7278:18:30"},{"hexValue":"6163746976652070726f7879","kind":"string","nodeType":"YulLiteral","src":"7298:14:30","type":"","value":"active proxy"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7271:6:30"},"nodeType":"YulFunctionCall","src":"7271:42:30"},"nodeType":"YulExpressionStatement","src":"7271:42:30"},{"nodeType":"YulAssignment","src":"7322:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7334:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"7345:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7330:3:30"},"nodeType":"YulFunctionCall","src":"7330:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7322:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7098:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7112:4:30","type":""}],"src":"6947:408:30"},{"body":{"nodeType":"YulBlock","src":"7534:236:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7551:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"7562:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7544:6:30"},"nodeType":"YulFunctionCall","src":"7544:21:30"},"nodeType":"YulExpressionStatement","src":"7544:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7585:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"7596:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7581:3:30"},"nodeType":"YulFunctionCall","src":"7581:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"7601:2:30","type":"","value":"46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7574:6:30"},"nodeType":"YulFunctionCall","src":"7574:30:30"},"nodeType":"YulExpressionStatement","src":"7574:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7624:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"7635:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7620:3:30"},"nodeType":"YulFunctionCall","src":"7620:18:30"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561","kind":"string","nodeType":"YulLiteral","src":"7640:34:30","type":"","value":"Initializable: contract is alrea"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7613:6:30"},"nodeType":"YulFunctionCall","src":"7613:62:30"},"nodeType":"YulExpressionStatement","src":"7613:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7695:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"7706:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7691:3:30"},"nodeType":"YulFunctionCall","src":"7691:18:30"},{"hexValue":"647920696e697469616c697a6564","kind":"string","nodeType":"YulLiteral","src":"7711:16:30","type":"","value":"dy initialized"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7684:6:30"},"nodeType":"YulFunctionCall","src":"7684:44:30"},"nodeType":"YulExpressionStatement","src":"7684:44:30"},{"nodeType":"YulAssignment","src":"7737:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7749:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"7760:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7745:3:30"},"nodeType":"YulFunctionCall","src":"7745:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7737:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7511:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7525:4:30","type":""}],"src":"7360:410:30"},{"body":{"nodeType":"YulBlock","src":"7882:87:30","statements":[{"nodeType":"YulAssignment","src":"7892:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7904:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"7915:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7900:3:30"},"nodeType":"YulFunctionCall","src":"7900:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7892:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7934:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7949:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"7957:4:30","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7945:3:30"},"nodeType":"YulFunctionCall","src":"7945:17:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7927:6:30"},"nodeType":"YulFunctionCall","src":"7927:36:30"},"nodeType":"YulExpressionStatement","src":"7927:36:30"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7851:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7862:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7873:4:30","type":""}],"src":"7775:194:30"},{"body":{"nodeType":"YulBlock","src":"8148:246:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8165:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"8176:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8158:6:30"},"nodeType":"YulFunctionCall","src":"8158:21:30"},"nodeType":"YulExpressionStatement","src":"8158:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8199:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"8210:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8195:3:30"},"nodeType":"YulFunctionCall","src":"8195:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"8215:2:30","type":"","value":"56"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8188:6:30"},"nodeType":"YulFunctionCall","src":"8188:30:30"},"nodeType":"YulExpressionStatement","src":"8188:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8238:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"8249:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8234:3:30"},"nodeType":"YulFunctionCall","src":"8234:18:30"},{"hexValue":"555550535570677261646561626c653a206d757374206e6f742062652063616c","kind":"string","nodeType":"YulLiteral","src":"8254:34:30","type":"","value":"UUPSUpgradeable: must not be cal"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8227:6:30"},"nodeType":"YulFunctionCall","src":"8227:62:30"},"nodeType":"YulExpressionStatement","src":"8227:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8309:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"8320:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8305:3:30"},"nodeType":"YulFunctionCall","src":"8305:18:30"},{"hexValue":"6c6564207468726f7567682064656c656761746563616c6c","kind":"string","nodeType":"YulLiteral","src":"8325:26:30","type":"","value":"led through delegatecall"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8298:6:30"},"nodeType":"YulFunctionCall","src":"8298:54:30"},"nodeType":"YulExpressionStatement","src":"8298:54:30"},{"nodeType":"YulAssignment","src":"8361:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8373:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"8384:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8369:3:30"},"nodeType":"YulFunctionCall","src":"8369:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8361:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8125:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8139:4:30","type":""}],"src":"7974:420:30"},{"body":{"nodeType":"YulBlock","src":"8573:231:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8590:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"8601:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8583:6:30"},"nodeType":"YulFunctionCall","src":"8583:21:30"},"nodeType":"YulExpressionStatement","src":"8583:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8624:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"8635:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8620:3:30"},"nodeType":"YulFunctionCall","src":"8620:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"8640:2:30","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8613:6:30"},"nodeType":"YulFunctionCall","src":"8613:30:30"},"nodeType":"YulExpressionStatement","src":"8613:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8663:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"8674:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8659:3:30"},"nodeType":"YulFunctionCall","src":"8659:18:30"},{"hexValue":"4f776e61626c6532537465703a2063616c6c6572206973206e6f742074686520","kind":"string","nodeType":"YulLiteral","src":"8679:34:30","type":"","value":"Ownable2Step: caller is not the "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8652:6:30"},"nodeType":"YulFunctionCall","src":"8652:62:30"},"nodeType":"YulExpressionStatement","src":"8652:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8734:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"8745:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8730:3:30"},"nodeType":"YulFunctionCall","src":"8730:18:30"},{"hexValue":"6e6577206f776e6572","kind":"string","nodeType":"YulLiteral","src":"8750:11:30","type":"","value":"new owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8723:6:30"},"nodeType":"YulFunctionCall","src":"8723:39:30"},"nodeType":"YulExpressionStatement","src":"8723:39:30"},{"nodeType":"YulAssignment","src":"8771:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8783:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"8794:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8779:3:30"},"nodeType":"YulFunctionCall","src":"8779:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8771:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_225559eb8402045bea7ff07c35d0ad8c0547830223ac1c21d44fb948d6896ebc__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8550:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8564:4:30","type":""}],"src":"8399:405:30"},{"body":{"nodeType":"YulBlock","src":"8983:229:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9000:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9011:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8993:6:30"},"nodeType":"YulFunctionCall","src":"8993:21:30"},"nodeType":"YulExpressionStatement","src":"8993:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9034:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9045:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9030:3:30"},"nodeType":"YulFunctionCall","src":"9030:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"9050:2:30","type":"","value":"39"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9023:6:30"},"nodeType":"YulFunctionCall","src":"9023:30:30"},"nodeType":"YulExpressionStatement","src":"9023:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9073:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9084:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9069:3:30"},"nodeType":"YulFunctionCall","src":"9069:18:30"},{"hexValue":"4a61736d696e654f7261636c653a2063616c6c6572206973206e6f7420746865","kind":"string","nodeType":"YulLiteral","src":"9089:34:30","type":"","value":"JasmineOracle: caller is not the"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9062:6:30"},"nodeType":"YulFunctionCall","src":"9062:62:30"},"nodeType":"YulExpressionStatement","src":"9062:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9144:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9155:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9140:3:30"},"nodeType":"YulFunctionCall","src":"9140:18:30"},{"hexValue":"206d696e746572","kind":"string","nodeType":"YulLiteral","src":"9160:9:30","type":"","value":" minter"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9133:6:30"},"nodeType":"YulFunctionCall","src":"9133:37:30"},"nodeType":"YulExpressionStatement","src":"9133:37:30"},{"nodeType":"YulAssignment","src":"9179:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9191:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9202:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9187:3:30"},"nodeType":"YulFunctionCall","src":"9187:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9179:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_3634f33128b839ba5aef34071c3d16bdb2be9a8409f06e01b36f02ba0c6fd43c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8960:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8974:4:30","type":""}],"src":"8809:403:30"},{"body":{"nodeType":"YulBlock","src":"9391:175:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9408:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9419:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9401:6:30"},"nodeType":"YulFunctionCall","src":"9401:21:30"},"nodeType":"YulExpressionStatement","src":"9401:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9442:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9453:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9438:3:30"},"nodeType":"YulFunctionCall","src":"9438:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"9458:2:30","type":"","value":"25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9431:6:30"},"nodeType":"YulFunctionCall","src":"9431:30:30"},"nodeType":"YulExpressionStatement","src":"9431:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9481:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9492:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9477:3:30"},"nodeType":"YulFunctionCall","src":"9477:18:30"},{"hexValue":"4a61736d696e654f7261636c653a20696e76616c6964204944","kind":"string","nodeType":"YulLiteral","src":"9497:27:30","type":"","value":"JasmineOracle: invalid ID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9470:6:30"},"nodeType":"YulFunctionCall","src":"9470:55:30"},"nodeType":"YulExpressionStatement","src":"9470:55:30"},{"nodeType":"YulAssignment","src":"9534:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9546:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9557:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9542:3:30"},"nodeType":"YulFunctionCall","src":"9542:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9534:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_df9425266fe7933ff585facc22dca0a4c1e3703f9880cb0c973bca3701fe9bdb__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9368:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9382:4:30","type":""}],"src":"9217:349:30"},{"body":{"nodeType":"YulBlock","src":"9652:103:30","statements":[{"body":{"nodeType":"YulBlock","src":"9698:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9707:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9710:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9700:6:30"},"nodeType":"YulFunctionCall","src":"9700:12:30"},"nodeType":"YulExpressionStatement","src":"9700:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9673:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"9682:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9669:3:30"},"nodeType":"YulFunctionCall","src":"9669:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"9694:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9665:3:30"},"nodeType":"YulFunctionCall","src":"9665:32:30"},"nodeType":"YulIf","src":"9662:52:30"},{"nodeType":"YulAssignment","src":"9723:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9739:9:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9733:5:30"},"nodeType":"YulFunctionCall","src":"9733:16:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9723:6:30"}]}]},"name":"abi_decode_tuple_t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9618:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9629:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9641:6:30","type":""}],"src":"9571:184:30"},{"body":{"nodeType":"YulBlock","src":"9934:236:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9951:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9962:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9944:6:30"},"nodeType":"YulFunctionCall","src":"9944:21:30"},"nodeType":"YulExpressionStatement","src":"9944:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9985:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9996:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9981:3:30"},"nodeType":"YulFunctionCall","src":"9981:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"10001:2:30","type":"","value":"46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9974:6:30"},"nodeType":"YulFunctionCall","src":"9974:30:30"},"nodeType":"YulExpressionStatement","src":"9974:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10024:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10035:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10020:3:30"},"nodeType":"YulFunctionCall","src":"10020:18:30"},{"hexValue":"45524331393637557067726164653a206e657720696d706c656d656e74617469","kind":"string","nodeType":"YulLiteral","src":"10040:34:30","type":"","value":"ERC1967Upgrade: new implementati"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10013:6:30"},"nodeType":"YulFunctionCall","src":"10013:62:30"},"nodeType":"YulExpressionStatement","src":"10013:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10095:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10106:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10091:3:30"},"nodeType":"YulFunctionCall","src":"10091:18:30"},{"hexValue":"6f6e206973206e6f742055555053","kind":"string","nodeType":"YulLiteral","src":"10111:16:30","type":"","value":"on is not UUPS"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10084:6:30"},"nodeType":"YulFunctionCall","src":"10084:44:30"},"nodeType":"YulExpressionStatement","src":"10084:44:30"},{"nodeType":"YulAssignment","src":"10137:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10149:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10160:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10145:3:30"},"nodeType":"YulFunctionCall","src":"10145:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10137:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9911:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9925:4:30","type":""}],"src":"9760:410:30"},{"body":{"nodeType":"YulBlock","src":"10349:231:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10366:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10377:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10359:6:30"},"nodeType":"YulFunctionCall","src":"10359:21:30"},"nodeType":"YulExpressionStatement","src":"10359:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10400:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10411:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10396:3:30"},"nodeType":"YulFunctionCall","src":"10396:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"10416:2:30","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10389:6:30"},"nodeType":"YulFunctionCall","src":"10389:30:30"},"nodeType":"YulExpressionStatement","src":"10389:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10439:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10450:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10435:3:30"},"nodeType":"YulFunctionCall","src":"10435:18:30"},{"hexValue":"45524331393637557067726164653a20756e737570706f727465642070726f78","kind":"string","nodeType":"YulLiteral","src":"10455:34:30","type":"","value":"ERC1967Upgrade: unsupported prox"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10428:6:30"},"nodeType":"YulFunctionCall","src":"10428:62:30"},"nodeType":"YulExpressionStatement","src":"10428:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10510:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10521:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10506:3:30"},"nodeType":"YulFunctionCall","src":"10506:18:30"},{"hexValue":"6961626c6555554944","kind":"string","nodeType":"YulLiteral","src":"10526:11:30","type":"","value":"iableUUID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10499:6:30"},"nodeType":"YulFunctionCall","src":"10499:39:30"},"nodeType":"YulExpressionStatement","src":"10499:39:30"},{"nodeType":"YulAssignment","src":"10547:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10559:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10570:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10555:3:30"},"nodeType":"YulFunctionCall","src":"10555:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10547:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10326:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10340:4:30","type":""}],"src":"10175:405:30"},{"body":{"nodeType":"YulBlock","src":"10759:233:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10776:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10787:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10769:6:30"},"nodeType":"YulFunctionCall","src":"10769:21:30"},"nodeType":"YulExpressionStatement","src":"10769:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10810:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10821:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10806:3:30"},"nodeType":"YulFunctionCall","src":"10806:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"10826:2:30","type":"","value":"43"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10799:6:30"},"nodeType":"YulFunctionCall","src":"10799:30:30"},"nodeType":"YulExpressionStatement","src":"10799:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10849:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10860:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10845:3:30"},"nodeType":"YulFunctionCall","src":"10845:18:30"},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069","kind":"string","nodeType":"YulLiteral","src":"10865:34:30","type":"","value":"Initializable: contract is not i"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10838:6:30"},"nodeType":"YulFunctionCall","src":"10838:62:30"},"nodeType":"YulExpressionStatement","src":"10838:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10920:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10931:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10916:3:30"},"nodeType":"YulFunctionCall","src":"10916:18:30"},{"hexValue":"6e697469616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"10936:13:30","type":"","value":"nitializing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10909:6:30"},"nodeType":"YulFunctionCall","src":"10909:41:30"},"nodeType":"YulExpressionStatement","src":"10909:41:30"},{"nodeType":"YulAssignment","src":"10959:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10971:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10982:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10967:3:30"},"nodeType":"YulFunctionCall","src":"10967:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10959:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10736:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10750:4:30","type":""}],"src":"10585:407:30"},{"body":{"nodeType":"YulBlock","src":"11171:182:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11188:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"11199:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11181:6:30"},"nodeType":"YulFunctionCall","src":"11181:21:30"},"nodeType":"YulExpressionStatement","src":"11181:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11222:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"11233:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11218:3:30"},"nodeType":"YulFunctionCall","src":"11218:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"11238:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11211:6:30"},"nodeType":"YulFunctionCall","src":"11211:30:30"},"nodeType":"YulExpressionStatement","src":"11211:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11261:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"11272:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11257:3:30"},"nodeType":"YulFunctionCall","src":"11257:18:30"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"11277:34:30","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11250:6:30"},"nodeType":"YulFunctionCall","src":"11250:62:30"},"nodeType":"YulExpressionStatement","src":"11250:62:30"},{"nodeType":"YulAssignment","src":"11321:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11333:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"11344:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11329:3:30"},"nodeType":"YulFunctionCall","src":"11329:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11321:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11148:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11162:4:30","type":""}],"src":"10997:356:30"},{"body":{"nodeType":"YulBlock","src":"11532:235:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11549:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"11560:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11542:6:30"},"nodeType":"YulFunctionCall","src":"11542:21:30"},"nodeType":"YulExpressionStatement","src":"11542:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11583:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"11594:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11579:3:30"},"nodeType":"YulFunctionCall","src":"11579:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"11599:2:30","type":"","value":"45"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11572:6:30"},"nodeType":"YulFunctionCall","src":"11572:30:30"},"nodeType":"YulExpressionStatement","src":"11572:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11622:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"11633:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11618:3:30"},"nodeType":"YulFunctionCall","src":"11618:18:30"},{"hexValue":"455243313936373a206e657720696d706c656d656e746174696f6e206973206e","kind":"string","nodeType":"YulLiteral","src":"11638:34:30","type":"","value":"ERC1967: new implementation is n"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11611:6:30"},"nodeType":"YulFunctionCall","src":"11611:62:30"},"nodeType":"YulExpressionStatement","src":"11611:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11693:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"11704:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11689:3:30"},"nodeType":"YulFunctionCall","src":"11689:18:30"},{"hexValue":"6f74206120636f6e7472616374","kind":"string","nodeType":"YulLiteral","src":"11709:15:30","type":"","value":"ot a contract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11682:6:30"},"nodeType":"YulFunctionCall","src":"11682:43:30"},"nodeType":"YulExpressionStatement","src":"11682:43:30"},{"nodeType":"YulAssignment","src":"11734:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11746:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"11757:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11742:3:30"},"nodeType":"YulFunctionCall","src":"11742:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11734:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11509:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11523:4:30","type":""}],"src":"11358:409:30"},{"body":{"nodeType":"YulBlock","src":"11946:228:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11963:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"11974:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11956:6:30"},"nodeType":"YulFunctionCall","src":"11956:21:30"},"nodeType":"YulExpressionStatement","src":"11956:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11997:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12008:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11993:3:30"},"nodeType":"YulFunctionCall","src":"11993:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"12013:2:30","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11986:6:30"},"nodeType":"YulFunctionCall","src":"11986:30:30"},"nodeType":"YulExpressionStatement","src":"11986:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12036:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12047:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12032:3:30"},"nodeType":"YulFunctionCall","src":"12032:18:30"},{"hexValue":"416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f","kind":"string","nodeType":"YulLiteral","src":"12052:34:30","type":"","value":"Address: delegate call to non-co"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12025:6:30"},"nodeType":"YulFunctionCall","src":"12025:62:30"},"nodeType":"YulExpressionStatement","src":"12025:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12107:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12118:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12103:3:30"},"nodeType":"YulFunctionCall","src":"12103:18:30"},{"hexValue":"6e7472616374","kind":"string","nodeType":"YulLiteral","src":"12123:8:30","type":"","value":"ntract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12096:6:30"},"nodeType":"YulFunctionCall","src":"12096:36:30"},"nodeType":"YulExpressionStatement","src":"12096:36:30"},{"nodeType":"YulAssignment","src":"12141:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12153:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12164:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12149:3:30"},"nodeType":"YulFunctionCall","src":"12149:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12141:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11923:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11937:4:30","type":""}],"src":"11772:402:30"},{"body":{"nodeType":"YulBlock","src":"12245:184:30","statements":[{"nodeType":"YulVariableDeclaration","src":"12255:10:30","value":{"kind":"number","nodeType":"YulLiteral","src":"12264:1:30","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"12259:1:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"12324:63:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"12349:3:30"},{"name":"i","nodeType":"YulIdentifier","src":"12354:1:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12345:3:30"},"nodeType":"YulFunctionCall","src":"12345:11:30"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"12368:3:30"},{"name":"i","nodeType":"YulIdentifier","src":"12373:1:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12364:3:30"},"nodeType":"YulFunctionCall","src":"12364:11:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12358:5:30"},"nodeType":"YulFunctionCall","src":"12358:18:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12338:6:30"},"nodeType":"YulFunctionCall","src":"12338:39:30"},"nodeType":"YulExpressionStatement","src":"12338:39:30"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"12285:1:30"},{"name":"length","nodeType":"YulIdentifier","src":"12288:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"12282:2:30"},"nodeType":"YulFunctionCall","src":"12282:13:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"12296:19:30","statements":[{"nodeType":"YulAssignment","src":"12298:15:30","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"12307:1:30"},{"kind":"number","nodeType":"YulLiteral","src":"12310:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12303:3:30"},"nodeType":"YulFunctionCall","src":"12303:10:30"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"12298:1:30"}]}]},"pre":{"nodeType":"YulBlock","src":"12278:3:30","statements":[]},"src":"12274:113:30"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"12407:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"12412:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12403:3:30"},"nodeType":"YulFunctionCall","src":"12403:16:30"},{"kind":"number","nodeType":"YulLiteral","src":"12421:1:30","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12396:6:30"},"nodeType":"YulFunctionCall","src":"12396:27:30"},"nodeType":"YulExpressionStatement","src":"12396:27:30"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"12223:3:30","type":""},{"name":"dst","nodeType":"YulTypedName","src":"12228:3:30","type":""},{"name":"length","nodeType":"YulTypedName","src":"12233:6:30","type":""}],"src":"12179:250:30"},{"body":{"nodeType":"YulBlock","src":"12571:150:30","statements":[{"nodeType":"YulVariableDeclaration","src":"12581:27:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12601:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12595:5:30"},"nodeType":"YulFunctionCall","src":"12595:13:30"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"12585:6:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12656:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"12664:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12652:3:30"},"nodeType":"YulFunctionCall","src":"12652:17:30"},{"name":"pos","nodeType":"YulIdentifier","src":"12671:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"12676:6:30"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"12617:34:30"},"nodeType":"YulFunctionCall","src":"12617:66:30"},"nodeType":"YulExpressionStatement","src":"12617:66:30"},{"nodeType":"YulAssignment","src":"12692:23:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12703:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"12708:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12699:3:30"},"nodeType":"YulFunctionCall","src":"12699:16:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12692:3:30"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12547:3:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12552:6:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12563:3:30","type":""}],"src":"12434:287:30"},{"body":{"nodeType":"YulBlock","src":"12847:275:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12864:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12875:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12857:6:30"},"nodeType":"YulFunctionCall","src":"12857:21:30"},"nodeType":"YulExpressionStatement","src":"12857:21:30"},{"nodeType":"YulVariableDeclaration","src":"12887:27:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12907:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12901:5:30"},"nodeType":"YulFunctionCall","src":"12901:13:30"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"12891:6:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12934:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12945:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12930:3:30"},"nodeType":"YulFunctionCall","src":"12930:18:30"},{"name":"length","nodeType":"YulIdentifier","src":"12950:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12923:6:30"},"nodeType":"YulFunctionCall","src":"12923:34:30"},"nodeType":"YulExpressionStatement","src":"12923:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13005:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"13013:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13001:3:30"},"nodeType":"YulFunctionCall","src":"13001:15:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13022:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13033:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13018:3:30"},"nodeType":"YulFunctionCall","src":"13018:18:30"},{"name":"length","nodeType":"YulIdentifier","src":"13038:6:30"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"12966:34:30"},"nodeType":"YulFunctionCall","src":"12966:79:30"},"nodeType":"YulExpressionStatement","src":"12966:79:30"},{"nodeType":"YulAssignment","src":"13054:62:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13070:9:30"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"13089:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"13097:2:30","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13085:3:30"},"nodeType":"YulFunctionCall","src":"13085:15:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13106:2:30","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"13102:3:30"},"nodeType":"YulFunctionCall","src":"13102:7:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13081:3:30"},"nodeType":"YulFunctionCall","src":"13081:29:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13066:3:30"},"nodeType":"YulFunctionCall","src":"13066:45:30"},{"kind":"number","nodeType":"YulLiteral","src":"13113:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13062:3:30"},"nodeType":"YulFunctionCall","src":"13062:54:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13054:4:30"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12816:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12827:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12838:4:30","type":""}],"src":"12726:396:30"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0xffffffffffffffff\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(memPtr, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(memPtr, _1), 0x20), 0)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value1 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_addresst_bytes_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value1 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_uint128__to_t_uint128__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_uint32_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, 0xffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint8t_uint128t_uint32t_uint40t_uint32t_uint32t_uint32_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n    {\n        if slt(sub(dataEnd, headStart), 224) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, 0xff))) { revert(0, 0) }\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        if iszero(eq(value_1, and(value_1, 0xffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n        value1 := value_1\n        value2 := abi_decode_uint32_fromMemory(add(headStart, 64))\n        let value_2 := mload(add(headStart, 96))\n        if iszero(eq(value_2, and(value_2, 0xffffffffff))) { revert(0, 0) }\n        value3 := value_2\n        value4 := abi_decode_uint32_fromMemory(add(headStart, 128))\n        value5 := abi_decode_uint32_fromMemory(add(headStart, 160))\n        value6 := abi_decode_uint32_fromMemory(add(headStart, 192))\n    }\n    function abi_encode_tuple_t_stringliteral_47a3bd5b6e49234fa94e9da8ea5a7d8a1dc9626493701a7bc7dbdf644696d561__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"JasmineOracle: invalid metadata \")\n        mstore(add(headStart, 96), \"version\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_cb632be90e6be82dfa05c64f79aee82f69a0acc10696a637a916b6886e169fbd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"JasmineOracle: UUID mismatch\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_8b616c52b3148b05e75083b1a70f12c0e7167f192499878c62938ea41e452dbb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"JasmineOracle: registry mismatch\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_6d452a5da70bea7507f7f2b90704a455c1547a2793b598dadcd558c856077ca3__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"JasmineOracle: vintage mismatch\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"Function must be called through \")\n        mstore(add(headStart, 96), \"delegatecall\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"Function must be called through \")\n        mstore(add(headStart, 96), \"active proxy\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 56)\n        mstore(add(headStart, 64), \"UUPSUpgradeable: must not be cal\")\n        mstore(add(headStart, 96), \"led through delegatecall\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_225559eb8402045bea7ff07c35d0ad8c0547830223ac1c21d44fb948d6896ebc__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"Ownable2Step: caller is not the \")\n        mstore(add(headStart, 96), \"new owner\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3634f33128b839ba5aef34071c3d16bdb2be9a8409f06e01b36f02ba0c6fd43c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"JasmineOracle: caller is not the\")\n        mstore(add(headStart, 96), \" minter\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_df9425266fe7933ff585facc22dca0a4c1e3703f9880cb0c973bca3701fe9bdb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"JasmineOracle: invalid ID\")\n        tail := add(headStart, 96)\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"ERC1967Upgrade: new implementati\")\n        mstore(add(headStart, 96), \"on is not UUPS\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1967Upgrade: unsupported prox\")\n        mstore(add(headStart, 96), \"iableUUID\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"Initializable: contract is not i\")\n        mstore(add(headStart, 96), \"nitializing\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 45)\n        mstore(add(headStart, 64), \"ERC1967: new implementation is n\")\n        mstore(add(headStart, 96), \"ot a contract\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: delegate call to non-co\")\n        mstore(add(headStart, 96), \"ntract\")\n        tail := add(headStart, 128)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n}","id":30,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"826":[{"length":32,"start":1657},{"length":32,"start":1721},{"length":32,"start":2072},{"length":32,"start":2136},{"length":32,"start":2418},{"length":32,"start":2482},{"length":32,"start":2629}]},"linkReferences":{},"object":"6080604052600436106101095760003560e01c8063715018a611610095578063d7c9d1c511610064578063d7c9d1c514610313578063e30c397814610333578063f2fde38b14610351578063f776e98d14610371578063fca3b5aa146103ab57600080fd5b8063715018a61461028957806379ba50971461029e5780638da5cb5b146102b3578063bc5f8ccd146102d157600080fd5b80634ce78e5f116100dc5780634ce78e5f146101ad5780634f1ef286146101fb57806352d1902d1461020e57806354e69d0e1461023157806369cffd171461025157600080fd5b8063075461721461010e57806307e3810c1461014b5780633659cfe61461016d578063485cc9551461018d575b600080fd5b34801561011a57600080fd5b5060fb5461012e906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561015757600080fd5b5061016b6101663660046112f7565b6103cb565b005b34801561017957600080fd5b5061016b61018836600461135a565b61066f565b34801561019957600080fd5b5061016b6101a8366004611375565b61074e565b3480156101b957600080fd5b506101eb6101c83660046113a8565b600091825260fc60205260409091205465010000000000900463ffffffff161490565b6040519015158152602001610142565b61016b6102093660046113ca565b610968565b34801561021a57600080fd5b50610223610a38565b604051908152602001610142565b34801561023d57600080fd5b506101eb61024c366004611402565b610aeb565b34801561025d57600080fd5b5061027161026c36600461142e565b610b16565b6040516001600160801b039091168152602001610142565b34801561029557600080fd5b5061016b610b2c565b3480156102aa57600080fd5b5061016b610b40565b3480156102bf57600080fd5b506033546001600160a01b031661012e565b3480156102dd57600080fd5b506101eb6102ec3660046113a8565b600091825260fc6020526040909120546901000000000000000000900463ffffffff161490565b34801561031f57600080fd5b506101eb61032e3660046113a8565b610bb7565b34801561033f57600080fd5b506065546001600160a01b031661012e565b34801561035d57600080fd5b5061016b61036c36600461135a565b610bcf565b34801561037d57600080fd5b506101eb61038c3660046113a8565b600091825260fc602052604090912054610100900463ffffffff161490565b3480156103b757600080fd5b5061016b6103c636600461135a565b610c40565b6103d3610c92565b60008060006103e185610cfc565b92509250925060008060008060008060008a806020019051810190610406919061145b565b96509650965096509650965096508660ff1660011461047c5760405162461bcd60e51b815260206004820152602760248201527f4a61736d696e654f7261636c653a20696e76616c6964206d65746164617461206044820152663b32b939b4b7b760c91b60648201526084015b60405180910390fd5b856001600160801b03168a146104d45760405162461bcd60e51b815260206004820152601c60248201527f4a61736d696e654f7261636c653a2055554944206d69736d61746368000000006044820152606401610473565b8463ffffffff1689146105295760405162461bcd60e51b815260206004820181905260248201527f4a61736d696e654f7261636c653a207265676973747279206d69736d617463686044820152606401610473565b8364ffffffffff16881461057f5760405162461bcd60e51b815260206004820152601f60248201527f4a61736d696e654f7261636c653a2076696e74616765206d69736d61746368006044820152606401610473565b60405180608001604052808860ff1681526020018463ffffffff1681526020018363ffffffff1681526020018263ffffffff1681525060fc60008e815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160056101000a81548163ffffffff021916908363ffffffff16021790555060608201518160000160096101000a81548163ffffffff021916908363ffffffff160217905550905050505050505050505050505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036106b75760405162461bcd60e51b815260040161047390611504565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610700600080516020611629833981519152546001600160a01b031690565b6001600160a01b0316146107265760405162461bcd60e51b815260040161047390611550565b61072f81610d78565b6040805160008082526020820190925261074b91839190610d80565b50565b600054610100900460ff161580801561076e5750600054600160ff909116105b806107885750303b158015610788575060005460ff166001145b6107eb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610473565b6000805460ff19166001179055801561080e576000805461ff0019166101001790555b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036108565760405162461bcd60e51b815260040161047390611504565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661089f600080516020611629833981519152546001600160a01b031690565b6001600160a01b0316146108c55760405162461bcd60e51b815260040161047390611550565b6108ce82610eeb565b6108d6610f04565b60fb80546001600160a01b0319166001600160a01b0385169081179091556040517fb6b8f1859c5c352e5ffad07d0f77e384ac725512c015bd3a3ffc885831c8a42590600090a28015610963576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036109b05760405162461bcd60e51b815260040161047390611504565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109f9600080516020611629833981519152546001600160a01b031690565b6001600160a01b031614610a1f5760405162461bcd60e51b815260040161047390611550565b610a2882610d78565b610a3482826001610d80565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610ad85760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610473565b5060008051602061162983398151915290565b600080610af785610cfc565b92505050838110158015610b0b5750828111155b9150505b9392505050565b600080610b2283610cfc565b5090949350505050565b610b34610f6f565b610b3e6000610eeb565b565b60655433906001600160a01b03168114610bae5760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b6064820152608401610473565b61074b81610eeb565b600080610bc384610cfc565b50909314949350505050565b610bd7610f6f565b606580546001600160a01b0383166001600160a01b03199091168117909155610c086033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b610c48610f6f565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040517fb6b8f1859c5c352e5ffad07d0f77e384ac725512c015bd3a3ffc885831c8a42590600090a250565b60fb546001600160a01b03163314610b3e5760405162461bcd60e51b815260206004820152602760248201527f4a61736d696e654f7261636c653a2063616c6c6572206973206e6f74207468656044820152661036b4b73a32b960c91b6064820152608401610473565b608081901c606082901c63ffffffff16603883901c64ffffffffff1666ffffffffffffff84168015610d705760405162461bcd60e51b815260206004820152601960248201527f4a61736d696e654f7261636c653a20696e76616c6964204944000000000000006044820152606401610473565b509193909250565b61074b610f6f565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610db35761096383610fc9565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610e0d575060408051601f3d908101601f19168201909252610e0a9181019061159c565b60015b610e705760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610473565b6000805160206116298339815191528114610edf5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610473565b50610963838383611065565b606580546001600160a01b031916905561074b81611090565b600054610100900460ff16610b3e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610473565b6033546001600160a01b03163314610b3e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610473565b6001600160a01b0381163b6110365760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610473565b60008051602061162983398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61106e836110e2565b60008251118061107b5750805b156109635761108a8383611122565b50505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6110eb81610fc9565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b61118a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610473565b600080846001600160a01b0316846040516111a591906115d9565b600060405180830381855af49150503d80600081146111e0576040519150601f19603f3d011682016040523d82523d6000602084013e6111e5565b606091505b509150915061120d828260405180606001604052806027815260200161164960279139611216565b95945050505050565b60608315611225575081610b0f565b610b0f838381511561123a5781518083602001fd5b8060405162461bcd60e51b815260040161047391906115f5565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261127b57600080fd5b813567ffffffffffffffff8082111561129657611296611254565b604051601f8301601f19908116603f011681019082821181831017156112be576112be611254565b816040528381528660208588010111156112d757600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561130a57600080fd5b82359150602083013567ffffffffffffffff81111561132857600080fd5b6113348582860161126a565b9150509250929050565b80356001600160a01b038116811461135557600080fd5b919050565b60006020828403121561136c57600080fd5b610b0f8261133e565b6000806040838503121561138857600080fd5b6113918361133e565b915061139f6020840161133e565b90509250929050565b600080604083850312156113bb57600080fd5b50508035926020909101359150565b600080604083850312156113dd57600080fd5b6113e68361133e565b9150602083013567ffffffffffffffff81111561132857600080fd5b60008060006060848603121561141757600080fd5b505081359360208301359350604090920135919050565b60006020828403121561144057600080fd5b5035919050565b805163ffffffff8116811461135557600080fd5b600080600080600080600060e0888a03121561147657600080fd5b875160ff8116811461148757600080fd5b60208901519097506001600160801b03811681146114a457600080fd5b95506114b260408901611447565b9450606088015164ffffffffff811681146114cc57600080fd5b93506114da60808901611447565b92506114e860a08901611447565b91506114f660c08901611447565b905092959891949750929550565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6000602082840312156115ae57600080fd5b5051919050565b60005b838110156115d05781810151838201526020016115b8565b50506000910152565b600082516115eb8184602087016115b5565b9190910192915050565b60208152600082518060208401526116148160408501602087016115b5565b601f01601f1916919091016040019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220f2948a1079833271495f9104f10561680c703d3119093500abc8c82751c12ad864736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x109 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xD7C9D1C5 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xD7C9D1C5 EQ PUSH2 0x313 JUMPI DUP1 PUSH4 0xE30C3978 EQ PUSH2 0x333 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x351 JUMPI DUP1 PUSH4 0xF776E98D EQ PUSH2 0x371 JUMPI DUP1 PUSH4 0xFCA3B5AA EQ PUSH2 0x3AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x289 JUMPI DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x29E JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2B3 JUMPI DUP1 PUSH4 0xBC5F8CCD EQ PUSH2 0x2D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4CE78E5F GT PUSH2 0xDC JUMPI DUP1 PUSH4 0x4CE78E5F EQ PUSH2 0x1AD JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x1FB JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0x20E JUMPI DUP1 PUSH4 0x54E69D0E EQ PUSH2 0x231 JUMPI DUP1 PUSH4 0x69CFFD17 EQ PUSH2 0x251 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7546172 EQ PUSH2 0x10E JUMPI DUP1 PUSH4 0x7E3810C EQ PUSH2 0x14B JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x16D JUMPI DUP1 PUSH4 0x485CC955 EQ PUSH2 0x18D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x11A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xFB SLOAD PUSH2 0x12E SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x157 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16B PUSH2 0x166 CALLDATASIZE PUSH1 0x4 PUSH2 0x12F7 JUMP JUMPDEST PUSH2 0x3CB JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x179 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16B PUSH2 0x188 CALLDATASIZE PUSH1 0x4 PUSH2 0x135A JUMP JUMPDEST PUSH2 0x66F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x199 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16B PUSH2 0x1A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1375 JUMP JUMPDEST PUSH2 0x74E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1EB PUSH2 0x1C8 CALLDATASIZE PUSH1 0x4 PUSH2 0x13A8 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0xFC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD PUSH6 0x10000000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND EQ SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x142 JUMP JUMPDEST PUSH2 0x16B PUSH2 0x209 CALLDATASIZE PUSH1 0x4 PUSH2 0x13CA JUMP JUMPDEST PUSH2 0x968 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x21A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x223 PUSH2 0xA38 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x142 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x23D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1EB PUSH2 0x24C CALLDATASIZE PUSH1 0x4 PUSH2 0x1402 JUMP JUMPDEST PUSH2 0xAEB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x25D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x271 PUSH2 0x26C CALLDATASIZE PUSH1 0x4 PUSH2 0x142E JUMP JUMPDEST PUSH2 0xB16 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x142 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x295 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16B PUSH2 0xB2C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16B PUSH2 0xB40 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x12E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1EB PUSH2 0x2EC CALLDATASIZE PUSH1 0x4 PUSH2 0x13A8 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0xFC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD PUSH10 0x1000000000000000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND EQ SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x31F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1EB PUSH2 0x32E CALLDATASIZE PUSH1 0x4 PUSH2 0x13A8 JUMP JUMPDEST PUSH2 0xBB7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x33F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x12E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x35D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16B PUSH2 0x36C CALLDATASIZE PUSH1 0x4 PUSH2 0x135A JUMP JUMPDEST PUSH2 0xBCF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x37D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1EB PUSH2 0x38C CALLDATASIZE PUSH1 0x4 PUSH2 0x13A8 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0xFC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD PUSH2 0x100 SWAP1 DIV PUSH4 0xFFFFFFFF AND EQ SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16B PUSH2 0x3C6 CALLDATASIZE PUSH1 0x4 PUSH2 0x135A JUMP JUMPDEST PUSH2 0xC40 JUMP JUMPDEST PUSH2 0x3D3 PUSH2 0xC92 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x3E1 DUP6 PUSH2 0xCFC JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP11 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x406 SWAP2 SWAP1 PUSH2 0x145B JUMP JUMPDEST SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP DUP7 PUSH1 0xFF AND PUSH1 0x1 EQ PUSH2 0x47C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4A61736D696E654F7261636C653A20696E76616C6964206D6574616461746120 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x3B32B939B4B7B7 PUSH1 0xC9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP11 EQ PUSH2 0x4D4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4A61736D696E654F7261636C653A2055554944206D69736D6174636800000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x473 JUMP JUMPDEST DUP5 PUSH4 0xFFFFFFFF AND DUP10 EQ PUSH2 0x529 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4A61736D696E654F7261636C653A207265676973747279206D69736D61746368 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x473 JUMP JUMPDEST DUP4 PUSH5 0xFFFFFFFFFF AND DUP9 EQ PUSH2 0x57F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4A61736D696E654F7261636C653A2076696E74616765206D69736D6174636800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x473 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH4 0xFFFFFFFF AND DUP2 MSTORE POP PUSH1 0xFC PUSH1 0x0 DUP15 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x5 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x9 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0x6B7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x473 SWAP1 PUSH2 0x1504 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x700 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1629 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x726 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x473 SWAP1 PUSH2 0x1550 JUMP JUMPDEST PUSH2 0x72F DUP2 PUSH2 0xD78 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x74B SWAP2 DUP4 SWAP2 SWAP1 PUSH2 0xD80 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x76E JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x788 JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x788 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x7EB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x473 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x80E JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0x856 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x473 SWAP1 PUSH2 0x1504 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x89F PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1629 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x8C5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x473 SWAP1 PUSH2 0x1550 JUMP JUMPDEST PUSH2 0x8CE DUP3 PUSH2 0xEEB JUMP JUMPDEST PUSH2 0x8D6 PUSH2 0xF04 JUMP JUMPDEST PUSH1 0xFB DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0xB6B8F1859C5C352E5FFAD07D0F77E384AC725512C015BD3A3FFC885831C8A425 SWAP1 PUSH1 0x0 SWAP1 LOG2 DUP1 ISZERO PUSH2 0x963 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0x9B0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x473 SWAP1 PUSH2 0x1504 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x9F9 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1629 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xA1F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x473 SWAP1 PUSH2 0x1550 JUMP JUMPDEST PUSH2 0xA28 DUP3 PUSH2 0xD78 JUMP JUMPDEST PUSH2 0xA34 DUP3 DUP3 PUSH1 0x1 PUSH2 0xD80 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0xAD8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x473 JUMP JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1629 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xAF7 DUP6 PUSH2 0xCFC JUMP JUMPDEST SWAP3 POP POP POP DUP4 DUP2 LT ISZERO DUP1 ISZERO PUSH2 0xB0B JUMPI POP DUP3 DUP2 GT ISZERO JUMPDEST SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xB22 DUP4 PUSH2 0xCFC JUMP JUMPDEST POP SWAP1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xB34 PUSH2 0xF6F JUMP JUMPDEST PUSH2 0xB3E PUSH1 0x0 PUSH2 0xEEB JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x65 SLOAD CALLER SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 EQ PUSH2 0xBAE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C6532537465703A2063616C6C6572206973206E6F742074686520 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x3732BB9037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x473 JUMP JUMPDEST PUSH2 0x74B DUP2 PUSH2 0xEEB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xBC3 DUP5 PUSH2 0xCFC JUMP JUMPDEST POP SWAP1 SWAP4 EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xBD7 PUSH2 0xF6F JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH2 0xC08 PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x38D16B8CAC22D99FC7C124B9CD0DE2D3FA1FAEF420BFE791D8C362D765E22700 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH2 0xC48 PUSH2 0xF6F JUMP JUMPDEST PUSH1 0xFB DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0xB6B8F1859C5C352E5FFAD07D0F77E384AC725512C015BD3A3FFC885831C8A425 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0xFB SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xB3E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4A61736D696E654F7261636C653A2063616C6C6572206973206E6F7420746865 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x1036B4B73A32B9 PUSH1 0xC9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x473 JUMP JUMPDEST PUSH1 0x80 DUP2 SWAP1 SHR PUSH1 0x60 DUP3 SWAP1 SHR PUSH4 0xFFFFFFFF AND PUSH1 0x38 DUP4 SWAP1 SHR PUSH5 0xFFFFFFFFFF AND PUSH7 0xFFFFFFFFFFFFFF DUP5 AND DUP1 ISZERO PUSH2 0xD70 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4A61736D696E654F7261636C653A20696E76616C696420494400000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x473 JUMP JUMPDEST POP SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST PUSH2 0x74B PUSH2 0xF6F JUMP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xDB3 JUMPI PUSH2 0x963 DUP4 PUSH2 0xFC9 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xE0D JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xE0A SWAP2 DUP2 ADD SWAP1 PUSH2 0x159C JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xE70 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x6F6E206973206E6F742055555053 PUSH1 0x90 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x473 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1629 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 EQ PUSH2 0xEDF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1A58589B1955555251 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x473 JUMP JUMPDEST POP PUSH2 0x963 DUP4 DUP4 DUP4 PUSH2 0x1065 JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE PUSH2 0x74B DUP2 PUSH2 0x1090 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xB3E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x473 JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xB3E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x473 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND EXTCODESIZE PUSH2 0x1036 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x473 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1629 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x106E DUP4 PUSH2 0x10E2 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0x107B JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0x963 JUMPI PUSH2 0x108A DUP4 DUP4 PUSH2 0x1122 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x10EB DUP2 PUSH2 0xFC9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE PUSH2 0x118A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x473 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x40 MLOAD PUSH2 0x11A5 SWAP2 SWAP1 PUSH2 0x15D9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x11E0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x11E5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x120D DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1649 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x1216 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1225 JUMPI POP DUP2 PUSH2 0xB0F JUMP JUMPDEST PUSH2 0xB0F DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x123A JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x473 SWAP2 SWAP1 PUSH2 0x15F5 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x127B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1296 JUMPI PUSH2 0x1296 PUSH2 0x1254 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x12BE JUMPI PUSH2 0x12BE PUSH2 0x1254 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH2 0x12D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x20 DUP8 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP6 DUP4 ADD ADD MSTORE DUP1 SWAP5 POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x130A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1328 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1334 DUP6 DUP3 DUP7 ADD PUSH2 0x126A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1355 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x136C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB0F DUP3 PUSH2 0x133E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1388 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1391 DUP4 PUSH2 0x133E JUMP JUMPDEST SWAP2 POP PUSH2 0x139F PUSH1 0x20 DUP5 ADD PUSH2 0x133E JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x13BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x13DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x13E6 DUP4 PUSH2 0x133E JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1328 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1417 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP2 CALLDATALOAD SWAP4 PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 SWAP1 SWAP3 ADD CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1440 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1355 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x1476 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x1487 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP10 ADD MLOAD SWAP1 SWAP8 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x14A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP6 POP PUSH2 0x14B2 PUSH1 0x40 DUP10 ADD PUSH2 0x1447 JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD MLOAD PUSH5 0xFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x14CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 POP PUSH2 0x14DA PUSH1 0x80 DUP10 ADD PUSH2 0x1447 JUMP JUMPDEST SWAP3 POP PUSH2 0x14E8 PUSH1 0xA0 DUP10 ADD PUSH2 0x1447 JUMP JUMPDEST SWAP2 POP PUSH2 0x14F6 PUSH1 0xC0 DUP10 ADD PUSH2 0x1447 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x19195B1959D85D1958D85B1B PUSH1 0xA2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x6163746976652070726F7879 PUSH1 0xA0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x15AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x15D0 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x15B8 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x15EB DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x15B5 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1614 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x15B5 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID CALLDATASIZE ADDMOD SWAP5 LOG1 EXTCODESIZE LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBC416464726573733A206C6F PUSH24 0x2D6C6576656C2064656C65676174652063616C6C20666169 PUSH13 0x6564A2646970667358221220F2 SWAP5 DUP11 LT PUSH26 0x833271495F9104F10561680C703D3119093500ABC8C82751C12A 0xD8 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"703:5055:25:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1085:21;;;;;;;;;;-1:-1:-1;1085:21:25;;;;-1:-1:-1;;;;;1085:21:25;;;;;;-1:-1:-1;;;;;178:55:30;;;160:74;;148:2;133:18;1085:21:25;;;;;;;;4775:843;;;;;;;;;;-1:-1:-1;4775:843:25;;;;;:::i;:::-;;:::i;:::-;;3317:197:6;;;;;;;;;;-1:-1:-1;3317:197:6;;;;;:::i;:::-;;:::i;1597:262:25:-;;;;;;;;;;-1:-1:-1;1597:262:25;;;;;:::i;:::-;;:::i;3836:140::-;;;;;;;;;;-1:-1:-1;3836:140:25;;;;;:::i;:::-;3914:4;3933:13;;;:9;:13;;;;;;:29;;;;;;:38;;3836:140;;;;2568:14:30;;2561:22;2543:41;;2531:2;2516:18;3836:140:25;2403:187:30;3763:222:6;;;;;;:::i;:::-;;:::i;3006:131::-;;;;;;;;;;;;;:::i;:::-;;;3140:25:30;;;3128:2;3113:18;3006:131:6;2994:177:30;3269:201:25;;;;;;;;;;-1:-1:-1;3269:201:25;;;;;:::i;:::-;;:::i;2568:137::-;;;;;;;;;;-1:-1:-1;2568:137:25;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;3846:47:30;;;3828:66;;3816:2;3801:18;2568:137:25;3682:218:30;2071:101:1;;;;;;;;;;;;;:::i;2010:206:0:-;;;;;;;;;;;;;:::i;1441:85:1:-;;;;;;;;;;-1:-1:-1;1513:6:1;;-1:-1:-1;;;;;1513:6:1;1441:85;;3980:132:25;;;;;;;;;;-1:-1:-1;3980:132:25;;;;;:::i;:::-;4054:4;4073:13;;;:9;:13;;;;;;:25;;;;;;:34;;3980:132;2879:161;;;;;;;;;;-1:-1:-1;2879:161:25;;;;;:::i;:::-;;:::i;1123:99:0:-;;;;;;;;;;-1:-1:-1;1202:13:0;;-1:-1:-1;;;;;1202:13:0;1123:99;;1415:178;;;;;;;;;;-1:-1:-1;1415:178:0;;;;;:::i;:::-;;:::i;3714:118:25:-;;;;;;;;;;-1:-1:-1;3714:118:25;;;;;:::i;:::-;3781:4;3800:13;;;:9;:13;;;;;;:18;;;;;;:27;;3714:118;1472:121;;;;;;;;;;-1:-1:-1;1472:121:25;;;;;:::i;:::-;;:::i;4775:843::-;1266:14;:12;:14::i;:::-;4889:12:::1;4903:16:::0;4921:15:::1;4940:18;4955:2;4940:14;:18::i;:::-;4888:70;;;;;;4972:13;4993:16:::0;5017:19:::1;5044:18:::0;5070:11:::1;5089:22:::0;5119:18:::1;5166:15;5146:109;;;;;;;;;;;;:::i;:::-;4964:291;;;;;;;;;;;;;;5269:7;:12;;5280:1;5269:12;5261:64;;;::::0;-1:-1:-1;;;5261:64:25;;5250:2:30;5261:64:25::1;::::0;::::1;5232:21:30::0;5289:2;5269:18;;;5262:30;5328:34;5308:18;;;5301:62;-1:-1:-1;;;5379:18:30;;;5372:37;5426:19;;5261:64:25::1;;;;;;;;;5347:8;-1:-1:-1::0;;;;;5339:16:25::1;:4;:16;5331:57;;;::::0;-1:-1:-1;;;5331:57:25;;5658:2:30;5331:57:25::1;::::0;::::1;5640:21:30::0;5697:2;5677:18;;;5670:30;5736;5716:18;;;5709:58;5784:18;;5331:57:25::1;5456:352:30::0;5331:57:25::1;5414:12;5402:24;;:8;:24;5394:69;;;::::0;-1:-1:-1;;;5394:69:25;;6015:2:30;5394:69:25::1;::::0;::::1;5997:21:30::0;;;6034:18;;;6027:30;6093:34;6073:18;;;6066:62;6145:18;;5394:69:25::1;5813:356:30::0;5394:69:25::1;5488:11;5477:22;;:7;:22;5469:66;;;::::0;-1:-1:-1;;;5469:66:25;;6376:2:30;5469:66:25::1;::::0;::::1;6358:21:30::0;6415:2;6395:18;;;6388:30;6454:33;6434:18;;;6427:61;6505:18;;5469:66:25::1;6174:355:30::0;5469:66:25::1;5557:56;;;;;;;;5569:7;5557:56;;;;;;5578:4;5557:56;;;;;;5584:15;5557:56;;;;;;5601:11;5557:56;;;;::::0;5541:9:::1;:13;5551:2;5541:13;;;;;;;;;;;:72;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4882:736;;;;;;;;;;4775:843:::0;;:::o;3317:197:6:-;-1:-1:-1;;;;;1898:6:6;1881:23;1889:4;1881:23;1873:80;;;;-1:-1:-1;;;1873:80:6;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:6;:20;-1:-1:-1;;;;;;;;;;;1642:65:3;-1:-1:-1;;;;;1642:65:3;;1563:151;1971:20:6;-1:-1:-1;;;;;1971:30:6;;1963:87;;;;-1:-1:-1;;;1963:87:6;;;;;;;:::i;:::-;3400:36:::1;3418:17;3400;:36::i;:::-;3487:12;::::0;;3497:1:::1;3487:12:::0;;;::::1;::::0;::::1;::::0;;;3446:61:::1;::::0;3468:17;;3487:12;3446:21:::1;:61::i;:::-;3317:197:::0;:::o;1597:262:25:-;3268:19:5;3291:13;;;;;;3290:14;;3336:34;;;;-1:-1:-1;3354:12:5;;3369:1;3354:12;;;;:16;3336:34;3335:108;;;-1:-1:-1;3415:4:5;1476:19:13;:23;;;3376:66:5;;-1:-1:-1;3425:12:5;;;;;:17;3376:66;3314:201;;;;-1:-1:-1;;;3314:201:5;;7562:2:30;3314:201:5;;;7544:21:30;7601:2;7581:18;;;7574:30;7640:34;7620:18;;;7613:62;-1:-1:-1;;;7691:18:30;;;7684:44;7745:19;;3314:201:5;7360:410:30;3314:201:5;3525:12;:16;;-1:-1:-1;;3525:16:5;3540:1;3525:16;;;3551:65;;;;3585:13;:20;;-1:-1:-1;;3585:20:5;;;;;3551:65;-1:-1:-1;;;;;1898:6:6::1;1881:23;1889:4;1881:23:::0;1873:80:::1;;;;-1:-1:-1::0;;;1873:80:6::1;;;;;;;:::i;:::-;1995:6;-1:-1:-1::0;;;;;1971:30:6::1;:20;-1:-1:-1::0;;;;;;;;;;;1642:65:3;-1:-1:-1;;;;;1642:65:3;;1563:151;1971:20:6::1;-1:-1:-1::0;;;;;1971:30:6::1;;1963:87;;;;-1:-1:-1::0;;;1963:87:6::1;;;;;;;:::i;:::-;1699:32:25::2;1718:12;1699:18;:32::i;:::-;1763:24;:22;:24::i;:::-;1793:6;:22:::0;;-1:-1:-1;;;;;;1793:22:25::2;-1:-1:-1::0;;;;;1793:22:25;::::2;::::0;;::::2;::::0;;;1826:28:::2;::::0;::::2;::::0;-1:-1:-1;;1826:28:25::2;3640:14:5::0;3636:99;;;3686:5;3670:21;;-1:-1:-1;;3670:21:5;;;3710:14;;-1:-1:-1;7927:36:30;;3710:14:5;;7915:2:30;7900:18;3710:14:5;;;;;;;3636:99;3258:483;1597:262:25;;:::o;3763:222:6:-;-1:-1:-1;;;;;1898:6:6;1881:23;1889:4;1881:23;1873:80;;;;-1:-1:-1;;;1873:80:6;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:6;:20;-1:-1:-1;;;;;;;;;;;1642:65:3;-1:-1:-1;;;;;1642:65:3;;1563:151;1971:20:6;-1:-1:-1;;;;;1971:30:6;;1963:87;;;;-1:-1:-1;;;1963:87:6;;;;;;;:::i;:::-;3880:36:::1;3898:17;3880;:36::i;:::-;3926:52;3948:17;3967:4;3973;3926:21;:52::i;:::-;3763:222:::0;;:::o;3006:131::-;3084:7;2324:4;-1:-1:-1;;;;;2333:6:6;2316:23;;2308:92;;;;-1:-1:-1;;;2308:92:6;;8176:2:30;2308:92:6;;;8158:21:30;8215:2;8195:18;;;8188:30;8254:34;8234:18;;;8227:62;8325:26;8305:18;;;8298:54;8369:19;;2308:92:6;7974:420:30;2308:92:6;-1:-1:-1;;;;;;;;;;;;3006:131:6;:::o;3269:201:25:-;3366:4;3383:15;3402:18;3417:2;3402:14;:18::i;:::-;3378:42;;;;3444:3;3433:7;:14;;:32;;;;;3462:3;3451:7;:14;;3433:32;3426:39;;;3269:201;;;;;;:::o;2568:137::-;2620:7;2636:12;2656:18;2671:2;2656:14;:18::i;:::-;-1:-1:-1;2635:39:25;;2568:137;-1:-1:-1;;;;2568:137:25:o;2071:101:1:-;1334:13;:11;:13::i;:::-;2135:30:::1;2162:1;2135:18;:30::i;:::-;2071:101::o:0;2010:206:0:-;1202:13;;929:10:14;;-1:-1:-1;;;;;1202:13:0;2103:24;;2095:78;;;;-1:-1:-1;;;2095:78:0;;8601:2:30;2095:78:0;;;8583:21:30;8640:2;8620:18;;;8613:30;8679:34;8659:18;;;8652:62;-1:-1:-1;;;8730:18:30;;;8723:39;8779:19;;2095:78:0;8399:405:30;2095:78:0;2183:26;2202:6;2183:18;:26::i;2879:161:25:-;2950:4;2965:16;2987:18;3002:2;2987:14;:18::i;:::-;-1:-1:-1;3018:17:25;;;;2879:161;-1:-1:-1;;;;2879:161:25:o;1415:178:0:-;1334:13:1;:11;:13::i;:::-;1504::0::1;:24:::0;;-1:-1:-1;;;;;1504:24:0;::::1;-1:-1:-1::0;;;;;;1504:24:0;;::::1;::::0;::::1;::::0;;;1568:7:::1;1513:6:1::0;;-1:-1:-1;;;;;1513:6:1;;1441:85;1568:7:0::1;-1:-1:-1::0;;;;;1543:43:0::1;;;;;;;;;;;1415:178:::0;:::o;1472:121:25:-;1334:13:1;:11;:13::i;:::-;1535:6:25::1;:18:::0;;-1:-1:-1;;;;;;1535:18:25::1;-1:-1:-1::0;;;;;1535:18:25;::::1;::::0;;::::1;::::0;;;1564:24:::1;::::0;::::1;::::0;-1:-1:-1;;1564:24:25::1;1472:121:::0;:::o;1111:123::-;1163:6;;-1:-1:-1;;;;;1163:6:25;929:10:14;1163:22:25;1155:74;;;;-1:-1:-1;;;1155:74:25;;9011:2:30;1155:74:25;;;8993:21:30;9050:2;9030:18;;;9023:30;9089:34;9069:18;;;9062:62;-1:-1:-1;;;9140:18:30;;;9133:37;9187:19;;1155:74:25;8809:403:30;2035:385:25;2251:3;2245:9;;;2269:2;2263:8;;;2275:16;2262:29;2306:2;2300:8;;;2312:16;2299:29;2341:16;2336:21;;2377:8;;2369:46;;;;-1:-1:-1;;;2369:46:25;;9419:2:30;2369:46:25;;;9401:21:30;9458:2;9438:18;;;9431:30;9497:27;9477:18;;;9470:55;9542:18;;2369:46:25;9217:349:30;2369:46:25;2181:239;2035:385;;;;;:::o;913:66::-;1334:13:1;:11;:13::i;2938:974:3:-;951:66;3384:59;;;3380:526;;;3459:37;3478:17;3459:18;:37::i;3380:526::-;3560:17;-1:-1:-1;;;;;3531:61:3;;:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3531:63:3;;;;;;;;-1:-1:-1;;3531:63:3;;;;;;;;;;;;:::i;:::-;;;3527:302;;3758:56;;-1:-1:-1;;;3758:56:3;;9962:2:30;3758:56:3;;;9944:21:30;10001:2;9981:18;;;9974:30;10040:34;10020:18;;;10013:62;-1:-1:-1;;;10091:18:30;;;10084:44;10145:19;;3758:56:3;9760:410:30;3527:302:3;-1:-1:-1;;;;;;;;;;;3644:28:3;;3636:82;;;;-1:-1:-1;;;3636:82:3;;10377:2:30;3636:82:3;;;10359:21:30;10416:2;10396:18;;;10389:30;10455:34;10435:18;;;10428:62;-1:-1:-1;;;10506:18:30;;;10499:39;10555:19;;3636:82:3;10175:405:30;3636:82:3;3595:138;3842:53;3860:17;3879:4;3885:9;3842:17;:53::i;1777:153:0:-;1866:13;1859:20;;-1:-1:-1;;;;;;1859:20:0;;;1889:34;1914:8;1889:24;:34::i;1042:67:6:-;5363:13:5;;;;;;;5355:69;;;;-1:-1:-1;;;5355:69:5;;10787:2:30;5355:69:5;;;10769:21:30;10826:2;10806:18;;;10799:30;10865:34;10845:18;;;10838:62;-1:-1:-1;;;10916:18:30;;;10909:41;10967:19;;5355:69:5;10585:407:30;1599:130:1;1513:6;;-1:-1:-1;;;;;1513:6:1;929:10:14;1662:23:1;1654:68;;;;-1:-1:-1;;;1654:68:1;;11199:2:30;1654:68:1;;;11181:21:30;;;11218:18;;;11211:30;11277:34;11257:18;;;11250:62;11329:18;;1654:68:1;10997:356:30;1805:281:3;-1:-1:-1;;;;;1476:19:13;;;1878:106:3;;;;-1:-1:-1;;;1878:106:3;;11560:2:30;1878:106:3;;;11542:21:30;11599:2;11579:18;;;11572:30;11638:34;11618:18;;;11611:62;-1:-1:-1;;;11689:18:30;;;11682:43;11742:19;;1878:106:3;11358:409:30;1878:106:3;-1:-1:-1;;;;;;;;;;;1994:85:3;;-1:-1:-1;;;;;;1994:85:3;-1:-1:-1;;;;;1994:85:3;;;;;;;;;;1805:281::o;2478:288::-;2616:29;2627:17;2616:10;:29::i;:::-;2673:1;2659:4;:11;:15;:28;;;;2678:9;2659:28;2655:105;;;2703:46;2725:17;2744:4;2703:21;:46::i;:::-;;2478:288;;;:::o;2673:187:1:-;2765:6;;;-1:-1:-1;;;;;2781:17:1;;;-1:-1:-1;;;;;;2781:17:1;;;;;;;2813:40;;2765:6;;;2781:17;2765:6;;2813:40;;2746:16;;2813:40;2736:124;2673:187;:::o;2192:152:3:-;2258:37;2277:17;2258:18;:37::i;:::-;2310:27;;-1:-1:-1;;;;;2310:27:3;;;;;;;;2192:152;:::o;7088:455::-;7171:12;-1:-1:-1;;;;;1476:19:13;;;7195:88:3;;;;-1:-1:-1;;;7195:88:3;;11974:2:30;7195:88:3;;;11956:21:30;12013:2;11993:18;;;11986:30;12052:34;12032:18;;;12025:62;-1:-1:-1;;;12103:18:30;;;12096:36;12149:19;;7195:88:3;11772:402:30;7195:88:3;7354:12;7368:23;7395:6;-1:-1:-1;;;;;7395:19:3;7415:4;7395:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7353:67;;;;7437:99;7473:7;7482:10;7437:99;;;;;;;;;;;;;;;;;:35;:99::i;:::-;7430:106;7088:455;-1:-1:-1;;;;;7088:455:3:o;7438:295:13:-;7584:12;7612:7;7608:119;;;-1:-1:-1;7642:10:13;7635:17;;7608:119;7683:33;7691:10;7703:12;7898:17;;:21;7894:379;;8126:10;8120:17;8182:15;8169:10;8165:2;8161:19;8154:44;7894:379;8249:12;8242:20;;-1:-1:-1;;;8242:20:13;;;;;;;;:::i;245:127:30:-;306:10;301:3;297:20;294:1;287:31;337:4;334:1;327:15;361:4;358:1;351:15;377:718;419:5;472:3;465:4;457:6;453:17;449:27;439:55;;490:1;487;480:12;439:55;526:6;513:20;552:18;589:2;585;582:10;579:36;;;595:18;;:::i;:::-;670:2;664:9;638:2;724:13;;-1:-1:-1;;720:22:30;;;744:2;716:31;712:40;700:53;;;768:18;;;788:22;;;765:46;762:72;;;814:18;;:::i;:::-;854:10;850:2;843:22;889:2;881:6;874:18;935:3;928:4;923:2;915:6;911:15;907:26;904:35;901:55;;;952:1;949;942:12;901:55;1016:2;1009:4;1001:6;997:17;990:4;982:6;978:17;965:54;1063:1;1056:4;1051:2;1043:6;1039:15;1035:26;1028:37;1083:6;1074:15;;;;;;377:718;;;;:::o;1100:388::-;1177:6;1185;1238:2;1226:9;1217:7;1213:23;1209:32;1206:52;;;1254:1;1251;1244:12;1206:52;1290:9;1277:23;1267:33;;1351:2;1340:9;1336:18;1323:32;1378:18;1370:6;1367:30;1364:50;;;1410:1;1407;1400:12;1364:50;1433:49;1474:7;1465:6;1454:9;1450:22;1433:49;:::i;:::-;1423:59;;;1100:388;;;;;:::o;1493:196::-;1561:20;;-1:-1:-1;;;;;1610:54:30;;1600:65;;1590:93;;1679:1;1676;1669:12;1590:93;1493:196;;;:::o;1694:186::-;1753:6;1806:2;1794:9;1785:7;1781:23;1777:32;1774:52;;;1822:1;1819;1812:12;1774:52;1845:29;1864:9;1845:29;:::i;1885:260::-;1953:6;1961;2014:2;2002:9;1993:7;1989:23;1985:32;1982:52;;;2030:1;2027;2020:12;1982:52;2053:29;2072:9;2053:29;:::i;:::-;2043:39;;2101:38;2135:2;2124:9;2120:18;2101:38;:::i;:::-;2091:48;;1885:260;;;;;:::o;2150:248::-;2218:6;2226;2279:2;2267:9;2258:7;2254:23;2250:32;2247:52;;;2295:1;2292;2285:12;2247:52;-1:-1:-1;;2318:23:30;;;2388:2;2373:18;;;2360:32;;-1:-1:-1;2150:248:30:o;2595:394::-;2672:6;2680;2733:2;2721:9;2712:7;2708:23;2704:32;2701:52;;;2749:1;2746;2739:12;2701:52;2772:29;2791:9;2772:29;:::i;:::-;2762:39;;2852:2;2841:9;2837:18;2824:32;2879:18;2871:6;2868:30;2865:50;;;2911:1;2908;2901:12;3176:316;3253:6;3261;3269;3322:2;3310:9;3301:7;3297:23;3293:32;3290:52;;;3338:1;3335;3328:12;3290:52;-1:-1:-1;;3361:23:30;;;3431:2;3416:18;;3403:32;;-1:-1:-1;3482:2:30;3467:18;;;3454:32;;3176:316;-1:-1:-1;3176:316:30:o;3497:180::-;3556:6;3609:2;3597:9;3588:7;3584:23;3580:32;3577:52;;;3625:1;3622;3615:12;3577:52;-1:-1:-1;3648:23:30;;3497:180;-1:-1:-1;3497:180:30:o;3905:167::-;3983:13;;4036:10;4025:22;;4015:33;;4005:61;;4062:1;4059;4052:12;4077:966;4194:6;4202;4210;4218;4226;4234;4242;4295:3;4283:9;4274:7;4270:23;4266:33;4263:53;;;4312:1;4309;4302:12;4263:53;4344:9;4338:16;4394:4;4387:5;4383:16;4376:5;4373:27;4363:55;;4414:1;4411;4404:12;4363:55;4487:2;4472:18;;4466:25;4437:5;;-1:-1:-1;;;;;;4522:48:30;;4510:61;;4500:89;;4585:1;4582;4575:12;4500:89;4608:7;-1:-1:-1;4634:48:30;4678:2;4663:18;;4634:48;:::i;:::-;4624:58;;4727:2;4716:9;4712:18;4706:25;4775:12;4766:7;4762:26;4753:7;4750:39;4740:67;;4803:1;4800;4793:12;4740:67;4826:7;-1:-1:-1;4852:49:30;4896:3;4881:19;;4852:49;:::i;:::-;4842:59;;4920:49;4964:3;4953:9;4949:19;4920:49;:::i;:::-;4910:59;;4988:49;5032:3;5021:9;5017:19;4988:49;:::i;:::-;4978:59;;4077:966;;;;;;;;;;:::o;6534:408::-;6736:2;6718:21;;;6775:2;6755:18;;;6748:30;6814:34;6809:2;6794:18;;6787:62;-1:-1:-1;;;6880:2:30;6865:18;;6858:42;6932:3;6917:19;;6534:408::o;6947:::-;7149:2;7131:21;;;7188:2;7168:18;;;7161:30;7227:34;7222:2;7207:18;;7200:62;-1:-1:-1;;;7293:2:30;7278:18;;7271:42;7345:3;7330:19;;6947:408::o;9571:184::-;9641:6;9694:2;9682:9;9673:7;9669:23;9665:32;9662:52;;;9710:1;9707;9700:12;9662:52;-1:-1:-1;9733:16:30;;9571:184;-1:-1:-1;9571:184:30:o;12179:250::-;12264:1;12274:113;12288:6;12285:1;12282:13;12274:113;;;12364:11;;;12358:18;12345:11;;;12338:39;12310:2;12303:10;12274:113;;;-1:-1:-1;;12421:1:30;12403:16;;12396:27;12179:250::o;12434:287::-;12563:3;12601:6;12595:13;12617:66;12676:6;12671:3;12664:4;12656:6;12652:17;12617:66;:::i;:::-;12699:16;;;;;12434:287;-1:-1:-1;;12434:287:30:o;12726:396::-;12875:2;12864:9;12857:21;12838:4;12907:6;12901:13;12950:6;12945:2;12934:9;12930:18;12923:34;12966:79;13038:6;13033:2;13022:9;13018:18;13013:2;13005:6;13001:15;12966:79;:::i;:::-;13106:2;13085:15;-1:-1:-1;;13081:29:30;13066:45;;;;13113:2;13062:54;;12726:396;-1:-1:-1;;12726:396:30:o"},"gasEstimates":{"creation":{"codeDepositCost":"1159400","executionCost":"infinite","totalCost":"infinite"},"external":{"acceptOwnership()":"infinite","getUUID(uint256)":"555","hasCertificateType(uint256,uint256)":"2513","hasEndorsement(uint256,uint256)":"2579","hasFuel(uint256,uint256)":"2578","hasRegistry(uint256,uint256)":"480","hasVintage(uint256,uint256,uint256)":"620","initialize(address,address)":"infinite","minter()":"2350","owner()":"2387","pendingOwner()":"2364","proxiableUUID()":"infinite","renounceOwnership()":"infinite","setMinter(address)":"27984","transferOwnership(address)":"30481","updateSeries(uint256,bytes)":"infinite","upgradeTo(address)":"infinite","upgradeToAndCall(address,bytes)":"infinite"},"internal":{"_authorizeUpgrade(address)":"infinite","_checkMinter()":"infinite","_destructureId(uint256)":"infinite"}},"methodIdentifiers":{"acceptOwnership()":"79ba5097","getUUID(uint256)":"69cffd17","hasCertificateType(uint256,uint256)":"4ce78e5f","hasEndorsement(uint256,uint256)":"bc5f8ccd","hasFuel(uint256,uint256)":"f776e98d","hasRegistry(uint256,uint256)":"d7c9d1c5","hasVintage(uint256,uint256,uint256)":"54e69d0e","initialize(address,address)":"485cc955","minter()":"07546172","owner()":"8da5cb5b","pendingOwner()":"e30c3978","proxiableUUID()":"52d1902d","renounceOwnership()":"715018a6","setMinter(address)":"fca3b5aa","transferOwnership(address)":"f2fde38b","updateSeries(uint256,bytes)":"07e3810c","upgradeTo(address)":"3659cfe6","upgradeToAndCall(address,bytes)":"4f1ef286"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"MinterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getUUID\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"query\",\"type\":\"uint256\"}],\"name\":\"hasCertificateType\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"query\",\"type\":\"uint256\"}],\"name\":\"hasEndorsement\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"query\",\"type\":\"uint256\"}],\"name\":\"hasFuel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"query\",\"type\":\"uint256\"}],\"name\":\"hasRegistry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"hasVintage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialMinter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encodedMetadata\",\"type\":\"bytes\"}],\"name\":\"updateSeries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is upgradeable. You can only append new contracts to the list of bases. You cannot delete bases or reorder them.\",\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"Reserved storage gap. LINK: https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getUUID(uint256)\":{\"notice\":\"Each EAT series has a UUID associated with it. This has no structure, but serves to identify the series to an off-chain database.\"},\"hasFuel(uint256,uint256)\":{\"notice\":\"The fuel type of an EAT identifies the source of the energy used to generate the corresponding electrical power. This is an opaque value that can only be checked for an exact match. Future EATs may have more than 1 fuel type.\"},\"hasRegistry(uint256,uint256)\":{\"notice\":\"Each EAT is traded on an EAT registry. EATs cannot generally be moved between registries. The registry id is opaque, but can be checked for an exact match.\"},\"hasVintage(uint256,uint256,uint256)\":{\"notice\":\"The vintage of an EAT identifies the time at which it was generated. The vintage is represented as a UNIX timestamp. The granularity of an EAT's vintage depends on the conventions of its registry and generator.\"},\"minter()\":{\"notice\":\"This address is the mint authorization checker. The minter is controlled by the bridge.\"},\"setMinter(address)\":{\"notice\":\"In the event of a minter migration (not just an upgrade), the owner has the ability to set the minter address.\"},\"updateSeries(uint256,bytes)\":{\"notice\":\"The encodedMetadata is structured as the ABI encoding the metadata fields\"}},\"notice\":\"This contract stores the machine-readable metadata about each EAT series. This is used to determine whether a particular EAT is eligible for certain on-chain uses (e.g. membership in a solar-only EAT pool).\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/JasmineOracle.sol\":\"JasmineOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() external {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd712fb45b3ea0ab49679164e3895037adc26ce12879d5184feb040e01c1c07a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"src/JasmineOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport {\\n  Ownable2StepUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\nimport {\\n  UUPSUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {IJasmineOracle} from \\\"./interfaces/IJasmineOracle.sol\\\";\\n\\n/// @dev This contract is upgradeable. You can only append new contracts to the list of bases. You cannot delete bases or reorder them.\\n/// @notice This contract stores the machine-readable metadata about each EAT series. This is used to determine whether a particular EAT is eligible for certain on-chain uses (e.g. membership in a solar-only EAT pool).\\ncontract JasmineOracle is Ownable2StepUpgradeable, UUPSUpgradeable, IJasmineOracle {\\n  /// @dev We use the `Ownable` owner for upgrades, not the ERC1967 admin. The ERC1967 admin is not used by this contract.\\n  function _authorizeUpgrade(address) internal override onlyOwner {}\\n\\n  /// @notice This address is the mint authorization checker. The minter is controlled by the bridge.\\n  address public minter;\\n\\n  function _checkMinter() internal view {\\n    require(minter == _msgSender(), \\\"JasmineOracle: caller is not the minter\\\");\\n  }\\n\\n  modifier onlyMinter() {\\n    _checkMinter();\\n    _;\\n  }\\n\\n  event MinterChanged(address indexed newMinter);\\n\\n  /// @notice In the event of a minter migration (not just an upgrade), the owner has the ability to set the minter address.\\n  function setMinter(address newMinter) external onlyOwner {\\n    minter = newMinter;\\n    emit MinterChanged(newMinter);\\n  }\\n\\n  function initialize(address initialMinter, address initialOwner) external initializer onlyProxy {\\n    _transferOwnership(initialOwner); // __Ownable2Step_init();\\n    __UUPSUpgradeable_init();\\n    minter = initialMinter;\\n    emit MinterChanged(initialMinter);\\n  }\\n\\n  struct EATMetadata {\\n    uint8 _version;\\n    uint32 fuel;\\n    uint32 certificateType;\\n    uint32 endorsement;\\n  }\\n\\n  mapping(uint256 => EATMetadata) internal _metadata;\\n\\n  function _destructureId(uint256 id)\\n    internal\\n    pure\\n    returns (\\n      uint256 uuid,\\n      uint256 registry,\\n      uint256 vintage\\n    )\\n  {\\n    uint256 pad;\\n    (uuid, registry, vintage, pad) = (\\n      id >> 128,\\n      (id >> 96) & type(uint32).max,\\n      (id >> 56) & type(uint40).max,\\n      id & type(uint56).max\\n    );\\n    require(pad == 0, \\\"JasmineOracle: invalid ID\\\");\\n  }\\n\\n  /// @notice Each EAT series has a UUID associated with it. This has no structure, but serves to identify the series to an off-chain database.\\n  function getUUID(uint256 id) external pure returns (uint128) {\\n    (uint256 uuid, , ) = _destructureId(id);\\n    return uint128(uuid);\\n  }\\n\\n  /// @notice Each EAT is traded on an EAT registry. EATs cannot generally be moved between registries. The registry id is opaque, but can be checked for an exact match.\\n  function hasRegistry(uint256 id, uint256 query) external pure returns (bool) {\\n    (, uint256 registry, ) = _destructureId(id);\\n    return registry == query;\\n  }\\n\\n  /// @notice The vintage of an EAT identifies the time at which it was generated. The vintage is represented as a UNIX timestamp. The granularity of an EAT's vintage depends on the conventions of its registry and generator.\\n  function hasVintage(\\n    uint256 id,\\n    uint256 min,\\n    uint256 max\\n  ) external pure returns (bool) {\\n    (, , uint256 vintage) = _destructureId(id);\\n    return vintage >= min && vintage <= max;\\n  }\\n\\n  /// @notice The fuel type of an EAT identifies the source of the energy used to generate the corresponding electrical power. This is an opaque value that can only be checked for an exact match. Future EATs may have more than 1 fuel type.\\n  function hasFuel(uint256 id, uint256 query) external view returns (bool) {\\n    return _metadata[id].fuel == query;\\n  }\\n\\n  function hasCertificateType(uint256 id, uint256 query) external view returns (bool) {\\n    return _metadata[id].certificateType == query;\\n  }\\n\\n  function hasEndorsement(uint256 id, uint256 query) external view returns (bool) {\\n    return _metadata[id].endorsement == query;\\n  }\\n\\n  /// @notice The encodedMetadata is structured as the ABI encoding the metadata fields\\n  // | position | name             | bit length |\\n  // | :------- | :--------------- | :--------- |\\n  // | 0        | version          | 8          |\\n  // | 1        | uuid             | 128        |\\n  // | 2        | registry         | 32         |\\n  // | 3        | vintage          | 40         |\\n  // | 4        | fuel             | 32         |\\n  // | 5        | certificate type | 32         |\\n  // | 6        | endorsement      | 32         |\\n  // The version is currently always 1. A change to the version version corresponds to an update to the metadata format.\\n  function updateSeries(uint256 id, bytes memory encodedMetadata)\\n    external\\n    override\\n    onlyMinter\\n  {\\n    (uint256 uuid, uint256 registry, uint256 vintage) = _destructureId(id);\\n    (\\n      uint8 version,\\n      uint128 metaUuid,\\n      uint32 metaRegistry,\\n      uint40 metaVintage,\\n      uint32 fuel,\\n      uint32 certificateType,\\n      uint32 endorsement\\n    ) = abi.decode(\\n        encodedMetadata,\\n        (uint8, uint128, uint32, uint40, uint32, uint32, uint32)\\n      );\\n    require(version == 1, \\\"JasmineOracle: invalid metadata version\\\");\\n    require(uuid == metaUuid, \\\"JasmineOracle: UUID mismatch\\\");\\n    require(registry == metaRegistry, \\\"JasmineOracle: registry mismatch\\\");\\n    require(vintage == metaVintage, \\\"JasmineOracle: vintage mismatch\\\");\\n    _metadata[id] = EATMetadata(version, fuel, certificateType, endorsement);\\n  }\\n\\n  /// @dev Reserved storage gap. LINK: https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n  uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x637a34523b478da015e483015780615be899bb22c8e45bc7ace0aa2ab387d90d\",\"license\":\"BUSL-1.1\"},\"src/interfaces/IJasmineOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\ninterface IJasmineOracle {\\n  // This function takes a `bytes` instead of something more structure to allow\\n  // the minter and the oracle to be upgraded separately. If desire, future\\n  // upgrades can apply more structure here.\\n  function updateSeries(uint256 id, bytes memory encodedMetadata) external;\\n}\\n\",\"keccak256\":\"0x638a7d4cb538ff93fac3a961f2ba5ef4eeb2ec14fc8a38057e20b0bc7848c71b\",\"license\":\"BUSL-1.1\"}},\"version\":1}","storageLayout":{"storage":[{"astId":633,"contract":"src/JasmineOracle.sol:JasmineOracle","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":636,"contract":"src/JasmineOracle.sol:JasmineOracle","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2945,"contract":"src/JasmineOracle.sol:JasmineOracle","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":116,"contract":"src/JasmineOracle.sol:JasmineOracle","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":236,"contract":"src/JasmineOracle.sol:JasmineOracle","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":25,"contract":"src/JasmineOracle.sol:JasmineOracle","label":"_pendingOwner","offset":0,"slot":"101","type":"t_address"},{"astId":104,"contract":"src/JasmineOracle.sol:JasmineOracle","label":"__gap","offset":0,"slot":"102","type":"t_array(t_uint256)49_storage"},{"astId":615,"contract":"src/JasmineOracle.sol:JasmineOracle","label":"__gap","offset":0,"slot":"151","type":"t_array(t_uint256)50_storage"},{"astId":930,"contract":"src/JasmineOracle.sol:JasmineOracle","label":"__gap","offset":0,"slot":"201","type":"t_array(t_uint256)50_storage"},{"astId":5946,"contract":"src/JasmineOracle.sol:JasmineOracle","label":"minter","offset":0,"slot":"251","type":"t_address"},{"astId":6027,"contract":"src/JasmineOracle.sol:JasmineOracle","label":"_metadata","offset":0,"slot":"252","type":"t_mapping(t_uint256,t_struct(EATMetadata)6022_storage)"},{"astId":6307,"contract":"src/JasmineOracle.sol:JasmineOracle","label":"__gap","offset":0,"slot":"253","type":"t_array(t_uint256)50_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_uint256,t_struct(EATMetadata)6022_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct JasmineOracle.EATMetadata)","numberOfBytes":"32","value":"t_struct(EATMetadata)6022_storage"},"t_struct(EATMetadata)6022_storage":{"encoding":"inplace","label":"struct JasmineOracle.EATMetadata","members":[{"astId":6015,"contract":"src/JasmineOracle.sol:JasmineOracle","label":"_version","offset":0,"slot":"0","type":"t_uint8"},{"astId":6017,"contract":"src/JasmineOracle.sol:JasmineOracle","label":"fuel","offset":1,"slot":"0","type":"t_uint32"},{"astId":6019,"contract":"src/JasmineOracle.sol:JasmineOracle","label":"certificateType","offset":5,"slot":"0","type":"t_uint32"},{"astId":6021,"contract":"src/JasmineOracle.sol:JasmineOracle","label":"endorsement","offset":9,"slot":"0","type":"t_uint32"}],"numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint32":{"encoding":"inplace","label":"uint32","numberOfBytes":"4"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{"getUUID(uint256)":{"notice":"Each EAT series has a UUID associated with it. This has no structure, but serves to identify the series to an off-chain database."},"hasFuel(uint256,uint256)":{"notice":"The fuel type of an EAT identifies the source of the energy used to generate the corresponding electrical power. This is an opaque value that can only be checked for an exact match. Future EATs may have more than 1 fuel type."},"hasRegistry(uint256,uint256)":{"notice":"Each EAT is traded on an EAT registry. EATs cannot generally be moved between registries. The registry id is opaque, but can be checked for an exact match."},"hasVintage(uint256,uint256,uint256)":{"notice":"The vintage of an EAT identifies the time at which it was generated. The vintage is represented as a UNIX timestamp. The granularity of an EAT's vintage depends on the conventions of its registry and generator."},"minter()":{"notice":"This address is the mint authorization checker. The minter is controlled by the bridge."},"setMinter(address)":{"notice":"In the event of a minter migration (not just an upgrade), the owner has the ability to set the minter address."},"updateSeries(uint256,bytes)":{"notice":"The encodedMetadata is structured as the ABI encoding the metadata fields"}},"notice":"This contract stores the machine-readable metadata about each EAT series. This is used to determine whether a particular EAT is eligible for certain on-chain uses (e.g. membership in a solar-only EAT pool).","version":1}}},"src/interfaces/IERC1155Burnable.sol":{"IERC1155Burnable":{"abi":[{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"burnBatch","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"burn(address,uint256,uint256)":"f5298aca","burnBatch(address,uint256[],uint256[])":"6b20c454"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IERC1155Burnable.sol\":\"IERC1155Burnable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"src/interfaces/IERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\ninterface IERC1155Burnable {\\n  function burn(\\n    address account,\\n    uint256 id,\\n    uint256 value\\n  ) external;\\n\\n  function burnBatch(\\n    address account,\\n    uint256[] memory ids,\\n    uint256[] memory values\\n  ) external;\\n}\\n\",\"keccak256\":\"0x4abeec733217ccdd0b97c7b175bc504219e87b76cd8d16bbf45b2e07a170ef81\",\"license\":\"BUSL-1.1\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"src/interfaces/IERC1155Mintable.sol":{"IERC1155Mintable":{"abi":[{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"mintBatch","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"mint(address,uint256,uint256,bytes)":"731133e9","mintBatch(address,uint256[],uint256[],bytes)":"1f7fdffa"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IERC1155Mintable.sol\":\"IERC1155Mintable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"src/interfaces/IERC1155Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\ninterface IERC1155Mintable {\\n  function mint(\\n    address to,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory data\\n  ) external;\\n\\n  function mintBatch(\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) external;\\n}\\n\",\"keccak256\":\"0xc10e0624828b4a87707b79e828a6c20bbfa918080e8e3d81654f8600289c8d1a\",\"license\":\"BUSL-1.1\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"src/interfaces/IJasmineEATExtensions.sol":{"IJasmineEATExtensions":{"abi":[{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"frozen","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"frozen(uint256)":"e9ac0440"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"frozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IJasmineEATExtensions.sol\":\"IJasmineEATExtensions\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"src/interfaces/IJasmineEATExtensions.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\ninterface IJasmineEATExtensions {\\n  function frozen(uint256) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x997989399c52edffdd87ef845ec2a370c060ce7eca7170d1b2123be047d9d8a8\",\"license\":\"BUSL-1.1\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"src/interfaces/IJasmineOracle.sol":{"IJasmineOracle":{"abi":[{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"bytes","name":"encodedMetadata","type":"bytes"}],"name":"updateSeries","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"updateSeries(uint256,bytes)":"07e3810c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encodedMetadata\",\"type\":\"bytes\"}],\"name\":\"updateSeries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IJasmineOracle.sol\":\"IJasmineOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"src/interfaces/IJasmineOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\ninterface IJasmineOracle {\\n  // This function takes a `bytes` instead of something more structure to allow\\n  // the minter and the oracle to be upgraded separately. If desire, future\\n  // upgrades can apply more structure here.\\n  function updateSeries(uint256 id, bytes memory encodedMetadata) external;\\n}\\n\",\"keccak256\":\"0x638a7d4cb538ff93fac3a961f2ba5ef4eeb2ec14fc8a38057e20b0bc7848c71b\",\"license\":\"BUSL-1.1\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}